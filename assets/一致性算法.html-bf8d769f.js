import{_ as s,Q as l,S as n,U as o,W as a,X as t,a8 as e,a9 as i,H as c}from"./framework-d7e1aa10.js";const p={},_=o("h1",{id:"一致性算法",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#一致性算法","aria-hidden":"true"},"#"),e(" 一致性算法")],-1),d={class:"table-of-contents"},h=i('<p>一致性算法是分布式系统中用于确保不同节点之间的数据一致性的算法。这些算法的目标是在面对节点故障、网络延迟等情况下，仍然能够保持数据的一致性。以下是一些常见的一致性算法：</p><ol><li><strong>Paxos：</strong> Paxos是一种经典的一致性算法，用于解决分布式系统中的一致性问题。它通过选举和提案的方式来达成共识，确保不同节点间的数据一致性。Paxos算法虽然有效，但由于其复杂性，实际应用中使用较少。</li><li><strong>Raft：</strong> Raft是一种相对于Paxos更易理解和实现的一致性算法。它也通过选举和领导者（Leader）的概念来确保数据一致性。Raft算法的设计更注重可读性，适用于更广泛的分布式系统。</li><li><strong>ZooKeeper Atomic Broadcast (ZAB)：</strong> ZooKeeper是一个分布式协调服务，其内部使用ZAB协议来维护数据一致性。ZAB基于Paxos算法，并对其进行了优化，使其更适用于ZooKeeper的需求。</li><li><strong>Google Spanner：</strong> Google Spanner是一个全球分布式数据库系统，它使用TrueTime来确保跨区域数据一致性。Spanner结合了分布式事务和外部时间源，从而实现强一致性。</li><li><strong>Amazon DynamoDB：</strong> Amazon DynamoDB是一个高可用的分布式数据库服务，它使用了一种基于版本的一致性模型。它提供了多个配置选项，使用户可以根据应用需求来调整一致性级别。</li></ol><h2 id="paxos" tabindex="-1"><a class="header-anchor" href="#paxos" aria-hidden="true">#</a> Paxos</h2><p>将所有节点分为三类：</p><ol><li>Proposer 提议者</li><li>Acceptor 接受者</li><li>Learner 学习者</li></ol><p>注意：每个节点是可以身兼数职的</p><p>完整的 Paxos 算法流程分为三个阶段：</p><ol><li>Prepare 准备阶段：Proposer 向多个 Acceptor 发出 Propose 请求，Acceptor 接收到请求后做出 Promise 承诺</li><li>Accept 接受阶段：Proposer 接收到多数 Acceptor 承诺的 Promise 后，向 Acceptor 发出 Propose 请求，Acceptor 接收到请求后进行 Accept 处理</li><li>Learn 学习阶段：Proposer 将形成的决议发送给所有 Learners</li></ol>',8);function u(x,P){const r=c("router-link");return l(),n("div",null,[_,o("nav",d,[o("ul",null,[o("li",null,[a(r,{to:"#一致性算法"},{default:t(()=>[e("一致性算法")]),_:1}),o("ul",null,[o("li",null,[a(r,{to:"#paxos"},{default:t(()=>[e("Paxos")]),_:1})])])])])]),h])}const f=s(p,[["render",u],["__file","一致性算法.html.vue"]]);export{f as default};
