import{_ as e,Q as p,S as o,U as n,a8 as a,W as t,a9 as c,H as l}from"./framework-d7e1aa10.js";const i={},u=c(`<h1 id="java-泛型" tabindex="-1"><a class="header-anchor" href="#java-泛型" aria-hidden="true">#</a> Java 泛型</h1><h2 id="dddd" tabindex="-1"><a class="header-anchor" href="#dddd" aria-hidden="true">#</a> dddd</h2><p>使用泛型需要注意以下几点：</p><ol><li>类型擦除：在Java中，泛型只是一种编译时的类型检查机制，在编译时会将所有泛型类型擦除，转换成其原始类型，因此在运行时无法获取泛型类型的具体信息。</li><li>泛型通配符：泛型通配符用于表示不确定的类型参数，可以用在泛型类型、方法的参数类型和返回类型中，例如 <code>List&lt;?&gt;、Map&lt;?, ?&gt;、public void addAll(Collection&lt;? extends T&gt; c)</code> 等。</li><li>泛型的上限和下限：上限表示泛型参数的类型必须是某个类或其子类，下限表示泛型参数的类型必须是某个类或其父类。例如，<code>List&lt;? extends Number&gt;</code> 表示 List 的元素类型是 Number 或其子类，而 <code>List&lt;? super Integer&gt;</code> 表示 List 的元素类型是 Integer 或其父类。</li><li>泛型和数组：Java中不支持泛型数组，可以使用通配符和集合代替泛型数组。</li><li>泛型和继承：子类可以重写父类的泛型方法，可以使用泛型通配符实现协变和逆变。</li><li>泛型擦除带来的问题：由于类型擦除的存在，可能会出现泛型类型转换异常、类型安全问题等问题，需要在使用泛型时加以注意。</li><li>泛型的性能：在某些情况下，使用泛型可能会对性能造成一定的影响，需要根据具体情况进行评估和优化。</li></ol><h2 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点" aria-hidden="true">#</a> 注意点</h2><p>Java 中数组是 <strong>协变的</strong>，是在运行期确定具体类型的</p><p>Java 中的泛型是 <strong>不变的</strong>，并且在运行期会被擦除泛型，所以不能确定具体的泛型信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 编译错误，因为运行期下面的数据的具体类型因为泛型擦除而不能确定</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了解决这个问题，可以使用通配符和集合代替泛型数组。例如，可以使用<code>List&lt;List&lt;String&gt;&gt;</code>代替<code>List&lt;String&gt;[]</code>。</p><p><strong>泛型不是协变的，体现在：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token comment">// ...}</span>
<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token comment">// ...}</span>

<span class="token comment">// Dog 继承于 Animal，但是</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Animal</span><span class="token punctuation">&gt;</span></span> 与 <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">&gt;</span></span> 没有任何关系
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时可以使用泛型的 <strong>协变</strong> 和 <strong>逆变</strong> 使得泛型可以 <strong>型变</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 协变</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">// 逆变</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Animal</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样限定后会在编译器进行类型检查，即更加安全：</p><p>泛型协变后不能写入，因为此时写入可能造成编译器不报错但是运行期抛异常，例如数组就是 <strong>协变的</strong>，但是数组不会阻止写入，那么就可能写出如下危险的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Animal</span><span class="token punctuation">[</span><span class="token punctuation">]</span> animals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
animals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 编译器不会报错，但是下面这行代码会抛运行时异常</span>
animals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Animal</span> animal <span class="token operator">=</span> animal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以使用泛型协变就是用于 <strong>只读不写</strong> 的场景，或者换种说法：<strong>只消费（获取元素消费）不生产（添加元素）</strong> 的场景。<strong>逆变</strong> 和型变正好相反。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&gt;</span></span> animals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 以下四行代码都不能编译通过</span>
<span class="token comment">// animals.add(new Dog());</span>
<span class="token comment">// animals.add(new Cat());</span>
<span class="token comment">// animals.add(new Animal());</span>
<span class="token comment">// animals.add(new Object());</span>
<span class="token comment">// 可以添加null，但没意义</span>
animals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 可以安全地取出来</span>
<span class="token class-name">Animal</span> animal <span class="token operator">=</span> animals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 下面这行代码编译不通过</span>
<span class="token comment">// List&lt;? super Animal&gt; animals = new LinkedList&lt;Cat&gt;();</span>
<span class="token comment">// 下面都是OK的写法</span>
<span class="token comment">// List&lt;? super Animal&gt; animals = new LinkedList&lt;Object&gt;();</span>
<span class="token comment">// List&lt;? super Animal&gt; animals = new LinkedList&lt;Animal&gt;();</span>
<span class="token comment">// 等价于上面一行的写法</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Animal</span><span class="token punctuation">&gt;</span></span> animals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
animals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
animals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 取出来一定是Object</span>
<span class="token class-name">Object</span> object <span class="token operator">=</span> animals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这样写是OK的</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Cat</span><span class="token punctuation">&gt;</span></span> cats <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Animal</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外还有上下界的概念：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// X可以是Animal及其子类，Animal是X的上界</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&gt;</span></span> animals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// X可以是Cat及其父类，Cat是X的下界</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Cat</span><span class="token punctuation">&gt;</span></span> cats <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通配符：</strong></p><p>在Java代码中，你可能还看到这种写法：<code>&lt;?&gt;</code>，它代表任意类型通配符。老规矩，直接上代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> anyOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Animal</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> anyTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> anyThree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// anyFour等价于anyThree的写法</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> anyFour <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 这种写法编译不通过</span>
<span class="token comment">// List&lt;?&gt; anyFive = new LinkedList&lt;?&gt;();</span>

<span class="token comment">// 具有extends和super的性质</span>
<span class="token comment">// 这种写法编译不通过</span>
<span class="token comment">// anyOne.add(new Cat());</span>
<span class="token comment">// anyOne.add(new Object());</span>
<span class="token comment">// 能取出来Object类型</span>
<span class="token class-name">Object</span> o <span class="token operator">=</span> anyOne<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，它是“无界”的，对于任意类型<code>X</code>，<code>List&lt;X&gt;</code>都是<code>List&lt;?&gt;</code>的子类型。但<code>List&lt;?&gt;</code>不能add，get出来也是Object类型。它同时具有协变和逆变的两种性质，上界是Object，但不能调用add方法。</p><p>那它与<code>List&lt;Object&gt;</code>有什么区别呢？根据前面的推断，有两个比较明显的区别：</p><ul><li><code>List&lt;Object&gt;</code>可以调用add方法，但<code>List&lt;?&gt;</code>不能。</li><li><code>List&lt;?&gt;</code>可以协变，上界是Object，但<code>List&lt;Object&gt;</code>不能协变。</li></ul><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p>泛型是不变的，具有继承关系的父子类在使用泛型时没有任何关系，这样会有很大限制，所以需要型变，即使得泛型支持协变和逆变，使得泛型下父子类具有关系，但是这样做可能有安全问题，所以使用协变或者逆变时会有不同的限制。</p><p>通配符 <code>&lt;?&gt;</code> 具有协变和逆变的性质，即所有类都是其子类，但是获取到的对象一定是 Object，但是这样与直接使用<code>&lt;Object&gt;</code> 不同，因为这样不可以发生型变</p><h2 id="泛型数组" tabindex="-1"><a class="header-anchor" href="#泛型数组" aria-hidden="true">#</a> 泛型数组</h2><p>由于泛型擦除的缘故，泛型数组理应是不存在的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 这样会报错</span>
<span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是可以换种方式创建，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的完整写法应该是</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// new LinkedList[n] 由于泛型擦除实际上是创建了一个 Object 数组，需要强制转换成 List&lt;double[]&gt; 数组</span>
<span class="token comment">// 这里需要特别注意，泛型数组是指泛型类数组，而不是数组作为泛型的具体类型，即 List&lt;&gt;[] 称为泛型数组，这里是使用 double[] 作为泛型的具体类型。数组之所以能这样，是因为 java 中的数组也是对象</span>
<span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>，
    <span class="token comment">// 这里不要弄混，这里初始化的是整个 List&lt;double[]&gt;，而不是 double[]</span>
    graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要补充一下：</p><ol><li>数组支持协变，所以 <code>LinkedList[]</code> 是 <code>Object[]</code> 的子类</li><li>泛型不支持协变，所以 <code>LinkedList&lt;Double&gt;[]</code> 不是 <code>Object[]</code> 的子类</li></ol><p>所以上面的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不能写成：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为 <code>List&lt;double[]&gt;</code> 不是 <code>Object</code> 的子类，不能强制转换（不安全）</p><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><blockquote><p>长度不定推荐用 <code>List&lt;List&lt;Integer&gt;&gt;</code>，长度固定推荐使用 <code>List&lt;int[]&gt;</code></p></blockquote><p><code>List&lt;List&lt;Integer&gt;&gt;</code> 和 <code>List&lt;int[]&gt;</code> 都可以用来存储一组整数列表，但它们的底层数据结构是不同的。</p><p><code>List&lt;List&lt;Integer&gt;&gt;</code> 中的每个元素都是一个 <code>List&lt;Integer&gt;</code> 对象，它在内存中的结构类似于一个链表，其中每个节点都是一个整数值。由于 <code>List&lt;Integer&gt;</code> 是一个对象类型，因此它可以存储 null 值，并且可以使用 List 的各种方法（例如 add、get、remove 等）来操作它。</p><p><code>List&lt;int[]&gt;</code> 中的每个元素都是一个 int[] 数组对象，它在内存中的结构类似于一个连续的整数数组。由于 int[] 是一个原始数据类型，因此它不能存储 null 值，并且不能使用 List 的各种方法来操作它。如果需要对其中的元素进行操作，需要使用类似于 for 循环这样的语句来遍历数组。</p><p>在实际使用中，如果每个整数列表的长度不一致，或者需要在每个整数列表中存储 null 值，或者需要使用 List 的各种方法来操作其中的元素，那么更推荐使用 <code>List&lt;List&lt;Integer&gt;&gt;</code>。否则，如果每个整数列表的长度固定且相等，并且不需要存储 null 值或使用 List 的各种方法来操作其中的元素，那么使用 <code>List&lt;int[]&gt;</code> 可以获得更好的性能。</p>`,50),k={class:"hint-container info"},d=n("p",{class:"hint-container-title"},"相关文章",-1),r={href:"https://www.jianshu.com/p/90948ff4a940",target:"_blank",rel:"noopener noreferrer"},m={href:"https://juejin.cn/post/6911302681583681544",target:"_blank",rel:"noopener noreferrer"};function v(g,b){const s=l("ExternalLinkIcon");return p(),o("div",null,[u,n("div",k,[d,n("p",null,[n("a",r,[a("协变与逆变1"),t(s)])]),n("p",null,[n("a",m,[a("协变与逆变2"),t(s)])])])])}const w=e(i,[["render",v],["__file","Java泛型.html.vue"]]);export{w as default};
