import{_ as e,Q as i,S as p,U as n,a8 as a,W as t,a9 as l,H as o}from"./framework-d7e1aa10.js";const c="/assets/image-20230617124448361-3481f005.png",r={},u=n("h1",{id:"spring-security",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring-security","aria-hidden":"true"},"#"),a(" Spring Security")],-1),d={href:"https://blog.csdn.net/qq_44709990/article/details/123082560",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.bilibili.com/video/BV1mm4y1X7Hc/?p=17&spm_id_from=pageDriver&vd_source=e356fec025b50061af78324a814f8da0",target:"_blank",rel:"noopener noreferrer"},k=l('<figure><img src="'+c+`" alt="image-20230617124448361" tabindex="0" loading="lazy"><figcaption>image-20230617124448361</figcaption></figure><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- Spring Security --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- JWT --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${jjwt.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>


<span class="token comment">&lt;!-- Hutool 工具类--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${hutool.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原理就是一个过滤链，内部提供了各种功能的过滤器：</p><p>过滤器（大致一共有 15个）：</p><ol><li><p>UsernamePasswordAuthenticationFilter</p></li><li><p>ExceptionTranslationFilter</p></li><li><p>FilterSecurityInterceptor</p></li><li><p>WebAsyncManagerIntegrationFilter：将 Security 上下文与 Spring Web 中用于处理异步请求映射的 WebAsyncManager 进行集成。</p></li><li><p>SecurityContextPersistenceFilter：在每次请求处理之前将该请求相关的安全上下文信息加载到 SecurityContextHolder 中，然后在该次请求处理完成之后，将 SecurityContextHolder 中关于这次请求的信息存储到一个“仓储”中，然后将 SecurityContextHolder 中的信息清除，例如在Session中维护一个用户的安全信息就是这个过滤器处理的。</p></li><li><p>HeaderWriterFilter：用于将头信息加入响应中。</p></li><li><p>CsrfFilter：用于处理跨站请求伪造。</p></li><li><p>Logout Filter：用于处理退出登录。</p></li><li><p>UsernamePasswordAuthenticationFilter：用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自 /login 的请求。从表单中获取用户名和密码时，默认使用的表单 name 值为 username 和 password，这两个值可以通过设置这个过滤器的usernameParameter 和 passwordParameter 两个参数的值进行修改。</p></li><li><p>DefaultLoginPageGeneratingFilter：如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。</p></li><li><p>BasicAuthenticationFilter：检测和处理 http basic 认证。</p></li><li><p>RequestCacheAwareFilter：用来处理请求的缓存。</p></li><li><p>SecurityContextHolderAwareRequestFilter：主要是包装请求对象request。</p></li><li><p>AnonymousAuthenticationFilter：检测 SecurityContextHolder 中是否存在 Authentication 对象，如果不存在为其提供一个匿名 Authentication。</p></li><li><p>SessionManagementFilter：管理 session 的过滤器</p></li><li><p>ExceptionTranslationFilter：处理 AccessDeniedException 和 AuthenticationException 异常。</p></li><li><p>FilterSecurityInterceptor：可以看做过滤器链的出口</p></li><li><p>RememberMeAuthenticationFilter：当用户没有登录而直接访问资源时, 从 cookie 里找出用户的信息, 如果 Spring Security 能够识别出用户提供的remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统，该过滤器默认不开启。</p></li></ol><p>基础接口：</p><ol><li>Authentication：它的实现类表示当前访问系统的用户，即封装了用户相关信息</li><li>AuthenticationManager：定义了认证 Authentication 的方法</li><li>UserDetailsService：加载用户特定数据的核心接口，定义了一个根据用户名查询用户信息的方法</li><li>UserDetails：提供核心用户信息，通过 UserDetailsService 根据当前用户名获取处理的用户信息，返回 UserDetails 对象，然后将这些信息封装到 Authentication 对象中</li></ol><p>大致分为两大部分：</p><ol><li>登录： <ol><li>自定义登录接口，调用 ProviderManager 进行认证</li><li>自定义 UserDetailsService 实现从数据库中查询信息</li><li>认证通过则生成 JWT，随后可以存入 Redis 中</li></ol></li><li>校验： <ol><li>定义 JWT 认证过滤器：获取 token，解析 token 中的 userId，从 Redis 中获取用户信息</li><li>存入 SecurityContextHolder</li></ol></li></ol>`,9);function m(v,b){const s=o("ExternalLinkIcon");return i(),p("div",null,[u,n("blockquote",null,[n("p",null,[a("相关文章："),n("a",d,[a("https://blog.csdn.net/qq_44709990/article/details/123082560"),t(s)])]),n("p",null,[a("相关视频："),n("a",g,[a("https://www.bilibili.com/video/BV1mm4y1X7Hc/?p=17&spm_id_from=pageDriver&vd_source=e356fec025b50061af78324a814f8da0"),t(s)])])]),k])}const f=e(r,[["render",m],["__file","SpringSecurity.html.vue"]]);export{f as default};
