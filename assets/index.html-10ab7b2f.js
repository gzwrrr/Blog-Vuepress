import{_ as p,Q as r,S as a,U as l,W as o,X as t,a8 as i,a9 as n,H as u}from"./framework-d7e1aa10.js";const s={},c=l("h1",{id:"设计模式",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#设计模式","aria-hidden":"true"},"#"),i(" 设计模式")],-1),d=l("div",{class:"hint-container info"},[l("p",{class:"hint-container-title"},"说明"),l("p",null,"介绍设计原则和 23 种设计模式的基本概念，例子后续会补充")],-1),h={class:"table-of-contents"},b=n('<h2 id="七大原则" tabindex="-1"><a class="header-anchor" href="#七大原则" aria-hidden="true">#</a> 七大原则</h2><p>注：下面的前五个也称为面向对象的五大基本原则</p><p><strong>1.单一职责原则（SRP）：</strong></p><blockquote><p>类的功能要单一，不能包罗万象，跟杂货铺似的</p></blockquote><ul><li>一个类只负责一项职责</li></ul><br><p><strong>2.接口隔离原则（ISP）：</strong></p><blockquote><p>设计时采用多个与特定客户类有关的接口比采用一个通用的接口要好。就比如一个手机拥有打电话，看视频，玩游戏等功能，把这几个功能拆分成不同的接口，比在一个接口里要好的多</p></blockquote><ul><li>客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上</li></ul><br><p><strong>3.依赖倒转原则（DIP）：</strong></p><blockquote><p>就是你出国要说你是中国人，而不能说你是哪个村子的。比如说中国人是抽象的，下面有具体的xx省，xx市，xx县。你要依赖的抽象是中国人，而不是你是xx村的</p></blockquote><ul><li><p>高层模块不应该依赖底层模块，二者都应该依赖其抽象</p></li><li><p>抽象不应该依赖细节，细节应该依赖抽象</p></li><li><p>中心思想是面向接口编程</p></li><li><p>细节具有多变性，抽象具有稳定性</p></li><li><p>接口和抽象类的目的是制定规范，细节交给实现类实现</p></li></ul><br><p><strong>4.里氏替换原则（LSP，正确地使用继承）：</strong></p><blockquote><p>子类可以替换父类出现在父类能够出现的任何地方。比如你能代表你爸去你姥姥家干活</p></blockquote><ul><li><p>引用基类的地方必须能透明地使用其子类的对象</p></li><li><p>在使用继承时，在子类中尽量不要重写父类的方法</p></li><li><p>可以通过聚合/组合/依赖来解决重现方法的问题（加入 B 继承了 A 并且 B 需要重写方法，那么可以再提出一个基类，让 A/B 分别继承，即提到了同一个层级）</p></li></ul><br><p><strong>5.开闭原则（OCP）：</strong></p><blockquote><p>一个模块对于拓展是开放的，对于修改是封闭的，想要增加功能热烈欢迎，想要修改，哼，一万个不乐意</p></blockquote><ul><li><p>编程中最基础和最重要的设计原则</p></li><li><p>模块和函数应该对扩展开放（提供方），对修改关闭（使用方）。用抽象构框架，用实现扩展细节</p></li><li><p>需要增加新功能时，最好通过扩展来实现</p></li><li><p>设计模式的目的就是遵循开闭原则</p></li></ul><br><p><strong>6.迪米特法则（最少知道法则）：</strong></p><ul><li><p>一个对象应该对其他对象保持最少的了解</p></li><li><p>尽量将逻辑封装在类的内部，对外只提供 public 方法，不对外泄露任何私密信息</p></li><li><p>称出现在成员变量，方法参数，方法返回值的类为直接朋友（两个类之间存在耦合关系即为朋友关系），出现在局部变量中的类不是直接朋友，即陌生的类最好不要以局部变量的形式出现在类的内部</p></li></ul><br><p><strong>7.合成复用原则：</strong></p><ul><li>尽量使用合成/聚合的方式，而不是继承</li></ul><br><h2 id="设计模式概述" tabindex="-1"><a class="header-anchor" href="#设计模式概述" aria-hidden="true">#</a> 设计模式概述</h2><h3 id="核心思想" tabindex="-1"><a class="header-anchor" href="#核心思想" aria-hidden="true">#</a> 核心思想</h3><ul><li><p>找出应用中可能需要变化的地方，把它们独立出来，不和那些不需要变化的代码混在一起</p></li><li><p>针对接口编程，不针对实现编程</p></li><li><p>为了交互对象直接的松耦合设计而努力</p></li></ul><br><h3 id="目的" tabindex="-1"><a class="header-anchor" href="#目的" aria-hidden="true">#</a> 目的</h3><ul><li><p>高内聚/低耦合</p></li><li><p>可维护性（可扩展性）</p></li><li><p>重用性：相同代码不必重复编写</p></li><li><p>可读性：编程规范，便于开发人员阅读和理解</p></li><li><p>可靠性：增加新的功能后对原本的功能没有影响</p></li><li><p>灵活性</p></li><li><p>让软件更好</p></li></ul><br><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h3><p><strong>创建型（5）</strong>：</p><blockquote><p>对象实例化的模式，创建型模式用于解耦对象的实例化过程</p></blockquote><ol><li>单例模式</li><li>工厂模式</li><li>抽象工厂模式</li><li>原型模式</li><li>建造者模式</li></ol><br><p><strong>结构型（7）</strong>：</p><blockquote><p>把类和对象结合在一起形成一个更大的结构</p></blockquote><ol><li>适配器模式</li><li>桥接模式</li><li>装饰器模式</li><li>组合模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ol><br><p><strong>行为型（11）</strong>：</p><blockquote><p>类和对象如何交互，划分责任和算法</p></blockquote><ol><li>模板模式</li><li>命令模式</li><li>访问者模式</li><li>迭代器模式</li><li>观察者模式</li><li>中介者模式</li><li>备忘录模式</li><li>解释器模式</li><li>状态模式</li><li>策略模式</li><li>责任链模式</li></ol>',47);function _(f,x){const e=u("router-link");return r(),a("div",null,[c,d,l("nav",h,[l("ul",null,[l("li",null,[o(e,{to:"#设计模式"},{default:t(()=>[i("设计模式")]),_:1}),l("ul",null,[l("li",null,[o(e,{to:"#七大原则"},{default:t(()=>[i("七大原则")]),_:1})]),l("li",null,[o(e,{to:"#设计模式概述"},{default:t(()=>[i("设计模式概述")]),_:1}),l("ul",null,[l("li",null,[o(e,{to:"#核心思想"},{default:t(()=>[i("核心思想")]),_:1})]),l("li",null,[o(e,{to:"#目的"},{default:t(()=>[i("目的")]),_:1})]),l("li",null,[o(e,{to:"#分类"},{default:t(()=>[i("分类")]),_:1})])])])])])])]),b])}const k=p(s,[["render",_],["__file","index.html.vue"]]);export{k as default};
