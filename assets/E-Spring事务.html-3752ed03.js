import{_ as c,Q as l,S as r,U as n,W as s,X as e,a8 as a,a9 as o,H as i}from"./framework-d7e1aa10.js";const u={},d=n("h1",{id:"spring-事务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring-事务","aria-hidden":"true"},"#"),a(" Spring 事务")],-1),k={class:"table-of-contents"},m=o('<p>Spring 事务实现方式有：<strong>编程式事务</strong> 和 <strong>声明式事务</strong></p><h2 id="传播机制" tabindex="-1"><a class="header-anchor" href="#传播机制" aria-hidden="true">#</a> 传播机制</h2><p>Spring事务传播机制是指在多个事务方法相互调用时，不同事务方法之间事务如何传播的机制。Spring中定义了七种事务传播行为，可以通过设置 @Transactional注解或者TransactionDefinition对象来指定。</p><p>下表是七种事务传播行为以及对应的描述：</p><div class="table-wrapper"><table><thead><tr><th>传播行为</th><th>描述</th></tr></thead><tbody><tr><td>Propagation.REQUIRED</td><td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入这个事务中。这是默认值。</td></tr><tr><td>Propagation.SUPPORTS</td><td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td></tr><tr><td>Propagation.MANDATORY</td><td>使用当前的事务，如果当前没有事务，就抛出异常。</td></tr><tr><td>Propagation.REQUIRES_NEW</td><td>新建事务，如果当前存在事务，把当前事务挂起。</td></tr><tr><td>Propagation.NOT_SUPPORTED</td><td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td>Propagation.NEVER</td><td>以非事务方式执行，如果当前存在事务，则抛出异常。</td></tr><tr><td>Propagation.NESTED (Spring 3.0)</td><td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与Propagation.REQUIRED类似的操作。</td></tr></tbody></table></div><p>举个例子，假设有方法A和方法B，方法A调用了方法B。同时，方法A和方法B都被@Transactional注解标注了，且方法A的传播行为为Propagation.REQUIRED。</p><ul><li>如果方法B的传播行为为Propagation.REQUIRED，那么方法B将加入到方法A的事务中，和方法A一起提交。</li><li>如果方法B的传播行为为Propagation.REQUIRES_NEW，那么方法B将新建一个事务，和方法A的事务并行执行，各自提交。</li><li>如果方法B的传播行为为Propagation.NESTED，那么方法B将在方法A的事务中嵌套一个子事务，如果发生异常，子事务将回滚，否则子事务和主事务一起提交。注意，这种传播行为只有在当前事务存在的情况下才会生效。</li></ul><p>总之，事务传播机制可以保证多个事务方法之间的事务处理的正确性和一致性。</p><h2 id="事务失效" tabindex="-1"><a class="header-anchor" href="#事务失效" aria-hidden="true">#</a> 事务失效</h2><div class="hint-container info"><p class="hint-container-title">说明</p><p>Spring 事务使用了 AOP，即进行了切面增强，所以失效的根本原因就是 AOP 失效</p></div><p>Spring事务可以在多个层级的方法中嵌套使用，但是在某些情况下会导致事务失效，主要有以下几种情况：</p><ol><li>方法不是 public：@Transition 只能用于 public 修饰的方法上，否则就会失效；如果想用在非 public 方法上，可以开启 <strong>AspectJ</strong> 代理模式</li><li>事务的传播行为设置不当：如果在事务嵌套的场景中，父方法和子方法的事务传播行为不同，那么就可能导致事务失效。</li><li>异常被吞掉：如果在事务处理过程中，抛出的异常被捕获但没有被上抛，则会导致事务失效。因为Spring只会对未被捕获的异常进行回滚处理。</li><li>非检查异常：如果在事务处理过程中抛出了非检查异常，比如NullPointerException、IndexOutOfBoundsException等，此时Spring事务无法捕获这些异常，也就无法进行回滚处理。</li><li>同一个类中的方法调用：如果在同一个类中的方法之间进行相互调用，并且这些方法都使用了@Transactional注解声明了事务，但是并没有使用AOP代理实现事务控制（因为类中自调用 this 指向当前类，不是代理类，这样 AOP 就失效了），则会导致事务失效。</li><li>多线程问题：如果在事务处理中涉及到多线程操作，则需要特别注意事务管理，否则可能会导致事务失效。</li><li>数据库引擎不支持事务：如果使用的数据库引擎不支持事务，或者没有正确配置事务管理器，也会导致事务失效。</li><li>数据库操作不符合事务要求：如果在事务处理中，进行了一些不符合事务要求的操作，比如DDL语句、存储过程调用等，则会导致事务失效。</li></ol><p>总的来说，事务失效往往是由于代码实现问题或者环境配置问题导致的，需要仔细检查代码和环境配置，确保事务可以正确运行。</p><h2 id="事务源码" tabindex="-1"><a class="header-anchor" href="#事务源码" aria-hidden="true">#</a> 事务源码</h2>',14),v={class:"hint-container info"},b=n("p",{class:"hint-container-title"},"相关文章",-1),h={href:"https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247484702&idx=1&sn=c04261d63929db09ff6df7cadc7cca21&chksm=fa497aafcd3ef3b94082da7bca841b5b7b528eb2a52dbc4eb647b97be63a9a1cf38a9e71bf90&token=165108535&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},g=o(`<div class="hint-container note"><p class="hint-container-title">说明</p><p><strong>Spring并不直接管理事务，而是提供了多种事务管理器</strong> ，他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。 Spring事务管理器的接口是： <strong>org.springframework.transaction.PlatformTransactionManager</strong> ，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。</p></div><h3 id="platformtransactionmanager" tabindex="-1"><a class="header-anchor" href="#platformtransactionmanager" aria-hidden="true">#</a> PlatformTransactionManager</h3><p>PlatformTransactionManager 中包含三个方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据指定的传播行为，返回当前活动的事务或创建一个新事务</span>
    <span class="token class-name">TransactionStatus</span> <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用事务目前的状态提交事务</span>
    <span class="token class-name">Void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>
    <span class="token comment">// 对执行的事务进行回滚</span>
    <span class="token class-name">Void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>各个事务管理器的具体实现：</p><div class="table-wrapper"><table><thead><tr><th>序号</th><th>事务管理器实现类</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td><code>orgspringframeworkjdbc.datasource.DataSourceTransactionManager</code></td><td>使用SpringJDBC或者iBatis进行持久化数据时使用</td></tr><tr><td>2</td><td><code>org.springframeworkorm.hibernate3.HibernateTransactionManager</code></td><td>使用Hibernate3.0版本进行持久化数据时使用</td></tr><tr><td>3</td><td><code>org.springframework.ormjpa.JpaTransactionManager</code></td><td>使用JPA进行数据持久化时使用</td></tr><tr><td>4</td><td><code>org.springframework.transaction.jta.JtaTransactionManager</code></td><td>使用一个JTA实现来管理事务，在一个事务跨越多个资源时使用</td></tr></tbody></table></div><h3 id="transactiondefinition" tabindex="-1"><a class="header-anchor" href="#transactiondefinition" aria-hidden="true">#</a> TransactionDefinition</h3><blockquote><p>TransactionDefinition 是事务管理器 getTransaction 方法的入参，该对象内部定义了一些事务的属性</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionDefinition</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">{</span>
    <span class="token comment">// 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span>
    <span class="token keyword">int</span> <span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别</span>
    <span class="token keyword">int</span> <span class="token constant">ISOLATION_DEFAULT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读</span>
    <span class="token keyword">int</span> <span class="token constant">ISOLATION_READ_UNCOMMITTED</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生</span>
    <span class="token keyword">int</span> <span class="token constant">ISOLATION_READ_COMMITTED</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment">// 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生</span>
    <span class="token keyword">int</span> <span class="token constant">ISOLATION_REPEATABLE_READ</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token comment">// 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰</span>
    <span class="token comment">// 也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别</span>
    <span class="token keyword">int</span> <span class="token constant">ISOLATION_SERIALIZABLE</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> 
    
    
    <span class="token comment">// 返回事务的传播行为</span>
    <span class="token comment">// 当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行</span>
    <span class="token keyword">int</span> <span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 下面前 6 个是与 EJB 共享的，最后 1 个是 Spring 特有的嵌套事务（保存点的应用）</span>
    <span class="token comment">// 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务</span>
    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_REQUIRED</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行</span>
    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_SUPPORTS</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常</span>
    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_MANDATORY</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建一个新的事务，如果当前存在事务，则把当前事务挂起</span>
    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_REQUIRES_NEW</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token comment">// 以非事务方式运行，如果当前存在事务，则把当前事务挂起</span>
    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_NOT_SUPPORTED</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token comment">// 以非事务方式运行，如果当前存在事务，则抛出异常</span>
    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_NEVER</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED</span>
    <span class="token keyword">int</span> <span class="token constant">PROPAGATION_NESTED</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    
    
    <span class="token comment">// 返回事务必须在多少秒内完成</span>
    <span class="token comment">// 所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。</span>
    <span class="token comment">// 在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</span>
    <span class="token keyword">int</span> <span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token constant">TIMEOUT_DEFAULT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    
    
    <span class="token comment">// 返回是否优化为只读事务</span>
    <span class="token comment">// 所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等</span>
    <span class="token keyword">boolean</span> <span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	
    <span class="token comment">// 返回事务的名字</span>
    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transactionstatus" tabindex="-1"><a class="header-anchor" href="#transactionstatus" aria-hidden="true">#</a> TransactionStatus</h3><blockquote><p>TransactionStatus 接口用来记录事务的状态，该接口定义了一组方法，用来获取或判断事务的相应状态信息</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionStatus</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">{</span>
    <span class="token comment">// 是否是新的事务</span>
    <span class="token keyword">boolean</span> <span class="token function">isNewTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 是否有恢复点</span>
    <span class="token keyword">boolean</span> <span class="token function">hasSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置为只回滚</span>
    <span class="token keyword">void</span> <span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// 是否为只回滚</span>
    <span class="token keyword">boolean</span> <span class="token function">isRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 是否已完成</span>
    <span class="token keyword">boolean</span> isCompleted<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事务实战" tabindex="-1"><a class="header-anchor" href="#事务实战" aria-hidden="true">#</a> 事务实战</h2><blockquote><p>Spring 支持编程式事务与声明式事务</p></blockquote>`,14),f={class:"hint-container info"},T=n("p",{class:"hint-container-title"},"相关文章",-1),_={href:"https://juejin.cn/post/6844903608224333838",target:"_blank",rel:"noopener noreferrer"},E=o(`<h3 id="编程式事务" tabindex="-1"><a class="header-anchor" href="#编程式事务" aria-hidden="true">#</a> 编程式事务</h3><blockquote><p>可以使用 TransactionTemplate 或者 PlatformTransactionManager 管理事务</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">TransactionTemplate</span> transactionTemplate<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionCallbackWithoutResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doInTransactionWithoutResult</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> transactionStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 业务代码</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token comment">// 回滚</span>
                    transactionStatus<span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">PlatformTransactionManager</span> transactionManager<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">TransactionStatus</span> status <span class="token operator">=</span> transactionManager<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token comment">// 业务代码</span>
              transactionManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment">// 回滚</span>
              transactionManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="声明式事务" tabindex="-1"><a class="header-anchor" href="#声明式事务" aria-hidden="true">#</a> 声明式事务</h3><blockquote><p>实际开发中使用基于注解 @Transaction 的声明式事务用到比较多</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span>propagation<span class="token punctuation">.</span><span class="token constant">PROPAGATION_REQUIRED</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">someService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 业务代码</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function w(A,y){const t=i("router-link"),p=i("ExternalLinkIcon");return l(),r("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[s(t,{to:"#spring-事务"},{default:e(()=>[a("Spring 事务")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#传播机制"},{default:e(()=>[a("传播机制")]),_:1})]),n("li",null,[s(t,{to:"#事务失效"},{default:e(()=>[a("事务失效")]),_:1})]),n("li",null,[s(t,{to:"#事务源码"},{default:e(()=>[a("事务源码")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#platformtransactionmanager"},{default:e(()=>[a("PlatformTransactionManager")]),_:1})]),n("li",null,[s(t,{to:"#transactiondefinition"},{default:e(()=>[a("TransactionDefinition")]),_:1})]),n("li",null,[s(t,{to:"#transactionstatus"},{default:e(()=>[a("TransactionStatus")]),_:1})])])]),n("li",null,[s(t,{to:"#事务实战"},{default:e(()=>[a("事务实战")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#编程式事务"},{default:e(()=>[a("编程式事务")]),_:1})]),n("li",null,[s(t,{to:"#声明式事务"},{default:e(()=>[a("声明式事务")]),_:1})])])])])])])]),m,n("div",v,[b,n("ol",null,[n("li",null,[n("a",h,[a("可能是最漂亮的 Spring 事务管理详解"),s(p)])])])]),g,n("div",f,[T,n("ol",null,[n("li",null,[n("a",_,[a("可能是最漂亮的Spring事务管理详解"),s(p)])])])]),E])}const P=c(u,[["render",w],["__file","E-Spring事务.html.vue"]]);export{P as default};
