import{_ as t,Q as o,S as l,U as a,W as p,X as e,a8 as n,a9 as i,H as c}from"./framework-d7e1aa10.js";const r={},u=a("h1",{id:"jvm-方法区",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#jvm-方法区","aria-hidden":"true"},"#"),n(" JVM 方法区")],-1),d={class:"table-of-contents"},k=i(`<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//JVM/20230131/i运行时数据区总览.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>《Java虚拟机规范》中明确说明：“尽管所有的方法区在逻辑上是属于堆的一部分，但一些简单的实现可能不会选择去进行垃圾收集或者进行压缩。”但对于HotSpotJVM 而言，方法区还有一个别名叫做 Non-Heap（非堆），目的就是要和堆分开。</p><p>所以，方法区看作是一块独立于Java堆的内存空间。</p><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//jvm/20230209/方法区-2.png" alt="image-20230130165620395" style="zoom:50%;"><p><strong>从线程共享与否的角度来看</strong></p><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//JVM/20230130/运行时数据区结构图.png" alt="image-20230130165424916" style="zoom:50%;"><p><strong>堆、栈、方法区</strong></p><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//JVM/20230130/栈堆方法去.png" alt="image-20230130165910031" tabindex="0" loading="lazy"><figcaption>image-20230130165910031</figcaption></figure><p><strong>对方法区的基本理解：</strong></p><ul><li><p>方法区（Method Area）与 Java堆 一样，是各个线程共享的内存区域</p></li><li><p>方法区在JVM启动的时候被创建，并且它的实际的物理内存空间中和 Java 堆区一样都可以是不连续的。</p></li><li><p>方法区的大小，跟堆空间一样，可以选择固定大小或者可扩展</p></li><li><p>方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出，虚拟机同样会抛出内存溢出错误： <code>java.lang.OutOfMemoryError: PermGen space</code> 或者 <code>java.lang.OutOfMemoryError: Metaspace</code></p></li><li><p>关闭 JVM 就会释放这个区域的内存</p></li></ul><p><strong>方法区的演进：</strong></p><p>方法区类似接口，永久代和元空间是方法区的不同实现</p><p>在 jdk7 及以前，习惯上把方法区，称为永久代。jdk8 开始，使用元空间取代了永久代</p><p>本质上，方法区和永久代并不等价。仅是对hotspot而言的。《Java虚拟机规范》对如何实现方法区，不做统一要求。例如：BEA JRockit / IBM J9 中不存在永久代的概念。、</p><p>现在来看，当年使用永久代，不是好的 idea。导致Java程序更容易 OOM（超过 <code>-XX:MaxPermsize</code> 上限）</p><p>而到了 JDK8，终于完全废弃了永久代的概念，改用与 JRockit、J9 一样在本地内存中实现的元空间（Metaspace）来代替</p><p>元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代最大的区别在于：元空间不在虚拟机设置的内存中，而是使用本地内存</p><p>永久代、元空间二者并不只是名字变了，内部结构也调整了</p><p>根据《Java虚拟机规范》的规定，如果方法区无法满足新的内存分配需求时，将抛出OOM异常</p><h2 id="参数设置" tabindex="-1"><a class="header-anchor" href="#参数设置" aria-hidden="true">#</a> 参数设置</h2><p>方法区的大小不必是固定的，JVM可以根据应用的需要动态调整。</p><p><strong>jdk7 及以前：</strong></p><ul><li><p>通过来设置永久代初始分配空间。默认值是 20.75 M <code>-XX:Permsize</code></p></li><li><p>通过来设定永久代最大可分配空间。32 位机器默认是 64 M，64 位机器模式是 82M <code>-XX:MaxPermsize</code></p></li><li><p>当 JVM 加载的类信息容量超过了这个值，会报异常 <code>OutOfMemoryError:PermGen space</code>。</p></li></ul><p><strong>JDK8 以后：</strong></p><ul><li><p>元数据区大小可以使用参数 <code>-XX:MetaspaceSize</code> 和 <code>-XX:MaxMetaspaceSize</code>指定</p></li><li><p>默认值依赖于平台。windows下，<code>-XX:MetaspaceSize=21M -XX:MaxMetaspaceSize=-1</code>，后者（最大值）一般不设置限制。</p></li><li><p>与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。如果元数据区发生溢出，虚拟机一样会抛出异常<code>OutOfMemoryError:Metaspace</code></p></li><li><p><code>-XX:MetaspaceSize</code>：设置初始的元空间大小。对于一个64位的服务器端JVM来说，其默认的<code>-XX:MetaspaceSize</code>值为21MB。这就是初始的高水位线，一旦触及这个水位线，Full GC将会被触发并卸载没用的类（即这些类对应的类加载器不再存活），然后这个高水位线将会重置。新的高水位线的值取决于GC后释放了多少元空间。如果释放的空间不足，那么在不超过<code>MaxMetaspaceSize</code>时，适当提高该值。如果释放空间过多，则适当降低该值。</p></li><li><p>如果初始化的高水位线设置过低，上述高水位线调整情况会发生很多次。通过垃圾回收器的日志可以观察到Full GC多次调用。为了避免频繁地GC，建议将<code>-XX:MetaspaceSize</code>设置为一个相对较高的值。</p></li></ul><p><strong>如何解决 OOM：</strong></p><ol><li>要解决OOM异常或heap space的异常，一般的手段是首先通过内存映像分析工具（如Eclipse Memory Analyzer）对dump出来的堆转储快照进行分析，重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏（Memory Leak）还是内存溢出（Memory Overflow）</li><li>如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots的引用链。于是就能找到泄漏对象是通过怎样的路径与GCRoots相关联并导致垃圾收集器无法自动回收它们的。掌握了泄漏对象的类型信息，以及GCRoots引用链的信息，就可以比较准确地定位出泄漏代码的位置。</li><li>如果不存在内存泄漏，换句话说就是内存中的对象确实都还必须存活着，那就应当检查虚拟机的堆参数（<code>-Xmx</code>与<code>-Xms</code>），与机器物理内存对比看是否还可以调大，从代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期的内存消耗。</li></ol><h2 id="方法区内部结构" tabindex="-1"><a class="header-anchor" href="#方法区内部结构" aria-hidden="true">#</a> 方法区内部结构</h2><p>《深入理解Java虚拟机》书中对方法区（Method Area）存储内容描述如下：</p><blockquote><p>它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等。</p></blockquote><p><strong>类型信息：</strong></p><p>对每个加载的类型（类class、接口interface、枚举enum、注解annotation），JVM必须在方法区中存储以下类型信息：</p><ol><li>这个类型的完整有效名称（全名=包名.类名）</li><li>这个类型直接父类的完整有效名（对于interface或是java.lang.object，都没有父类）</li><li>这个类型的修饰符（public，abstract，final的某个子集）</li><li>这个类型直接接口的一个有序列表</li></ol><p><strong>域（Field）信息：</strong></p><p>JVM必须在方法区中保存类型的所有域的相关信息以及域的声明顺序。</p><p>域的相关信息包括：域名称、域类型、域修饰符（public，private，protected，static，final，volatile，transient的某个子集）</p><p><strong>方法（Method）信息：</strong></p><p>JVM必须保存所有方法的以下信息，同域信息一样包括声明顺序：</p><ol><li>方法名称</li><li>方法的返回类型（或void）</li><li>方法参数的数量和类型（按顺序）</li><li>方法的修饰符（public，private，protected，static，final，synchronized，native，abstract的一个子集）</li><li>方法的字节码（bytecodes）、操作数栈、局部变量表及大小（abstract和native方法除外）</li><li>异常表（abstract和native方法除外）</li></ol><ul><li><ul><li>每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引</li></ul></li></ul><p><strong>non-final的类变量：</strong></p><ul><li><p>静态变量和类关联在一起，随着类的加载而加载，他们成为类数据在逻辑上的一部分</p></li><li><p>类变量被类的所有实例共享，即使没有类实例时，你也可以访问它</p></li></ul><p><strong>补充说明：全局常量（static final）：</strong></p><p>被声明为 final 的类变量的处理方法则不同，每个全局常量在编译的时候就会被分配了</p><h2 id="常量池" tabindex="-1"><a class="header-anchor" href="#常量池" aria-hidden="true">#</a> 常量池</h2><ul><li><p>字节码文件，内部包含了常量池，方法区，内部包含了运行时常量池；就是说当字节码文件中的常量池加载到方法区后就成了运行时常量池</p></li><li><p>要弄清楚方法区，需要理解清楚 ClassFile，因为加载类的信息都在方法区；要弄清楚方法区的运行时常量池，需要理解清楚ClassFile中的常量池</p></li><li><p>一个有效的字节码文件中除了包含类的版本信息、字段、方法以及接口等描述符信息外，还包含一项信息就是常量池表（Constant Pool Table），包括各种字面量和对类型、域和方法的<strong>符号引用</strong></p></li></ul><p><strong>为什么需要常量池？</strong></p><p>一个java源文件中的类、接口，编译后产生一个字节码文件。而Java中的字节码需要数据支持，通常这种数据会很大以至于不能直接存到字节码里，换另一种方式，可以存到常量池，这个字节码包含了指向常量池的引用。在动态链接的时候会用到运行时常量池</p><p>一个很小的 class 文件中可能需要包含非常多的引用，在字节码文件中用符号引用最大的好处就是不用把这些引用每次都写一遍，这样会浪费大量空间</p><p>总的来说，常量池就是一个配料表，JVM 需要做什么就先从配料表中寻找再组合到一起</p><p><strong>击中常量池内存储的数据类型包括：</strong></p><ul><li><p>数量值</p></li><li><p>字符串值</p></li><li><p>类引用</p></li><li><p>字段引用</p></li><li><p>方法引用</p></li></ul><p><strong>运行时常量池：</strong></p><ul><li><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。</p></li><li><p>常量池表（Constant Pool Table）是Class文件的一部分，用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</p></li><li><p>运行时常量池，在加载类和接口到虚拟机后，就会创建对应的运行时常量池。</p></li><li><p>JVM为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过索引访问的。</p></li><li><p>运行时常量池中包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或者字段引用。此时不再是常量池中的符号地址了，这里换为真实地址。</p></li><li><p>运行时常量池，相对于Class文件常量池的另一重要特征是：具备动态性。</p></li><li><p>运行时常量池类似于传统编程语言中的符号表（symboltable），但是它所包含的数据却比符号表要更加丰富一些。</p></li><li><p>当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则JVM会抛OutOfMemoryError异常。</p></li></ul><h2 id="方法区的演进" tabindex="-1"><a class="header-anchor" href="#方法区的演进" aria-hidden="true">#</a> 方法区的演进</h2><ol><li>首先明确：只有Hotspot才有永久代。BEA JRockit、IBMJ9等来说，是不存在永久代的概念的。原则上如何实现方法区属于虚拟机实现细节，不受《Java虚拟机规范》管束，并不要求统一</li><li>Hotspot中方法区的变化：</li></ol><div class="table-wrapper"><table><thead><tr><th><strong>JDK1.6及之前</strong></th><th><strong>有永久代（permanet），静态变量存储在永久代上</strong></th></tr></thead><tbody><tr><td><strong>JDK1.7</strong></td><td><strong>有永久代，但已经逐步 “去永久代”，字符串常量池，静态变量移除，保存在堆中</strong></td></tr><tr><td><strong>JDK1.8</strong></td><td><strong>无永久代，类型信息，字段，方法，常量保存在本地内存的元空间，但字符串常量池、静态变量仍然在堆中</strong></td></tr></tbody></table></div><p><strong>为什么移除永久代：</strong></p><p>由于类的元数据分配在本地内存中，元空间的最大可分配空间就是系统可用内存空间</p><p>这项改动是很有必要的，原因有：</p><p>为永久代设置空间大小是很难确定的。在某些场景下，如果动态加载类过多，容易产生Perm区的oom。比如某个实际Web工 程中，因为功能点比较多，在运行过程中，要不断动态加载很多类，经常出现致命错误。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token string">&quot;Exception in thread &#39;dubbo client x.x connector&#39; java.lang.OutOfMemoryError:PermGen space&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而元空间和永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。 因此，默认情况下，元空间的大小仅受本地内存限制。 对永久代进行调优是很困难的</p><h2 id="stringtable-为什么调整位置" tabindex="-1"><a class="header-anchor" href="#stringtable-为什么调整位置" aria-hidden="true">#</a> StringTable 为什么调整位置</h2><p>jdk7中将StringTable放到了堆空间中。因为永久代的回收效率很低，在full gc的时候才会触发。而full gc是老年代的空间不足、永久代不足时才会触发</p><p>这就导致StringTable回收效率不高。而我们开发中会有大量的字符串被创建，回收效率低，导致永久代内存不足。放到堆里，能及时回收内存</p><h2 id="静态变量存放位置" tabindex="-1"><a class="header-anchor" href="#静态变量存放位置" aria-hidden="true">#</a> 静态变量存放位置</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 静态引用对应的对象实体始终都存在堆空间
 * jdk7:
 * -Xms200m -Xmx200m -XX:PermSize=300m -XX:MaxPermSize=300m -XX:+PrintGCDetails
 * jdk8:
 * -Xms200m -Xmx200m-XX:MetaspaceSize=300m -XX:MaxMetaspaceSize=300m -XX:+PrintGCDetails
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticFieldTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StaticFieldTest</span><span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * staticobj、instanceobj、Localobj存放在哪里？
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticobjTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token class-name">ObjectHolder</span> staticobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectHolder</span> instanceobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">ObjectHolder</span> localobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticobjTest<span class="token punctuation">.</span>Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            test<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试发现：三个对象的数据在内存中的地址都落在Eden区范围内，所以结论：只要是对象实例必然会在Java堆中分配。</p><p>接着，找到了一个引用该staticobj对象的地方，是在一个java.lang.Class的实例里，并且给出了这个实例的地址，通过Inspector查看该对象实例，可以清楚看到这确实是一个java.lang.Class类型的对象实例，里面有一个名为staticobj的实例字段：</p><p>从《Java虚拟机规范》所定义的概念模型来看，所有Class相关的信息都应该存放在方法区之中，但方法区该如何实现，《Java虚拟机规范》并未做出规定，这就成了一件允许不同虚拟机自己灵活把握的事情。JDK7及其以后版本的HotSpot虚拟机选择把静态变量与类型在Java语言一端的映射class对象存放在一起，存储于Java堆之中，从我们的实验中也明确验证了这一点</p><h2 id="方法区的垃圾回收" tabindex="-1"><a class="header-anchor" href="#方法区的垃圾回收" aria-hidden="true">#</a> 方法区的垃圾回收</h2><p>有些人认为方法区（如Hotspot虚拟机中的元空间或者永久代）是没有垃圾收集行为的，其实不然。《Java虚拟机规范》对方法区的约束是非常宽松的，提到过可以不要求虚拟机在方法区中实现垃圾收集。事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如JDK11时期的zGC收集器就不支持类卸载）。</p><p>一般来说这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻。但是这部分区域的回收有时又确实是必要的。以前sun公司的Bug列表中，曾出现过的若干个严重的Bug就是由于低版本的HotSpot虚拟机对此区域未完全回收而导致内存泄漏</p><p><strong>方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不再使用的类型</strong></p><p>先来说说方法区内常量池之中主要存放的两大类常量：字面量和符号引用。字面量比较接近Java语言层次的常量概念，如文本字符串、被声明为final的常量值等。而符号引用则属于编译原理方面的概念，包括下面三类常量：</p><ul><li><p>类和接口的全限定名</p></li><li><p>字段的名称和描述符</p></li><li><p>方法的名称和描述符</p></li></ul><p>HotSpot虚拟机对常量池的回收策略是很明确的，只要常量池中的常量没有被任何地方引用，就可以被回收</p><p>回收废弃常量与回收Java堆中的对象非常类似</p><p>判定一个常量是否“废弃”还是相对简单，而要判定一个类型是否属于“不再被使用的类”的条件就比较苛刻了。需要同时满足下面三个条件：</p><ul><li><p>该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例。</p></li><li><p>加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的。</p></li><li><p>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</p></li></ul><p>Java虚拟机被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是“被允许”，而并不是和对象一样，没有引用了就必然会回收。关于是否要对类型进行回收，HotSpot虚拟机提供了<code>-Xnoclassgc</code>参数进行控制，还可以使用<code>-verbose:class</code> 以及 <code>-XX:+TraceClassLoading</code>、<code>-XX:+TraceClassUnLoading</code>查看类加载和卸载信息</p><p><strong>在大量使用反射、动态代理、CGLib等字节码框架，动态生成JSP以及OSGi这类频繁自定义类加载器的场景中，通常都需要Java虚拟机具备类型卸载的能力，以保证不会对方法区造成过大的内存压力</strong></p><h2 id="常见面试题" tabindex="-1"><a class="header-anchor" href="#常见面试题" aria-hidden="true">#</a> 常见面试题</h2><p>百度：</p><p>说一下JVM内存模型吧，有哪些区？分别干什么的？</p><p>蚂蚁金服：</p><p>Java8的内存分代改进 JVM内存分哪几个区，每个区的作用是什么？</p><p>一面：JVM内存分布/内存结构？栈和堆的区别？堆的结构？为什么两个survivor区？</p><p>二面：Eden和survior的比例分配</p><p>小米：</p><p>jvm内存分区，为什么要有新生代和老年代</p><p>字节跳动：</p><p>二面：Java的内存分区</p><p>二面：讲讲vm运行时数据库区 什么时候对象会进入老年代？</p><p>京东：</p><p>JVM的内存结构，Eden和Survivor比例。</p><p>JVM内存为什么要分成新生代，老年代，持久代。</p><p>新生代中为什么要分为Eden和survivor。</p><p>天猫：</p><p>一面：Jvm内存模型以及分区，需要详细到每个区放什么。</p><p>一面：JVM的内存模型，Java8做了什么改</p><p>拼多多：</p><p>JVM内存分哪几个区，每个区的作用是什么？</p><p>美团：</p><p>java内存分配 jvm的永久代中会发生垃圾回收吗？</p><p>一面：jvm内存分区，为什么要有新生代和老年代？</p>`,108);function v(m,g){const s=c("router-link");return o(),l("div",null,[u,a("nav",d,[a("ul",null,[a("li",null,[p(s,{to:"#jvm-方法区"},{default:e(()=>[n("JVM 方法区")]),_:1}),a("ul",null,[a("li",null,[p(s,{to:"#参数设置"},{default:e(()=>[n("参数设置")]),_:1})]),a("li",null,[p(s,{to:"#方法区内部结构"},{default:e(()=>[n("方法区内部结构")]),_:1})]),a("li",null,[p(s,{to:"#常量池"},{default:e(()=>[n("常量池")]),_:1})]),a("li",null,[p(s,{to:"#方法区的演进"},{default:e(()=>[n("方法区的演进")]),_:1})]),a("li",null,[p(s,{to:"#stringtable-为什么调整位置"},{default:e(()=>[n("StringTable 为什么调整位置")]),_:1})]),a("li",null,[p(s,{to:"#静态变量存放位置"},{default:e(()=>[n("静态变量存放位置")]),_:1})]),a("li",null,[p(s,{to:"#方法区的垃圾回收"},{default:e(()=>[n("方法区的垃圾回收")]),_:1})]),a("li",null,[p(s,{to:"#常见面试题"},{default:e(()=>[n("常见面试题")]),_:1})])])])])]),k])}const h=t(r,[["render",v],["__file","D-JVM方法区.html.vue"]]);export{h as default};
