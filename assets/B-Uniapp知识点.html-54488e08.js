import{_ as o,Q as p,S as c,U as t,W as l,X as i,a8 as e,a9 as d,H as s}from"./framework-d7e1aa10.js";const r={},u=t("h1",{id:"uniapp-知识点",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#uniapp-知识点","aria-hidden":"true"},"#"),e(" Uniapp 知识点")],-1),x={class:"table-of-contents"},h=d('<h2 id="概览" tabindex="-1"><a class="header-anchor" href="#概览" aria-hidden="true">#</a> 概览</h2><div class="hint-container info"><p class="hint-container-title">说明</p><p>下面的知识点会陆续补充上…</p></div><ol><li>约定与项目结构</li><li>全局配置、页面配置</li><li>样式</li><li>数据绑定</li><li>事件触发</li><li>生命周期</li><li>状态管理</li><li>组件、通信</li><li>网络请求</li><li>数据缓存</li><li>上传下载</li><li>图片、文件</li><li>路由导航</li><li>插件扩展</li><li>调试与性能调优</li></ol><h2 id="约定与项目结构" tabindex="-1"><a class="header-anchor" href="#约定与项目结构" aria-hidden="true">#</a> 约定与项目结构</h2><div class="hint-container info"><p class="hint-container-title">规范</p><ol><li>页面文件遵循 Vue 单文件组件 (SFC) 规范</li><li>组件标签靠近小程序规范，详见uni-app 组件规范</li><li>接口能力（JS API）靠近微信小程序规范，但需将前缀 wx 替换为 uni，详见uni-app接口规范</li><li>数据绑定及事件处理同 Vue.js 规范，同时补充了App及页面的生命周期</li><li>为兼容多端运行，建议使用flex布局进行开发</li></ol></div><ol><li><code>pages.json</code> 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等</li><li><code>manifest.json</code> 文件是应用的配置文件，用于指定应用的名称、图标、权限等。</li><li><code>App.vue</code> 是我们的跟组件，所有页面都是在App.vue下进行切换的，是页面入口文件，可以调用应用的生命周期函数。</li><li><code>main.js</code> 是我们的项目入口文件，主要作用是初始化vue实例并使用需要的插件。</li><li><code>uni.scss</code> 文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，uni.scss文件里预置了一批scss变量预置。</li><li><code>unpackage</code> 就是打包目录，在这里有各个平台的打包文件</li><li><code>pages</code> 所有的页面存放目录</li><li><code>static</code> 静态资源目录，例如图片等</li><li><code>components</code> 组件存放目录</li></ol><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">函数名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>onLaunch</code></td><td style="text-align:left;">当<code>uni-app</code>初始化完成时触发（局部只触发一次）</td></tr><tr><td style="text-align:left;"><code>onOpen</code></td><td style="text-align:left;">当<code>uni-app</code>启动，或从后台进入前台显示</td></tr><tr><td style="text-align:left;"><code>onHide</code></td><td style="text-align:left;">当<code>uni-app</code>从前台进入后台</td></tr><tr><td style="text-align:left;"><code>onError</code></td><td style="text-align:left;">当<code>uni-app</code>报错时触发</td></tr><tr><td style="text-align:left;"><code>onUniNViewMessage</code></td><td style="text-align:left;">对<code>nvue</code>页面发送的数据进行监听，可参考<code>nvue </code>向<code>vue </code>通讯</td></tr><tr><td style="text-align:left;"><code>onUnhandledRejection</code></td><td style="text-align:left;">对未处理的 Promise 拒绝事件监听函数（2.8.1+）</td></tr><tr><td style="text-align:left;"><code>onPageNotFound</code></td><td style="text-align:left;">页面不存在监听函数</td></tr><tr><td style="text-align:left;"><code>onThemeChange</code></td><td style="text-align:left;">监听系统主题变化</td></tr></tbody></table></div><h2 id="路由导航" tabindex="-1"><a class="header-anchor" href="#路由导航" aria-hidden="true">#</a> 路由导航</h2><p>框架以栈的形式管理当前所有页面，当发生路由切换的时候，页面栈的表现如下：</p><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">路由方式</th><th style="text-align:left;">页面栈表现</th><th style="text-align:left;">触发时机</th></tr></thead><tbody><tr><td style="text-align:left;">初始化</td><td style="text-align:left;">新页面入栈</td><td style="text-align:left;">uni-app：的第一个页面</td></tr><tr><td style="text-align:left;">新页面</td><td style="text-align:left;">新页面入栈</td><td style="text-align:left;">调用API <code>uni.navigateTo</code> ，使用组件 <code>&lt;navigator open-type =“ navigate” /&gt;</code></td></tr><tr><td style="text-align:left;">页面重启</td><td style="text-align:left;">当前页面出栈，新页面入栈</td><td style="text-align:left;">调用API <code>uni.redirectTo</code> ，使用组件 <code>&lt;navigator open-type =“ redirectTo” /&gt;</code></td></tr><tr><td style="text-align:left;">页面返回</td><td style="text-align:left;">页面不断出栈，直到目标返回页</td><td style="text-align:left;">调用API <code>uni.navigateBack</code> ，使用组件 <code>&lt;navigator open-type =“ navigateBack” /&gt;</code> ，用户按左上角返回按钮，安卓用户点击物理后退键</td></tr><tr><td style="text-align:left;">标签切换</td><td style="text-align:left;">页面全部出栈，只留下新的标签页面</td><td style="text-align:left;">调用API <code>uni.switchTab</code> ，使用组件 <code>&lt;navigator open-type =“ switchTab” /&gt;</code>，用户切换 Tab</td></tr><tr><td style="text-align:left;">重加载</td><td style="text-align:left;">页面全部出栈，只留下新的页面</td><td style="text-align:left;">调用API <code>uni.reLaunch</code>，使用组件 <code>&lt;navigator open-type =“ reLaunch” /&gt;</code></td></tr></tbody></table></div><h2 id="样式" tabindex="-1"><a class="header-anchor" href="#样式" aria-hidden="true">#</a> 样式</h2><p>uni-app 支持的通用 css 单位包括 px、rpx：</p><ul><li>px 即屏幕像素</li><li>rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大。</li></ul><br><p>vue页面支持普通H5单位，但在nvue里不支持：</p><ul><li>rem 默认根字体大小为 屏幕宽度/20（微信小程序、字节跳动小程序、App、H5）</li><li>vh viewpoint height，视窗高度，1vh等于视窗高度的1%</li><li>vw viewpoint width，视窗宽度，1vw等于视窗宽度的1%</li></ul><br><p>nvue还不支持百分比单位。</p><p>App端，在 pages.json 里的 titleNView 或页面里写的 plus api 中涉及的单位，只支持 px。注意此时不支持 rpx</p><p>nvue中，uni-app 模式（nvue 不同编译模式介绍）可以使用 px 、rpx，表现与 vue 中一致。weex 模式目前遵循weex的单位，它的单位比较特殊：</p><ul><li>px:，以750宽的屏幕为基准动态计算的长度单位，与 vue 页面中的 rpx 理念相同。（一定要注意 weex 模式的 px，和 vue 里的 px 逻辑不一样。）</li><li>wx：与设备屏幕宽度无关的长度单位，与 vue 页面中的 px 理念相同</li></ul><br><p>下面对 rpx 详细说明：</p><ul><li>设计师在提供设计图时，一般只提供一个分辨率的图。</li><li>严格按设计图标注的 px 做开发，在不同宽度的手机上界面很容易变形。</li><li>而且主要是宽度变形。高度一般因为有滚动条，不容易出问题。由此，引发了较强的动态宽度单位需求。</li><li>微信小程序设计了 rpx 解决这个问题，uni-app 在 App 端、H5 端都支持了 rpx。</li><li>rpx 是相对于基准宽度的单位，可以根据屏幕宽度进行自适应。uni-app 规定屏幕基准宽度 750rpx。</li><li>开发者可以通过设计稿基准宽度计算页面元素 rpx 值，设计稿 1px 与框架样式 1rpx 转换公式如下：</li><li>设计稿 1px / 设计稿基准宽度 = 框架样式 1rpx / 750rpx</li><li>换言之，页面元素宽度在 uni-app 中的宽度计算公式：750 * 元素在设计稿中的宽度 / 设计稿基准宽度</li></ul><p>举例说明：</p><ol><li>若设计稿宽度为 750px，元素 A 在设计稿上的宽度为 100px，那么元素 A 在 uni-app 里面的宽度应该设为：750 * 100 / 750，结果为：100rpx。</li><li>若设计稿宽度为 640px，元素 A 在设计稿上的宽度为 100px，那么元素 A 在 uni-app 里面的宽度应该设为：750 * 100 / 640，结果为：117rpx。</li><li>若设计稿宽度为 375px，元素 B 在设计稿上的宽度为 200px，那么元素 B 在 uni-app 里面的宽度应该设为：750 * 200 / 375，结果为：400rpx。</li></ol>',27),g={class:"hint-container note"},f=t("p",{class:"hint-container-title"},"Tips",-1),v=t("li",null,"注意 rpx 是和宽度相关的单位，屏幕越宽，该值实际像素越大。如不想根据屏幕宽度缩放，则应该使用 px 单位。",-1),y=t("li",null,"如果开发者在字体或高度中也使用了 rpx ，那么需注意这样的写法意味着随着屏幕变宽，字体会变大、高度会变大。如果你需要固定高度，则应该使用 px 。",-1),_=t("li",null,"rpx不支持动态横竖屏切换计算，使用rpx建议锁定屏幕方向",-1),b=t("li",null,"设计师可以用 iPhone6 作为视觉稿的标准。",-1),k={href:"https://ask.dcloud.net.cn/article/35445%E3%80%82",target:"_blank",rel:"noopener noreferrer"},m=t("li",null,"App端，在 pages.json 里的 titleNView 或页面里写的 plus api 中涉及的单位，只支持 px，不支持 rpx。",-1),w={href:"http://ask.dcloud.net.cn/article/36130",target:"_blank",rel:"noopener noreferrer"},A=d(`<h3 id="样式导入" tabindex="-1"><a class="header-anchor" href="#样式导入" aria-hidden="true">#</a> 样式导入</h3><p>使用@import语句可以导入外联样式表，@import后跟需要导入的外联样式表的相对路径，用;表示语句结束。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token atrule"><span class="token rule">@import</span> <span class="token string">&quot;../../common/uni.css&quot;</span><span class="token punctuation">;</span></span>
    <span class="token selector">.uni-card</span> <span class="token punctuation">{</span>
        <span class="token property">box-shadow</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内联样式" tabindex="-1"><a class="header-anchor" href="#内联样式" aria-hidden="true">#</a> 内联样式</h3><p>框架组件上支持使用 style、class 属性来控制组件的样式。</p><ul><li>style：静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进 style 中，以免影响渲染速度。<code>&lt;view :style=&quot;{color:color}&quot; /&gt;</code></li><li>class：用于指定样式规则，其属性值是样式规则中类选择器名(样式类名)的集合，样式类名不需要带上.，样式类名之间用空格分隔。<code>&lt;view class=&quot;normal_view&quot; /&gt;</code></li></ul>`,6);function B(P,T){const n=s("router-link"),a=s("ExternalLinkIcon");return p(),c("div",null,[u,t("nav",x,[t("ul",null,[t("li",null,[l(n,{to:"#uniapp-知识点"},{default:i(()=>[e("Uniapp 知识点")]),_:1}),t("ul",null,[t("li",null,[l(n,{to:"#概览"},{default:i(()=>[e("概览")]),_:1})]),t("li",null,[l(n,{to:"#约定与项目结构"},{default:i(()=>[e("约定与项目结构")]),_:1})]),t("li",null,[l(n,{to:"#生命周期"},{default:i(()=>[e("生命周期")]),_:1})]),t("li",null,[l(n,{to:"#路由导航"},{default:i(()=>[e("路由导航")]),_:1})]),t("li",null,[l(n,{to:"#样式"},{default:i(()=>[e("样式")]),_:1}),t("ul",null,[t("li",null,[l(n,{to:"#样式导入"},{default:i(()=>[e("样式导入")]),_:1})]),t("li",null,[l(n,{to:"#内联样式"},{default:i(()=>[e("内联样式")]),_:1})])])])])])])]),h,t("div",g,[f,t("ul",null,[v,y,_,b,t("li",null,[e("如果设计稿不是750px，HBuilderX提供了自动换算的工具，详见："),t("a",k,[e("https://ask.dcloud.net.cn/article/35445。"),l(a)])]),m,t("li",null,[e("早期 uni-app 提供了 upx ，目前已经推荐统一改为 rpx 了，"),t("a",w,[e("详见"),l(a)])])])]),A])}const I=o(r,[["render",B],["__file","B-Uniapp知识点.html.vue"]]);export{I as default};
