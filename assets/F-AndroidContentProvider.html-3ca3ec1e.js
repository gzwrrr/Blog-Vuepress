import{_ as n,Q as a,S as c,U as e,W as d,X as r,a8 as t,a9 as i,H as l}from"./framework-d7e1aa10.js";const s={},h=e("h1",{id:"android-contentprovider",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#android-contentprovider","aria-hidden":"true"},"#"),t(" Android ContentProvider")],-1),p={class:"table-of-contents"},u=i('<h2 id="contentresolver" tabindex="-1"><a class="header-anchor" href="#contentresolver" aria-hidden="true">#</a> ContentResolver</h2><p>对于每一个应用程序来说，如果想要访问ContentProvider中共享的数据，就一定要借助ContentResolver类，可以通过Context中的getContentResolver()方法获取该类的实例。</p><p>ContentResolver中提供了一系列的方法用于对数据进行增删改查操作，其中insert()方法用于添加数据，update()方法用于更新数据，delete()方法用于删除数据，query()方法用于查询数据。有没有似曾相识的感觉？没错，SQLiteDatabase中也是使用这几个方法进行增删改查操作的，只不过它们在方法参数上稍微有一些区别。</p><p>不同于SQLiteDatabase，ContentResolver中的增删改查方法都是不接收表名参数的，而是使用一个Uri参数代替，这个参数被称为内容URI。</p><p>内容URI给ContentProvider中的数据建立了唯一标识符，它主要由两部分组成：authority和path。</p><ol><li>authority是用于对不同的应用程序做区分的，一般为了避免冲突，会采用应用包名的方式进行命名。比如某个应用的包名是com.example.app，那么该应用对应的authority就可以命名为com.example.app.provider。</li><li>path则是用于对同一应用程序中不同的表做区分的，通常会添加到authority的后面。</li></ol><div class="table-wrapper"><table><thead><tr><th>**query()**方法参数</th><th>对应<strong>SQL</strong>部分</th><th>描述</th></tr></thead><tbody><tr><td><code>uri</code></td><td><code>from table_name</code></td><td>指定查询某个应用程序下的某一张表</td></tr><tr><td><code>projection</code></td><td><code>select column1, column2</code></td><td>指定查询的列名</td></tr><tr><td><code>selection</code></td><td><code>where column = value</code></td><td>指定where的约束条件</td></tr><tr><td><code>selectionArgs</code></td><td><code>-</code></td><td>为where中的占位符提供具体的值</td></tr><tr><td><code>sortOrder</code></td><td><code>order by column1, column2</code></td><td>指定查询结果的排序方式</td></tr></tbody></table></div><p>getType()方法。它是所有的ContentProvider都必须提供的一个方法，用于获取Uri对象所对应的MIME类型。一个内容URI所对应的MIME字符串主要由3部分组成，Android对这3个部分做了如下格式规定。</p><ol><li>必须以<code>vnd</code>开头。</li><li>如果内容URI以路径结尾，则后接<code>android.cursor.dir/</code>；如果内容URI以id结尾，则后接<code>android.cursor.item/</code>。</li><li>最后接上<code>vnd.&lt;authority&gt;.&lt;path&gt;</code>。</li></ol>',9);function v(_,m){const o=l("router-link");return a(),c("div",null,[h,e("nav",p,[e("ul",null,[e("li",null,[d(o,{to:"#android-contentprovider"},{default:r(()=>[t("Android ContentProvider")]),_:1}),e("ul",null,[e("li",null,[d(o,{to:"#contentresolver"},{default:r(()=>[t("ContentResolver")]),_:1})])])])])]),u])}const f=n(s,[["render",v],["__file","F-AndroidContentProvider.html.vue"]]);export{f as default};
