import{_ as p,Q as c,S as r,U as n,W as t,X as e,a8 as a,a9 as i,H as l}from"./framework-d7e1aa10.js";const d={},u=n("h1",{id:"js-基础知识",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#js-基础知识","aria-hidden":"true"},"#"),a(" JS 基础知识")],-1),h={class:"table-of-contents"},k=i(`<h2 id="dom-和-bom" tabindex="-1"><a class="header-anchor" href="#dom-和-bom" aria-hidden="true">#</a> Dom 和 BOM</h2><ol><li><p>DOM（文档对象模型）和 BOM（浏览器对象模型）是 Web 前端开发中两个非常重要的概念。</p></li><li><p>DOM 指的是浏览器中渲染出来的 HTML 页面和其中的元素节点，提供了一种访问和操作这些节点的标准化方式，包括了节点的增删改查、样式的修改、事件的监听等等。DOM 操作主要通过 JavaScript 来完成。</p></li><li><p>BOM 指的是浏览器提供的一些对象和方法，包括浏览器窗口、浏览器历史记录、浏览器地址栏、浏览器的前进和后退按钮等等，它们都是通过 JavaScript 来访问和操作的。BOM 中常用的对象有 window、location、history、navigator 等等。</p></li><li><p>DOM 和 BOM 的区别在于它们的对象不同，DOM 操作的对象是网页中的文档内容，而 BOM 操作的对象是浏览器窗口和其他浏览器提供的功能。但是由于它们都是通过 JavaScript 来访问和操作的，因此它们之间的区别也不是非常明显，有时候也会有重叠和交互的情况。</p></li></ol><h2 id="windows-和-document" tabindex="-1"><a class="header-anchor" href="#windows-和-document" aria-hidden="true">#</a> Windows 和 Document</h2><p>在Web开发中，window和document是两个非常重要的对象：</p><ol><li>window对象表示当前浏览器窗口，它是BOM（浏览器对象模型）的一部分，提供了很多与浏览器窗口相关的属性和方法，如：window.innerWidth、window.innerHeight、window.open()等</li><li>document对象表示当前页面，它是DOM（文档对象模型）的一部分，提供了很多与页面内容相关的属性和方法，如：document.getElementById()、document.querySelector()等</li></ol><h2 id="js-数据类型" tabindex="-1"><a class="header-anchor" href="#js-数据类型" aria-hidden="true">#</a> Js 数据类型</h2><div class="table-wrapper"><table><thead><tr><th>变量类型</th><th>描述</th></tr></thead><tbody><tr><td>Undefined</td><td>变量未定义或未声明</td></tr><tr><td>Null</td><td>空值</td></tr><tr><td>Boolean</td><td>布尔值，只有两个取值：true 和 false</td></tr><tr><td>Number</td><td>数值类型，包括整数和浮点数</td></tr><tr><td>String</td><td>字符串类型</td></tr><tr><td>Object</td><td>对象类型，包括数组、函数、正则表达式等</td></tr><tr><td>Symbol</td><td>符号类型，表示唯一的标识符</td></tr></tbody></table></div><h2 id="js-对象类型" tabindex="-1"><a class="header-anchor" href="#js-对象类型" aria-hidden="true">#</a> Js 对象类型</h2><p>可以使用 <strong>typeof</strong> 操作符来查看 JavaScript 变量的数据类型</p><p><strong>constructor</strong> 属性返回所有 JavaScript 变量的构造函数</p><div class="table-wrapper"><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Object</td><td>JavaScript 中的一切都是对象，可以是内置对象、宿主对象或自定义对象。</td></tr><tr><td>Array</td><td>一种用于存储多个值的有序集合。</td></tr><tr><td>Function</td><td>一种可调用对象，它可以被执行并且有自己的作用域。</td></tr><tr><td>Date</td><td>一种表示日期和时间的对象。</td></tr><tr><td>RegExp</td><td>一种用于匹配字符串的对象。</td></tr><tr><td>Error</td><td>一种表示运行时错误的对象。</td></tr><tr><td>Math</td><td>用于执行数学任务的内置对象。</td></tr><tr><td>JSON</td><td>一种用于处理 JSON 数据的对象。</td></tr></tbody></table></div><h2 id="html-事件" tabindex="-1"><a class="header-anchor" href="#html-事件" aria-hidden="true">#</a> HTML 事件</h2><p>HTML 事件可以是浏览器行为，也可以是用户行为。</p><p>HTML 网页中的每个元素都可以产生某些可以触发 JavaScript 函数的事件。</p><p>以下是 HTML 事件的实例：</p><ul><li>HTML 页面完成加载</li><li>HTML input 字段改变时</li><li>HTML 按钮被点击</li></ul><p><strong>常见的HTML事件：</strong></p><p>下面是一些常见的HTML事件的列表:</p><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">事件</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">onchange</td><td style="text-align:left;">HTML 元素改变</td></tr><tr><td style="text-align:left;">onclick</td><td style="text-align:left;">用户点击 HTML 元素</td></tr><tr><td style="text-align:left;">onmouseover</td><td style="text-align:left;">用户在一个HTML元素上移动鼠标</td></tr><tr><td style="text-align:left;">onmouseout</td><td style="text-align:left;">用户从一个HTML元素上移开鼠标</td></tr><tr><td style="text-align:left;">onkeydown</td><td style="text-align:left;">用户按下键盘按键</td></tr><tr><td style="text-align:left;">onload</td><td style="text-align:left;">浏览器已完成页面的加载</td></tr></tbody></table></div><h2 id="arguments-对象" tabindex="-1"><a class="header-anchor" href="#arguments-对象" aria-hidden="true">#</a> Arguments 对象</h2><p>JavaScript 函数有个内置的对象 arguments 对象.</p><p>argument 对象包含了函数调用的参数数组。</p><p>通过这种方式你可以很方便的找到最后一个参数的值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>x <span class="token operator">=</span> <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> i<span class="token punctuation">,</span> max <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> max<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            max <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="调用-javascript-函数" tabindex="-1"><a class="header-anchor" href="#调用-javascript-函数" aria-hidden="true">#</a> 调用 JavaScript 函数</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// myFunction(10, 2) 返回 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上函数不属于任何对象。但是在 JavaScript 中它始终是默认的全局对象。</p><p>在 HTML 中默认的全局对象是 HTML 页面本身，所以函数是属于 HTML 页面。</p><p>在浏览器中的页面对象是浏览器窗口(window 对象)。以上函数会自动变为 window 对象的函数。</p><p>myFunction() 和 window.myFunction() 是一样的：</p><h2 id="作为函数方法调用函数" tabindex="-1"><a class="header-anchor" href="#作为函数方法调用函数" aria-hidden="true">#</a> 作为函数方法调用函数</h2><p>在 JavaScript 中, 函数是对象。JavaScript 函数有它的属性和方法。</p><p><strong>call()</strong> 和 <strong>apply()</strong> 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">myFunction</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 返回 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">myFunction</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span> myArray<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 返回 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个方法都使用了对象本身作为第一个参数。 两者的区别在于第二个参数： apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。</p><p>在 JavaScript 严格模式(strict mode)下, 在调用函数时第一个参数会成为 <strong>this</strong> 的值， 即使该参数不是一个对象。</p><p>在 JavaScript 非严格模式(non-strict mode)下, 如果第一个参数的值是 null 或 undefined, 它将使用全局对象替代。</p><h2 id="onload-和-onunload-事件" tabindex="-1"><a class="header-anchor" href="#onload-和-onunload-事件" aria-hidden="true">#</a> onload 和 onunload 事件</h2><ol><li>onload 和 onunload 事件会在用户进入或离开页面时被触发</li><li>onload 事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本</li><li>onload 和 onunload 事件可用于处理 cookie</li></ol><h2 id="html-dom-事件监听器" tabindex="-1"><a class="header-anchor" href="#html-dom-事件监听器" aria-hidden="true">#</a> HTML DOM 事件监听器</h2><ol><li>addEventListener() 方法用于向指定元素添加事件句柄。</li><li>addEventListener() 方法添加的事件句柄不会覆盖已存在的事件句柄。</li><li>你可以向一个元素添加多个事件句柄。</li><li>你可以向同个元素添加多个同类型的事件句柄，如：两个 &quot;click&quot; 事件。</li><li>你可以向任何 DOM 对象添加事件监听，不仅仅是 HTML 元素。如： window 对象。</li><li>addEventListener() 方法可以更简单的控制事件（冒泡与捕获）。</li><li>当你使用 addEventListener() 方法时, JavaScript 从 HTML 标记中分离开来，可读性更强， 在没有控制HTML标记时也可以添加事件监听。</li><li>你可以使用 removeEventListener() 方法来移除事件的监听。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">,</span> useCapture<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第一个参数是事件的类型 (如 &quot;click&quot; 或 &quot;mousedown&quot;)</p><p>第二个参数是事件触发后调用的函数</p><p>第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的</p><p>注意:不要使用 &quot;on&quot; 前缀。 例如，使用 &quot;click&quot; ,而不是使用 &quot;onclick&quot;</p><h2 id="创建-javascript-对象" tabindex="-1"><a class="header-anchor" href="#创建-javascript-对象" aria-hidden="true">#</a> 创建 JavaScript 对象</h2><p>通过 JavaScript，您能够定义并创建自己的对象。</p><p>创建新对象有两种不同的方法：</p><ul><li>定义并创建对象的实例</li><li>使用函数来定义对象，然后创建新的对象实例</li></ul><h2 id="window-对象" tabindex="-1"><a class="header-anchor" href="#window-对象" aria-hidden="true">#</a> Window 对象</h2><p>所有浏览器都支持 window 对象。它表示浏览器窗口</p><p>所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员</p><ol><li><p>全局变量是 window 对象的属性（甚至 HTML DOM 的 document 也是 window 对象的属性之一）</p></li><li><p>全局函数是 window 对象的方法</p></li></ol><h3 id="window-子对象" tabindex="-1"><a class="header-anchor" href="#window-子对象" aria-hidden="true">#</a> Window 子对象</h3><p>Window的子对象主要有如下几个：</p><ol><li>JavaScript document 对象</li><li>JavaScript frames 对象</li><li>JavaScript history 对象</li><li>JavaScript location 对象</li><li>JavaScript navigator 对象</li><li>JavaScript screen 对象</li></ol><h3 id="window-尺寸" tabindex="-1"><a class="header-anchor" href="#window-尺寸" aria-hidden="true">#</a> Window 尺寸</h3><p>有三种方法能够确定浏览器窗口的尺寸（浏览器的窗口，不包括工具栏和滚动条）。</p><p>对于Internet Explorer、Chrome、Firefox、Opera 以及 Safari：</p><ul><li>window.innerHeight - 浏览器窗口的内部高度</li><li>window.innerWidth - 浏览器窗口的内部宽度</li></ul><p>对于 Internet Explorer 8、7、6、5：</p><ul><li>document.documentElement.clientHeight</li><li>document.documentElement.clientWidth</li></ul><p>或者</p><ul><li>document.body.clientHeight</li><li>document.body.clientWidth</li></ul><p>实用的 JavaScript 方案（涵盖所有浏览器）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> w<span class="token operator">=</span>window<span class="token punctuation">.</span>innerWidth
<span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth
<span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>

<span class="token keyword">var</span> h<span class="token operator">=</span>window<span class="token punctuation">.</span>innerHeight
<span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight
<span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="window-screen" tabindex="-1"><a class="header-anchor" href="#window-screen" aria-hidden="true">#</a> Window Screen</h3><p><strong>window.screen</strong>对象在编写时可以不使用 window 这个前缀。</p><p>一些属性：</p><ul><li>screen.availWidth - 可用的屏幕宽度</li><li>screen.availHeight - 可用的屏幕高度</li></ul><h3 id="window-location" tabindex="-1"><a class="header-anchor" href="#window-location" aria-hidden="true">#</a> Window Location</h3><p><strong>window.location</strong> 对象在编写时可不使用 window 这个前缀。 一些例子：</p><p>一些实例:</p>`,75),v={href:"https://www.w3cschool.cn/jsref/prop-loc-hostname.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.w3cschool.cn/jsref/prop-loc-pathname.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.w3cschool.cn/jsref/prop-loc-port.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.w3cschool.cn/jsref/prop-loc-protocol.html",target:"_blank",rel:"noopener noreferrer"},b=n("h3",{id:"window-location-href",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#window-location-href","aria-hidden":"true"},"#"),a(" Window Location Href")],-1),f=n("p",null,"location.href 属性返回当前页面的 URL",-1),_=n("h3",{id:"window-history",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#window-history","aria-hidden":"true"},"#"),a(" Window History")],-1),y=n("p",null,[n("strong",null,"window.history"),a("对象在编写时可不使用 window 这个前缀。")],-1),x=n("p",null,"为了保护用户隐私，对 JavaScript 访问该对象的方法做出了限制。",-1),j=n("p",null,"一些方法：",-1),q={href:"https://www.w3cschool.cn/jsref/met-his-back.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.w3cschool.cn/jsref/met-his-forward.html",target:"_blank",rel:"noopener noreferrer"},S=i(`<h3 id="window-navigator" tabindex="-1"><a class="header-anchor" href="#window-navigator" aria-hidden="true">#</a> Window Navigator</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>txt <span class="token operator">=</span> <span class="token string">&quot;&lt;p&gt;Browser CodeName: &quot;</span> <span class="token operator">+</span> navigator<span class="token punctuation">.</span>appCodeName <span class="token operator">+</span> <span class="token string">&quot;&lt;/p&gt;&quot;</span><span class="token punctuation">;</span>
txt<span class="token operator">+=</span> <span class="token string">&quot;&lt;p&gt;Browser Name: &quot;</span> <span class="token operator">+</span> navigator<span class="token punctuation">.</span>appName <span class="token operator">+</span> <span class="token string">&quot;&lt;/p&gt;&quot;</span><span class="token punctuation">;</span>
txt<span class="token operator">+=</span> <span class="token string">&quot;&lt;p&gt;Browser Version: &quot;</span> <span class="token operator">+</span> navigator<span class="token punctuation">.</span>appVersion <span class="token operator">+</span> <span class="token string">&quot;&lt;/p&gt;&quot;</span><span class="token punctuation">;</span>
txt<span class="token operator">+=</span> <span class="token string">&quot;&lt;p&gt;Cookies Enabled: &quot;</span> <span class="token operator">+</span> navigator<span class="token punctuation">.</span>cookieEnabled <span class="token operator">+</span> <span class="token string">&quot;&lt;/p&gt;&quot;</span><span class="token punctuation">;</span>
txt<span class="token operator">+=</span> <span class="token string">&quot;&lt;p&gt;Platform: &quot;</span> <span class="token operator">+</span> navigator<span class="token punctuation">.</span>platform <span class="token operator">+</span> <span class="token string">&quot;&lt;/p&gt;&quot;</span><span class="token punctuation">;</span>
txt<span class="token operator">+=</span> <span class="token string">&quot;&lt;p&gt;User-agent header: &quot;</span> <span class="token operator">+</span> navigator<span class="token punctuation">.</span>userAgent <span class="token operator">+</span> <span class="token string">&quot;&lt;/p&gt;&quot;</span><span class="token punctuation">;</span>
txt<span class="token operator">+=</span> <span class="token string">&quot;&lt;p&gt;User-agent language: &quot;</span> <span class="token operator">+</span> navigator<span class="token punctuation">.</span>systemLanguage <span class="token operator">+</span> <span class="token string">&quot;&lt;/p&gt;&quot;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;example&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>txt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来自 navigator 对象的信息具有误导性，不应该被用于检测浏览器版本，这是因为：</p><ul><li>navigator 数据可被浏览器使用者更改</li><li>一些浏览器对测试站点会识别错误</li><li>浏览器无法报告晚于浏览器发布的新操作系统</li></ul><p>由于 navigator 可误导浏览器检测，使用对象检测可用来嗅探不同的浏览器</p><p>由于不同的浏览器支持不同的对象，您可以使用对象来检测浏览器。例如，由于只有 Opera 支持属性 &quot;window.opera&quot;，您可以据此识别出 Opera。</p>`,6),J=n("p",{"css-module":".some","action...":""},"例子：if (window.opera)",-1),L=n("h2",{id:"javascript-计时事件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#javascript-计时事件","aria-hidden":"true"},"#"),a(" JavaScript 计时事件")],-1),H=n("p",null,"通过使用 JavaScript，我们有能力做到在一个设定的时间间隔之后来执行代码，而不是在函数被调用后立即执行。我们称之为计时事件。",-1),T=n("p",null,"在 JavaScritp 中使用计时事件是很容易的，两个关键方法是:",-1),W={href:"https://www.w3cschool.cn/jsref/met-win-setinterval.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://www.w3cschool.cn/jsref/met-win-settimeout.html",target:"_blank",rel:"noopener noreferrer"},E=i(`<p><strong>Note:</strong> setInterval() 和 setTimeout() 是 HTML DOM Window对象的两个方法</p><p>clearInterval() 方法用于停止 setInterval() 方法执行的函数代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalVariable<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>clearTimeout() 方法用于停止执行setTimeout()方法的函数代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutVariable<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="javascript-cookies" tabindex="-1"><a class="header-anchor" href="#javascript-cookies" aria-hidden="true">#</a> JavaScript Cookies</h2><p>Cookies 是一些数据, 存储于你电脑上的文本文件中</p><p>当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息</p><p>Cookies 的作用就是用于解决 &quot;如何记录客户端的用户信息&quot;:</p><ul><li>当用户访问 web 页面时，他的名字可以记录在 cookie 中</li><li>在用户下一次访问该页面时，可以在 cookie 中读取用户访问记录</li></ul><p>JavaScript 可以使用 <strong>document.cookie</strong> 属性来创建 、读取、及删除 cookies</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>cookie<span class="token operator">=</span><span class="token string">&quot;username=John Doe&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><p>javascript:void(0);代表什么都不执行，其实就是不返回任何值，但是 void 中的内容还是会执行的，比如 javascript:void(alert(&#39;点击&#39;)); 就会弹出提示</p><h3 id="html-语义化" tabindex="-1"><a class="header-anchor" href="#html-语义化" aria-hidden="true">#</a> HTML 语义化</h3><div class="table-wrapper"><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;header&gt;</code></td><td>定义页面的页眉，通常包含网站的标题和导航栏</td></tr><tr><td><code>&lt;nav&gt;</code></td><td>定义页面的导航链接</td></tr><tr><td><code>&lt;main&gt;</code></td><td>定义页面的主要内容区域</td></tr><tr><td><code>&lt;article&gt;</code></td><td>定义一篇独立的文章或内容块</td></tr><tr><td><code>&lt;section&gt;</code></td><td>定义文档中的一个章节</td></tr><tr><td><code>&lt;aside&gt;</code></td><td>定义页面的侧边栏内容</td></tr><tr><td><code>&lt;footer&gt;</code></td><td>定义页面的页脚，通常包含版权信息和联系方式</td></tr><tr><td><code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code></td><td>定义标题，从大到小表示标题的级别</td></tr><tr><td><code>&lt;p&gt;</code></td><td>定义一个段落</td></tr><tr><td><code>&lt;ul&gt;</code></td><td>定义一个无序列表</td></tr><tr><td><code>&lt;ol&gt;</code></td><td>定义一个有序列表</td></tr><tr><td><code>&lt;li&gt;</code></td><td>定义列表中的一项</td></tr><tr><td><code>&lt;img&gt;</code></td><td>定义一个图像</td></tr><tr><td><code>&lt;a&gt;</code></td><td>定义一个链接</td></tr><tr><td><code>&lt;strong&gt;</code></td><td>定义加粗文本</td></tr><tr><td><code>&lt;em&gt;</code></td><td>定义强调文本</td></tr><tr><td><code>&lt;blockquote&gt;</code></td><td>定义一个长的引用</td></tr><tr><td><code>&lt;cite&gt;</code></td><td>定义一段引文</td></tr><tr><td><code>&lt;code&gt;</code></td><td>定义计算机代码</td></tr><tr><td><code>&lt;pre&gt;</code></td><td>定义预格式文本</td></tr></tbody></table></div>`,16);function B(D,N){const s=l("router-link"),o=l("ExternalLinkIcon");return c(),r("div",null,[u,n("nav",h,[n("ul",null,[n("li",null,[t(s,{to:"#js-基础知识"},{default:e(()=>[a("JS 基础知识")]),_:1}),n("ul",null,[n("li",null,[t(s,{to:"#dom-和-bom"},{default:e(()=>[a("Dom 和 BOM")]),_:1})]),n("li",null,[t(s,{to:"#windows-和-document"},{default:e(()=>[a("Windows 和 Document")]),_:1})]),n("li",null,[t(s,{to:"#js-数据类型"},{default:e(()=>[a("Js 数据类型")]),_:1})]),n("li",null,[t(s,{to:"#js-对象类型"},{default:e(()=>[a("Js 对象类型")]),_:1})]),n("li",null,[t(s,{to:"#html-事件"},{default:e(()=>[a("HTML 事件")]),_:1})]),n("li",null,[t(s,{to:"#arguments-对象"},{default:e(()=>[a("Arguments 对象")]),_:1})]),n("li",null,[t(s,{to:"#调用-javascript-函数"},{default:e(()=>[a("调用 JavaScript 函数")]),_:1})]),n("li",null,[t(s,{to:"#作为函数方法调用函数"},{default:e(()=>[a("作为函数方法调用函数")]),_:1})]),n("li",null,[t(s,{to:"#onload-和-onunload-事件"},{default:e(()=>[a("onload 和 onunload 事件")]),_:1})]),n("li",null,[t(s,{to:"#html-dom-事件监听器"},{default:e(()=>[a("HTML DOM 事件监听器")]),_:1})]),n("li",null,[t(s,{to:"#创建-javascript-对象"},{default:e(()=>[a("创建 JavaScript 对象")]),_:1})]),n("li",null,[t(s,{to:"#window-对象"},{default:e(()=>[a("Window 对象")]),_:1}),n("ul",null,[n("li",null,[t(s,{to:"#window-子对象"},{default:e(()=>[a("Window 子对象")]),_:1})]),n("li",null,[t(s,{to:"#window-尺寸"},{default:e(()=>[a("Window 尺寸")]),_:1})]),n("li",null,[t(s,{to:"#window-screen"},{default:e(()=>[a("Window Screen")]),_:1})]),n("li",null,[t(s,{to:"#window-location"},{default:e(()=>[a("Window Location")]),_:1})]),n("li",null,[t(s,{to:"#window-location-href"},{default:e(()=>[a("Window Location Href")]),_:1})]),n("li",null,[t(s,{to:"#window-history"},{default:e(()=>[a("Window History")]),_:1})]),n("li",null,[t(s,{to:"#window-navigator"},{default:e(()=>[a("Window Navigator")]),_:1})])])]),n("li",null,[t(s,{to:"#javascript-计时事件"},{default:e(()=>[a("JavaScript 计时事件")]),_:1})]),n("li",null,[t(s,{to:"#javascript-cookies"},{default:e(()=>[a("JavaScript Cookies")]),_:1})]),n("li",null,[t(s,{to:"#其他"},{default:e(()=>[a("其他")]),_:1}),n("ul",null,[n("li",null,[t(s,{to:"#html-语义化"},{default:e(()=>[a("HTML 语义化")]),_:1})])])])])])])]),k,n("ul",null,[n("li",null,[n("a",v,[a("location.hostname"),t(o)]),a(" 返回 web 主机的域名")]),n("li",null,[n("a",m,[a("location.pathname"),t(o)]),a(" 返回当前页面的路径和文件名")]),n("li",null,[n("a",w,[a("location.port"),t(o)]),a(" 返回 web 主机的端口 （80 或 443）")]),n("li",null,[n("a",g,[a("location.protocol"),t(o)]),a(" 返回所使用的 web 协议（http:// 或 https://）")])]),b,f,_,y,x,j,n("ul",null,[n("li",null,[n("a",q,[a("history.back()"),t(o)]),a(" - 与在浏览器点击后退按钮相同")]),n("li",null,[n("a",M,[a("history.forward()"),t(o)]),a(" - 与在浏览器中点击向前按钮向前相同")])]),S,J,L,H,T,n("ul",null,[n("li",null,[n("a",W,[a("setInterval() "),t(o)]),a("- 间隔指定的毫秒数不停地执行指定的代码。")]),n("li",null,[n("a",O,[a("setTimeout() "),t(o)]),a("- 暂停指定的毫秒数后执行指定的代码")])]),E])}const F=p(d,[["render",B],["__file","Js基础知识.html.vue"]]);export{F as default};
