import{_ as s,Q as d,S as u,U as l,W as a,X as e,a8 as i,a9 as r,H as o}from"./framework-d7e1aa10.js";const c={},h=l("h1",{id:"jvm-架构模型",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#jvm-架构模型","aria-hidden":"true"},"#"),i(" JVM 架构模型")],-1),p={class:"table-of-contents"},_=r('<p>JVM 的具体实现常见的有：</p><blockquote><p>标 * 的是最常用的三大虚拟机</p></blockquote><ul><li>*Hotspot（最常用，在各个平台都有涉及）</li><li>*Jrocket（曾经号称最快，专注于服务器端，后来部分特性并入 Hotspot）</li><li>*J9（IBM 自己的 VM 实现）</li><li>TaobaoVM（Hotspot 定制版，大型厂商使用）</li><li>LiquidVM（直接对接硬件）</li><li>Zing（垃圾回收最快，回收算法之后被并入了 Hotspot）</li></ul><p>注：Hotspot 访问对象采用的是直接指针访问（不是用句柄池）</p><h2 id="java-编译器" tabindex="-1"><a class="header-anchor" href="#java-编译器" aria-hidden="true">#</a> Java 编译器</h2><p>Java 编译器（hotspot）输入的指令流是基于「栈」的指令集架构，还有一种是基于「寄存器」的指令集架构</p><p><strong>基于栈的架构的特点：</strong></p><ul><li>设计和实现简单，适用于资源受限的系统</li><li>避开了寄存器分配难题，可以直接使用零地址指令分配方式</li><li>指令流中的指令操作过程依赖于操作栈，指令集更小，编译器实现更容易</li><li>不需要硬件支持，可移植性更好，更好实现跨平台</li></ul><p><strong>基于寄存器架构的特点：</strong></p><ul><li>典型的应用是 x86 的二进制指令集：比如传统的 PC 以及 Android 的 Davlik 虚拟机</li><li>指令集架构则完全依赖硬件，可移植性差</li><li>性能优秀和执行更高效</li><li>花费更少的指令去完成一项操作</li><li>在大部分情况下，基于寄存器架构的指令集往往都以一地址指令、二地址指令和三地址指令为主，而基于栈式架构的指令集却是以零地址指令为主</li></ul><h2 id="jvm-的生命周期" tabindex="-1"><a class="header-anchor" href="#jvm-的生命周期" aria-hidden="true">#</a> JVM 的生命周期</h2><h3 id="启动" tabindex="-1"><a class="header-anchor" href="#启动" aria-hidden="true">#</a> 启动</h3><ul><li>Java虚拟机的启动是通过引导类加载器（bootstrap class loader）创建一个初始类（initial class）来完成的</li><li>这个类是由虚拟机的具体实现指定的</li></ul><h3 id="执行" tabindex="-1"><a class="header-anchor" href="#执行" aria-hidden="true">#</a> 执行</h3><ul><li>一个运行中的Java虚拟机有着一个清晰的任务∶执行Java程序</li><li>程序开始执行时他才运行，程序结束时他就停止</li><li>执行一个所谓的 Java 程序的时候，真真正正在执行的是一个叫做 Java 虚拟机的进程。</li></ul><h3 id="退出" tabindex="-1"><a class="header-anchor" href="#退出" aria-hidden="true">#</a> 退出</h3><ul><li>程序在执行过程中遇到了异常或错误而异常终止</li><li>由于操作系统出现错误而导致Java虚拟机进程终止</li><li>某线程调用 Runtime 类或 System 类的 exit 方法，或 Runtime 类的 halt 方法，并且 Java 安全管理器也允许这次 exit 或 halt 操作</li><li>除此之外，JNI（ Uava Native Interface）规范描述了用 JNI Invocation API 来加载或卸载 Java 虚拟机时，Java虚拟机的退出情况</li></ul><h2 id="类加载器" tabindex="-1"><a class="header-anchor" href="#类加载器" aria-hidden="true">#</a> 类加载器</h2>',18),f={class:"hint-container info"},g=l("p",{class:"hint-container-title"},"相关文章",-1),v={href:"https://zhuanlan.zhihu.com/p/142614439",target:"_blank",rel:"noopener noreferrer"},J={href:"https://blog.csdn.net/qq_41563912/article/details/116642556",target:"_blank",rel:"noopener noreferrer"},x={href:"https://blog.csdn.net/qq_41563912/article/details/118028251?spm=1001.2014.3001.5501",target:"_blank",rel:"noopener noreferrer"},b=r('<ul><li><p>负责从文件系统或网络中加载 Class 文件（Class 文件头有特定的标识）</p></li><li><p>ClassLoader 只负责 Class 文件的加载，是否能执行由执行引擎决定</p></li><li><p>加载的类信息存放在「方法区」中</p></li><li><p>Class 文件是存储在磁盘上的，而 JVM 中实例化对象是需要模板的，ClassLoader 就是将 Class 文件转换成二进制模板（DNA 元数据模板，在方法区中）</p></li><li><p>类加载分为三个过程：</p><ul><li>加载</li><li>链接</li><li>初始化</li></ul></li></ul><p><strong>加载 Class 文件的方式：</strong></p><ul><li><p>从本地系统中直接加载</p></li><li><p>通过网络获取（Applet）</p></li><li><p>从 zip 压缩包中读取（例如读取 jar、war 包）</p></li><li><p>运行时动态生成（动态代理）</p></li><li><p>由其他文件生成（JSP）</p></li><li><p>从专有数据库中提取 Class 文件</p></li><li><p>从加密文件中获取（防止 Class 文件被反编译的保护措施）</p></li></ul><h3 id="加载" tabindex="-1"><a class="header-anchor" href="#加载" aria-hidden="true">#</a> 加载</h3><ul><li>通过一个类的「全限定名」获取该类的二进制流文件</li><li>将这个字节流代表的「静态存储结构」转化为方法区的「运行时数据结构」</li><li>在内存中生成一个代表这个类的 <code>Java.lang.Class</code> 对象，作为方法区中这个类的各种数据的「访问入口」</li></ul><h3 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h3><p><strong>验证：</strong></p><ul><li>确保 Class 文件字节流信息符合当前虚拟机实现的要求，保证类加载安全的同时，不会危害到虚拟机自身的安全</li><li>主要包括四种验证： <ul><li>文件格式验证</li><li>元数据验证</li><li>字节码验证</li><li>符号引用验证</li></ul></li></ul><p><strong>准备：</strong></p><ul><li>为类「分配内存」并设置该类的成员变量的「初始值为零值」（不包含用 final 修饰的 static 变量，因为 final 变量在编译的时候就分配了内存，在准备阶段会显示的初始化）</li><li>该阶段不会为实例变量初始化，类的变量会分配在方法区中，而实例变量会随实例对象一起分配在 Java 堆中</li></ul><p><strong>解析：</strong></p><ul><li>符号引用：用一组符号来描述所引用的目标，符号引用的「字面量形式」定义在 Class 文件中</li><li>直接引用：直接指向目标的指针、相对偏移量、间接定位到目标的句柄</li><li>解析就是将常量池中的「符号引用」转换为「直接引用」的过程</li><li>解析操作一般是 JVM 在执行完初始化操作后再执行的</li><li>解析动作主要针对「类」、「接口」、「字段」、「类方法」、「接口方法」、「方法类型」等。这些对应着常量池中的：<code>CONSTANT_CLass_info</code>、<code>CONSTANT_Fieldref_info</code>、<code>CONSTANT_Methodref_info</code> 等字段</li></ul><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><ul><li><p>初始化阶段执行类构造器方法：<code>&lt;clinit&gt;()</code> 过程</p></li><li><p>此方法不用定义，由 javac 编译器自动收集类中的所有「类变量」的赋值动作和「静态代码块」中的语句而合并来的（构造器方法是「虚拟机」视角下的 <code>&lt;init&gt;()</code> ）</p></li><li><p>构造器方法中指令按语句再源文件中出现的顺序执行</p></li><li><p>若该类具有父类，那么 JVM 会保证子类的 <code>&lt;clinit&gt;()</code> 方法执行前先执行完父类的 <code>&lt;clinit&gt;()</code></p></li><li><p>虚拟机必须保证一个类的 <code>&lt;clinit&gt;()</code> 方法在多线程下被「同步加锁」</p></li></ul><h2 id="类加载器的分类" tabindex="-1"><a class="header-anchor" href="#类加载器的分类" aria-hidden="true">#</a> 类加载器的分类</h2><blockquote><p>分为引导类加载器（Bootstrap ClassLoader，使用 C 语言实现）和自定义类加载器（User-Defined ClassLoader，使用 Java 实现）</p></blockquote><ul><li>自定义类加载器一般是由开发人员自定义的</li><li>但是 JVM 规范是将所有「派生于」ClassLoader 的类加载器都划分为自定义加载器</li><li>但是无论怎么划分，最常见的类加载器只有三种： <ul><li>Bootstrap ClassLoader（加载 Java 核心 API 中的类，该类加载器无法获取）</li><li>Extension ClassLoader（加载 <code>java.ext.dirs</code> 和 <code>jre/lib/ext</code> 中的类）</li><li>System ClassLoader（如：Application ClassLoader，加载程序中的自定义类）</li></ul></li><li>不同的类加载器之间的关系是「包含关系」</li></ul><p><strong>自定义类加载器的作用：</strong></p><ul><li>隔离加载类</li><li>修改类加载的方式</li><li>扩展加载源</li><li>防止源码泄露</li></ul><h3 id="双亲委派" tabindex="-1"><a class="header-anchor" href="#双亲委派" aria-hidden="true">#</a> 双亲委派</h3><ul><li>一种任务委派模式，把请求交给父类处理</li><li>JVM 对 Class 文件采用的是「按需加载」的加载方式，而在加载时就会使用双亲委派机制</li></ul><p><strong>工作原理：</strong></p><ul><li>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是会把这个请求委托给父类的加载器去执行</li><li>如果父类加载器还存在其父类加载器，则会进一步向上委托，以此递归，请求最终会到达顶层的启动类加载器</li><li>如果父类加载器可以完成类加载任务，就返回成功，倘若无法完成才会让子加载器尝试自己加载</li></ul><p><strong>双亲委派的优势：</strong></p><ul><li>可以避免类重复加载</li><li>可以保护程序安全，防止核心 API 被随意篡改（沙箱安全机制）</li></ul><h3 id="类的主动-被动使用" tabindex="-1"><a class="header-anchor" href="#类的主动-被动使用" aria-hidden="true">#</a> 类的主动/被动使用</h3><p><strong>JVM 中两个 Class 对象是否为同一个类的两个必要条件：</strong></p><ul><li>类的完整类名必须一致，包括包名</li><li>加载这个类的 ClassLoader 实例对象必须相同</li><li>因此，即使两个类对象来源于同一个 Class 文件，被同一个虚拟机加载，但是只要加载它们的 ClassLoader 实例不一样，那么这两个对象就不相等</li></ul><p><strong>类加载器的引用：</strong></p><ul><li>JVM 必须知道一个类是由启动加载器加载的还是由用户加载器加载的</li><li>如果一个类是由用户加载器加载的，那么 JVM 会将这个类加载器的一个「引用」作为类型信息的一部分「保存在方法区中」</li><li>当解析到一个类到另一个类的引用的时候，JVM 需要保证这两个类的加载器是相同的</li></ul><p><strong>主动使用类（7）：</strong></p><ul><li>创建类的实例</li><li>访问某个类或接口的静态变量，或者对该静态变量赋值</li><li>调用类的静态方法</li><li>反射</li><li>初始化一个类的子类</li><li>JVM 启动时被标明为启动类的类</li><li><code>java.lang.invoke.MethodHandle</code> 实例的解析结果</li></ul><p>注：除了以上 7 中情况，其他使用类的方式都被看作是对类的「被动使用」，都不会导致「类的初始化」</p><h2 id="对象创建" tabindex="-1"><a class="header-anchor" href="#对象创建" aria-hidden="true">#</a> 对象创建</h2><h3 id="创建方式" tabindex="-1"><a class="header-anchor" href="#创建方式" aria-hidden="true">#</a> 创建方式</h3><blockquote><p>五种创建方式</p></blockquote><div class="table-wrapper"><table><thead><tr><th style="text-align:center;">方式</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">使用new关键字</td><td style="text-align:center;">调用了构造函数</td></tr><tr><td style="text-align:center;">使用Class的newInstance方法</td><td style="text-align:center;">调用了构造函数</td></tr><tr><td style="text-align:center;">使用Constructor类的newInstance方法</td><td style="text-align:center;">调用了构造函数</td></tr><tr><td style="text-align:center;">使用clone方法</td><td style="text-align:center;">没有调用构造函数</td></tr><tr><td style="text-align:center;">使用反序列化</td><td style="text-align:center;">没有调用构造函数</td></tr></tbody></table></div><h3 id="分配内存" tabindex="-1"><a class="header-anchor" href="#分配内存" aria-hidden="true">#</a> 分配内存</h3><blockquote><p>Java 堆是否规整是由所采用的垃圾收集器是否带有压缩整理功能决定的</p></blockquote><p><strong>指针碰撞：</strong></p><ul><li>前提：Java 堆内存是规整的，所有已用的空间都是紧挨着的</li><li>分配内存时将位于中间的指针指示器向空闲的内存移动一段与对象大小相等的距离，这样就可以完成内存分配</li></ul><p><strong>空闲列表：</strong></p><ul><li>前提：Java 堆内存不是规整的，需要由虚拟机维护一个列表来记录哪些内存是可用的</li><li>分配内存时从列表中查询到足够大的内存就分配给对象，分配后更新列表</li></ul>',43);function C(V,M){const t=o("router-link"),n=o("ExternalLinkIcon");return d(),u("div",null,[h,l("nav",p,[l("ul",null,[l("li",null,[a(t,{to:"#jvm-架构模型"},{default:e(()=>[i("JVM 架构模型")]),_:1}),l("ul",null,[l("li",null,[a(t,{to:"#java-编译器"},{default:e(()=>[i("Java 编译器")]),_:1})]),l("li",null,[a(t,{to:"#jvm-的生命周期"},{default:e(()=>[i("JVM 的生命周期")]),_:1}),l("ul",null,[l("li",null,[a(t,{to:"#启动"},{default:e(()=>[i("启动")]),_:1})]),l("li",null,[a(t,{to:"#执行"},{default:e(()=>[i("执行")]),_:1})]),l("li",null,[a(t,{to:"#退出"},{default:e(()=>[i("退出")]),_:1})])])]),l("li",null,[a(t,{to:"#类加载器"},{default:e(()=>[i("类加载器")]),_:1}),l("ul",null,[l("li",null,[a(t,{to:"#加载"},{default:e(()=>[i("加载")]),_:1})]),l("li",null,[a(t,{to:"#链接"},{default:e(()=>[i("链接")]),_:1})]),l("li",null,[a(t,{to:"#初始化"},{default:e(()=>[i("初始化")]),_:1})])])]),l("li",null,[a(t,{to:"#类加载器的分类"},{default:e(()=>[i("类加载器的分类")]),_:1}),l("ul",null,[l("li",null,[a(t,{to:"#双亲委派"},{default:e(()=>[i("双亲委派")]),_:1})]),l("li",null,[a(t,{to:"#类的主动-被动使用"},{default:e(()=>[i("类的主动/被动使用")]),_:1})])])]),l("li",null,[a(t,{to:"#对象创建"},{default:e(()=>[i("对象创建")]),_:1}),l("ul",null,[l("li",null,[a(t,{to:"#创建方式"},{default:e(()=>[i("创建方式")]),_:1})]),l("li",null,[a(t,{to:"#分配内存"},{default:e(()=>[i("分配内存")]),_:1})])])])])])])]),_,l("div",f,[g,l("ol",null,[l("li",null,[l("a",v,[i("JVM基础（三）一个对象的创建过程"),a(n)])]),l("li",null,[l("a",J,[i("请你说说Java类的加载过程"),a(n)])]),l("li",null,[l("a",x,[i("面试干货4——你对Java类加载器(自定义类加载器)有了解吗？"),a(n)])])])]),b])}const k=s(c,[["render",C],["__file","A-JVM架构模型.html.vue"]]);export{k as default};
