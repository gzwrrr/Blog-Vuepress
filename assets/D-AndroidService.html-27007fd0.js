import{_ as n,Q as s,S as d,U as e,W as a,X as i,a8 as o,a9 as t,H as l}from"./framework-d7e1aa10.js";const c={},p=e("h1",{id:"android-service",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#android-service","aria-hidden":"true"},"#"),o(" Android Service")],-1),u={class:"table-of-contents"},g=t('<blockquote><p>在很早之前，Android系统的后台功能是非常开放的，Service的优先级也很高，仅次于Activity，那个时候可以在Service中做很多事情。但由于后台功能太过于开放，每个应用都想无限地占用后台资源，导致手机的内存越来越紧张，耗电越来越快，也变得越来越卡。为了解决这些情况，基本上Android系统每发布一个新版本，后台权限都会被进一步收紧。</p></blockquote><p>核心方法：</p><ol><li><p><code>onBind()</code></p></li><li><p><code>onCreate()</code></p></li><li><p><code>onStartCommand()</code></p></li><li><p><code>onDestroy()</code></p></li></ol><h3 id="异步消息处理" tabindex="-1"><a class="header-anchor" href="#异步消息处理" aria-hidden="true">#</a> 异步消息处理</h3><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//android/20231002/android异步消息原理.png" alt="image-20230922154930504" tabindex="0" loading="lazy"><figcaption>image-20230922154930504</figcaption></figure><p>Android中的异步消息处理主要由4个部分组成：Message、Handler、MessageQueue和Looper：</p><ol><li><strong>Message</strong>：Message是在线程之间传递的消息，它可以在内部携带少量的信息，用于在不同线程之间传递数据。上一小节中我们使用到了Message的what字段，除此之外还可以使用arg1和arg2字段来携带一些整型数据，使用obj字段携带一个Object对象。</li><li><strong>Handler</strong>：Handler顾名思义也就是处理者的意思，它主要是用于发送和处理消息的。发送消息一般是使用Handler的sendMessage()方法、post()方法等，而发出的消息经过一系列地辗转处理后，最终会传递到Handler的handleMessage()方法中。</li><li><strong>MessageQueue</strong>：MessageQueue是消息队列的意思，它主要用于存放所有通过Handler发送的消息。这部分消息会一直存在于消息队列中，等待被处理。每个线程中只会有一个MessageQueue对象。</li><li><strong>Looper</strong>：Looper 是每个线程中的MessageQueue的管家，调用Looper的loop()方法后，就会进入一个无限循环当中，然后每当发现MessageQueue中存在一条消息时，就会将它取出，并传递到Handler的handleMessage()方法中。每个线程中只会有一个Looper对象。</li></ol><h3 id="前台-service" tabindex="-1"><a class="header-anchor" href="#前台-service" aria-hidden="true">#</a> 前台 Service</h3><p>Service中的代码都是默认运行在主线程当中的，如果直接在Service里处理一些耗时的逻辑，就很容易出现ANR（Application Not Responding）的情况。</p><p>从Android 8.0系统开始，只有当应用保持在前台可见状态的情况下，Service才能保证稳定运行，一旦应用进入后台之后，Service随时都有可能被系统回收。而如果你希望Service能够一直保持运行状态，就可以考虑使用前台Service。</p><p>前台Service和普通Service最大的区别就在于，它一直会有一个正在运行的图标在系统的状态栏显示，下拉状态栏后可以看到更加详细的信息，非常类似于通知的效果。</p>',11);function h(v,_){const r=l("router-link");return s(),d("div",null,[p,e("nav",u,[e("ul",null,[e("li",null,[a(r,{to:"#android-service"},{default:i(()=>[o("Android Service")]),_:1}),e("ul",null,[e("li",null,[a(r,{to:"#异步消息处理"},{default:i(()=>[o("异步消息处理")]),_:1})]),e("li",null,[a(r,{to:"#前台-service"},{default:i(()=>[o("前台 Service")]),_:1})])])])])]),g])}const f=n(c,[["render",h],["__file","D-AndroidService.html.vue"]]);export{f as default};
