import{_ as t,Q as i,S as n,a9 as r}from"./framework-d7e1aa10.js";const e={},l=r('<h1 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡" aria-hidden="true">#</a> 负载均衡</h1><p><strong>负载均衡算法：</strong></p><ol><li><p><strong>轮询法</strong>：将请求按顺序轮流地分配到后端服务器上，它均衡地对待后端的每一台服务器，而不关心服务器实际的连接数和当前的系统负载。</p></li><li><p><strong>随机法</strong>：通过系统的随机算法，根据后端服务器的列表大小值来随机选取其中的一台服务器进行访问。由概率统计理论可以得知，随着客户端调用服务端的次数增多，其实际效果越来越接近于平均分配调用量到后端的每一台服务器，也就是轮询的结果。</p></li><li><p><strong>源地址哈希法</strong>：源地址哈希的思想是根据获取客户端的IP地址，通过哈希函数计算得到的一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是客服端要访问服务器的序号。采用源地址哈希法进行负载均衡，同一IP地址的客户端，当后端服务器列表不变时，它每次都会映射到同一台后端服务器进行访问。</p></li><li><p><strong>加权轮询法</strong>：不同的后端服务器可能机器的配置和当前系统的负载并不相同，因此它们的抗压能力也不相同。给配置高、负载低的机器配置更高的权重，让其处理更多的请；而配置低、负载高的机器，给其分配较低的权重，降低其系统负载，加权轮询能很好地处理这一问题，并将请求顺序且按照权重分配到后端。</p></li><li><p><strong>加权随机法</strong>：与加权轮询法一样，加权随机法也根据后端机器的配置，系统的负载分配不同的权重。不同的是，它是按照权重随机请求后端服务器，而非顺序。</p></li><li><p><strong>最小连接数法</strong>：最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它是根据后端服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前的请求，尽可能地提高后端服务的利用效率，将负责合理地分流到每一台服务器。</p></li></ol><p><strong>类型主要分为：</strong></p><ol><li><p>DNS 方式实现负载均衡</p></li><li><p>硬件负载均衡：F5 和 A10</p></li><li><p>软件负载均衡：Nginx 、 HAproxy 、 LVS</p><ol><li>Nginx ：七层负载均衡，支持 HTTP、E-mail 协议，同时也支持 4 层负载均衡；</li><li>HAproxy ：支持七层规则的，性能也很不错。OpenStack 默认使用的负载均衡软件就是 HAproxy；</li><li>LVS ：运行在内核态，性能是软件负载均衡中最高的，严格来说工作在三层，所以更通用一些，适用各种应用服务。</li></ol></li></ol><h2 id="七层负载均衡" tabindex="-1"><a class="header-anchor" href="#七层负载均衡" aria-hidden="true">#</a> 七层负载均衡</h2><blockquote><p>应用层负载均衡</p></blockquote><p>七层负载均衡是指在 OSI 七层网络模型中的应用层，对客户端请求进行调度的负载均衡方式。它通过分析客户端请求的应用层协议内容，根据预设的调度策略，将请求转发到后端应用服务器上。</p><p>在七层负载均衡中，负载均衡设备不仅仅只是将请求转发到后端服务器上，还会对请求进行一些内容的检查和处理。这包括对请求头、请求参数、请求体等内容的检查，以及对请求进行协议转换、压缩、加密等处理。同时，七层负载均衡也可以根据客户端请求的特征，进行请求的路由、请求的转发、请求的过滤等操作。</p><h2 id="四层负载均衡" tabindex="-1"><a class="header-anchor" href="#四层负载均衡" aria-hidden="true">#</a> 四层负载均衡</h2><p>四层负载均衡是指在 OSI（开放系统互联）网络模型中，负载均衡器位于传输层，即第四层。四层负载均衡器根据传输层协议（如TCP/UDP）中的源IP地址、目标IP地址、源端口号、目标端口号等信息，将客户端请求分配给后端服务器进行处理。四层负载均衡器本身并不关心应用层协议，因此适用于任何支持标准网络协议的应用。</p><p>四层负载均衡器的优点是速度快、稳定可靠，因为它们仅仅转发网络流量，不需要解析应用层协议。但它也有一些局限性，例如无法实现基于HTTP/HTTPS协议的请求路由，因为这些协议需要更高级别的解析和处理。</p><h2 id="七层协议与四层协议的区别" tabindex="-1"><a class="header-anchor" href="#七层协议与四层协议的区别" aria-hidden="true">#</a> 七层协议与四层协议的区别</h2><p>七层负载均衡和四层负载均衡的主要区别在于负载均衡器的工作层次不同。</p><p>四层负载均衡器（也称为传输层负载均衡器）工作在 OSI（开放式系统互连）模型的第四层，即传输层。它主要负责根据目标 IP 地址和端口号来决定将请求分配给哪个服务器。四层负载均衡器通常使用轻量级的流水线算法来实现负载均衡。</p><p>七层负载均衡器（也称为应用层负载均衡器）工作在 OSI 模型的第七层，即应用层。它不仅可以根据 IP 地址和端口号进行负载均衡，还可以根据请求的内容来做出决策。七层负载均衡器可以解析 HTTP 请求，根据请求的 URI、Cookie、用户代理等信息来将请求路由到最佳的服务器上。七层负载均衡器通常使用基于内容的算法来实现负载均衡。</p><p>因此，四层负载均衡器只能根据目标 IP 地址和端口号进行请求分配，而七层负载均衡器可以更加智能地进行请求路由。七层负载均衡器的处理需要更多的计算和内存资源，但可以更加精确地将请求分配到最合适的服务器上。</p><h2 id="nginx-负载均衡" tabindex="-1"><a class="header-anchor" href="#nginx-负载均衡" aria-hidden="true">#</a> Nginx 负载均衡</h2><p>Nginx可以同时支持七层和四层负载均衡，具体可以根据需要进行配置。默认情况下，Nginx作为HTTP服务器时，会提供七层的负载均衡功能，可以根据请求的URL等信息将请求分发到不同的后端服务器上；而当Nginx作为TCP/UDP负载均衡器时，则提供四层负载均衡功能，可以根据IP地址和端口号等信息将请求分发到不同的后端服务器上。此外，Nginx也可以通过Lua脚本等方式进行自定义负载均衡策略的实现。</p><h3 id="常用操作" tabindex="-1"><a class="header-anchor" href="#常用操作" aria-hidden="true">#</a> 常用操作</h3><blockquote><p>Centos 下 Nginx 的常用操作</p></blockquote><div class="table-wrapper"><table><thead><tr><th>操作</th><th>命令/配置文件路径</th></tr></thead><tbody><tr><td>启动 Nginx</td><td>systemctl start nginx</td></tr><tr><td>停止 Nginx</td><td>systemctl stop nginx</td></tr><tr><td>重启 Nginx</td><td>systemctl restart nginx</td></tr><tr><td>查看 Nginx 状态</td><td>systemctl status nginx</td></tr><tr><td>设置 Nginx 开机自启动</td><td>systemctl enable nginx</td></tr><tr><td>查看 Nginx 版本</td><td>nginx -v</td></tr><tr><td>查看 Nginx 配置文件是否正确</td><td>nginx -t</td></tr><tr><td>编辑 Nginx 配置文件</td><td>/etc/nginx/nginx.conf</td></tr><tr><td>设置 Nginx 的工作进程数</td><td>/etc/nginx/nginx.conf 中的 worker_processes</td></tr><tr><td>设置 Nginx 执行用户</td><td>/etc/nginx/nginx.conf 中的 user</td></tr><tr><td>设置 Nginx 监听端口</td><td>/etc/nginx/nginx.conf 中的 listen</td></tr><tr><td>设置 Nginx 的虚拟主机</td><td>/etc/nginx/nginx.conf 中的 server</td></tr><tr><td>设置 Nginx 的负载均衡</td><td>/etc/nginx/nginx.conf 中的 upstream</td></tr><tr><td>查看 Nginx 运行日志</td><td>/var/log/nginx/access.log 或 /var/log/nginx/error.log</td></tr><tr><td>重新加载 Nginx 配置文件</td><td>nginx -s reload</td></tr><tr><td>停止 Nginx 服务，但不终止工作进程</td><td>nginx -s stop</td></tr></tbody></table></div><h3 id="nginx-主要模块" tabindex="-1"><a class="header-anchor" href="#nginx-主要模块" aria-hidden="true">#</a> Nginx 主要模块</h3><ol><li>Core 模块：包含了 Nginx 的核心功能，如事件处理、连接和配置管理等。</li><li>HTTP 模块：处理 HTTP 请求和响应，包括反向代理、负载均衡、FastCGI、gzip 压缩、SSL 安全等。</li><li>Mail 模块：处理邮件服务，如 SMTP、POP3 和 IMAP4。</li><li>Stream 模块：处理基于 TCP 和 UDP 协议的流量代理，如 TCP/UDP 负载均衡、SSL/TLS 代理、Websocket 支持等。</li><li>Event 模块：提供事件机制的实现，如事件循环、定时器、异步 I/O 等。</li><li>Third-party 模块：第三方模块，如 Lua、Perl、PHP、JavaScript 等，提供扩展功能。</li></ol><p>其中，Core、Event 和 HTTP 模块是 Nginx 的基础模块，Mail 和 Stream 模块则是在 Nginx 1.9 版本之后加入的新模块。Nginx 也支持第三方模块的扩展，可以通过添加相应的模块实现更多的功能。</p><h3 id="负载均衡策略" tabindex="-1"><a class="header-anchor" href="#负载均衡策略" aria-hidden="true">#</a> 负载均衡策略</h3><p>Nginx 可以通过以下方式实现负载均衡：</p><ol><li>轮询（Round Robin）：将请求依次分配给后端服务器，每个后端服务器按照其在配置文件中出现的顺序进行轮流处理请求。</li><li>IP Hash：根据客户端的 IP 地址进行 Hash 计算，得到一个数字，然后根据该数字的值，将请求分配给相应的后端服务器。同一个 IP 地址的请求每次都会被分配到同一个后端服务器。</li><li>加权轮询（Weighted Round Robin）：将请求依次分配给后端服务器，但是可以根据后端服务器的配置为不同的服务器分配不同的权重，权重越高的服务器会处理更多的请求。</li><li>加权 IP Hash：根据客户端的 IP 地址进行 Hash 计算，根据后端服务器的配置为不同的服务器分配不同的权重，权重越高的服务器会处理更多的请求。</li><li>Least Connections：将请求分配给当前连接数最少的后端服务器。</li></ol><p>除了上述常见的负载均衡策略外，Nginx 还支持自定义负载均衡策略，用户可以通过编写 Nginx 模块来实现自己的负载均衡算法。</p><h3 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h3><ol><li>启用 gzip 压缩，可以减小页面大小，提高传输速度。</li><li>设置缓存，可以缓存静态资源，减少请求次数，提高响应速度。</li><li>启用 keepalive 连接，可以减少建立连接的时间，提高并发量。</li><li>优化 SSL 配置，可以提高 HTTPS 的安全性和性能。</li><li>限制请求速率，可以防止恶意攻击和爬虫。</li></ol><p>Nginx 可以通过不同的方式来处理静态资源和动态资源的请求，以下是一些常见的方式：</p><ol><li>静态资源缓存：Nginx 可以将静态资源缓存到内存或者磁盘中，提高资源读取效率和响应速度。</li><li>动态资源代理：Nginx 可以将动态资源的请求代理到应用服务器，比如 PHP、Java、Node.js 等，由应用服务器来处理请求并返回响应结果。</li><li>FastCGI 缓存：Nginx 还支持使用 FastCGI 缓存，将 FastCGI 请求的结果缓存起来，当下次请求相同的 URL 时，直接返回缓存结果，从而提高响应速度。</li></ol><p>Nginx 的静态资源处理和动态资源处理都可以通过优化来提高性能，以下是一些常见的优化技巧：</p><ol><li>合并压缩静态资源：将多个静态资源文件合并成一个文件，再进行 gzip 压缩，可以减少 HTTP 请求次数和传输数据量，提高页面加载速度。</li><li>使用 CDN 加速静态资源：将静态资源文件放在 CDN 上，可以加快资源的下载速度，减轻服务器的压力。</li><li>减少动态资源请求次数：尽可能地减少动态资源的请求次数，可以通过缓存和合并请求等方式来实现。</li><li>动态资源请求使用长连接：尽量避免使用短连接来请求动态资源，可以使用 HTTP keep-alive 或 WebSocket 等技术来实现长连接。</li></ol>',35),d=[l];function a(o,s){return i(),n("div",null,d)}const x=t(e,[["render",a],["__file","负载均衡.html.vue"]]);export{x as default};
