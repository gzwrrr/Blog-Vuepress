import{_ as r,Q as n,S as o,U as l,W as a,X as t,a8 as i,a9 as u,H as p}from"./framework-d7e1aa10.js";const _={},d=l("h1",{id:"设计模式-创建型-5",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#设计模式-创建型-5","aria-hidden":"true"},"#"),i(" 设计模式--创建型(5)")],-1),s={class:"table-of-contents"},c=u('<h2 id="_1-单例模式" tabindex="-1"><a class="header-anchor" href="#_1-单例模式" aria-hidden="true">#</a> 1.单例模式</h2><p><strong>8 种实现方法：</strong></p><ul><li><p>饿汉式（3）</p></li><li><p>懒汉式（5）</p></li></ul><br><h2 id="_2-工厂模式" tabindex="-1"><a class="header-anchor" href="#_2-工厂模式" aria-hidden="true">#</a> 2.工厂模式</h2><p><strong>1.简单工厂模式：</strong></p><ul><li><p>简单工厂模式（静态工厂模式）是由一个工厂对象决定创建哪一类产品类的实例</p></li><li><p>定义了一个创建对象的类，有这个类俩封装实例化对象的行为</p></li><li><p>在开发种，当我们用到大量的创建某种/某类/谋批对象时，就会使用到工厂模式</p></li></ul><p><strong>2.工厂方法模式：</strong></p><ul><li>将实例化功能抽象成抽象方法</li><li>定义一个创建对象的抽象方法，有子类决定要实例化的类</li><li>工厂方法可以将对象的实例化推迟到「子类」</li></ul><br><h2 id="_3-抽象工厂模式" tabindex="-1"><a class="header-anchor" href="#_3-抽象工厂模式" aria-hidden="true">#</a> 3.抽象工厂模式</h2><ul><li>定义一个接口用于创建相关或有依赖关系的「对象簇」，无需指明具体的类</li><li>可以将「简单工厂模式」和「工厂方法模式」进行整合</li><li>从设计层面来看，抽象工厂模式就是对「简单工厂模式」和「工厂方法模式」的进一步抽象</li><li>将工厂抽象成两层，「抽象工厂」和「具体实现的工厂子类」，</li><li>可以根据创建对象类型使用相应的工厂子类，这样是将简单工厂类变成了工厂簇，利于代码的「维护」和「扩展」</li></ul><br><h2 id="_4-原型模式" tabindex="-1"><a class="header-anchor" href="#_4-原型模式" aria-hidden="true">#</a> 4.原型模式</h2><blockquote><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象</p><p>这是一种创建型设计模式，允许一个对象在创建另外一个「可定制的对象」，无需知道创建的细节</p><p>通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象，通过请求原型对象「拷贝，clone」他们自己来实施创建</p></blockquote><p><strong>浅拷贝：</strong></p><ul><li><p>对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性复制一份给新的对象</p></li><li><p>对于数据类型是引用数据类型的成员变量，例如成员变量是，数据，某个类的对象等，那么浅拷贝会进行引用传递，也就是将改成员变量的引用值（内存地址）复制一份给新的对象，这样修改任意一个对象中成员变量的值都会改变最初引的成员变量的值</p></li><li><p>浅拷贝是使用默认的 clone() 方法来实现的</p></li></ul><p><strong>深拷贝：</strong></p><ul><li><p>复制对象的所有基本数据类型的成员变量值</p></li><li><p>可以动态地获得对象运行时的状态</p></li><li><p>为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。也就是说，对象进行深拷贝要对整个对象进行拷贝</p></li><li><p>两种实现方式：</p><ul><li>重现 clone 方法来实现深拷贝</li><li>通过对象序列化实现深拷贝</li></ul></li></ul><br><h2 id="_5-建造者模式" tabindex="-1"><a class="header-anchor" href="#_5-建造者模式" aria-hidden="true">#</a> 5.建造者模式</h2><ul><li><p>又称为「生成器模式」，将产品和产品建造过程进行解耦</p></li><li><p>是一种对象构建模式，它可以将复杂对象的建造过程抽象出来，使这个抽象过程的不同实现方法可以构建出不同表现的对象</p></li><li><p>逐步船舰复杂的对象，允许用户只通过指定复杂对象的「类型」和「内容」就可以构建他们，用户不需要知道内部的具体构建细节</p></li><li><p>四个角色：</p><ul><li>Product（产品角色）：一个具体的产品对象</li><li>Builder（抽象建造者）：创建一个 Product 对象的各个部件指定的接口/抽象类</li><li>ConcreteBuilder（具体建造者）：实现接口，构建和装配各个部件</li><li>Director（指挥者）：构建一个使用 Builder 接口的对象，它主要是用于创建一个复杂的对象。主要有两个作用： <ul><li>隔离客户与对象的生产过程</li><li>负责控制产品对象的生产过程</li></ul></li></ul></li></ul>',22);function h(f,b){const e=p("router-link");return n(),o("div",null,[d,l("nav",s,[l("ul",null,[l("li",null,[a(e,{to:"#设计模式-创建型-5"},{default:t(()=>[i("设计模式--创建型(5)")]),_:1}),l("ul",null,[l("li",null,[a(e,{to:"#_1-单例模式"},{default:t(()=>[i("1.单例模式")]),_:1})]),l("li",null,[a(e,{to:"#_2-工厂模式"},{default:t(()=>[i("2.工厂模式")]),_:1})]),l("li",null,[a(e,{to:"#_3-抽象工厂模式"},{default:t(()=>[i("3.抽象工厂模式")]),_:1})]),l("li",null,[a(e,{to:"#_4-原型模式"},{default:t(()=>[i("4.原型模式")]),_:1})]),l("li",null,[a(e,{to:"#_5-建造者模式"},{default:t(()=>[i("5.建造者模式")]),_:1})])])])])]),c])}const g=r(_,[["render",h],["__file","A-设计模式--创建型(5).html.vue"]]);export{g as default};
