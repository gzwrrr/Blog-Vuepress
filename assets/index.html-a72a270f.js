import{_ as i,Q as c,S as u,U as n,W as a,X as t,a8 as s,a9 as l,H as o}from"./framework-d7e1aa10.js";const r={},k=n("h1",{id:"数据结构与算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据结构与算法","aria-hidden":"true"},"#"),s(" 数据结构与算法")],-1),d={class:"table-of-contents"},m={class:"hint-container info"},v=n("p",{class:"hint-container-title"},"相关资源",-1),b={href:"https://www.programmercarl.com/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.geekxh.com/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://space.bilibili.com/1899706498",target:"_blank",rel:"noopener noreferrer"},w=l('<h2 id="什么是算法" tabindex="-1"><a class="header-anchor" href="#什么是算法" aria-hidden="true">#</a> 什么是算法？</h2><p>算法是对特定问题求解步骤的一种描述，它是指令的优先序列，其中每一条指令表示一个或多个操作，此外，一个算法还有以下五个重要特性：</p><ul><li>有穷性</li><li>确定性</li><li>可行性</li><li>输入</li><li>输出</li></ul><p><strong>一个好的算法应该具有：</strong></p><ul><li>正确性</li><li>健壮性</li><li>可读性</li><li>效率与地存储量需求</li></ul><p><strong>算法效率的度量：</strong></p><ul><li>事后统计的方法</li><li>事前分析估算的方法</li></ul><p><strong>高级语言所消耗的时间取决于：</strong></p><ul><li>依据的算法采用何种策略</li><li>问题的规模</li><li>书写程序的语言</li><li>编译程序所产生的机器代码的质量</li><li>机器指令运行的速度</li></ul><p><strong>相关名词：</strong></p><ul><li>时间复杂度</li><li>频度：语句重复执行的次数</li><li>空间复杂度</li><li>常用的时间复杂度所耗费的时间从小到大依次是：<code>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</code></li></ul><br><h2 id="时空复杂度" tabindex="-1"><a class="header-anchor" href="#时空复杂度" aria-hidden="true">#</a> 时空复杂度</h2><p>:::相关文章</p>',14),g={href:"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247496738&idx=1&sn=2c7d16c8b0ee64d8101abb35e06b08cc&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},y=l(`<p>:::</p><h3 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度</h3><p>时间复杂度依次增大：</p><ol><li>O(1) 常数复杂度</li><li>O(log n) 对数复杂度</li><li>O(n) 线性复杂度</li><li>O(n log n) 线性对数复杂度</li><li>O(n^2) 平方复杂度</li><li>O(n^3) 立方复杂度</li><li>O(2^n) 指数复杂度</li><li>O(n!) 阶乘</li></ol><p>需要注意的是，这个排序并不是绝对的，因为不同算法在不同情况下的时间复杂度可能会有所不同。例如，某些问题可能存在一种 O(n^2) 的算法和一种 O(n log n) 的算法，但在实际运行中，O(n^2) 的算法可能比 O(n log n) 的算法更快。因此，在选择算法时，不仅要考虑时间复杂度，还要考虑其他因素，如空间复杂度、算法实现的难易程度、输入数据规模等。</p><h3 id="np-难问题" tabindex="-1"><a class="header-anchor" href="#np-难问题" aria-hidden="true">#</a> NP 难问题</h3><p>NP难问题和非NP难问题是计算机科学中的两个重要概念。</p><p>NP（Nondeterministic Polynomial）指非确定性多项式时间，是指一类问题的时间复杂度为O(2<sup>n)或O(n</sup>k)，其中n是问题规模，k是一个常数。这类问题的特点是可以在多项式时间内验证一个解的正确性，但是要在多项式时间内求出一个解则非常困难，因此这类问题被认为是非常困难的。如果一个问题可以在多项式时间内求解，则称为P问题。</p><p>NP难问题是指所有NP问题都可以在多项式时间内规约到该问题。也就是说，如果一个NP难问题可以在多项式时间内求解，则所有的NP问题都可以在多项式时间内求解。目前还没有找到一种有效的方法来求解NP难问题，因此这类问题被认为是无法在多项式时间内求解的。</p><p>非NP难问题则是指所有NP问题都无法在多项式时间内规约到该问题。也就是说，这类问题不属于NP问题，可以在多项式时间内求解。比如，排序、查找、最短路径等问题都是非NP难问题。</p><p>需要注意的是，非NP难问题并不一定是容易求解的问题，它只是与NP问题不同，可以在多项式时间内求解。</p><h2 id="八大数据结构" tabindex="-1"><a class="header-anchor" href="#八大数据结构" aria-hidden="true">#</a> 八大数据结构</h2><ul><li>数组（Array）</li><li>链表（LinkedList）</li><li>队列（Queue）</li><li>栈（Stack）</li><li>堆（Heap）</li><li>散列表（Hash）</li><li>树（Tree）</li><li>图（Grap）</li></ul><h3 id="数组与链表" tabindex="-1"><a class="header-anchor" href="#数组与链表" aria-hidden="true">#</a> 数组与链表</h3><ol><li>请介绍一下数组和链表的区别？</li><li>请实现一个数组或链表的基本操作，例如插入、删除、查找等。</li><li>如何对一个数组或链表进行排序？</li><li>如何在一个数组或链表中找到第K个最大或最小的元素？</li><li>如何判断一个链表是否有环？如何找到链表中环的起点？</li><li>如何合并两个有序数组或链表？</li><li>如何在一个数组或链表中删除重复的元素？</li><li>如何反转一个链表？</li><li>如何判断两个链表是否相交？如何找到两个链表相交的点？</li><li>如何实现一个LRU Cache（最近最少使用缓存）？</li></ol><h3 id="散列表" tabindex="-1"><a class="header-anchor" href="#散列表" aria-hidden="true">#</a> 散列表</h3><ol><li>散列表是一种用于存储键值对的数据结构，其中键是通过散列函数计算出的哈希值，值可以是任意类型的数据。</li><li>散列表的特点是可以实现快速的查找、插入和删除操作，时间复杂度通常为O(1)。</li><li>散列冲突是指两个不同的键计算出的哈希值相同的情况。常见的解决散列冲突的方法包括开放地址法和链表法等。其中开放地址法包括线性探测、二次探测和双重散列等技术。</li><li>选择散列函数需要考虑散列值的分布和计算速度等因素。常见的散列函数包括除留余数法、平方取中法、FNV哈希等。</li><li>实现散列表可以使用数组和链表等数据结构。数组实现的散列表也被称为哈希表，可以根据键的哈希值计算出在数组中的索引位置。链表实现的散列表则是将哈希冲突的元素放在同一个链表中。</li><li>散列表的性能和负载因子相关，负载因子越小，散列表的性能越好。通常当负载因子大于0.7时，需要对散列表进行扩容操作。</li><li>在使用散列表时需要注意哈希函数的选择和冲突解决方法的实现，以及散列表的扩容和缩容等问题。</li></ol><h3 id="树" tabindex="-1"><a class="header-anchor" href="#树" aria-hidden="true">#</a> 树</h3><p>什么是树：</p><ol><li>树是一种非线性的数据结构，由节点和边组成，每个节点可以有多个子节点。</li><li>树的基本操作包括插入、删除和查找等。插入和删除节点通常需要重构树的结构以保证树的性质。</li><li>二叉树是一种特殊的树结构，每个节点最多有两个子节点。二叉树可以通过中序遍历、前序遍历和后序遍历来遍历整个树。</li><li>二叉搜索树是一种二叉树，满足左子树的所有节点的值小于根节点的值，右子树的所有节点的值大于根节点的值。二叉搜索树可以用于排序和快速查找等场景。</li><li>树的遍历分为深度优先遍历和广度优先遍历两种。其中深度优先遍历包括前序遍历、中序遍历和后序遍历，广度优先遍历包括层次遍历。</li><li>平衡二叉树是一种高度平衡的二叉搜索树，保证了插入、删除和查找操作的时间复杂度均为O(logN)。常见的平衡二叉树包括AVL树和红黑树等。</li><li>堆是一种特殊的树结构，通常用于实现优先队列等场景。堆分为最大堆和最小堆两种，最大堆的根节点是整个堆中的最大值，最小堆的根节点是整个堆中的最小值。常见的堆实现包括二叉堆和斐波那契堆等。</li></ol><p>常见的树的分类：</p><ol><li>二叉树：每个节点最多有两个子节点的树，包括普通二叉树、满二叉树和完全二叉树等。</li><li>平衡树：树的左右子树高度差不超过一个固定值的树，例如AVL树、红黑树、B树等。</li><li>二叉搜索树：左子树的所有节点值小于当前节点，右子树的所有节点值大于当前节点的二叉树。</li><li>Trie树（字典树）：一种树形结构，用于处理字符串匹配问题，例如前缀匹配和字符串检索等。</li></ol><p>常见的树问题和算法包括：</p><ol><li>遍历：前序遍历、中序遍历、后序遍历、层次遍历等。</li><li>建树：从已知的数据结构（例如数组、链表）构造树形结构。</li><li>查找：查找树中是否存在某个节点，常见算法有二叉搜索树、AVL树、红黑树等。</li><li>插入、删除：在树中插入或删除一个节点，常见算法有二叉搜索树的插入、删除操作、AVL树、红黑树等的平衡操作。</li><li>应用：树的应用十分广泛，例如 Huffman 编码、LCA（最近公共祖先）问题、构造最小生成树、构造最短路径树等。</li></ol><p>总之，树作为一种重要的数据结构，在算法和数据结构领域有广泛的应用，了解树的分类和相关算法是非常有必要的。</p><h3 id="图" tabindex="-1"><a class="header-anchor" href="#图" aria-hidden="true">#</a> 图</h3><p>图相关的问题：</p><ol><li>什么是图？</li><li>图有哪些基本操作？</li><li>图的遍历有哪些算法？</li><li>如何实现最短路径算法？</li><li>如何实现最小生成树算法？</li><li>什么是拓扑排序？</li><li>什么是连通分量？</li></ol><p>相关技巧：</p><ol><li>图是由节点和边组成的非线性数据结构，用于描述各种实际问题中的关系和联系。</li><li>图的基本操作包括插入节点、删除节点、插入边和删除边等。图的存储方式通常有邻接矩阵和邻接表两种。</li><li>图的遍历算法包括深度优先搜索和广度优先搜索两种。深度优先搜索和广度优先搜索的区别在于搜索的顺序不同。</li><li>最短路径算法是用于求解两个节点之间最短路径的算法，常见的最短路径算法包括Dijkstra算法和Bellman-Ford算法等。</li><li>最小生成树算法是用于求解无向带权图中连接所有节点的最小权重边集合的算法，常见的最小生成树算法包括Prim算法和Kruskal算法等。</li><li>拓扑排序是对有向无环图进行排序的算法，用于确定各个节点之间的依赖关系。</li><li>连通分量是指无向图中任意两个节点之间有路径相连的最大子图。连通分量算法常用于社交网络、群体分析等领域。</li></ol><p>图的经典问题包括：</p><ol><li>最短路径：找出图中两个节点之间的最短路径。 <ul><li>Dijkstra算法：适用于边的权重为非负数的情况。</li><li>Bellman-Ford算法：适用于边的权重可能为负数的情况。</li><li>Floyd算法：可以求解图中任意两点之间的最短路径，但时间复杂度较高。</li></ul></li><li>拓扑排序：对有向无环图进行排序，使得每个顶点的前驱都排在它的后面。 <ul><li>Kahn算法：基于贪心思想，每次选择入度为0的节点进行排序。</li><li>深度优先搜索（DFS）：基于递归思想，对有向图进行深度优先搜索，并在回溯时将节点加入到结果列表中。</li></ul></li><li>最小生成树：找出连接图中所有节点的最小权重边的集合。 <ul><li>Prim算法：基于贪心思想，每次选择权重最小的边并将其连接的节点加入生成树中。</li><li>Kruskal算法：基于并查集的思想，每次选择权重最小的边并判断其是否与已经加入的边形成环。</li></ul></li><li>最大流：找出从源节点到汇节点的最大流量。 <ul><li>Ford-Fulkerson算法：基于增广路径的思想，每次找到一条从源节点到汇节点的增广路径，并更新路径上的流量。</li><li>Edmonds-Karp算法：在Ford-Fulkerson算法的基础上，使用BFS来查找增广路径，以获得更快的运行速度。</li></ul></li></ol><p>除了上述算法外，还有很多其他的图算法，如欧拉路径、哈密顿回路、最小顶点覆盖等，都是非常重要的图算法。</p><h4>拓扑排序</h4><p>将有向无环图排序，排序后所有节点的指向都是同一方向的。如果一幅有向图中存在环，是无法进行拓扑排序的，因为肯定做不到所有箭头方向一致；反过来，如果一幅图是「有向无环图」，那么一定可以进行拓扑排序。</p><h4>DFS</h4><blockquote><p>回溯算法就是 DFS</p></blockquote><h4>BFS</h4><p>BFS 相对 DFS 的最主要的区别是：<strong>BFS 找到的路径一定是最短的，但代价就是空间复杂度比 DFS 大很多</strong></p><p>BFS 一般用于找最短路径，其他情况常用 DFS</p><h3 id="有序表" tabindex="-1"><a class="header-anchor" href="#有序表" aria-hidden="true">#</a> 有序表</h3><p>可以实现有序表的结构（各种实现时间复杂度都是 O(logN)）：</p><ol><li>AVL 树（平衡性要求最严苛；维护着高度信息，平衡标准是左右子树的高度差不超过 1）</li><li>Size Balance 树（常用，改写难度小；维护着节点数信息，平衡标准是「每棵树的大小」不小于其「兄弟的子树大小」）</li><li>红黑树（维护着关于自己的平衡树的信息，相比上面两个最复杂，调整太复杂一般不用）</li><li>跳表（Skip List）</li></ol><p>补充：</p><ul><li>搜索二叉树默认没有重复值，出现重复值可以存储在节点内部</li><li>拥有「左旋」与「右旋」操作的搜索二叉树是其具有平衡性的前提，红黑、AVL、SB 树都是用了不同的规定，即规定搜索二叉树怎么左旋或右旋，来实现的有着不同平衡性的树，三者的增删改查（同搜索二叉树的增删改查，只是操作完成之后需要判断是否需要重新平衡）操作如何调整全部一样，但是判断违规的条件不一样</li><li>维持搜索二叉树的平衡关键在于实现 Rebalance 函数，即由具体的实现指定在什么时机进行怎么样的旋转操作</li><li>AVL 树在删除节点后，会从替代节点的父节点开始检查树的平衡性（这是删除操作的平衡性检查时机）</li><li>AVL 树四种调整类型的含义： <ul><li>LL：左孩子左子树过长，左子树需要左旋</li><li>RR：右孩子右子树过长，右子树需要右旋</li><li>LR：左孩子右子树过长，左子树根节点需要调整到整棵树的根节点（先左旋再右旋）</li><li>RL：右孩子左子树过长，右子树根节点需要调整到整棵树的根节点（先右旋再左旋）</li></ul></li><li>SB 树四种调整类型的含义： <ul><li>LL：某左节点左孩子规模大于兄弟右节点的规模，该左节点需要先右旋，右旋后需要看参与调整的节点是否变化，变化则继续递归调整</li><li>RR：某右节点右孩子规模大于兄弟左节点的规模，该右节点需要先左旋，左旋后需要看参与调整的节点是否变化，变化则继续递归调整</li><li>LR：某左节点右孩子规模大于兄弟右节点的规模，该右孩子需要先左旋再右旋变为根节点，之后需要看参与调整的节点是否变化，变化则继续递归调整</li><li>RL：某右节点左孩子规模大于兄弟左节点的规模，该左孩子需要先右旋再左旋变为根节点，之后需要看参与调整的节点是否变化，变化则继续递归调整</li></ul></li><li>红黑树定义的规则： <ol><li>每个节点不是「红」就是「黑」</li><li>头节点和叶节点（最底层的节点，不是没有左右孩子的节点），必须为黑</li><li>任何两个红节点不能相邻</li><li>任意节点出发，要求到叶节点的路径上，黑节点的数量一样（这一点最重要）</li></ol></li><li>从红黑树的规则可以发现： <ul><li>从根节点出发，到叶节点最长的路径为，红黑交替的路径；最短的路径为全黑的路径</li><li>但是由于存在第四条规则，所以最长与最短路径的节点数量不会相差超过两倍</li></ul></li><li>跳表要求： <ul><li>传入的 Key 必须可以比较，默认的头节点拥有最小的 Key</li><li>节点维护「键值对」以及指向之后节点的（多或单）链表或数组指针，这些指针一般不会全部使用</li><li>某一个节点可以有多少个指针与节点本身完全无关，因为是随机生成的指针个数（0.5 的概率为 0，0.5 的概率为 1，只有为 0 才停止增加指针数量），每个节点的指针索引可以称为第几层</li><li>跳表中不同节点相同层从小到大单向相连，因为一个节点是否有指针完全通过上述的随机方式生成，所以每一层相连的节点数从高到低是依次增加的，即顶层最少，底层最多</li><li>进行增删改查操作时，从顶层开始操作，如果节点值小于需要操作的节点值，就继续寻找，直到遇到比需要操作节点的大的才停止，这样就可以找到最终进行操作的位置</li><li>因为每一层指针都是以 1/2 概率生成的，所以当节点数量够大时，从最高层到最底层看，构建的结构就类似完全二叉树，且具有一定搜索功能</li></ul></li></ul><h2 id="八大常用算法思想" tabindex="-1"><a class="header-anchor" href="#八大常用算法思想" aria-hidden="true">#</a> 八大常用算法思想</h2><p>算法可以分成两类：</p><ul><li>明确知道怎么算的流程</li><li>明确知道怎么尝试的流程</li></ul><p>树形结构几乎贯穿了所有算法思想，许多问题也能转换成具有多个子问题的树状结构</p><h3 id="_1-枚举-穷举" tabindex="-1"><a class="header-anchor" href="#_1-枚举-穷举" aria-hidden="true">#</a> 1.枚举/穷举</h3><blockquote><p>穷举或说枚举就是列举「全部可能性」</p></blockquote><p>涉及的问题：</p><ul><li>待解问题的「可能解/候选解」的筛选条件</li><li>「可能解」之间的影响</li><li>穷举「可能解」的代价</li><li>穷举「可能解」的方式</li></ul><p>注意：大部分枚举不可用的场景是由于「可能解」的数量过多，虽然枚举法可能不能帮助我们「解决问题」，但是有助于帮助我们「理解问题」</p><h4>穷举法优化</h4><ol><li>减少搜索空间：当问题的搜索空间非常大时，可以采用一些方法来缩小搜索空间，例如剪枝和启发式搜索等。</li><li>优化算法设计：通过优化算法设计来减少不必要的计算，例如使用适当的数据结构、算法等。</li><li>利用并行计算：当问题可以并行计算时，可以使用并行计算技术来加速穷举法的计算。</li><li>避免重复计算：当搜索过程中有许多重复的计算时，可以通过缓存计算结果或者使用记忆化搜索等方法来避免重复计算，从而提高效率。</li><li>采用随机化算法：当穷举法无法高效处理问题时，可以考虑采用一些随机化算法来解决问题，例如随机化搜索和遗传算法等。</li><li>合理设计数据结构：当问题中包含多个数据结构时，可以通过合理设计数据结构来减少不必要的计算，从而提高效率。</li></ol><h4>剪枝</h4><p>剪枝算法有许多不同的形式，其中一些常见的包括：</p><ul><li>α-β 剪枝算法：在博弈树搜索中，α-β 剪枝算法可以通过评估局面的价值，来减少搜索的深度和宽度，从而提高搜索效率。</li><li>约束满足问题剪枝算法：在约束满足问题中，剪枝算法可以通过检查约束条件，来排除无效的状态节点，从而缩小搜索空间。</li><li>分支限界剪枝算法：在搜索树中，分支限界剪枝算法可以通过评估每个状态节点的下界，来排除与下界不相交的状态节点，从而减少搜索空间。</li></ul><h4>启发式算法</h4><p>启发式算法是一种以启发式信息为指导的搜索算法，它可以在搜索过程中尽快找到可能的最优解，从而提高搜索效率。启发式算法常用于解决NP难问题、优化问题等。</p><p>常见的启发式算法包括：</p><ul><li><code>A*</code> 算法：<code>A*</code> 算法是一种基于启发式函数的搜索算法，它通过评估每个状态节点的估价函数来指导搜索过程，从而在搜索过程中尽快找到最优解。</li><li>爬山算法：爬山算法是一种局部搜索算法，它通过不断搜索周围的状态节点，来找到当前最优解，然后继续搜索周围的状态节点，直到找到全局最优解。</li><li>遗传算法：遗传算法是一种基于生物进化的优化算法，它通过模拟自然选择、交叉和变异等过程，来搜索最优解。</li></ul><h3 id="_2-递推" tabindex="-1"><a class="header-anchor" href="#_2-递推" aria-hidden="true">#</a> 2.递推</h3><blockquote><p>用「已知」推导「未知」—— 逐次逐步推到获取结果，每次「递」是「非回归迭代」</p></blockquote><p>涉及的问题：</p><ul><li>「递」的含义是逐次、逐步</li><li>机器涉及到递推时，能处理的是「重复性」的推理</li><li>「递推」是一个较大的范畴</li></ul><h3 id="_3-递归" tabindex="-1"><a class="header-anchor" href="#_3-递归" aria-hidden="true">#</a> 3.递归</h3><blockquote><p>与递推相似，但是每次「递」是「回归迭代」，直至跳出回归获取结果</p></blockquote><p>本质是把问题分解成规模更小的同类问题</p><p>递归问题的时间复杂度计算方式：<strong>⼦问题个数乘以解决⼀个⼦问题需要的时间</strong></p><p>递归一般时间复杂度和空间复杂度都稍大（与不使用递归的解法相比），非必要时尽量避免</p><h3 id="_4-分治" tabindex="-1"><a class="header-anchor" href="#_4-分治" aria-hidden="true">#</a> 4.分治</h3><blockquote><p>分而治之，核心就两步 —— 为什么分及怎么分？怎么治及治后如何？</p></blockquote><p>涉及的问题：</p><ul><li>分治是一种向下管理的思想，将复杂问题简化为简单的子问题，再通过子问题的解构建复杂问题的解</li><li>实际应用中常常使用「自顶向下」或「自底向上」求解</li></ul><h3 id="_5-动态规划" tabindex="-1"><a class="header-anchor" href="#_5-动态规划" aria-hidden="true">#</a> 5.动态规划</h3><blockquote><p>也需要将复杂问题分解，但是子问题往往不是独立于其他问题的，此时可以把解看作是前 n 个子问题的「总结」，不是简单的「叠加」，也即在大多数情况下要把非独立子问题转化成独立子问题的形式</p></blockquote><p>涉及的问题：</p><ul><li>缓存思想：处理过程中分为不同的处理阶段，期间要需要记录下前面问题的解，起到缓存的作用</li><li>状态：需要找到变化的状态再做进一步分析</li><li>选择：每个阶段需要做出一定的决策</li><li>动态规划主要就是解决多阶段的决策问题，注意！没有统一的处理方法</li></ul><p>动态规划的三大要素：</p><ul><li>最优子结构（无后效性）：体现了分治法的思想，但是分治法中并不一定存在这一点</li><li>重叠子问题：缓存实现的关键点</li><li>状态转移方程：关键在于「如何改变状态」和「如何选择」</li></ul><p><strong>动态规划问题的⼀般形式就是求最值</strong>。</p><p><strong>求解动态规划的核心问题是穷举中找最值，这里的穷举是指优化后带缓存的穷举</strong>。</p><ul><li><p>动态规划的「穷举」是存在「重叠子问题的」，如果直接用「暴力穷举」，效率会极其低下</p></li><li><p>因此需要使用「备忘录」或者说「DP Table」来优化穷举的过程，避免不必要的计算</p></li></ul><p>这里的 DP 或说缓存只是一种思想，有很多不同的表现形式，只要能做到避免重复不必要的子问题即可，DP TABLE 的表现形式有：函数、数组、链表等</p><h4>最优子结构</h4><ul><li>最优子结构之间必须是「独立的」，不独立就必须寻找其他的「重叠子问题」</li><li>最优子结构一般都是在求最值；最优子结构并不是动态规划独有的一种性质，能求最值的问题大部分都具有这个性质，但是如果一个问题需要求最值，就可以往动态规划的方向思考</li></ul><h4>重叠子问题</h4><ul><li>寻找重叠子问题的最直接方法就是画出「递归树」</li><li>重叠子问题有时候是在找到「最优子结构」和「状态转移方程」后考虑的，因为需要找出重叠部分优化暴力解</li></ul><h4>状态转移</h4><p>注意：只有列出正确的「状态转移方程」才能正确地「穷举」，而这部分也是最难的</p><p>动态规划一般来说求解方向都是「自底向上」，即动态规划一般都是脱离了递归，改用自底向上的迭代完成，但是也有使用自顶向下的递归实现</p><p>某些动态规划问题还可以使用「状态压缩」进行优化</p><p><strong>三要素：</strong></p><ol><li>状态</li><li>选择</li><li>Base case</li></ol><h4>暴力递归到动态规划</h4><p>不是所有暴力递归都能转成动态规划，但是动态规划都来自暴力递归</p><p><strong>常见的4种尝试模型：</strong></p><ol><li>从左往右的尝试模型.</li><li>范围上的尝试模型</li><li>多样本位置全对应的尝试模型</li><li>寻找业务限制的尝试模型</li></ol><h4>树形 DP 套路</h4><ol><li>以某个节点 x 为头节点，分析答案有哪些「可能性」，并且这种分析是以 x 的左子树、右子树、x 整棵树的角度来考虑的</li><li>根据第一步的可能性分析，列出所有需要的信息</li><li>合并第二部的信息，构造包含所有这些信息的 Info 类，对左子树和右子树提出相同的需求</li><li>设计递归函数，递归函数是处理以 x 为头节点的情况下的答案；设计包含设计递归的 basecase，并且默认直接获取左子树和右子树的所有信息，获取信息后将之前分析的所有可能性整合，最后再构造当前这一层递归应该需要返回的信息</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 求出二叉树上两个节点的最大距离
 * 树形 dp 的递归套路
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MaxDistance</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">Node</span> left<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">Node</span> right<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> maxDistance<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxDistance<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>maxDistance <span class="token operator">=</span> maxDistance<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">.</span>maxDistance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Info</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Info</span> left <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Info</span> right <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> p1 <span class="token operator">=</span> left<span class="token punctuation">.</span>maxDistance<span class="token punctuation">;</span>
        <span class="token keyword">int</span> p2 <span class="token operator">=</span> right<span class="token punctuation">.</span>maxDistance<span class="token punctuation">;</span>
        <span class="token keyword">int</span> p3 <span class="token operator">=</span> left<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> right<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
        <span class="token keyword">int</span> maxDistance <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> p3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>height<span class="token punctuation">,</span> right<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span>maxDistance<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-贪心算法" tabindex="-1"><a class="header-anchor" href="#_6-贪心算法" aria-hidden="true">#</a> 6.贪心算法</h3><blockquote><p>寻找「局部最优解」并尝试叠加成「最优解」</p></blockquote><p>如果问题也存在最优子结构，那么也可以考虑使用贪心解法，如果同时还存在重叠子问题，那么大概率是用动态规划解决。</p><p>贪心算法在某些情况下效率可能比「动态规划」还高，因为贪心可以不用「穷举全部」就找到问题的最优解。</p><ol><li>贪心算法通常比动态规划更加高效，时间复杂度通常为线性或者线性对数级别。</li><li>贪心算法的实现较为简单，通常不需要构建状态转移表或者状态转移方程，因此代码量较少。</li></ol><p><strong>但是要注意：</strong></p><ol><li>贪心算法通常只能解决一部分最优化问题，不能得到全局最优解。</li><li>贪心算法通常需要证明贪心策略的正确性，这个过程比较困难，需要具有较高的抽象能力和数学素养。</li><li>贪心算法对问题的要求比较高，需要满足“贪心选择性质”和“最优子结构性质”，否则无法使用贪心算法解决问题。</li></ol><p>因此，贪心算法通常适用于局部最优解即可满足全局最优的问题，或者作为其他算法的辅助算法，而动态规划通常适用于需要求全局最优解的问题，但是由于时间和空间复杂度的限制，其对于大规模数据的处理能力相对较弱。</p><h3 id="_7-回溯算法" tabindex="-1"><a class="header-anchor" href="#_7-回溯算法" aria-hidden="true">#</a> 7.回溯算法</h3><blockquote><p>试探算法，在做出选择前对下次的可能结果做出试探，如果都不行就回到起点重新试探</p><p>回溯算法就是个多叉树的遍历问题，关键就是在前序遍历和后序遍历的位置做一些操作</p></blockquote><p>涉及的问题：试探的过程是可以通过「剪枝」降低试探次数的</p><p>解决一个回溯问题，实际上就是一个「决策树」的遍历过程</p><h4>回溯的三大要素</h4><ul><li>路径：已经做出的选择</li><li>选择列表：当前可以做的选择</li><li>结束条件：也就是到达决策树底层，无法在做出选择</li></ul><h4>核心思想</h4><blockquote><p>遇到「全排列问题」一般都先想到暴力递归，回溯求解</p></blockquote><p><strong>核心就是</strong> <strong>for</strong> <strong>循环里面的递归，在递归调⽤之前「做选择」，在递归调⽤之后「撤销选择」：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span><span class="token punctuation">:</span>
 <span class="token keyword">if</span> 满⾜结束条件<span class="token punctuation">:</span>
  result<span class="token punctuation">.</span>add<span class="token punctuation">(</span>路径<span class="token punctuation">)</span>
  <span class="token keyword">return</span>
 <span class="token keyword">for</span> 选择 <span class="token keyword">in</span> 选择列表<span class="token punctuation">:</span>
  做选择
  backtrack<span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span> 
  撤销选择
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>多叉树的遍历框架：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span> child <span class="token operator">:</span> root<span class="token punctuation">.</span>childern<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 前序遍历需要的操作</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 后序遍历需要的操作</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>写<code>backtrack</code>函数时，需要维护走过的「路径」和当前可以做的「选择列表」，当触发「结束条件」时，将「路径」记入结果集</strong></p><h4>回溯的时间节点</h4><p><strong>前序遍历的代码在进入某一个节点之前的那个时间点执行，后序遍历代码在离开某个节点之后的那个时间点执行</strong>。</p><p><strong>我们只要在递归之前做出选择，在递归之后撤销刚才的选择</strong>，就能正确得到每个节点的选择列表和路径。</p><h4>注意点</h4><p>回溯算法的时间复杂度一般都比较高，因为大多数时候都需要遍历整棵「决策树」；</p><p>这也是回溯的一个特点，不像动态规划存在重叠的子问题可以优化，回溯往往就是「纯暴力的穷举」；</p><p>但是有时候也是可以使用「剪枝」去掉一些不需要遍历就知道一定不合法的分支，以此降低时间复杂度。</p><p>使用回溯一般步骤：</p><ol><li>确定搜索空间：确定所有可能的解，可以通过枚举或者其他算法来确定。</li><li>确定搜索顺序：确定搜索的顺序，可以按照某种规则或者优先级进行搜索。</li><li>确定约束条件：确定搜索的约束条件，包括剪枝条件、限制条件等。</li><li>确定回溯策略：确定回溯的策略，包括回溯的条件、回溯的顺序等。</li></ol><p>回溯算法的优势在于其可以找到问题的所有解，但其劣势也很明显，其时间复杂度非常高，因为回溯算法需要对所有的可能性进行搜索，往往需要进行大量的重复计算。因此，在实际应用中，通常需要采用一些剪枝策略来减少搜索的次数，从而提高回溯算法的效率。</p><p>回溯算法的应用非常广泛，可以用于求解组合问题、排列问题、子集问题、图论问题等。在实际应用中，通常需要结合具体问题的特点，对回溯算法进行适当的优化，例如采用记忆化搜索、动态规划等技术来减少搜索次数，提高算法的效率。</p><h4>小结</h4><p>某种程度上说，动态规划的暴力求解阶段就是回溯算法。只是有的问题具有重叠子问题性质，可以用 dp table 或者备忘录优化，将递归树大幅剪枝，这就变成了动态规划。</p><p>回溯算法一般是针对需要「暴力穷举」又没有「重复子问题」的问题，因此时间复杂度往往都很高。</p><h3 id="_8-模拟算法" tabindex="-1"><a class="header-anchor" href="#_8-模拟算法" aria-hidden="true">#</a> 8.模拟算法</h3><blockquote><p>// TODO 尽可能默认真实情况，使用强大的算力进行预测</p></blockquote><h2 id="其他设计方法" tabindex="-1"><a class="header-anchor" href="#其他设计方法" aria-hidden="true">#</a> 其他设计方法</h2><ol><li>状态机：比如 KMP 算法</li><li>循环数组/滚动窗口：优化空间复杂度</li><li>滑动窗口：通常用于解决与「子字符串」或者「子数组」的问题</li><li>图或者树结构，如果知道起点和终点，是可以尝试从两个节点同时出发降低时间复杂度和空间复杂度的</li><li>多指针优化</li><li>双指针</li><li>快慢指针</li><li>左右指针</li></ol><h3 id="小卡片-–-01" tabindex="-1"><a class="header-anchor" href="#小卡片-–-01" aria-hidden="true">#</a> 小卡片 – 01</h3><ol><li>**有序-加速：**有序时一般都可以用二分来进行加速，或者使用滑动窗口逐步检测</li><li>**打表法：**当一个问题入参出参都是正数时，可以使用打表法，即根据一定范围内的输出结果，寻找规律得出数学表达式，这样一般都是最优解，但是注意使用的前提是已经做出了一个不是最优解的版本</li><li>**数据预处理：**数据预处理，针对频繁查询的数据，使用一定结构提前处理好，需要使用时直接获取</li><li>**宏观调度：**对于某些问题本身很复杂，但是具有一定规律，比如子过程与整体过程相同，那么可以定义一个宏观调度先完成一个过程，然后调整参数进行下一个过程</li><li>**子序列与子串：**子序列一般可以断开，子串一般不允许断开</li></ol><h3 id="大数据题目技巧" tabindex="-1"><a class="header-anchor" href="#大数据题目技巧" aria-hidden="true">#</a> 大数据题目技巧</h3><p>一般这些题目都问的比较模糊，需要自己将其精确地抽象出来；往往也会限定资源，此时需要用轮询或者二分等技巧在满足限定的提前下完成数据的遍历与状态的统计</p><ol><li>哈希函数可以把数据按照种类均匀分流，典型的问题问法是，给定极小的空间，需要从某个极大的范围中确定想要的结果，此类问题一般都是先找出给定的极小空间可以申请多少用于表示数据状态的小文件或者位图等，确定后再将数据按照某种处理手段，例如取模或者除法等确定数据的范围再将数据放到对应的范围上</li><li>布隆过滤器用于集合的建立于查询，并可以节省大量空间，一般该类问题都允许有一定的误差，但这种误差只会指白为黑，不会也不能指黑为白</li><li>一致性哈希解决数据服务器的负载管理问题</li><li>利用并查集结构做岛问题的并行计算</li><li>位图解决某一范围上数字的出现情况，可以节省大量空间</li><li>利用分段统计思想可以进一步节省大量空间</li><li>利用堆、外排序可以做多个处理单元的结果合并</li></ol><h3 id="递归与动态规划" tabindex="-1"><a class="header-anchor" href="#递归与动态规划" aria-hidden="true">#</a> 递归与动态规划</h3><ol><li>面对具体动态规划特征的问题时，先尝试写出递归版本的暴力解法</li><li>暴力解法关注的点有： <ol><li>定义递归函数的「参数」与「返回值」的含义，其中可变参数一般是之后动态规划的重要依据，返回值一般代表问题的结果</li><li>确定递归的含义后，需要解决：初始状态时什么，basecase 是什么，什么时候越界，越界返回值怎么决定</li><li>分析普通的中间过程依赖什么</li><li>递归解决依赖调用</li></ol></li><li>写出暴力枚举的解法后，需要尝试「严格表结构」的动态规划解法，如果可变参数是两个，那么表就为二维，依次类推</li><li>确定了表的结构后，最先要填上已知的初始状态，有了初始状态后就可以寻找依赖关系，然后逐步将表填写完毕，这样就可以得到最终答案并实现 Coding</li><li>这里必须要注意的是，得到暴力解法并开始分析表结构时，就可以不用考虑原题的含义了，表中一切结果一般都可以从暴力递归中推算</li><li>实现了严格表结构的 Coding 后可以观察枚举时是否可以减少重复的步骤，可以则使用 dp 数组记录下来进行优化，以此实现动态递归的解法</li><li>进阶优化可以从两个方面下手：可变参数的个数与单参数的维度，二者均是越少越好，优化时可以尝试将二维 dp 降至一维节省空间，甚至 可以将一个数组降维成基本类型的参数</li></ol><h3 id="滑动窗口" tabindex="-1"><a class="header-anchor" href="#滑动窗口" aria-hidden="true">#</a> 滑动窗口</h3><blockquote><p>滑动窗口是一种基于双指针的一种思想，两个指针指向的元素之间形成一个窗口</p></blockquote><p>滑动窗口分为两类：</p><ul><li>一种是固定大小类的窗口</li><li>一类是大小动态变化的窗口</li></ul><p>滑动窗口初始指针一般是「左闭右开」的，即：[left, right)</p><p>滑动窗口一般是由两个「循环」组成：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 时间复杂度是 O(N)</span>
<span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 增大窗口</span>
    window<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>window needs shrink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 缩小窗口</span>
        window<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>滑动窗口框架：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 滑动窗口算法框架 */</span>
<span class="token keyword">void</span> <span class="token function">slidingWindow</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> need<span class="token punctuation">,</span> window<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> t<span class="token punctuation">)</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// c 是将移入窗口的字符</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 增大窗口</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 进行窗口内数据的一系列更新</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

        <span class="token comment">/*** debug 输出的位置 ***/</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;window: [%d, %d)\\n&quot;</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/********************/</span>

        <span class="token comment">// 判断左侧窗口是否要收缩</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>window needs shrink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// d 是将移出窗口的字符</span>
            <span class="token keyword">char</span> d <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 缩小窗口</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">// 进行窗口内数据的一系列更新</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="位运算-不使用判断返回大值" tabindex="-1"><a class="header-anchor" href="#位运算-不使用判断返回大值" aria-hidden="true">#</a> 位运算 -- 不使用判断返回大值</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 不使用「判断语句」返回两个有符号整数中较大的数字
 * <span class="token keyword">@author</span> gzw
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetMax</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 上游函数保证传入的参数 num 只会是 1 或者 0
     * 该函数的功能是将 num 从 1 变为 0，将 0 变为 1
     * 这样做可以得到两个互斥的条件，条件用 1 或 0 的形式代表，意义自行定义
     * <span class="token keyword">@param</span> <span class="token parameter">num</span> 0 或 1
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">flip</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> num <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取传入的数字的符号
     * 为 1 代表正数，为 0 代表负数
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 使用加法与互斥条件返回两数中的大数
     * 但是这个方法是问题的，因为在求差值时可能溢出
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMax1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里是有可能溢出的</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
        <span class="token comment">// c 为正数说明 a &gt;= b，此时 sA = 1，sB = 0，否则 a &lt; b，此时 sA = 0，sB = 1</span>
        <span class="token keyword">int</span> sA <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sB <span class="token operator">=</span> <span class="token function">flip</span><span class="token punctuation">(</span>sA<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 因为是互斥条件，所以只可能返回加号两边的其中一项</span>
        <span class="token keyword">return</span> sA <span class="token operator">*</span> a <span class="token operator">+</span> sB <span class="token operator">*</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 使用加法与互斥条件返回两数中的大数
     * 这个方法就算差值溢出也能返回正确的结果
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMax2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里是有可能溢出的</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
        <span class="token comment">// 求出三个值的符号</span>
        <span class="token keyword">int</span> sA <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sB <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sC <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 当 sA 与 sB 符号相同，difSab = 0，sameSab = 1，否则相反</span>
        <span class="token keyword">int</span> difSab <span class="token operator">=</span> sA <span class="token operator">^</span> sB<span class="token punctuation">;</span>
        <span class="token keyword">int</span> sameSab <span class="token operator">=</span> <span class="token function">flip</span><span class="token punctuation">(</span>difSab<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断是该返回 a 还是 b</span>
        <span class="token comment">// 加号左边的含义：两个数符号不相同时，如果 sA 是正数，那么就一定返回 a，因为此时 b 为负数一定小，否则返回 b，所以此处直接用 sA 的状态即可</span>
        <span class="token comment">// 加号右边的含义：两个数符号相同时，绝对不可能溢出，此时直接用 sC 的结果即可</span>
        <span class="token keyword">int</span> returnA <span class="token operator">=</span> difSab <span class="token operator">*</span> sA <span class="token operator">+</span> sameSab <span class="token operator">*</span> sC<span class="token punctuation">;</span>
        <span class="token comment">// 与返回 A 的条件互斥</span>
        <span class="token keyword">int</span> returnB <span class="token operator">=</span> <span class="token function">flip</span><span class="token punctuation">(</span>returnA<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 因为是互斥条件，所以只可能返回加号两边的其中一项</span>
        <span class="token keyword">return</span> returnA <span class="token operator">*</span> a <span class="token operator">+</span> returnB <span class="token operator">*</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2147483647</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2147480000</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">GetMax</span> getMax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>getMax<span class="token punctuation">.</span><span class="token function">getMax1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回错误</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>getMax<span class="token punctuation">.</span><span class="token function">getMax2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回正确</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="位运算-判断是否为-2-或-4-的次幂" tabindex="-1"><a class="header-anchor" href="#位运算-判断是否为-2-或-4-的次幂" aria-hidden="true">#</a> 位运算 -- 判断是否为 2 或 4 的次幂</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IsPower</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 判断某个数是否是 2 的次幂
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">is2Power</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 判断某个数是否是 4 的次幂
     * 前提就是该数是 2 的次幂
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">is4Power</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 0x55555555 是 01010101...0101</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">0x55555555</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="位运算-实现加减乘除" tabindex="-1"><a class="header-anchor" href="#位运算-实现加减乘除" aria-hidden="true">#</a> 位运算 -- 实现加减乘除</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticOperation</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 前提是 a + b 本身不溢出
     * 溢出是不管是系统还是该方法都不保证计算结果正确
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> a<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 异或运算本身就是无进位相加</span>
            sum <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>
            <span class="token comment">// 与运算能求出进位的结果，当进位为 0 时，此时的 sum 就是最终结果</span>
            b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
            a <span class="token operator">=</span> sum<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 取反加 1
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">negNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">~</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 减法
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">negNum</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 乘法
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">multi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">add</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            a <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token comment">// 这里主要要用逻辑右移，否则当 b 是负数时高位会补 1</span>
            b <span class="token operator">&gt;&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 判断是否为负数
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isNeg</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 除法
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">isNeg</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">negNum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">;</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token function">isNeg</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">negNum</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">:</span> b<span class="token punctuation">;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token function">minus</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                x <span class="token operator">=</span> <span class="token function">minus</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">isNeg</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">isNeg</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">negNum</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">:</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="栈与队列互相实现" tabindex="-1"><a class="header-anchor" href="#栈与队列互相实现" aria-hidden="true">#</a> 栈与队列互相实现</h3><p>可以使用「栈」实现「队列」：准备两个栈，需要出栈时就将用户数据的值倒到另外一个辅助栈中，然后依次弹出</p><p>或者可以使用「队列」实现「栈」：准备两个队列，需要出队列时，就将需要出队列前的值全部转移到另一个辅助队列中，然后出队列</p><p>图的宽度优先遍历需要用队列实现，但是出题可能会让用栈实现，同样地，图的深度优先遍历需要用栈实现，但是出题可能会让队列实现，此时就可以用上面的方法先转换一下</p><h3 id="动态规划-–-优化-–-01" tabindex="-1"><a class="header-anchor" href="#动态规划-–-优化-–-01" aria-hidden="true">#</a> 动态规划 – 优化 – 01</h3><p>动态规划的空间压缩，如果更新状态时只需要临近的值，例如当前行只有依赖上一行的值，那么可以将二维压缩成一维，三维同理，如果当前层只依赖上一层的值，那么可以将三维压缩成二维</p><p>需要获得最短时间的题可能可以用优先队列进行预处理，之后使用贪心或者动态规划暴力递归求解，找到基础版本后在进行优化</p><p>递推式可以通过同一个套路进行优化（斐波那契套路，矩阵快速幂求解），比如可以将斐波那契数列解法从 O(N) 优化到 O(log N)</p><h3 id="假设问题" tabindex="-1"><a class="header-anchor" href="#假设问题" aria-hidden="true">#</a> 假设问题</h3><p>某些问题可能会有些特殊的性质，可以利用这些性质，先假设结果拥有这种性质，然今再模拟整个流程推出过程中必须满足的条件</p><p>如何「假设」是动态、贪心、回溯的基础，需要刷的题多才能建立起自己的解题体系</p><p>假设的时候需要考虑两种大的情况：「边界情况」和「普通情况」</p><h3 id="矩阵求解" tabindex="-1"><a class="header-anchor" href="#矩阵求解" aria-hidden="true">#</a> 矩阵求解</h3><p>多维的问题第一点就是考虑能否进行降维</p><p>多维矩阵求最值可能可以使用矩阵压缩，就是将多行数据压缩成一行，例如求最大子矩阵的最大累加和，可以将子矩阵每行相加压缩成一行，然后问题就转化成了数组子串最大累加和的问题</p><h3 id="贪心技巧" tabindex="-1"><a class="header-anchor" href="#贪心技巧" aria-hidden="true">#</a> 贪心技巧</h3><p>假设可能性时，就是在考虑怎么「贪」，这个过程是在「制定规则」，规则之间相互制约不能违反，这样才能将可能性压缩到最少（就是不能想当然地假设，假设后，后面的假设都要受之前规则的制约，这样后面制定的规则也能少一点约束条件）</p><p>示例：</p><blockquote><p>&quot;x..x..x....x.x&quot;，其中 &quot;x&quot; 代表墙，&quot;.&quot; 代表空，所有空的位置可以放置一盏灯，所有空间必须都被点亮，而一盏灯的照亮范围是自身的空间加上自身左右两边的空，要求使用最少的灯点亮全部空间 -- 待确认（中级提升班 - 8 开头）</p></blockquote><p>假设需要有「潜台词」，就是代码中没有体现但是一直符合的规则或者说条件，这样才能保证尝试不会互相干扰</p><h3 id="二叉树-–-技巧-–-01" tabindex="-1"><a class="header-anchor" href="#二叉树-–-技巧-–-01" aria-hidden="true">#</a> 二叉树 – 技巧 – 01</h3><blockquote><p>先序、中序 -&gt; 后序，需要找到规律，待补充</p></blockquote><p>完全二叉树的节点个数可以优化到 O((log N) ^ 2)，具体做法是先求出完全二叉树的深度，然后找到右子树的最左节点的是否到达最大深度，这里可以分两种情况讨论，利用递归就可以求解出来</p><h3 id="动态规划-–-技巧-–-01" tabindex="-1"><a class="header-anchor" href="#动态规划-–-技巧-–-01" aria-hidden="true">#</a> 动态规划 – 技巧 – 01</h3><p>求最大递增子序列的长度</p><p>经典的解法是使用动态规划，dp 数组的含义是：到 i 位置的最大递增子序列的长度，完成这个需要从 i 位置往前找比自己小的最大长度的值，也就是最后的时间复杂度会来到 O(N ^2)</p><p>可以对上述过程进行加速，加速的点在于，每次往回找的时候都必须再遍历一边，因为 i 位置左边的数不一定是比自己小的，所以每个都要判断一下，换个说法就是左边不具有单调性，由此可以添加一个辅助数组以构建出单调性</p><p>具体构建单调性的做法是：将辅助数组下标 i 中的值更新为满足构成长度为 i + 1 的子序列中的最小值（长度都等于 i + 1 的子序列可能有多个，比如 1，3，2，此时该辅助数组下标为 1 的值就应该更新成 2 而不是 3），完成上述行为仅需要：来到 i 位置时，先在辅助数组中「二分查找」比自己大的数，如果找到就覆盖，没有就填入数组的下一个位置，之后就更新 dp 数组，确定此时 dp 数组中 i 位置的值只需要在辅助数组中找比自己小的数有几个即可，之所以可以这样是因为辅助数组经过上述的调整后就变成单调递增的，所以无需此次都比较，而是直接得出答案</p><p>上述的过程比较复杂，但是思想是通用的，目的就是为了构造具有单调性的信息，这样就可以消除遍历时的不确定性，所以之后遇到无序且要求最大值时，可以考虑构造出单调的辅助数组</p><p>此外：</p><p>动态规划的优化方向一般为：</p><ol><li>从数据状况入手（例如预处理）</li><li>从问题本身入手（例如构造单调递增）</li></ol><h3 id="base-case-不充分" tabindex="-1"><a class="header-anchor" href="#base-case-不充分" aria-hidden="true">#</a> Base case 不充分</h3><p>有增有减的递归在 base case 不充分时很可能跑不完，一般画出决策树就很容易看出来</p><p><strong>解决方法：</strong></p><ul><li>当递归实在没有限制条件时，可以找出一个平凡解来添加限制，比如某个分支一直是输出结果为偶数的，且需要的结果也是偶数的，那么直接一直使用该分支即可，达到一定阈值再进行其他行为</li><li>还可以通过问题的具体业务来找出限制条件，但是不通用</li></ul><p>一般用这种形式增加条件时，递归的实际含义也需要发生改变，即参数及其含义需要发生改变</p><h3 id="暴力递归-–-技巧-–-01" tabindex="-1"><a class="header-anchor" href="#暴力递归-–-技巧-–-01" aria-hidden="true">#</a> 暴力递归 – 技巧 – 01</h3><p>暴力递归往往需要从结果出发</p><p>先保证思路对，具体细节是 coding 问题，先后思路再验证可行性</p><h3 id="子串与子数组-–-技巧-–-01" tabindex="-1"><a class="header-anchor" href="#子串与子数组-–-技巧-–-01" aria-hidden="true">#</a> 子串与子数组 – 技巧 – 01</h3><blockquote><p>每当看到子串或者子数组，就考虑每个位置为结尾的情况是怎么样的，这一点很重要，之后还会经常遇到</p></blockquote><p>一般这种题目往往只需要考虑相邻位置转移到当前位置的可能性</p><p>示例：</p><p>给定两个字符串 str1 和 str2，再给定三个整数 ic、dc、rc，分别代插入、删除和替换一个字符的代价，返回将 str1 编辑成 str2 的最小代价</p><p>【贪心】</p><p>贪心有时需要划定一定的范围，再在这个范围内考虑问题（选出最值），同时还需要预处理或者辅助结构</p><p>示例：</p><p>在一个字符串中，每种字符都必须保留一个，并且顺序不能乱，要求最后的结果字典序最小并返回</p><p>需要建立一个词频表，记录每一个字符出现的次数</p><p>每到一个字符，相应的次数减1，直到减到0为止，此时需要从当前为止的左边选出一个码值最小的字符，该字符就是需要保留的（此处就是在一定范围内贪），然后再删除掉选出的该字符左边的部分，因为已经选了到目前为止最小的，所以选出的该字符左边的已经没用了；保留下来的部分再删除所有该字符（比如选出了a，那么就删掉a左边的完全，保留下来的子串后续可能还有a，不管，直接删除掉子串中的全部a），对得到的子串再进行递归，贪出剩下应该保留的字符</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinSubStr</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">minSubStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">char</span> ch <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               map<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
               map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">remove</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> minIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> ch <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
               minIndex <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>minIndex<span class="token punctuation">)</span> <span class="token operator">&gt;</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">?</span> i <span class="token operator">:</span> minIndex<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>minIndex<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">remove</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>minIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>minIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="舍弃可能性-构造一个答案" tabindex="-1"><a class="header-anchor" href="#舍弃可能性-构造一个答案" aria-hidden="true">#</a> 舍弃可能性 -- 构造一个答案</h3><p>给定一个数组，求如果排序之后，相邻两数的最大差值。要求时间复杂度为 O(N)，且要求不能使用「非基于比较的排序」</p><p>要多一个桶</p><p>三个数组存储必要信息</p><p>原理：</p><p>多一个桶的目的是设立一个「平凡解」，这个平凡解是较为优良的答案，可以解决（舍弃）大部分一定不是答案的解，但是未必是最终的答案</p><p>比如每个桶的容量是10，因为多出一个桶，所以必定有一个桶是空的，而空桶左右两侧的差值一定大于空桶内部的最大差值，所以这个空桶就限制了最终的答案不可能小于10</p><p>平凡解优化流程，如何优化？舍弃了可能性</p><p>多出一个桶能不能舍弃？</p><p>显然不能，因为多一个桶就是为了保证：相邻桶的差值必定大于桶内的差值，如果舍弃这个空桶，就可能出现桶内差值大于相邻桶之间的值，这时就必须考虑桶内的情况（需要排序），这样也就没有必要再分桶了</p><p>优化：</p><p>因为只需要计算一个桶中的最大值和最小值，所以没有必要每个桶都开辟 10 的空间，只需要用两个数组分别记录最大值和最小值即可，数组下标就是第几个桶，另外还需要一个数组记录哪个位置从始至终都没有进来过数字</p><p>这样最后不需要排序，也能算出排序后相邻数的最大差值</p><h3 id="舍弃可能性-假设一个答案" tabindex="-1"><a class="header-anchor" href="#舍弃可能性-假设一个答案" aria-hidden="true">#</a> 舍弃可能性 -- 假设一个答案</h3><p>给出 n 个数字，问最多有多少个不重叠的划分（非空区间），使得每个区间内数字的 xor（异或）都等于 0</p><p>异或操作其中一个理解就是无进位相加，做这题用这个理解比较好判断</p><p>普通的 i 位置有两种可能性：</p><ol><li>以 i 结尾的划分，异或结果不是 0，此时这个划分没有 i 位置和有 i 位置都是等效的，dp[i] = dp[i - 1] 即可</li><li>以 i 结尾的划分，异或结果是 0，此时需要假设：</li></ol><p>假设以 i 位置结尾的一个「最优划分」中（该划分异或和为 0），k 位置是该划分的开头</p><p>性质：</p><p>那么这个 k 位置就是离 i 位置最近的使得该划分异或和为零的位置（如果不是最近，也就不是最优解了）</p><p>同时，这也代表着 k - 1 位置的值和 i 位置的值是一样的（注意我们现在讨论的前提是以 i 结尾的划分，异或结果是 0）</p><p>如何找到这个最近 k 位置？</p><p>需要准备：</p><ol><li>dp 数组，含义为：以 i 位置值结尾的前缀中异或和最优的总数</li><li>一个变量（xor）：记录着一直异或到 i 位置的值，初始值为 0（这个变量的目的就是判断以 i 结尾的划分，异或结果是不是 0）</li><li>索引表：键为当前 xor 的值，值为距离上一次出现 i 位置值的位置（k 位置）</li></ol><p>为什么这样准备？</p><p>dp 数组这样定义后，经过一定流程，最后一个必定是答案，问题这个流程是怎么样的</p><p>变量 xor 一直累积异或值，一是为了压缩前面的状态，因为前面的数本来就是要一直异或的，记录下来后 i 位置前面就相当于只有一个数了；二是这个异或值就索引表中的键，这样就很容易找到 k 位置</p><p>索引表是为了不断更新并且可以找到 k 位置，最近的这个 k 位置就是上一次 i 位置的值出现的位置，为什么是这样的？</p><p>假设数组是：3，2，1</p><p>来到 arr[2] ：1 时，前面 3，2 已经异或，相当于压缩成了 1，即现在数组可以想象成：1，1，那既然压缩了，我们怎么获取前一个 1 的位置呢？就是索引表！</p><p>回到正题，为什么要找的 k 位置的值和当前 i 位置的值是一样的？</p><p>因为 1 .... 1，如果这是一个异或为 0 的区域，那么直接取前面的 0 就好了，后面的不需要，如果需要后面的就说明前面的已经构成了最优，只能考虑后续的 1</p><p>为什么 eor 的值就是索引表中的键？直接看例子：</p><p>假设数组为：3，2，1，4，0，那么索引表的情况变化就是：</p><ol><li>arr[]：空，xor：0，key：0，value：-1（初始化）</li><li>arr[0]：3，xor：3，key：3，value：0，dp[i]：0（初始化）</li><li>arr[1]：2，xor：1，key：1，value：1，dp[i]：dp[i - 1]（索引表中没有出现过，说明之前没有相同的数，只可能是可能性 1 的答案，此时 dp[i] 直接拷贝 dp[i - 1] 的值）</li><li>arr[2]：1，xor：0，key：0，value：2，dp[i]：max(dp[i], dp[i - 1])（取可能性1、2中的最大值）补充：这里 value 从 -1 变成 2 是因为，前面的所有数 3，2，1 都已经异或成了 0，看成一个整体相当于压缩成了 0，所以距离这个 0 最近的位置就变成了 2</li><li>arr[3]：4，xor：4，key：4，value：3，dp[i]：dp[i - 1]</li><li>arr[4]：0，xor：4，key：4，value：3，max(dp[i], dp[i - 1])（索引表中出现了，说明 3 + 1 ~ 4，即 4 ~ 4 是一个划分，0 ~ 3 是一个划分，也就是此时可能性 2 的值是 dp[3] + 1 = 2，可能性 1 的值是 dp[3] = 1，所以最后的结果是 2）</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 给出 n 个数字，问最多有多少个不重叠的划分（非空区间），使得每个区间内数字的 xor（异或）都等于 0
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MostXor</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mostEor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> xor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            xor <span class="token operator">^=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>xor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> pre <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>xor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pre <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> dp<span class="token punctuation">[</span>pre<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>xor<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="斜率优化" tabindex="-1"><a class="header-anchor" href="#斜率优化" aria-hidden="true">#</a> 斜率优化</h3><p>当临近的上一行有枚举行为时，可以使用当前临近的值代替</p><h3 id="整体中位数求解" tabindex="-1"><a class="header-anchor" href="#整体中位数求解" aria-hidden="true">#</a> 整体中位数求解</h3><p>两个数组长度一样，怎么找到整体的上中位数？（比如两个数组长度都为 4，怎么确定整体的第 4 小）</p><p>假设两数组「排序」后有：</p><p>当长度为偶数时：</p><p>arrA = [a, b, c, d]</p><p>arrB = [a&#39;, b&#39;, c&#39;, d&#39;]</p><ol><li>如果 b = b&#39;，那么 b 一定是上中位数</li><li>如果 b &gt; b&#39;，那么 c, d, a&#39;, b&#39; 一定不会是上中位数，又因为 a, b, c&#39;, d&#39;，长度相同，再次求这两个子数组的上中位数（以此类推），这就是原数组的上中位数（子问题的上中位数就是原问题的上中位数）</li></ol><p>当长度为奇数时：</p><p>arrA = [a, b, c, d, e]</p><p>arrB = [a&#39;, b&#39;, c&#39;, d&#39;, e&#39;]</p><ol><li>如果 c = c&#39;，那么 c 一定是上中位数</li><li>如果 c &gt; c&#39;，那么 c, d, e, a&#39;, b&#39; 一定不会是上中位数，但是由于剩下的两个子数组长度不一样，所以不能递归求解，此时只需要验证一下 c&#39; 是否大于 b，如果是那么 c’ 就一定是上中位数，如果不是那就直接排除掉 c&#39;，此时两个子数组的长度又相同了</li></ol><p>等长有序，数组上中位数具有传递性</p><p>上面的结论也可以用于两个数组长度不等：</p><p>给定两个一维 int 数组 A 和 B</p><p>其中：A 的长度为 m，B 的长度为 n，元素从小到大排好序。</p><p>希望从 A 和 B 中找出最大的 k 个数字，要求使用尽量小的比较次数</p><p>普通解法：</p><p>两个指针依次比较（最慢）</p><p>二分（较快）</p><p>最优解：</p><p>假设两个有序数组长度分别为：10 和 17</p><ol><li>如果 1 &lt;= k &lt;= 10，那么从两个数组中分别取前 k 个数（两个长度为 k 的子数组），求上中位数就是最终解</li><li>如果 10 &lt; k &lt;= 17（最后讲，先看下面一段的范围）</li><li>如果 17 &lt; k &lt;= 27：</li></ol><p>比如有：</p><p>A: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10</p><p>B: 1&#39;, 2&#39;, 3&#39;, 4&#39;, 5&#39;, 6&#39;, 7&#39;, 8&#39;, 9, 10&#39;&#39;, 11&#39;, 12&#39;, 13&#39;, 14&#39;, 15&#39;, 16&#39;, 17&#39;</p><p>如果求的 k = 23，那么有：</p><p>A 中前 23 - 17 - 1 = 5 个必定不可能是，同理，B 中前 23 - 10 - 1 = 12 个必定不可能是</p><p>但注意，这样一共排除掉了：12 + 5 = 17 个数，还需要 6 个数，但是剩下的是子数组求出来的是第 5 位，所以不能直接求中位数，此时需要多两次比较：</p><ol><li>如果 6 &gt; 17&#39;，那么 6 一定是上中位数，不是就淘汰 6，继续</li><li>如果 13‘ &gt; 10，那么 13&#39; 一定是上中位数，不是就淘汰 13&#39;，继续</li><li>最后可以发现，一共排除掉了 17 + 2 = 19，而剩下的子数组正好能够求出第 4 位，所以直接求子数组的中位数</li></ol><p>如果 10 &lt; k &lt;= 17， 比如 k = 15</p><p>那么 A 中的数全部有可能</p><p>B 中的数前 15 - 10 - 1 = 4 不可能是，后 17 - 15 = 2 个不可能是，剩下的全部有可能</p><p>此时 A 还剩 10 个，但是 B 中还剩 11 个</p><p>此时看 5‘ 是否大于 10，如果大于则 5&#39; 就是，直接返回，如果不是就淘汰</p><p>此时 一共排除了 4 + 2 + 1 = 7，还需要 5 个，剩下的子数组正好可以求出</p><h2 id="技巧" tabindex="-1"><a class="header-anchor" href="#技巧" aria-hidden="true">#</a> 技巧</h2>`,291),_={href:"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247491336&idx=1&sn=dbcbb07b05ebc7889f944d54d2acebd4&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},x={href:"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247485141&idx=1&sn=0e4583ad935e76e9a3f6793792e60734&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},M={href:"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484488&idx=1&sn=848f76e86fce722e70e265d0c6f84dc3&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},A={href:"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247487011&idx=1&sn=5e2b00c1c736fd7afbf3ed35edc4aeec&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},q={href:"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247496080&idx=1&sn=a2ae8c8ebf13c7ea704ffb6b16018f08&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},N={href:"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247492022&idx=1&sn=35f6cb8ab60794f8f52338fab3e5cda5&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},D={href:"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247492167&idx=1&sn=bc96c8f97252afdb3973c7d760edb9c0&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},O=n("li",null,"暴力递归到严格表查询的 DP（递归黑盒拆包）",-1),S=n("li",null,"DFS（回溯，决策树） 和 BFS（队列，多叉树） 的套路",-1),B=n("li",null,"子串匹配（KMP）与子序列匹配（滑动窗口）",-1),P=n("li",null,"并查集",-1),j=n("li",null,"线段树、树状数组",-1),L=n("li",null,"单调栈、单调队列",-1),F=n("h3",{id:"字符串",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#字符串","aria-hidden":"true"},"#"),s(" 字符串")],-1),I={href:"https://www.pdai.tech/md/outline/x-outline.html#%E9%A2%86%E5%9F%9F%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3",target:"_blank",rel:"noopener noreferrer"},z=l('<p><a href="">朴素的字符串匹配算法（Naive String Matching Algorithm)</a></p><ul><li>朴素的字符串匹配算法又称为<strong>暴力匹配算法</strong>（Brute Force Algorithm），最为简单的字符串匹配算法</li></ul><p><a href="">Knuth-Morris-Pratt 字符串匹配算法（即 KMP 算法）</a></p><ul><li>Knuth-Morris-Pratt算法（简称KMP）是最常用的字符串匹配算法之一</li></ul><p><a href="">Boyer-Moore 字符串匹配算法</a></p><ul><li>各种文本编辑器的&quot;查找&quot;功能（Ctrl+F），大多采用Boyer-Moore算法，效率非常高</li></ul><p><a href="">字符串匹配 - 文本预处理：后缀树（Suffix Tree）</a></p><ul><li>上述字符串匹配算法(朴素的字符串匹配算法, KMP 算法, Boyer-Moore算法)均是通过对<strong>模式（Pattern）字符串进行预处理</strong>的方式来加快搜索速度。对 Pattern 进行预处理的最优复杂度为 O(m)，其中 m 为 Pattern 字符串的长度。那么，有没有对文本（Text）进行预处理的算法呢？本文即将介绍一种<strong>对 Text 进行预处理</strong>的字符串匹配算法：后缀树（Suffix Tree）</li></ul><h3 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h3><p>LinkedHashMap</p><p>LinkedHashSet</p><h3 id="图-1" tabindex="-1"><a class="header-anchor" href="#图-1" aria-hidden="true">#</a> 图</h3>',12),K={class:"hint-container info"},E=n("p",{class:"hint-container-title"},"相关文章",-1),V={href:"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247494915&idx=1&sn=715b2e0cba127d61bb2e6637b8f5a46b&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,"最小生成树：",-1),Q=n("ol",null,[n("li",null,"Prim"),n("li",null,"Kruskal")],-1),T=n("p",null,"最短路径：",-1),R=n("ol",null,[n("li",null,"Dijkstra"),n("li",null,"Floyd")],-1);function H(G,U){const p=o("router-link"),e=o("ExternalLinkIcon");return c(),u("div",null,[k,n("nav",d,[n("ul",null,[n("li",null,[a(p,{to:"#数据结构与算法"},{default:t(()=>[s("数据结构与算法")]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#什么是算法"},{default:t(()=>[s("什么是算法？")]),_:1})]),n("li",null,[a(p,{to:"#时空复杂度"},{default:t(()=>[s("时空复杂度")]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#时间复杂度"},{default:t(()=>[s("时间复杂度")]),_:1})]),n("li",null,[a(p,{to:"#np-难问题"},{default:t(()=>[s("NP 难问题")]),_:1})])])]),n("li",null,[a(p,{to:"#八大数据结构"},{default:t(()=>[s("八大数据结构")]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#数组与链表"},{default:t(()=>[s("数组与链表")]),_:1})]),n("li",null,[a(p,{to:"#散列表"},{default:t(()=>[s("散列表")]),_:1})]),n("li",null,[a(p,{to:"#树"},{default:t(()=>[s("树")]),_:1})]),n("li",null,[a(p,{to:"#图"},{default:t(()=>[s("图")]),_:1})]),n("li",null,[a(p,{to:"#有序表"},{default:t(()=>[s("有序表")]),_:1})])])]),n("li",null,[a(p,{to:"#八大常用算法思想"},{default:t(()=>[s("八大常用算法思想")]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#_1-枚举-穷举"},{default:t(()=>[s("1.枚举/穷举")]),_:1})]),n("li",null,[a(p,{to:"#_2-递推"},{default:t(()=>[s("2.递推")]),_:1})]),n("li",null,[a(p,{to:"#_3-递归"},{default:t(()=>[s("3.递归")]),_:1})]),n("li",null,[a(p,{to:"#_4-分治"},{default:t(()=>[s("4.分治")]),_:1})]),n("li",null,[a(p,{to:"#_5-动态规划"},{default:t(()=>[s("5.动态规划")]),_:1})]),n("li",null,[a(p,{to:"#_6-贪心算法"},{default:t(()=>[s("6.贪心算法")]),_:1})]),n("li",null,[a(p,{to:"#_7-回溯算法"},{default:t(()=>[s("7.回溯算法")]),_:1})]),n("li",null,[a(p,{to:"#_8-模拟算法"},{default:t(()=>[s("8.模拟算法")]),_:1})])])]),n("li",null,[a(p,{to:"#其他设计方法"},{default:t(()=>[s("其他设计方法")]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#小卡片-–-01"},{default:t(()=>[s("小卡片 – 01")]),_:1})]),n("li",null,[a(p,{to:"#大数据题目技巧"},{default:t(()=>[s("大数据题目技巧")]),_:1})]),n("li",null,[a(p,{to:"#递归与动态规划"},{default:t(()=>[s("递归与动态规划")]),_:1})]),n("li",null,[a(p,{to:"#滑动窗口"},{default:t(()=>[s("滑动窗口")]),_:1})]),n("li",null,[a(p,{to:"#位运算-不使用判断返回大值"},{default:t(()=>[s("位运算 -- 不使用判断返回大值")]),_:1})]),n("li",null,[a(p,{to:"#位运算-判断是否为-2-或-4-的次幂"},{default:t(()=>[s("位运算 -- 判断是否为 2 或 4 的次幂")]),_:1})]),n("li",null,[a(p,{to:"#位运算-实现加减乘除"},{default:t(()=>[s("位运算 -- 实现加减乘除")]),_:1})]),n("li",null,[a(p,{to:"#栈与队列互相实现"},{default:t(()=>[s("栈与队列互相实现")]),_:1})]),n("li",null,[a(p,{to:"#动态规划-–-优化-–-01"},{default:t(()=>[s("动态规划 – 优化 – 01")]),_:1})]),n("li",null,[a(p,{to:"#假设问题"},{default:t(()=>[s("假设问题")]),_:1})]),n("li",null,[a(p,{to:"#矩阵求解"},{default:t(()=>[s("矩阵求解")]),_:1})]),n("li",null,[a(p,{to:"#贪心技巧"},{default:t(()=>[s("贪心技巧")]),_:1})]),n("li",null,[a(p,{to:"#二叉树-–-技巧-–-01"},{default:t(()=>[s("二叉树 – 技巧 – 01")]),_:1})]),n("li",null,[a(p,{to:"#动态规划-–-技巧-–-01"},{default:t(()=>[s("动态规划 – 技巧 – 01")]),_:1})]),n("li",null,[a(p,{to:"#base-case-不充分"},{default:t(()=>[s("Base case 不充分")]),_:1})]),n("li",null,[a(p,{to:"#暴力递归-–-技巧-–-01"},{default:t(()=>[s("暴力递归 – 技巧 – 01")]),_:1})]),n("li",null,[a(p,{to:"#子串与子数组-–-技巧-–-01"},{default:t(()=>[s("子串与子数组 – 技巧 – 01")]),_:1})]),n("li",null,[a(p,{to:"#舍弃可能性-构造一个答案"},{default:t(()=>[s("舍弃可能性 -- 构造一个答案")]),_:1})]),n("li",null,[a(p,{to:"#舍弃可能性-假设一个答案"},{default:t(()=>[s("舍弃可能性 -- 假设一个答案")]),_:1})]),n("li",null,[a(p,{to:"#斜率优化"},{default:t(()=>[s("斜率优化")]),_:1})]),n("li",null,[a(p,{to:"#整体中位数求解"},{default:t(()=>[s("整体中位数求解")]),_:1})])])]),n("li",null,[a(p,{to:"#技巧"},{default:t(()=>[s("技巧")]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#字符串"},{default:t(()=>[s("字符串")]),_:1})]),n("li",null,[a(p,{to:"#数据结构"},{default:t(()=>[s("数据结构")]),_:1})]),n("li",null,[a(p,{to:"#图-1"},{default:t(()=>[s("图")]),_:1})])])])])])])]),n("div",m,[v,n("ol",null,[n("li",null,[n("a",b,[s("代码随想录"),a(e)])]),n("li",null,[n("a",h,[s("小浩算法"),a(e)])]),n("li",null,[n("a",f,[s("B 站左程云左神"),a(e)])])])]),w,n("p",null,[n("a",g,[s("算法时空复杂度分析实用指南"),a(e)])]),y,n("ol",null,[n("li",null,[n("a",_,[s("二分法查找的套路"),a(e)])]),n("li",null,[n("a",x,[s("滑动窗口套路"),a(e)])]),n("li",null,[n("a",M,[s("前缀和技巧"),a(e)]),s(" 和 "),n("a",A,[s("差分数组"),a(e)])]),n("li",null,[n("a",q,[s("回溯剪枝技巧"),a(e)])]),n("li",null,[n("a",N,[s("链表技巧（双指针、左右指针、快慢指针，滑动窗口）"),a(e)])]),n("li",null,[n("a",D,[s("Dijkstra 寻找最短路径套路"),a(e)])]),O,S,B,P,j,L]),F,n("blockquote",null,[n("p",null,[n("a",I,[s("https://www.pdai.tech/md/outline/x-outline.html#领域算法详解"),a(e)])])]),z,n("div",K,[E,n("ol",null,[n("li",null,[s("Prim："),n("a",V,[s("https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247494915&idx=1&sn=715b2e0cba127d61bb2e6637b8f5a46b&scene=21#wechat_redirect"),a(e)])])])]),C,Q,T,R])}const W=i(r,[["render",H],["__file","index.html.vue"]]);export{W as default};
