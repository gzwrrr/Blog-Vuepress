import{_ as e,Q as c,S as o,U as n,W as t,X as p,a8 as s,a9 as l,H as i}from"./framework-d7e1aa10.js";const u={},k=n("h1",{id:"java-锁",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#java-锁","aria-hidden":"true"},"#"),s(" Java 锁")],-1),r={class:"table-of-contents"},d=l(`<div class="table-wrapper"><table><thead><tr><th style="text-align:center;">锁类型</th><th style="text-align:left;">特点</th></tr></thead><tbody><tr><td style="text-align:center;">synchronized</td><td style="text-align:left;">内置锁，只有一个条件队列，可以使用 wait() 和 notify()</td></tr><tr><td style="text-align:center;">ReentrantLock</td><td style="text-align:left;">可重入锁，性能较 synchronized 更好，可以设置公平性，可中断、可限时等待</td></tr><tr><td style="text-align:center;">ReadWriteLock</td><td style="text-align:left;">读写锁，可以实现读写分离，多个线程同时读取，只有写入时需要互斥</td></tr><tr><td style="text-align:center;">StampedLock</td><td style="text-align:left;">乐观读写锁，读锁不阻塞写锁，写锁独占</td></tr><tr><td style="text-align:center;">Semaphore</td><td style="text-align:left;">信号量，可以用来限制同时访问某些资源的线程数</td></tr><tr><td style="text-align:center;">CountDownLatch</td><td style="text-align:left;">倒计时计数器，一个或多个线程等待多个线程执行完毕后才继续执行</td></tr><tr><td style="text-align:center;">CyclicBarrier</td><td style="text-align:left;">循环栅栏，多个线程互相等待到达某个屏障点，然后一起执行</td></tr><tr><td style="text-align:center;">Exchanger</td><td style="text-align:left;">线程间交换数据的工具类</td></tr></tbody></table></div><h2 id="自旋锁" tabindex="-1"><a class="header-anchor" href="#自旋锁" aria-hidden="true">#</a> 自旋锁</h2><p>自旋锁是一种基于忙等待的锁，当线程请求锁时，如果锁已被其他线程持有，请求线程将不断地循环等待，直到锁被释放。在自旋锁中，线程不会进入睡眠状态，因此响应速度更快，但同时也会占用CPU资源，因此自旋锁一般适用于锁保持时间短的情况。</p><p>自旋锁的实现方式一般是使用一个共享变量作为锁，请求线程会不断地在循环中尝试获取锁，直到成功为止。具体而言，自旋锁通常会使用CAS（Compare-and-Swap）操作来实现锁的获取和释放。</p><p>在Java中，自旋锁的实现方式主要有两种：基于synchronized关键字的自旋锁和基于java.util.concurrent.atomic包的自旋锁。基于synchronized关键字的自旋锁实现简单，但性能相对较低，适用于锁竞争不激烈的情况；而基于java.util.concurrent.atomic包的自旋锁则性能更高，适用于锁竞争激烈的情况。</p><p>总的来说，自旋锁是一种高效的锁实现方式，它可以避免线程进入睡眠状态，从而提高系统的响应速度。但同时也要注意自旋锁可能会占用大量的CPU资源，因此在使用自旋锁时需要根据具体的情况进行权衡和选择。</p><h2 id="偏向锁" tabindex="-1"><a class="header-anchor" href="#偏向锁" aria-hidden="true">#</a> 偏向锁</h2><p>偏向锁是Java虚拟机为了提升线程竞争锁的效率而引入的一种锁优化技术。偏向锁默认是开启的，它的思想是如果一个线程获得了一个锁，那么在接下来的一段时间内，该线程再次请求该锁的概率很大。基于这个思想，虚拟机假设这种情况会发生，会在对象头中记录当前线程ID，如果之后该线程再次请求该锁，那么就不需要进行任何同步操作，从而提高了程序的运行效率。</p><p>偏向锁在对象创建时默认是未被偏向的，只有当对象被一个线程持有时，虚拟机才会将该锁转换为偏向锁，此时对象头中记录了持有锁的线程ID。如果其他线程尝试获取这个锁，会发现对象头中记录的线程ID是自己的，说明该锁被偏向了，那么就可以直接获取锁而不用像普通锁一样自旋等待。</p><p>但是如果其他线程尝试获取这个锁时，发现对象头中记录的线程ID不是自己的，说明锁被偏向的线程持有，这时候就需要撤销偏向锁，转换成普通锁，这个过程叫做锁撤销。</p><p>偏向锁在多线程并发访问下并不适用，因为每次判断锁的状态都需要读取对象头中的信息，增加了锁的访问成本，如果锁的竞争非常激烈，那么偏向锁的撤销和重偏向也会频繁发生，降低了程序的效率。所以在多线程并发访问的情况下，虚拟机会自动关闭偏向锁。</p><h2 id="轻量级锁" tabindex="-1"><a class="header-anchor" href="#轻量级锁" aria-hidden="true">#</a> 轻量级锁</h2><p>轻量级锁（Lightweight Locking）是Java虚拟机为了减少传统的重量级锁（Synchronized）操作的性能消耗而引入的一种优化手段。在JDK6中引入了这个概念。</p><p>轻量级锁是基于CAS操作和自旋锁实现的。当线程获取锁时，JVM会先在当前线程的栈帧中创建一个锁记录（Lock Record），用于存储锁对象的Mark Word的拷贝，同时在锁对象的Mark Word中记录当前线程的ID。这个过程是通过CAS操作完成的。</p><p>在后续的执行过程中，如果线程需要再次获取同一个锁对象，JVM会通过比较当前线程ID和锁对象的Mark Word中记录的线程ID是否相同来判断当前线程是否已经获取了该锁。如果相同，说明线程已经获取了该锁，可以直接进入临界区。如果不同，说明该锁已经被其他线程占用，当前线程则通过自旋等待锁的释放。</p><p>相比于传统的重量级锁，轻量级锁的性能更好，因为它减少了线程进入内核态和用户态之间的切换。但是轻量级锁只对短时间的锁操作有效，当锁操作时间过长时，锁会升级为重量级锁。</p><h2 id="重量级锁" tabindex="-1"><a class="header-anchor" href="#重量级锁" aria-hidden="true">#</a> 重量级锁</h2><p>重量级锁是一种同步机制，也称为互斥锁。在Java中，重量级锁是通过<code>synchronized</code>关键字实现的。当多个线程访问共享资源时，会有一个线程持有锁，而其他线程必须等待该线程释放锁之后才能继续执行。在实现中，重量级锁使用了操作系统提供的互斥量（mutex）实现，这种实现方式效率较低，因为需要不断地进行用户态和内核态之间的切换，而这种切换是非常耗时的。</p><p>重量级锁的优点是能够保证线程安全，缺点是效率较低，特别是在多线程并发访问共享资源时，容易出现线程饥饿、死锁等问题。</p><p>在JDK 1.6中，Java对<code>synchronized</code>进行了优化，引入了偏向锁和轻量级锁，从而提高了锁的效率。但是，当竞争激烈时，仍然会转为重量级锁来保证线程安全。</p><h2 id="_1-线程的活跃性" tabindex="-1"><a class="header-anchor" href="#_1-线程的活跃性" aria-hidden="true">#</a> 1.线程的活跃性</h2><h3 id="_1-1-死锁" tabindex="-1"><a class="header-anchor" href="#_1-1-死锁" aria-hidden="true">#</a> 1.1 死锁</h3><ul><li><p>当一个线程需要同时获取多把锁时就容易出现死锁，如：</p><ul><li>线程 t1 需要获得对象 A 的锁，接下来想获得对象 B 的锁</li><li>线程 t2 需要获得对象 B 的锁，接下来想获得对象 A 的锁</li></ul></li><li><p>顺序加锁可以解决死锁，但是容易导致饥饿现象；可以使用 ReentrantLock 解决死锁问题</p></li></ul><h3 id="_1-2-活锁-待补充" tabindex="-1"><a class="header-anchor" href="#_1-2-活锁-待补充" aria-hidden="true">#</a> 1.2 活锁（待补充）</h3><ul><li>出现在两个线程互相改变对方的结束条件，导致最后谁也无法结束</li></ul><h3 id="_1-3-饥饿-待补充" tabindex="-1"><a class="header-anchor" href="#_1-3-饥饿-待补充" aria-hidden="true">#</a> 1.3 饥饿（待补充）</h3><ul><li>一个线程由于优先级太低，导致始终得不到 CPU 调度执行，不能够结束</li></ul><h2 id="_2-reentrantlock" tabindex="-1"><a class="header-anchor" href="#_2-reentrantlock" aria-hidden="true">#</a> 2.ReentrantLock</h2><p><strong>相较于 synchronized 它具备以下特点：</strong></p><ul><li>可中断</li><li>可以设置超时时间</li><li>可以设置公平锁（先进先出）</li><li>支持多个条件变量（如 WaitSet 就是一个条件变量，多个意味着细分了）</li></ul><p><strong>但与 synchronized 一样，都支持可重入：</strong></p><ul><li>可重入是指同一个线程如果首次获得了这把锁，那么因为它是这把锁的拥有者，因此有权利再次获得这把锁</li><li>如果是不可重入锁，那么第二次获得锁时，自己也会被锁挡住</li></ul><h3 id="_2-1-可重入" tabindex="-1"><a class="header-anchor" href="#_2-1-可重入" aria-hidden="true">#</a> 2.1 可重入</h3><div class="hint-container info"><p class="hint-container-title">可重入的含义</p><p>可重入是指一个线程在持有锁的情况下，能够再次获得该锁而不会被阻塞。简单来说，就是锁可重入的意思</p><p>例如，一个线程在执行某个同步方法时，已经获取了该方法所在对象的锁，此时该线程如果再次执行该方法，不需要再次获取锁，因为该线程已经持有该锁，可以直接进入方法体</p></div><p><strong>可重入特性示例如下：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLockTest1</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ReentrantLock</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 锁对象</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;进入 main 方法...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此次加锁要是成功则成为可重入</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;进入 m1 方法...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;进入 m2 方法...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-可打断" tabindex="-1"><a class="header-anchor" href="#_2-2-可打断" aria-hidden="true">#</a> 2.2 可打断</h3><p>ReentrantLock可打断的特性指的是在使用ReentrantLock加锁的时候，如果一个线程获取锁后，如果另一个线程请求锁并且在等待锁的过程中，如果中断了等待线程的等待状态，那么等待线程就会抛出InterruptedException异常并退出等待状态，而不是一直等待下去。</p><p>这个特性对于某些多线程场景是很有用的，比如等待超时、响应中断等。下面是一个简单的例子，演示了ReentrantLock可打断的特性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>javaCopy codeimport <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span>ReentrantLock</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterruptibleLockDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程1获取了锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程1被中断了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程2获取了锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程2被中断了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            t2<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们创建了两个线程t1和t2，它们都需要获取ReentrantLock对象的锁。在t1获取锁的时候，我们让它休眠5秒钟，这样我们就有足够的时间来中断t2的等待状态。</p><p>在主线程中，我们让它等待1秒钟之后，就中断了t2的等待状态。此时t2就会抛出InterruptedException异常并退出等待状态，这样就实现了可打断的特性。</p><h3 id="_2-3-锁超时" tabindex="-1"><a class="header-anchor" href="#_2-3-锁超时" aria-hidden="true">#</a> 2.3 锁超时</h3><p><strong>锁超时特性示例如下：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLockTest3</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ReentrantLock</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;尝试获得锁...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;获取不到锁...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;获取不到锁...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 被打断则直接返回</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;获得到锁...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;t1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;获得到锁...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-公平锁" tabindex="-1"><a class="header-anchor" href="#_2-4-公平锁" aria-hidden="true">#</a> 2.4 公平锁</h3><ul><li>ReentrantLock 默认是不公平的，可以通过构造方法设置为公平锁</li><li>一般没有必要使用公平锁，这会降低并发度</li></ul><h3 id="_2-5-条件变量" tabindex="-1"><a class="header-anchor" href="#_2-5-条件变量" aria-hidden="true">#</a> 2.5 条件变量</h3><ul><li>synchronized 中也有条件变量，如 WaitSet，相当于休息室，当条件不满足时就进入休息室等待；而 ReentrantLock 支持多个条件变量，即支持多间休息室，这意味着更加细分</li><li>使用流程： <ul><li>await 前需要获取锁</li><li>await 执行后会释放锁，进入 conditionObject 等待</li><li>await 的线程被唤醒（打断或超时）会重新竞争 lock 锁</li><li>竞争 lock 锁成功后，从 await 后继续执行</li></ul></li></ul>`,49);function v(m,b){const a=i("router-link");return c(),o("div",null,[k,n("nav",r,[n("ul",null,[n("li",null,[t(a,{to:"#java-锁"},{default:p(()=>[s("Java 锁")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#自旋锁"},{default:p(()=>[s("自旋锁")]),_:1})]),n("li",null,[t(a,{to:"#偏向锁"},{default:p(()=>[s("偏向锁")]),_:1})]),n("li",null,[t(a,{to:"#轻量级锁"},{default:p(()=>[s("轻量级锁")]),_:1})]),n("li",null,[t(a,{to:"#重量级锁"},{default:p(()=>[s("重量级锁")]),_:1})]),n("li",null,[t(a,{to:"#_1-线程的活跃性"},{default:p(()=>[s("1.线程的活跃性")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_1-1-死锁"},{default:p(()=>[s("1.1 死锁")]),_:1})]),n("li",null,[t(a,{to:"#_1-2-活锁-待补充"},{default:p(()=>[s("1.2 活锁（待补充）")]),_:1})]),n("li",null,[t(a,{to:"#_1-3-饥饿-待补充"},{default:p(()=>[s("1.3 饥饿（待补充）")]),_:1})])])]),n("li",null,[t(a,{to:"#_2-reentrantlock"},{default:p(()=>[s("2.ReentrantLock")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_2-1-可重入"},{default:p(()=>[s("2.1 可重入")]),_:1})]),n("li",null,[t(a,{to:"#_2-2-可打断"},{default:p(()=>[s("2.2 可打断")]),_:1})]),n("li",null,[t(a,{to:"#_2-3-锁超时"},{default:p(()=>[s("2.3 锁超时")]),_:1})]),n("li",null,[t(a,{to:"#_2-4-公平锁"},{default:p(()=>[s("2.4 公平锁")]),_:1})]),n("li",null,[t(a,{to:"#_2-5-条件变量"},{default:p(()=>[s("2.5 条件变量")]),_:1})])])])])])])]),d])}const y=e(u,[["render",v],["__file","C-Java锁.html.vue"]]);export{y as default};
