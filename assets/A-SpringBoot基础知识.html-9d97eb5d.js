import{_ as i,Q as l,S as c,U as n,W as a,X as p,a8 as s,a9 as r,H as e}from"./framework-d7e1aa10.js";const u={},d=n("h1",{id:"spring-boot-基础知识",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring-boot-基础知识","aria-hidden":"true"},"#"),s(" Spring Boot 基础知识")],-1),k=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"说明"),n("p",null,"约定大于配置，开箱即用，无需过度配置，但是要改也能完全自定义，改善 Spring Framework 框架轻但是配置重的问题"),n("p",null,"SpringBoot不是对Spring功能上的增强，而是提供了一种快速使用Spring的方式")],-1),g={class:"table-of-contents"},v={class:"hint-container info"},m=n("p",{class:"hint-container-title"},"相关资源",-1),b={href:"https://spring.io/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.w3schools.cn/spring_boot/index.html",target:"_blank",rel:"noopener noreferrer"},h=r(`<p>Spring Boot 是基于 Spring 框架的一个全新的框架，它主要对 Spring 框架做了以下封装：</p><ol><li><p>自动化配置</p><p>Spring Boot 提供了一系列的 Starter 依赖，可以根据项目的需求自动加载所需要的依赖，从而减少了开发人员在配置文件中手动添加各种依赖的繁琐工作。此外，Spring Boot 还提供了一个注解 @EnableAutoConfiguration，它会自动根据项目所依赖的 Starter 来进行自动化配置，使得开发者不需要关心底层框架的配置。</p></li><li><p>嵌入式 Web 容器</p><p>Spring Boot 内置了 Tomcat、Jetty 和 Undertow 等多种嵌入式 Web 容器，可以在运行时快速启动一个 Web 服务。在开发阶段，开发人员可以在 IDE 中直接运行 Spring Boot 项目，无需手动安装和配置 Web 服务器。</p></li><li><p>简化的 Maven/Gradle 配置</p><p>Spring Boot 通过提供约定大于配置的方式，简化了 Maven 和 Gradle 的配置。在 Maven 中，只需要添加一个 Starter 依赖，即可实现对应功能的开发。在 Gradle 中，可以通过 Groovy 语言编写 Gradle 配置文件，非常简洁易懂。</p></li><li><p>简化的 Spring 开发</p><p>Spring Boot 还提供了大量的快捷开发工具，如自动扫描、自动注入、自动配置等，开发者可以专注于业务逻辑的开发，而不需要花费大量时间在繁琐的配置上。</p></li><li><p>多种方式的配置</p><p>Spring Boot 提供了多种配置方式，包括 YAML、Properties、XML 和 Java 等多种配置方式，开发者可以根据自己的习惯选择适合自己的配置方式。此外，Spring Boot 还支持外部配置，可以将配置信息独立出来，以便于在不同环境下进行管理。</p></li></ol><p>总之，Spring Boot 对 Spring 框架进行了封装，使得开发者可以更加方便快捷地进行应用程序的开发和部署。</p><h2 id="spring-boot-starter" tabindex="-1"><a class="header-anchor" href="#spring-boot-starter" aria-hidden="true">#</a> Spring Boot Starter</h2><p>在Spring Boot中，Starter是一种依赖管理的方式，可以简化Spring Boot应用程序的依赖管理，并将相关依赖项整合在一起。Starter包含了一组预配置的依赖，可以通过引入Starter来自动配置Spring Boot应用程序的特定功能。</p><p>Spring Boot的Starter通常包括以下几个方面的功能：</p><ul><li>自动配置类：Spring Boot会根据应用程序的依赖关系自动配置应用程序，因此可以免去手动配置的麻烦。</li><li>必需依赖：Starter包含了应用程序必需的依赖项，这样开发人员就不必在项目中手动引入这些依赖项了。</li><li>推荐依赖：Starter中可能会包含一些推荐的依赖项，这些依赖项可以帮助开发人员快速实现某些功能，但并不是必需的。</li></ul><p>通过自定义Starter，可以将某些功能封装起来，让其他开发人员可以更轻松地使用这些功能，同时也可以使应用程序更加模块化、解耦合。自定义Starter可以通过创建一个Maven项目，然后在该项目中编写自定义Starter的自动配置类、必需依赖和推荐依赖等内容，最后将该项目打包为一个JAR文件即可。</p><p>使用Spring Boot的Starter可以带来以下好处：</p><ul><li>简化依赖管理：Starter包含了一组预配置的依赖项，这些依赖项可以自动配置应用程序，简化了依赖管理的过程。</li><li>快速开发：通过引入Starter，可以快速实现一些常用的功能，从而加速开发过程。</li><li>代码解耦：Starter可以将某些功能封装起来，使得应用程序中的各个模块之间更加解耦合。</li><li>统一依赖版本：由于Starter会统一依赖的版本，因此可以避免不同依赖项之间版本冲突的问题。</li></ul><p><strong>Spring Boot 中提供的 Starter 包括但不限于：</strong></p><div class="table-wrapper"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>spring-boot-starter</td><td>核心 POM，包含自动配置支持、日志库和对 YAML 配置文件的支持。</td></tr><tr><td>spring-boot-starter-web</td><td>支持 Web 应用开发，包含 Tomcat 和 spring-mvc。</td></tr><tr><td>spring-boot-starter-tomcat</td><td>使用 Spring Boot 默认的 Tomcat 作为应用服务器。</td></tr><tr><td>spring-boot-starter-amqp</td><td>通过 spring-rabbit 支持 AMQP。</td></tr><tr><td>spring-boot-starter-aop</td><td>包含 spring-aop 和 AspectJ 来支持面向切面编程（AOP）。</td></tr><tr><td>spring-boot-starter-batch</td><td>支持 Spring Batch，包含 HSQLDB。</td></tr><tr><td>spring-boot-starter-data-jpa</td><td>包含 spring-data-jpa、spring-orm 和 Hibernate 来支持 JPA。</td></tr><tr><td>spring-boot-starter-data-mongodb</td><td>包含 spring-data-mongodb 来支持 MongoDB。</td></tr><tr><td>spring-boot-starter-data-rest</td><td>通过 spring-data-rest-webmvc 支持以 REST 方式暴露 Spring Data 仓库。</td></tr><tr><td>spring-boot-starter-jdbc</td><td>支持使用 JDBC 访问数据库。</td></tr><tr><td>spring-boot-starter-security</td><td>包含 spring-security。</td></tr><tr><td>spring-boot-starter-test</td><td>包含常用的测试所需的依赖，如 JUnit、Hamcrest、Mockito 和 spring-test 等。</td></tr><tr><td>spring-boot-starter-velocity</td><td>支持使用 Velocity 作为模板引擎。</td></tr><tr><td>spring-boot-starter-websocket</td><td>支持使用 Tomcat 开发 WebSocket 应用。</td></tr><tr><td>spring-boot-starter-ws</td><td>支持 Spring Web Services。</td></tr><tr><td>spring-boot-starter-actuator</td><td>添加适用于生产环境的功能，如性能指标和监测等功能。</td></tr><tr><td>spring-boot-starter-remote-shell</td><td>添加远程 SSH 支持。</td></tr><tr><td>spring-boot-starter-jetty</td><td>使用 Jetty 而不是默认的 Tomcat 作为应用服务器。</td></tr><tr><td>spring-boot-starter-log4j</td><td>添加 Log4j 的支持。</td></tr><tr><td>spring-boot-starter-logging</td><td>使用 Spring Boot 默认的日志框架 Logback。</td></tr></tbody></table></div><h2 id="搭建一个项目" tabindex="-1"><a class="header-anchor" href="#搭建一个项目" aria-hidden="true">#</a> 搭建一个项目</h2><p>导入 Spring Boot 的依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 导入依赖 --&gt;</span>
<span class="token comment">&lt;!-- 它的父依赖是 Spring Boot 的版本仲裁中心，已存在的依赖不需要手动写入版本号 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- spring-boot-starter 是场景启动器，帮我们导入了 web 模块正常运行所依赖的组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写一个主程序类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>gzw</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>

<span class="token comment">/*
*   @SpringBootApplication 标注此类是主程序类，这是一个 Spring Boot 应用
* */</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 启动应用</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MainApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写业务逻辑</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>gzw<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBody</span></span><span class="token punctuation">;</span>

<span class="token comment">/*
*   标注这个类是一个 Controller
* */</span>
<span class="token comment">// @ResponseBody 若是加在这里，就是标注这个类下的所有方法</span>
<span class="token annotation punctuation">@Controller</span>
<span class="token comment">// @RestController 是上面两个注解的组合</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>
    <span class="token comment">// 标注接收前端传递过来的 /hello 请求</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">// 将返回值写到浏览器上</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用打包：在命令行中进入 jar 包所在的目录，使用 <code>java -jar jar包路径</code> 就能运行 jar 包</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 添加打包需要的插件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,22);function w(B,_){const t=e("router-link"),o=e("ExternalLinkIcon");return l(),c("div",null,[d,k,n("nav",g,[n("ul",null,[n("li",null,[a(t,{to:"#spring-boot-基础知识"},{default:p(()=>[s("Spring Boot 基础知识")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#spring-boot-starter"},{default:p(()=>[s("Spring Boot Starter")]),_:1})]),n("li",null,[a(t,{to:"#搭建一个项目"},{default:p(()=>[s("搭建一个项目")]),_:1})])])])])]),n("div",v,[m,n("p",null,[n("a",b,[s("Spring 官网"),a(o)])]),n("p",null,[n("a",S,[s("Spring Boot 教程"),a(o)])])]),h])}const y=i(u,[["render",w],["__file","A-SpringBoot基础知识.html.vue"]]);export{y as default};
