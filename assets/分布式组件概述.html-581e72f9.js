import{_ as a,Q as s,S as c,U as t,W as l,X as i,a8 as e,a9 as o,H as d}from"./framework-d7e1aa10.js";const g={},p=t("h1",{id:"分布式组件作用",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#分布式组件作用","aria-hidden":"true"},"#"),e(" 分布式组件作用")],-1),x=t("div",{class:"hint-container note"},[t("p",{class:"hint-container-title"},"说明"),t("p",null,"以下内容是对分布式架构中各个组件作用的概述，可能还有不完善的地方，之后还会继续补充……")],-1),h={class:"table-of-contents"},y=t("br",null,null,-1),u=t("h2",{id:"动态",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#动态","aria-hidden":"true"},"#"),e(" 动态")],-1),b={class:"hint-container note"},_=t("p",{class:"hint-container-title"},"Spring Cloud 更新动态",-1),S={href:"https://blog.csdn.net/qq_35067322/article/details/111659339",target:"_blank",rel:"noopener noreferrer"},f=o('<h2 id="服务注册" tabindex="-1"><a class="header-anchor" href="#服务注册" aria-hidden="true">#</a> 服务注册</h2><ul><li>注册中心记录了服务和服务地址的映射关系</li><li>注册中心给客户端提供可调用的服务列表，客户端就可以进行远程调用</li><li>注册中心是整个服务调用的核心，是分布式系统中必要的组件</li><li>注册中心分为两大类： <ul><li>临时实例：发送心跳告诉注册中心服务存活</li><li>永久实例：通过 API 填写客户端信息，注册中心会主动检测客户端是否在线（不在线也不会去掉）</li></ul></li></ul><p><strong>主要注册中心功能对比：</strong></p><div class="table-wrapper"><table><thead><tr><th>注册中心</th><th>区别</th><th>使用场景</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>Eureka（Netflix 已经停止维护）</td><td>基于AP原则，数据同步需要时间，存在数据不一致的情况，适合弱一致性需求的场景</td><td>云计算场景下服务治理，适合大规模部署、高可用和动态性强的环境</td><td>1. 高可用性<br>2. 基于Netflix开源<br>3. 与Spring Cloud集成友好<br>4. 简单易用</td><td>1. 数据同步延迟可能存在数据不一致的情况<br>2. 依赖于外部组件，需要进行额外配置</td></tr><tr><td>Consul（Go 语言编写的，与 Eureka 相似）</td><td>基于CP原则，数据强一致性，适合需要强一致性的场景</td><td>微服务、DevOps等场景</td><td>1. 强一致性<br>2. 支持DNS或HTTP方式的服务发现<br>3. 支持健康检查、分布式KV存储等功能</td><td>1. 部署复杂度相对较高<br>2. 需要额外配置安全性</td></tr><tr><td>ZooKeeper（Apache 旗下，Hadoop 项目下的一个子项目）</td><td>基于CP原则，数据强一致性，适合需要强一致性的场景</td><td>分布式系统、Hadoop等场景</td><td>1. 强一致性<br>2. 数据存储稳定<br>3. 性能高<br>4. 支持自定义Watcher事件<br>5. 支持ACL权限控制</td><td>1. 部署和维护复杂度较高<br>2. 性能不够优秀，存在单点故障的问题</td></tr></tbody></table></div><div class="table-wrapper"><table><thead><tr><th style="text-align:center;">功能</th><th style="text-align:center;">Eureka</th><th style="text-align:center;">Consul</th><th style="text-align:center;">Nacos</th></tr></thead><tbody><tr><td style="text-align:center;">配置中心功能</td><td style="text-align:center;">不支持</td><td style="text-align:center;">支持，但是用起来偏麻烦，不太符合 Spring Boot 框架的命名风格，支持动态刷新</td><td style="text-align:center;">支持，用起来简单，符合 SpringBoot 的命名风格，支持动态刷新</td></tr><tr><td style="text-align:center;">依赖</td><td style="text-align:center;">依赖 Zookeeper</td><td style="text-align:center;">不依赖其他组件</td><td style="text-align:center;">不依赖其他组件</td></tr><tr><td style="text-align:center;">应用内/外</td><td style="text-align:center;">直接集成到应用中，依赖于应用自身完成服务的注册与发现</td><td style="text-align:center;">属于外部应用，侵入性小</td><td style="text-align:center;">属于外部应用，侵入性小</td></tr><tr><td style="text-align:center;">ACP 原则</td><td style="text-align:center;">遵循 AP 原则，有较强的可用性，服务注册块，单牺牲了一定的一致性</td><td style="text-align:center;">遵循 CP 原则服务注册稍慢，由于其一致性导致了在 leader 挂掉重新选举期间整个 Consul 不可用</td><td style="text-align:center;">通知遵循 CP 原则和 AP 原则</td></tr><tr><td style="text-align:center;">版本迭代</td><td style="text-align:center;">目前已经不进行升级</td><td style="text-align:center;">目前仍然进行版本迭代</td><td style="text-align:center;">目前仍然进行版本迭代</td></tr><tr><td style="text-align:center;">集成支持</td><td style="text-align:center;">只支持 SpringCloud 集成</td><td style="text-align:center;">支持 SpringCloud、K8S 集成</td><td style="text-align:center;">支持 Dubbo、SpringCloud、K8S 集成</td></tr><tr><td style="text-align:center;">访问协议</td><td style="text-align:center;">HTPP</td><td style="text-align:center;">HTTP/DNS</td><td style="text-align:center;">HTTP/动态DNS/UDP</td></tr><tr><td style="text-align:center;">雪崩保护</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">支持</td></tr><tr><td style="text-align:center;">界面</td><td style="text-align:center;">英文界面</td><td style="text-align:center;">英文界面，不符合国人习惯</td><td style="text-align:center;">中文界面</td></tr><tr><td style="text-align:center;">上手</td><td style="text-align:center;">容易</td><td style="text-align:center;">复杂一点</td><td style="text-align:center;">极易，中文文档，案例，社区活跃</td></tr></tbody></table></div><br><h2 id="服务调用与负载均衡" tabindex="-1"><a class="header-anchor" href="#服务调用与负载均衡" aria-hidden="true">#</a> 服务调用与负载均衡</h2><p><strong>服务调用：</strong></p><ul><li><p>各个微服务之间需要通过网络进行远程调用其他服务的接口</p></li><li><p>RESTful 风格的网络请求是常见的交互方式</p></li></ul><p><strong>负载均衡：</strong></p><ul><li>将接口分摊到多个服务上减轻单个服务的压力</li><li>负载均衡的具体算法实现有多种</li><li>负载均衡分为客户端（如：Ribbon）和服务端（如：Nginx、F5）两种</li></ul><p>注：OpenFeign 和较新版的 Spring Cloud Eureka 默认集成了 Ribbon</p><p><strong>常见的服务调用组件：</strong></p><div class="table-wrapper"><table><thead><tr><th style="text-align:center;">序号</th><th style="text-align:center;">名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">Ribbon</td><td style="text-align:center;">Netflix 已经停止维护</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">Feign/OpenFeign</td><td style="text-align:center;">声明式的web service客户端，内置 Ribbon</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">Dubbo</td><td style="text-align:center;">Apache 旗下，RPC 服务开发框架</td></tr></tbody></table></div><br><h2 id="服务降级与熔断限流" tabindex="-1"><a class="header-anchor" href="#服务降级与熔断限流" aria-hidden="true">#</a> 服务降级与熔断限流</h2><p><strong>服务雪崩：</strong></p><ul><li>多个微服务之间调用可能形成多条调用链，如果扇出的链路上某个微服务的响应时间太长或者服务不可用，那么最开始的服务就会占用越来越多的系统资源，进而引入系统崩溃</li><li>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源在几秒钟之内饱和</li><li>比失败更糟糕的情况是导致服务之间的延迟增加、备份队列、线程和其他系统资源紧张，导致整个系统发生更多的级联故障</li><li>对于这些故障和延迟都需要进行隔离和管理</li></ul><p><strong>服务雪崩：</strong></p><ul><li>多个微服务之间调用可能形成多条调用链，如果扇出的链路上某个微服务的响应时间太长或者服务不可用，那么最开始的服务就会占用越来越多的系统资源，进而引入系统崩溃</li><li>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源在几秒钟之内饱和</li><li>比失败更糟糕的情况是导致服务之间的延迟增加、备份队列、线程和其他系统资源紧张，导致整个系统发生更多的级联故障</li><li>对于这些故障和延迟都需要进行隔离和管理</li></ul><p><strong>熔断限流的作用：</strong></p><p>当前系统资源不够的情况下，不足以应对大量的用户请求，为了保证剩余的资源能够提供服务，系统应该按照对流量或者功能做出一定限制</p><ul><li><p>增加容错率：发生错误请求或者超时时，阻止其调用接口，直接调用本地的 fallback</p></li><li><p>当并发度超过服务能承受的极限时熔断报错</p></li><li><p>不使用熔断时，如果服务端发生错误，客户端会接收到错误状态的 Response，此时程序处理不当可能会抛异常，严重可能导致其他服务不可用</p></li><li><p>可以一定程度避免浪费其他系统资源</p></li></ul><p><strong>常用的熔断限流组件：</strong></p><div class="table-wrapper"><table><thead><tr><th style="text-align:center;">序号</th><th style="text-align:center;">名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">Hystrix</td><td style="text-align:center;">设计优秀，但是已经停止维护</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">Sentinel</td><td style="text-align:center;">独立的组件，有 Web 界面，可以更加细粒度地配置</td></tr></tbody></table></div><br><h2 id="服务网关" tabindex="-1"><a class="header-anchor" href="#服务网关" aria-hidden="true">#</a> 服务网关</h2><p><strong>API 网关在微服务架构中提供（列举部分）：</strong></p><ul><li>路由转发</li><li>认证鉴权</li><li>限流</li></ul><p><strong>网关的作用：</strong></p><ul><li>让客户端统一访问接口</li><li>隐藏服务的内部接口</li><li>可以添加一个额外的保护层防止恶意攻击</li><li>可以对所有请求进行权限校验</li><li>可以记录访问日志并审计</li></ul><p><strong>常用的网关组件：</strong></p><div class="table-wrapper"><table><thead><tr><th style="text-align:center;">序号</th><th style="text-align:center;">名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">Zuul</td><td style="text-align:center;">Netflix 开源项目，已经停止维护</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">Spring Cloud Gateway</td><td style="text-align:center;">用于替代 Zuul</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">KONG</td><td style="text-align:center;">通过 lua-nginx-module 实现的在 nginx 中运行的 lua 应用程序</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">ApiSix</td><td style="text-align:center;">Apache 项目</td></tr></tbody></table></div><br><h2 id="服务配置中心" tabindex="-1"><a class="header-anchor" href="#服务配置中心" aria-hidden="true">#</a> 服务配置中心</h2><ul><li>为微服务提供集中化的外部配置支持，配置服务器为各个不同的微服务应用的所有环境提供一个中心化的外部配置</li><li>配置中心支持动态化的配置更新，可以分环境部署</li><li>运行期间可以动态调整配置，不需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生改动时，服务不需要重启即可感知到配置的变化并应用新的配置</li><li>配置信息以 RESTful 风格的接口暴露</li></ul><p><strong>配置文件分级：</strong></p><ul><li><code>application.yml</code> 是用户级的资源配置项；<code>bootstrap.yml</code> 是系统级的配置项，优先级更高</li><li>Spring Cloud 会创建一个 <code>Bootstrap Context</code> 作为 Spring 应用的 <code>Application Context</code> 的父上下文；两个上下文共享一个从外部获取的 <code>Environment</code></li><li>初始化时 <code>Bootstrap Context</code> 负责从外部源加载配置属性并解析配置</li><li>两个上下文有着不同的约定，保证它们之间的配置分离</li><li><code>Bootstrap Context</code> 属性有高优先级，默认情况下不会被本地配置覆盖</li><li>跟配置中心对接的客户端中的配置文件需要改成 <code>bootstrap.yml</code></li></ul><p><strong>管理各个环境的配置文件参数，如：</strong></p><ul><li>数据库</li><li>缓存</li><li>存储</li><li>业务应用</li></ul><p><strong>配置中心的作用：</strong></p><ul><li><p>本地配置在服务启动时加载，此后修改配置可以不用重启服务</p></li><li><p>不适用配置中心时多个环境（prod、dev、sit、uat）的配置可能混乱</p></li><li><p>使用配置中心时，如果出现配置错误可以比较容易的回滚到指定版本</p></li><li><p>为微服务提供集中化的外部配置支持，配置服务器为各个不同的微服务应用的所有环境提供一个中心化的外部配置</p></li><li><p>配置中心支持动态化的配置更新，可以分环境部署</p></li><li><p>运行期间可以动态调整配置，不需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</p></li><li><p>当配置发生改动时，服务不需要重启即可感知到配置的变化并应用新的配置</p></li><li><p>配置信息以 RESTful 风格的接口暴露</p></li></ul><p><strong>常用配置中心及其功能对比：</strong></p><div class="table-wrapper"><table><thead><tr><th style="text-align:center;">功能</th><th style="text-align:center;">Spring Cloud Config</th><th style="text-align:center;">Apollo</th><th style="text-align:center;">Nacos</th></tr></thead><tbody><tr><td style="text-align:center;">实效性</td><td style="text-align:center;">Spring Cloud Bus</td><td style="text-align:center;">HTTP长轮询</td><td style="text-align:center;">HTTP长轮询</td></tr><tr><td style="text-align:center;">权限控制</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td></tr><tr><td style="text-align:center;">灰度发布</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td></tr><tr><td style="text-align:center;">版本管理</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td></tr><tr><td style="text-align:center;">版本回滚</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td></tr><tr><td style="text-align:center;">多环境支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td></tr></tbody></table></div><br><h2 id="消息总线" tabindex="-1"><a class="header-anchor" href="#消息总线" aria-hidden="true">#</a> 消息总线</h2><ul><li>这里说的是 <code>Spring Cloud Bus</code></li><li>在微服务架构的系统中，通常会使用轻量级的消息代理来构建一个公用的消息主题，并让系统中所有微服务实例都链接上来。由于该主题中产生的消息会被所有实例监听和消费，所以称之为消息总线</li><li>基本原理是客户端实例都会监听消息队列中的同一个 <code>topic</code>（默认是 <code>Spring Cloud Bus</code>），当一个服务刷新数据时，它会把这个消息放到该主题中，这样其他监听同一个主题的服务就能得到新的通知，并更新自身的状态</li><li>可以配合 <code>Spring Cloud Config</code> 实现真正的动态配置刷新</li><li>支持两种消息代理：<code>RabbitMQ</code> 和 <code>Kafaka</code></li><li><code>Spring Cloud Bus</code> 是将分布式系统的节点与轻量级消息系统链接起来的框架，整合了 Java 事件处理机制和消息中间件的功能</li><li>能够管理和传播分布式系统间的消息，就像一个分布式执行器，可以用于广播状态更改、事件推送等，也可以作为微服务间的通信通道</li></ul><p><strong>两种触发方式：</strong></p><ul><li><p>利用消息总线触发一个客户端 <code>/bus/refresh</code> 端点从而刷新所有客户端的配置</p></li><li><p>利用消息总线触发一个服务端 <code>/bus/refresh</code> 端点从而刷新所有客户端的配置</p></li><li><p>注意：需要给配置中心的服务端和客户端都加上消息总线的支持</p></li></ul><p><strong>使用客户端通知的弊端：</strong></p><ul><li>打破了微服务的职责单一性，因为客户端本身是业务模块，本就不应该承担配置刷新的职责</li><li>破坏了微服务个节点的平衡性</li><li>存在其他的局限性，如微服务在迁移的时候，网络地址是常常发生改变的，如果这时候想要刷新可能需要更多的修改</li></ul><br><h2 id="消息驱动" tabindex="-1"><a class="header-anchor" href="#消息驱动" aria-hidden="true">#</a> 消息驱动</h2><ul><li><p>这里说的是 <code>Spring Cloud Stream</code></p></li><li><p>构建消息驱动微服务的框架，屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型</p></li><li><p>应用程序通过 inputs 或者 outputs 来与 Spring Cloud Stream 中的 binder 对象交互</p></li><li><p>binder 对象负责与消息中间件交互，我们只需要配置绑定即可，即只需要搞清楚如何与 Stream 交互就可以方便使用消息驱动的方式</p></li><li><p>通过 Spring Integration 来连接消息代理中间件以实现消息事件驱动</p></li><li><p>Stream 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布-订阅、消费组、分区的三个核心概念</p></li></ul><p><strong>引入了 Stream 之后：</strong></p><ul><li>Stream 完成了大一统的任务（虽然现在只能选择 RabbitMQ 或者 Kafaka）</li><li>绑定器作为中间层能够完美实现应用程序与消息中间件之间细节的隔离，通过向应用程序暴露统一的 Channel，使得应用程序之间不需要再考虑各种不同的消息中间件的实现</li></ul><p><strong>Stream 标准流程：</strong></p><ul><li>Binder：方便连接中间件，可以屏蔽差异</li><li>Channel：对 Queue 的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过 Channel 对队列进行配置</li><li>Source 和 Sink：可以理解为参照对象是 Stream 自身，从 Stream 发布消息就是输出，接收消息就是输入</li></ul><br><h2 id="链路追踪" tabindex="-1"><a class="header-anchor" href="#链路追踪" aria-hidden="true">#</a> 链路追踪</h2><p>调用链：分布式系统中用于追踪用户的请求过程，包括：</p><ul><li>数据采集</li><li>数据传输</li><li>数据存储</li><li>数据分析</li><li>数据可视化展示</li></ul><p><strong>链路追踪的作用：</strong></p><ul><li>调用链可以用于微服务代码的调式和服务监控，可以帮助改善性能和缺陷</li><li>分布式系统中一次请求可能经过多个模块、中间件、服务器实例，这些请求还有可能是并发的，使用链路追踪就可以确定这些过程的先后顺序</li><li>主要是可以在日益复杂的业务系统中快速地定位问题所在</li></ul><p><strong>常用链路追踪组件：</strong></p><div class="table-wrapper"><table><thead><tr><th style="text-align:center;">序号</th><th style="text-align:center;">名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">SkyWalking</td><td style="text-align:center;">追踪、监控、诊断分布式系统</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">Zipkin</td><td style="text-align:center;">通过一系列拦截器采集数据监控系统性能</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">Spring Cloud Sleuth</td><td style="text-align:center;">官方整合，兼容了 Zipkin</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">Pinpoint</td><td style="text-align:center;">无入侵的轻量 APM 监控工具</td></tr></tbody></table></div><br>',67);function C(v,m){const n=d("router-link"),r=d("ExternalLinkIcon");return s(),c("div",null,[p,x,t("nav",h,[t("ul",null,[t("li",null,[l(n,{to:"#分布式组件作用"},{default:i(()=>[e("分布式组件作用")]),_:1}),t("ul",null,[t("li",null,[l(n,{to:"#动态"},{default:i(()=>[e("动态")]),_:1})]),t("li",null,[l(n,{to:"#服务注册"},{default:i(()=>[e("服务注册")]),_:1})]),t("li",null,[l(n,{to:"#服务调用与负载均衡"},{default:i(()=>[e("服务调用与负载均衡")]),_:1})]),t("li",null,[l(n,{to:"#服务降级与熔断限流"},{default:i(()=>[e("服务降级与熔断限流")]),_:1})]),t("li",null,[l(n,{to:"#服务网关"},{default:i(()=>[e("服务网关")]),_:1})]),t("li",null,[l(n,{to:"#服务配置中心"},{default:i(()=>[e("服务配置中心")]),_:1})]),t("li",null,[l(n,{to:"#消息总线"},{default:i(()=>[e("消息总线")]),_:1})]),t("li",null,[l(n,{to:"#消息驱动"},{default:i(()=>[e("消息驱动")]),_:1})]),t("li",null,[l(n,{to:"#链路追踪"},{default:i(()=>[e("链路追踪")]),_:1})])])])])]),y,u,t("div",b,[_,t("p",null,[t("a",S,[e("Spring Cloud 2020.0发布，移除了Hystrix、Zuul等Netflix组件"),l(r)])])]),f])}const k=a(g,[["render",C],["__file","分布式组件概述.html.vue"]]);export{k as default};
