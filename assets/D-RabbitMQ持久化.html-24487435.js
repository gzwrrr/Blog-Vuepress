import{_ as l,Q as i,S as o,U as a,W as e,X as t,a8 as n,a9 as c,H as p}from"./framework-d7e1aa10.js";const u={},r=a("h1",{id:"rabbitmq-持久化",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#rabbitmq-持久化","aria-hidden":"true"},"#"),n(" RabbitMQ 持久化")],-1),d=a("div",{class:"hint-container info"},[a("p",{class:"hint-container-title"},"消息持久化"),a("p",null,"消息持久化是指在消息发送到 RabbitMQ 后，即使 RabbitMQ 服务重启或崩溃，消息也不会丢失，可以在重启或崩溃后重新加载到队列中。")],-1),b={class:"table-of-contents"},h=c(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p><strong>消息持久化的作用：</strong></p><ul><li>保障当 RabbitMQ 服务停止以后生成者发过来的消息不丢失</li><li>默认情况下 RabbitMQ 退出或由于某种原因崩溃时，会忽视队列和消息</li><li>确保消息不会丢失需要做两件事：将队列和消息都标记为持久化</li></ul><br><p><strong>需要注意的是：</strong></p><p>将消息设置为持久化并不是绝对可靠的，因为在消息投递到队列和存储到磁盘之间可能会存在短暂的时间窗口，在此期间，如果 RabbitMQ 宕机，则消息可能会丢失。因此，需要通过使用备份和镜像队列等机制来提高消息的可靠性。</p><p>消息持久化适用于以下场景：</p><ul><li>消息重要性较高，不允许丢失。</li><li>消息过多时，需要做到 RabbitMQ 宕机后能够自动恢复。</li><li>消息处理时间较长，需要保证在消息处理过程中 RabbitMQ 不会丢失消息。</li></ul><h2 id="_1-队列持久化" tabindex="-1"><a class="header-anchor" href="#_1-队列持久化" aria-hidden="true">#</a> 1.队列持久化</h2><ul><li>非持久化的队列在 RabbitMQ 重启后会被删除掉，持久化需要在声明队列时把 durable 参数设置为持久化</li><li>需要注意的是，如果之前声明的队列不是持久化的，需要把原先的队列先删除或者重新创建一个持久化的队列，否则会出现错误</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 声明队列，设置持久化</span>
<span class="token keyword">boolean</span> durable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span> durable<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-消息持久化" tabindex="-1"><a class="header-anchor" href="#_2-消息持久化" aria-hidden="true">#</a> 2.消息持久化</h2><ul><li>消息持久化需要修改生产者的代码，将 MessageProperties.PERSISTENCE_TEXT_PLAIN 加入声明中</li><li>将消息标记为持久化不能保证不会丢失消息，依然存在消息未存储进磁盘就挂掉的情况</li></ul><h2 id="_3-不公平分发" tabindex="-1"><a class="header-anchor" href="#_3-不公平分发" aria-hidden="true">#</a> 3.不公平分发</h2><ul><li>轮询分发在消费者处理速度不等的情况下有效率低的弊端</li><li>可以通过在消费者处设置 channel.basicQos(1) 实现不公平分发</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 设置不公平分发</span>
<span class="token keyword">int</span> preFetchCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span>preFetchCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> deliverCallback<span class="token punctuation">,</span> cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-预取值" tabindex="-1"><a class="header-anchor" href="#_4-预取值" aria-hidden="true">#</a> 4.预取值</h2><ul><li>属于不公平分发，通过设置 preFetchCount 的数量确定，设置为 1，即上面的情况是最保守的，这会使得吞吐量变得很低，特别是在消费者连接延迟严重或消费者连接等待时间较长的情况</li><li>消息和手动确认是异步发送的，存在一个未确认的消息缓冲区。需要限制此缓冲区的大小，避免里面有无限多的未确认消息，这时可以通过 basic.qos 设置预取值来完成</li><li>预取指定义通道上允许的未确认消息的最大数量，一旦数量达到配置的数量，RabbitMQ 就会停止在信道上传递更多的信息</li><li>消息应答和预取值对用户吞吐量有重大影响，通常增加预取指将提高消费者传递消息的速度</li><li>自动应答传输效率是最佳的，但是这种情况下未处理的消息数量也会增加，从而增加消费者的内存消耗</li><li>100 到 300 范围内的预取值通常可以提供最佳的吞吐量，并且不会给消费者带来太大的风险</li></ul>`,18);function _(k,v){const s=p("router-link");return i(),o("div",null,[r,d,a("nav",b,[a("ul",null,[a("li",null,[e(s,{to:"#rabbitmq-持久化"},{default:t(()=>[n("RabbitMQ 持久化")]),_:1}),a("ul",null,[a("li",null,[e(s,{to:"#前言"},{default:t(()=>[n("前言")]),_:1})]),a("li",null,[e(s,{to:"#_1-队列持久化"},{default:t(()=>[n("1.队列持久化")]),_:1})]),a("li",null,[e(s,{to:"#_2-消息持久化"},{default:t(()=>[n("2.消息持久化")]),_:1})]),a("li",null,[e(s,{to:"#_3-不公平分发"},{default:t(()=>[n("3.不公平分发")]),_:1})]),a("li",null,[e(s,{to:"#_4-预取值"},{default:t(()=>[n("4.预取值")]),_:1})])])])])]),h])}const f=l(u,[["render",_],["__file","D-RabbitMQ持久化.html.vue"]]);export{f as default};
