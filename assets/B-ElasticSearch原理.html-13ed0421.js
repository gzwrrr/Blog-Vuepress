import{_ as i,Q as r,S as d,U as e,W as n,X as l,a8 as a,a9 as c,H as t}from"./framework-d7e1aa10.js";const p={},u=e("h1",{id:"elasticsearch-原理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#elasticsearch-原理","aria-hidden":"true"},"#"),a(" ElasticSearch 原理")],-1),h={class:"table-of-contents"},m=c(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>Elasticsearch 尽可能地屏蔽了分布式系统的复杂性。这里列举了一些在后台自动执行的操作：</p><ul><li>分配文档到不同的容器 或 <em>分片</em> 中，文档可以储存在一个或多个节点中</li><li>按集群节点来均衡分配这些分片，从而对索引和搜索过程进行负载均衡</li><li>复制每个分片以支持数据冗余，从而防止硬件故障导致的数据丢失</li><li>将集群中任一节点的请求路由到存有相关数据的节点</li><li>集群扩容时无缝整合新节点，重新分配分片以便从离群节点恢复</li></ul><h2 id="文档" tabindex="-1"><a class="header-anchor" href="#文档" aria-hidden="true">#</a> 文档</h2><blockquote><p>通常情况下，我们使用的术语 <em>对象</em> 和 <em>文档</em> 是可以互相替换的。不过，有一个区别： 一个对象仅仅是类似于 hash 、 hashmap 、字典或者关联数组的 JSON 对象，对象中也可以嵌套其他的对象。 对象可能包含了另外一些对象。在 Elasticsearch 中，术语 <em>文档</em> 有着特定的含义。它是指最顶层或者根对象, 这个根对象被序列化成 JSON 并存储到 Elasticsearch 中，指定了唯一 ID。</p></blockquote><h2 id="集群原理" tabindex="-1"><a class="header-anchor" href="#集群原理" aria-hidden="true">#</a> 集群原理</h2><blockquote><p>对于大多数的数据库而言，通常需要对应用程序进行非常大的改动，才能利用上横向扩容的新增资源。 与之相反的是，ElastiSearch天生就是 <em>分布式的</em> ，它知道如何通过管理多节点来提高扩容性和可用性。 这也意味着你的应用无需关注这个问题。</p></blockquote><h3 id="空集群" tabindex="-1"><a class="header-anchor" href="#空集群" aria-hidden="true">#</a> 空集群</h3><blockquote><p>一个运行中的 Elasticsearch 实例称为一个节点，而集群是由一个或者多个拥有相同 <code>cluster.name</code> 配置的节点组成， 它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。</p></blockquote><p><strong>主节点：</strong></p><p>当一个节点被选举成为 <em>主</em> 节点时， 它将负责管理集群范围内的所有变更，例如增加、删除索引，或者增加、删除节点等。</p><p>主节点并不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。 任何节点都可以成为主节点。我们的示例集群就只有一个节点，所以它同时也成为了主节点。</p><p><strong>管理透明：</strong></p><p>作为用户，我们可以将请求发送到 <em>集群中的任何节点</em> ，包括主节点。</p><p>每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。</p><p>无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。</p><p>Elasticsearch 对这一切的管理都是透明的。</p><h3 id="健康监控" tabindex="-1"><a class="header-anchor" href="#健康监控" aria-hidden="true">#</a> 健康监控</h3><blockquote><p>Elasticsearch 的集群监控信息中包含了许多的统计数据，其中最为重要的一项就是 <em>集群健康</em> ， 它在 <code>status</code> 字段中展示为 <code>green</code> 、 <code>yellow</code> 或者 <code>red</code> 。</p></blockquote><p><code>status</code> 字段指示着当前集群在总体上是否工作正常。它的三种颜色含义如下：</p><ul><li><code>green</code>：所有的主分片和副本分片都正常运行。</li><li><code>yellow</code>：所有的主分片都正常运行，但不是所有的副本分片都正常运行。</li><li><code>red</code>：有主分片没能正常运行。</li></ul><h3 id="分片" tabindex="-1"><a class="header-anchor" href="#分片" aria-hidden="true">#</a> 分片</h3><p><strong>分片：</strong></p><ul><li>一个分片是一个底层的工作单元 ，它仅保存了全部数据中的一部分。</li><li>一个分片是一个 Lucene 的实例，以及它本身就是一个完整的搜索引擎。</li><li>一个分片可以是 <em>主</em> 分片或者 <em>副本</em> 分片。 索引内任意一个文档都归属于一个主分片，所以主分片的数目决定着索引能够保存的最大数据量。一个副本分片只是一个主分片的拷贝。副本分片作为硬件故障时保护数据不丢失的冗余备份，并为搜索和返回文档等读操作提供服务。在索引建立的时候就已经确定了主分片数，但是副本分片数可以随时修改。索引在默认情况下会被分配 5 个主分片。</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
   <span class="token property">&quot;settings&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 3 个主分片</span>
      <span class="token property">&quot;number_of_shards&quot;</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
      <span class="token comment">// 每个主分片 1 个副本</span>
      <span class="token property">&quot;number_of_replicas&quot;</span> <span class="token operator">:</span> <span class="token number">1</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>存储：</strong></p><ul><li>文档被存储和索引到分片内，但是应用程序是直接与索引而不是与分片进行交互。</li><li>Elasticsearch 是利用分片将数据分发到集群内各处的。</li><li>分片是数据的容器，文档保存在分片内，分片又被分配到集群内的各个节点里。</li><li>技术上来说，一个主分片最大能够存储 Integer.MAX_VALUE - 128 个文档，但是实际最大值还需要参考你的使用场景：包括你使用的硬件， 文档的大小和复杂程度，索引和查询文档的方式以及你期望的响应时长。</li></ul><p>**扩缩容：**当集群规模扩大或者缩小时， Elasticsearch 会自动的在各节点中迁移分片，使得数据仍然均匀分布在集群里。</p><h3 id="故障转移" tabindex="-1"><a class="header-anchor" href="#故障转移" aria-hidden="true">#</a> 故障转移</h3><p>可以在同一个目录内，完全依照启动第一个节点的方式来启动一个新节点。多个节点可以共享同一个目录。</p><p>当你在同一台机器上启动了第二个节点时，只要它和第一个节点有同样的 <code>cluster.name</code> 配置，它就会自动发现集群并加入到其中。</p>`,31),_={href:"https://www.elastic.co/guide/cn/elasticsearch/guide/current/important-configuration-changes.html#unicast",target:"_blank",rel:"noopener noreferrer"},b=c('<p>当第二个节点加入到集群后，每个主分片对应的副本分片都会被分配到该节点上。 这意味着当集群内任何一个节点出现问题时，我们的数据都完好无损。</p><p>所有新近被索引的文档都将会保存在主分片上，然后被并行的复制到对应的副本分片上。这就保证了我们既可以从主分片又可以从副本分片上获得文档。</p><h3 id="水平扩容" tabindex="-1"><a class="header-anchor" href="#水平扩容" aria-hidden="true">#</a> 水平扩容</h3><p>水平扩容后，为了分散负载会对分片进行重新分配</p><p>分片是一个功能完整的搜索引擎，它拥有使用一个节点上的所有资源的能力。</p><p>拥有6个分片（3个主分片和3个副本分片）的索引可以最大扩容到6个节点，每个节点上存在一个分片，并且每个分片拥有所在节点的全部资源。</p><p>读操作——搜索和返回数据——可以同时被主分片 <em>或</em> 副本分片所处理，所以拥有越多的副本分片，将拥有越高的吞吐量。</p><p>更大的扩容：主分片的数目在索引创建时就已经确定了下来，但是副本分片的数量可以随时进行调整（如果只是在相同节点数目的集群上增加更多的副本分片并不能提高性能，因为每个分片从节点上获得的资源会变少。 需要增加更多的硬件资源来提升吞吐量）。</p>',8);function f(k,v){const s=t("router-link"),o=t("ExternalLinkIcon");return r(),d("div",null,[u,e("nav",h,[e("ul",null,[e("li",null,[n(s,{to:"#elasticsearch-原理"},{default:l(()=>[a("ElasticSearch 原理")]),_:1}),e("ul",null,[e("li",null,[n(s,{to:"#前言"},{default:l(()=>[a("前言")]),_:1})]),e("li",null,[n(s,{to:"#文档"},{default:l(()=>[a("文档")]),_:1})]),e("li",null,[n(s,{to:"#集群原理"},{default:l(()=>[a("集群原理")]),_:1}),e("ul",null,[e("li",null,[n(s,{to:"#空集群"},{default:l(()=>[a("空集群")]),_:1})]),e("li",null,[n(s,{to:"#健康监控"},{default:l(()=>[a("健康监控")]),_:1})]),e("li",null,[n(s,{to:"#分片"},{default:l(()=>[a("分片")]),_:1})]),e("li",null,[n(s,{to:"#故障转移"},{default:l(()=>[a("故障转移")]),_:1})]),e("li",null,[n(s,{to:"#水平扩容"},{default:l(()=>[a("水平扩容")]),_:1})])])])])])])]),m,e("p",null,[a("但是在不同机器上启动节点的时候，为了加入到同一集群，你需要配置一个可连接到的单播主机列表（"),e("a",_,[a("最好使用单播代替组播"),n(o)]),a("）。")]),b])}const x=i(p,[["render",f],["__file","B-ElasticSearch原理.html.vue"]]);export{x as default};
