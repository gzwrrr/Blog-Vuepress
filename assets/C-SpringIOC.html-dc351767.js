import{_ as c,Q as l,S as p,U as n,W as s,X as e,a8 as a,a9 as r,H as o}from"./framework-d7e1aa10.js";const u={},d=n("h1",{id:"spring-ioc",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring-ioc","aria-hidden":"true"},"#"),a(" Spring IOC")],-1),k={class:"table-of-contents"},g={class:"hint-container info"},m=n("p",{class:"hint-container-title"},"相关文章",-1),f={href:"https://www.iocoder.cn/Fight/Interview-poorly-asked-Spring-IOC-process-1/",target:"_blank",rel:"noopener noreferrer"},h=r(`<p>核心概念：控制反转、依赖注入</p><ol><li>**控制反转：**对象或资源交由 IOC 容器管理，以此反转对对象的控制权（没有反转时控制权在我们开发者手中）</li><li>**依赖注入：**依赖注入就是控制反转的一种具体实现，即控制反转是一种思想，依赖注入是这种思想的具体实现方式</li></ol><p>Spring 中的 IoC 实现简单说就是「工厂模式」+「反射机制」</p><h2 id="ioc-容器的配置方式" tabindex="-1"><a class="header-anchor" href="#ioc-容器的配置方式" aria-hidden="true">#</a> IOC 容器的配置方式</h2><ol><li>XML 配置</li><li>Java 硬编码配置，配合 <code>@Configuration</code> 注解</li><li>注解配置，例如加上 <code>@Component，@Controller，@Service，@Repository</code> 等注解直接将类托管给容器</li></ol><h2 id="依赖注入的方式" tabindex="-1"><a class="header-anchor" href="#依赖注入的方式" aria-hidden="true">#</a> 依赖注入的方式</h2><ol><li>构造方法注入</li><li>Setter 注入</li><li>接口注入（Spring 中没有提供）</li></ol><p>推荐使用 <strong>构造器</strong> 的注入方式，这样能够保证注入的组件不变，而且也能确保需要的依赖不为空</p><p>开发中一般基于注解注入（以@Autowired（自动注入）注解注入为例，修饰符有三个属性：Constructor，byType，byName。默认按照byType注入）</p><h3 id="autowired、-resource、-inject" tabindex="-1"><a class="header-anchor" href="#autowired、-resource、-inject" aria-hidden="true">#</a> @Autowired、@Resource、@Inject</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// @Autowired</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Autowired</span> <span class="token punctuation">{</span>
  <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// @Resource</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Resource</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// @Inject</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Inject</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>@Autowired</code>：可以加在构造方法、方法、方法参数、字段上，默认是根据类型（byType）进行自动装配。如果需要 byName，则需要配合 <code>@Qualifier</code></li><li><code>@Resource</code>：可以加在字段、方法、接口、类上，可以指定注入对象的名称</li><li><code>@Inject</code>：可以加在构造函数、方法、字段上，默认根据类型装配，指定名称需要配合 <code>@Named</code>（类似于 <code>@Qualifier</code>）</li></ol><p><strong>区别：</strong></p><ol><li><code>@Autowired</code> 是 Spring 自带的，<code>@Resource</code> 是 JSR250 规范实现的，<code>@Inject</code> 是 JSR330 规范实现的</li><li><code>@Autowired</code>、<code>@Inject</code> 用法基本一样，不同的是 <code>@Inject</code> 没有 required 属性</li><li><code>@Autowired</code>、<code>@Inject</code> 是默认按照类型匹配的，<code>@Resource</code> 是按照名称匹配的</li><li><code>@Autowired</code> 如果需要按照名称匹配需要和 <code>@Qualifier</code> 一起使用，<code>@Inject</code> 和 <code>@Named</code> 一起使用，<code>@Resource</code> 则通过name进行指定</li></ol><h2 id="beanfactory-和-beanregistry" tabindex="-1"><a class="header-anchor" href="#beanfactory-和-beanregistry" aria-hidden="true">#</a> BeanFactory 和 BeanRegistry</h2><p>BeanFactory： 工厂模式定义了IOC容器的基本功能规范，其下的子类或者接口：</p><ol><li>ListableBeanFactory：该接口定义了访问容器中 Bean 基本信息的若干方法，如查看Bean 的个数、获取某一类型 Bean 的配置名、查看容器中是否包括某一 Bean 等方法</li><li>HierarchicalBeanFactory：可以访问父容器接口</li><li>ConfiguarableBeanFactory：是一个重要的接口，增强了 IoC 容器的可定制性，它定义了设置类装载器、属性编辑器、容器初始化后置处理器等方法</li><li>AutowireCapableBeanFactory：定义了按某种规则进行自动装配的方法</li></ol><p>注：ApplicationCentext 也实现了 BeanFactory（这是 Spring 中的两种 IoC 容器），因为上下文对象对资源、应用事件等的控制也必须遵守 BeanFactory 的 Bean 规范</p><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">BeanFactory</th><th style="text-align:left;">ApplicationContext</th></tr></thead><tbody><tr><td style="text-align:left;">它使用懒加载</td><td style="text-align:left;">它使用即时加载</td></tr><tr><td style="text-align:left;">它使用语法显式提供资源对象</td><td style="text-align:left;">它自己创建和管理资源对象</td></tr><tr><td style="text-align:left;">不支持国际化</td><td style="text-align:left;">支持国际化</td></tr><tr><td style="text-align:left;">不支持基于依赖的注解</td><td style="text-align:left;">支持基于依赖的注解</td></tr></tbody></table></div><p>BeanFactory 最常用的是 XmlBeanFactory 。它可以根据 XML 文件中定义的内容，创建相应的 Bean</p><p>ApplicationContext 最常用的是：ClassPathXmlApplicationContext、FileSystemXmlApplicationContext、XmlWebApplicationContext、ConfigServletWebServerApplicationContext（Spring Boot 中使用，也最常用）</p><br><p>BeanRegistry： 向IOC容器手工注册 BeanDefinition 对象的方法</p><blockquote><p>Spring 配置文件中每一个<code>&lt;bean&gt;</code>节点元素在 Spring 容器里都通过一个 BeanDefinition 对象表示，它描述了 Bean 的配置信息。而 BeanDefinitionRegistry 接口提供了向容器手工注册 BeanDefinition 对象的方法。</p></blockquote><p>BeanDefinition 定义了 Bean 对象之间的关系，BeanDefinitionReader 用于解析 BeanDefinition。BeanDefinitionHolder 是 BeanDefination 的包装类，用来存储BeanDefinition，name以及aliases等。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><ul><li>Spring 容器使用<strong>依赖注入</strong>来管理组成应用程序的 Bean 对象</li><li>容器通过读取提供的<strong>配置元数据</strong> Bean Definition 来接收对象进行实例化，配置和组装的指令</li><li>该配置元数据 Bean Definition 可以通过 XML，Java 注解或 Java Config 代码<strong>提供</strong></li></ul><p><strong>总览：</strong></p><figure><img src="https://www.pdai.tech/images/spring/springframework/spring-framework-ioc-source-71.png" alt="IOC容器" tabindex="0" loading="lazy"><figcaption>IOC容器</figcaption></figure><p><strong>初始化过程：</strong></p><figure><img src="https://www.pdai.tech/images/spring/springframework/spring-framework-ioc-source-9.png" alt="IOC初始化过程" tabindex="0" loading="lazy"><figcaption>IOC初始化过程</figcaption></figure>`,31);function b(v,y){const t=o("router-link"),i=o("ExternalLinkIcon");return l(),p("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[s(t,{to:"#spring-ioc"},{default:e(()=>[a("Spring IOC")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#ioc-容器的配置方式"},{default:e(()=>[a("IOC 容器的配置方式")]),_:1})]),n("li",null,[s(t,{to:"#依赖注入的方式"},{default:e(()=>[a("依赖注入的方式")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#autowired、-resource、-inject"},{default:e(()=>[a("@Autowired、@Resource、@Inject")]),_:1})])])]),n("li",null,[s(t,{to:"#beanfactory-和-beanregistry"},{default:e(()=>[a("BeanFactory 和 BeanRegistry")]),_:1})]),n("li",null,[s(t,{to:"#小结"},{default:e(()=>[a("小结")]),_:1})])])])])]),n("div",g,[m,n("ol",null,[n("li",null,[n("a",f,[a("面试问烂的 Spring IOC 过程"),s(i)])])])]),h])}const B=c(u,[["render",b],["__file","C-SpringIOC.html.vue"]]);export{B as default};
