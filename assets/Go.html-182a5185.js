import{_ as l,Q as c,S as u,U as n,W as a,X as p,a8 as s,a9 as o,H as i}from"./framework-d7e1aa10.js";const r={},d=n("h1",{id:"go-简单使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#go-简单使用","aria-hidden":"true"},"#"),s(" Go 简单使用")],-1),k={class:"table-of-contents"},v=o('<h2 id="go-的特点" tabindex="-1"><a class="header-anchor" href="#go-的特点" aria-hidden="true">#</a> Go 的特点</h2><ul><li>犹如 C + Python，具有垃圾回收机制，是强类型语言，也是静态语言，编译型语言</li><li>天然支持并发</li><li>管道通信机制</li><li>支持返回多值</li></ul><p>GO 中没有 <code>public</code> 或者 <code>private</code> 等关键字，作为代替的是：如果变量名、函数名、常量名的「首字母大写」，则表明可以被其他的包访问；如果「首字母小写」，则表明只能在本包中使用</p><p>注意：GO 有很强的语法规范，设计理念是一种事情有且只有一种方法完成，目的是让代码不产生太多歧义，比如 GO 中不支持「三目运算符」</p><p>【补充】</p><p>GO 语言中有跳转控制语句 <code>goto</code>，可以无条件的转移到程序中指定的行</p><p>该语句通常与条件语句配合使用，实现跳转转移，跳出循环等功能</p><p>虽然有该特性，但是 GO 官方不建议使用 goto 语句，这样可以避免程序流程的混乱</p><p>GO 的优势：</p><ul><li>易上手，有丰富的标准库</li><li>基于 goroutines 和 channels 的简单并发编程</li><li>性能优越（与 Java 相比 Go 打败 Java 地方是内存使用和垃圾回收）</li><li>在语言层面定义了源码的格式化</li><li>有标准化的测试框架</li><li>defer 延时处理</li><li>有垃圾回收机制（这点有些人也认为是缺点，因为有经验的工程师宁愿掌握对内存的管理；另外一点就是 Rust 也有内存管理机制，但是并没有使用 GC）</li></ul><p>GO 的缺陷：</p><ul><li>目前还没有泛型、枚举、函数式编程（2022 之后就有了）</li><li>忽略现代语言设计需要的进步，可能导致少即是多的情况</li><li>异常处理比较复杂且痛苦（Rust 中也没有真正的异常，但是通过泛型和宏规避了这一点）</li><li>依赖管理痛苦（2022 及之后就改善了）</li><li>结构体易变，需要使用到深拷贝</li><li>除了 map 和 slice 之外几乎没有其他的数据结构</li></ul><h2 id="生态" tabindex="-1"><a class="header-anchor" href="#生态" aria-hidden="true">#</a> 生态</h2>',13),m={class:"table-wrapper"},b=n("thead",null,[n("tr",null,[n("th",null,"软件"),n("th",null,"描述"),n("th",null,"链接")])],-1),g=n("td",null,"docker",-1),f=n("td",null,"家喻户晓的容器技术",-1),h={href:"https://github.com/moby/moby",target:"_blank",rel:"noopener noreferrer"},y=n("td",null,"kubernetes",-1),w=n("td",null,"容器编排引擎，google出品",-1),q={href:"https://github.com/kubernetes/kubernetes",target:"_blank",rel:"noopener noreferrer"},_=n("td",null,"etcd",-1),x=n("td",null,"分布式服务注册发现系统",-1),G={href:"https://github.com/etcd-io/etcd",target:"_blank",rel:"noopener noreferrer"},P=n("td",null,"influxdb",-1),O=n("td",null,"时序数据库",-1),S={href:"https://github.com/influxdata/influxdb",target:"_blank",rel:"noopener noreferrer"},C=n("td",null,"grafana",-1),A=n("td",null,"数据监控可视化看板",-1),I={href:"https://github.com/grafana/grafana",target:"_blank",rel:"noopener noreferrer"},M=n("td",null,"prometheus",-1),N=n("td",null,"开源监控系统",-1),E={href:"https://github.com/prometheus/prometheus",target:"_blank",rel:"noopener noreferrer"},D=n("td",null,"consul",-1),R=n("td",null,"分布式服务发现系统",-1),F={href:"https://github.com/hashicorp/consul",target:"_blank",rel:"noopener noreferrer"},T=n("td",null,"nsq",-1),L=n("td",null,"亿级消息队列",-1),U={href:"https://github.com/nsqio/nsq",target:"_blank",rel:"noopener noreferrer"},B=n("td",null,"TiDB",-1),V=n("td",null,"分布式数据库, go + rust 打造",-1),X={href:"https://github.com/pingcap/tidb",target:"_blank",rel:"noopener noreferrer"},H=o(`<h2 id="常量" tabindex="-1"><a class="header-anchor" href="#常量" aria-hidden="true">#</a> 常量</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 常量配合 iota 关键字</span>
<span class="token keyword">const</span> <span class="token punctuation">(</span>
	a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token comment">// iota = 0, a = 1, b = 2</span>
    c<span class="token punctuation">,</span> d					  <span class="token comment">// iota = 1, c = 2, d = 3</span>
    e<span class="token punctuation">,</span> f					  <span class="token comment">// iota = 2, e = 3, f = 4</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p><strong>变量三种使用细节：</strong></p><ol><li>指定变量类型后不赋值，则会使用默认值</li><li>根据值自行判断变量的类型，此时不用指定变量的类型</li><li>定义变量时可以省略 <code>var</code>，可以使用 <code>i := 10</code> 的形式定义变量并自动进行类型推导</li></ol><p><strong>基本数据类型：</strong></p><ul><li>数值型 <ul><li>整数类型（int，int8，int16，int32，int64，uint，uint8，uint16，uint32，byte）</li><li>浮点类型（float32，float64）</li></ul></li><li>字符型（没有专门的字符型，是使用 byte 来保存单个字符类型的，保存的是字符的码值，超过后应该用更大的整型保存）</li><li>布尔型</li><li>字符串（官方将字符串归属到基本数据类型...）</li></ul><p><strong>派生类型/复杂类型：</strong></p><ol><li>指针</li><li>数组</li><li>结构体</li><li>管道</li><li>函数（也属于一种类型）</li><li>切片</li><li>接口</li><li>map</li></ol><p><strong>类型转化：</strong></p><p>Go 中不同类型的变量之间需要进行「显式转化」，即 Go 中数据类型不能自动转换</p><p>任意数值类型都可以相互转换，但是当超出转换到的类型的范围时，会直接做溢出处理，即不会报错，但是结果不一定是期望得到的，所以转换时需要特别小心</p><p>数值型与字符串的相互转换需要使用到两个包：<code>fmt</code> 和 <code>strconv</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
	g1 <span class="token operator">=</span> <span class="token number">10</span>
	g2 <span class="token operator">=</span> <span class="token string">&quot;heehh&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;ahahhaa&quot;</span><span class="token punctuation">)</span>

	<span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

	<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>

	str2 <span class="token operator">:=</span> <span class="token string">&quot;hello2&quot;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>

	n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3 <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;str&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;str2&quot;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;n1&quot;</span><span class="token punctuation">,</span> n1<span class="token punctuation">,</span> <span class="token string">&quot;n2&quot;</span><span class="token punctuation">,</span> n2<span class="token punctuation">,</span> <span class="token string">&quot;n3&quot;</span><span class="token punctuation">,</span> n3<span class="token punctuation">)</span>

	<span class="token keyword">var</span> f1 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">32.32</span>
	<span class="token keyword">var</span> f2 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">.32</span>
	<span class="token keyword">var</span> f3 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">.32e2</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;f1&quot;</span><span class="token punctuation">,</span> f1<span class="token punctuation">,</span> <span class="token string">&quot;f2&quot;</span><span class="token punctuation">,</span> f2<span class="token punctuation">,</span> <span class="token string">&quot;f3&quot;</span><span class="token punctuation">,</span> f3<span class="token punctuation">)</span>

	<span class="token keyword">var</span> c1 <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;c1&quot;</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span>

	<span class="token keyword">var</span> b1 <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;b1&quot;</span><span class="token punctuation">,</span> b1<span class="token punctuation">)</span>

	<span class="token keyword">var</span> int1 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">32</span>
	<span class="token keyword">var</span> float1 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token function">float32</span><span class="token punctuation">(</span>int1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;int1&quot;</span><span class="token punctuation">,</span> int1<span class="token punctuation">,</span> <span class="token string">&quot;float1&quot;</span><span class="token punctuation">,</span> float1<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指针" tabindex="-1"><a class="header-anchor" href="#指针" aria-hidden="true">#</a> 指针</h2><p>值类型：基本数据类型、数组、结构体</p><p>引用类型：指针、切片、map、管道、接口</p><p>值类型与引用类型的特点：</p><ul><li>值类型：变量直接存储值，内存通常在栈中分配</li><li>引用类型：变量存储的是一个地址，这个地址对应的空间才是真正存储的数据，内存通常在堆上分配，当没有任何变量引用这个地址时，该地址对应的数据空间就变为了一个垃圾，在 GO 中由 GC 进行回收</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;i 的地址&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span>
    
	<span class="token keyword">var</span> p <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>i
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;p 的地址&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;p 指向的地址&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
	<span class="token comment">// 解引用</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;p 的值&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><p>GO 中的函数允许「多返回值」</p><p>在 GO 中使用函数脱离不了包的管理，包的规范包括：</p><ul><li>对文件打包时，包对应着一个文件夹，文件的包名通常和文件所在的文件夹名称一致，一般包名为小写字母</li><li>当要使用其他包函数或者变量时，需要先引入对应的包</li><li>引入包时，路径是从 <code>$GOPATH</code> 的 <code>src</code> 下开始寻找的</li><li>同一个包中（同一个文件夹中），不允许有两个重名的函数或者变量名，也就是说 GO 中没有「函数重载」的概念（会有其他方式代替）</li></ul><h3 id="函数的简单使用" tabindex="-1"><a class="header-anchor" href="#函数的简单使用" aria-hidden="true">#</a> 函数的简单使用</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> utils
<span class="token comment">// 函数名大写表示可以被其他包使用</span>
<span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>n1 <span class="token builtin">float64</span><span class="token punctuation">,</span> n2 <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在其他包中导入上面的包</span>
<span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;study_02/demo_03/utils&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> sum<span class="token punctuation">,</span> flag <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;sum&quot;</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> flag<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：GO 中函数也是一种数据类型，所以可以直接作为形参进行传递与调用</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>myGetSum <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span><span class="token punctuation">,</span> num1 <span class="token builtin">float64</span><span class="token punctuation">,</span> num2 <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">myGetSum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;sum&quot;</span><span class="token punctuation">,</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>getSum<span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了简化数据类型定义，GO 支持自定义类型，并且函数支持为「函数返回值」命名</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">type</span> myGetSumType <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span>
<span class="token keyword">func</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>myGetSum  myGetSumType<span class="token punctuation">,</span> num1 <span class="token builtin">float64</span><span class="token punctuation">,</span> num2 <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sum <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	sum <span class="token operator">=</span> <span class="token function">myGetSum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span>	
	<span class="token keyword">return</span> 
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;sum&quot;</span><span class="token punctuation">,</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>getSum<span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数形参还可以使用可变参数，这个可变参数本质是切片（可变参数一定是形参列表中的最后一个）</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">type</span> myGetSumType <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span>
<span class="token keyword">func</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>myGetSum  myGetSumType<span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sum <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	sum <span class="token operator">=</span> <span class="token function">myGetSum</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>	
	<span class="token keyword">return</span> 
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;sum&quot;</span><span class="token punctuation">,</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>getSum<span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="init-函数" tabindex="-1"><a class="header-anchor" href="#init-函数" aria-hidden="true">#</a> init 函数</h3><p>每个源文件中都可以包含一个 init 函数，该函数会在 main 函数执行前被 GO 调用</p><p>如果还有全局变量的定义，那么初始化的顺序为：全局变量定义 -&gt; init 函数 -&gt; main 函数</p><p>如果是一个文件引入一个包，而这个包中有变量定义和 init 函数，且引入该包的文件也有变量定义和 init 函数，那么初始化的顺序为：被引用的包的全局变量定义 -&gt; 被引用的包的 init 函数 -&gt; 本文件的全局变量定义 -&gt; 本文件的 init 函数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;init....&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数" aria-hidden="true">#</a> 匿名函数</h3><p>两种使用场景：</p><ul><li>定义匿名函数时就直接调用，这种函数只能调用一次</li><li>将匿名函数赋值给一个变量，再通过该变量来调用匿名函数</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 定义函数时就直接使用</span>
	sum1 <span class="token operator">:=</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n1 <span class="token operator">+</span> n2
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;sum1&quot;</span><span class="token punctuation">,</span> sum1<span class="token punctuation">)</span>

	<span class="token comment">// 使用变量接收匿名函数</span>
	getSum <span class="token operator">:=</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n1 <span class="token operator">+</span> n2
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;sum2&quot;</span><span class="token punctuation">,</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> n <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
		n <span class="token operator">=</span> n <span class="token operator">+</span> x
		<span class="token keyword">return</span> n
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	f <span class="token operator">:=</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 11</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 12</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">,</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 11</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">,</span> <span class="token function">AddUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 11</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="defer" tabindex="-1"><a class="header-anchor" href="#defer" aria-hidden="true">#</a> defer</h3><p>在函数执行中，经常需要创建资源（数据库连接、文件句柄等），为了能够在函数执行完后即使释放资源，提供了延时机制（defer）</p><p>defer 将语句放入栈时，会把相关的值同时拷贝到并入栈</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 当执行到 defer 时，暂时不会执行，会压入到一个独立的栈中</span>
	<span class="token comment">// 当函数执行完毕后，defer 标识的操作会以先入后出的顺序执行</span>
	<span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;结束操作 2&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;关闭资源 1&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;执行操作...&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h2><p><strong>简单使用：</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;errors&quot;</span>

<span class="token keyword">func</span> <span class="token function">readConf</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">&quot;config.ini&quot;</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;读取文件错误&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	err <span class="token operator">:=</span> <span class="token function">readConf</span><span class="token punctuation">(</span><span class="token string">&quot;cogfig.ini&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;程序继续执行...&quot;</span><span class="token punctuation">)</span>
	
	err <span class="token operator">=</span> <span class="token function">readConf</span><span class="token punctuation">(</span><span class="token string">&quot;config.in&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;程序继续执行...&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><p>数组的简单使用</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">arr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> hens <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">float64</span>
	hens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span>
	hens<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span>
	hens<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span>
	hens<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span>
	sum <span class="token operator">:=</span> <span class="token number">0.0</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		sum <span class="token operator">+=</span> hens<span class="token punctuation">[</span>i<span class="token punctuation">]</span>	
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> sum
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">printArrInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;arr&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
	<span class="token comment">// 数组的首地址与第一个元素的首地址一致</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;arr 的首地址: %p, 第一个元素的地址: %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	
	<span class="token comment">// 指定下标</span>
	<span class="token keyword">var</span> arr1 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;arr1&quot;</span><span class="token punctuation">,</span> arr1<span class="token punctuation">)</span>

    <span class="token comment">// for-range 遍历</span>
	<span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> arr1 <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;index: &quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">&quot;value: &quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组的注意事项：</p><ol><li>数组是多个「相同类型」的数据的组合，一旦声明了数组的长度，之后就不能改变</li><li><code>var arr[]int</code> 是声明了一个切片而不是数组（指定大小才是数组）</li><li>数组中的元素可以是任意数据类型，包括值类型和引用类型，但是不能二者混用</li><li>数组创建后，如果没有赋值则有默认零值</li><li>特别注意：GO 的数组属于「值类型」，再默认情况下进行的是值传递，因此会进行值拷贝，所以数组之间不会互相影响</li><li>如果想要在函数中修改原本的数组，需要使用「引用传递」</li></ol><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>// 形参必须写清除长度，不写的话就是切片类型
func editArr(arr *[3]int) {
	// 通过引用传递就可以直接修改原数组
	arr[0] = 100
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="切片" tabindex="-1"><a class="header-anchor" href="#切片" aria-hidden="true">#</a> 切片</h2><p>切片（动态数组）是数组的一个引用，因此切片是引用类型，在进行传递时遵守引用传递机制</p><p>切片长度可变，可以理解成可以动态变化的数组</p><h3 id="简单使用" tabindex="-1"><a class="header-anchor" href="#简单使用" aria-hidden="true">#</a> 简单使用</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// make 是一个内置函数，可以分配并初始化一个类型为：切片、map、通道的对象，第一个参数为类型，该函数返回的并非是一个指针，而是和第一个参数相同的类型</span>
   <span class="token comment">// 对于切片，必须 make 之后才可以使用</span>
   <span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
   <span class="token function">printSlice</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">printSlice</span><span class="token punctuation">(</span>x <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// cap 是切片的容量，可以动态变化</span>
   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;len=%d cap=%d slice=%v\\n&quot;</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="切片示例" tabindex="-1"><a class="header-anchor" href="#切片示例" aria-hidden="true">#</a> 切片示例</h3><p>将 arr 中从下标 <code>startIndex</code> 到 <code>endIndex-1</code> 下的元素创建为一个新的切片</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> arr<span class="token punctuation">[</span>startIndex<span class="token punctuation">:</span>endIndex<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认 <code>endIndex</code> 时将表示一直到arr的最后一个元素</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> arr<span class="token punctuation">[</span>startIndex<span class="token punctuation">:</span><span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认 <code>startIndex</code> 时将表示从 arr 的第一个元素开始</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span>endIndex<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过切片 s 初始化切片 s1</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s1 <span class="token operator">:=</span> s<span class="token punctuation">[</span>startIndex<span class="token punctuation">:</span>endIndex<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过内置函数 <strong>make()</strong> 初始化切片<strong>s</strong>，<strong>[]int</strong> 标识为其元素类型为 int 的切片</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token punctuation">:</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">,</span><span class="token builtin">cap</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注：string 类型底层是 byte 数组，同样可以进行切片，但是注意，字符串是不可变的，不能直接通过下标直接修改</p><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h2><blockquote><p>Map 是一种无序的键值对的集合。Map 最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> countryCapitalMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>
   <span class="token comment">/* 创建集合 */</span>
   countryCapitalMap <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>
   
   <span class="token comment">/* map 插入 key-value 对，各个国家对应的首都 */</span>
   countryCapitalMap<span class="token punctuation">[</span><span class="token string">&quot;France&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Paris&quot;</span>
   countryCapitalMap<span class="token punctuation">[</span><span class="token string">&quot;Italy&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Rome&quot;</span>
   countryCapitalMap<span class="token punctuation">[</span><span class="token string">&quot;Japan&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Tokyo&quot;</span>
   countryCapitalMap<span class="token punctuation">[</span><span class="token string">&quot;India&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;New Delhi&quot;</span>
   
   <span class="token comment">/* 使用 key 输出 map 值 */</span>
   <span class="token keyword">for</span> country <span class="token operator">:=</span> <span class="token keyword">range</span> countryCapitalMap <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Capital of&quot;</span><span class="token punctuation">,</span>country<span class="token punctuation">,</span><span class="token string">&quot;is&quot;</span><span class="token punctuation">,</span>countryCapitalMap<span class="token punctuation">[</span>country<span class="token punctuation">]</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   
   <span class="token comment">/* 查看元素在集合中是否存在 */</span>
   captial<span class="token punctuation">,</span> ok <span class="token operator">:=</span> countryCapitalMap<span class="token punctuation">[</span><span class="token string">&quot;United States&quot;</span><span class="token punctuation">]</span>
   <span class="token comment">/* 如果 ok 是 true, 则存在，否则不存在 */</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>ok<span class="token punctuation">)</span><span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Capital of United States is&quot;</span><span class="token punctuation">,</span> captial<span class="token punctuation">)</span>  
   <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Capital of United States is not present&quot;</span><span class="token punctuation">)</span> 
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体" aria-hidden="true">#</a> 结构体</h2><blockquote><p>结构体没有构造函数，通常使用工厂模式解决</p><p>结构体中还有「标签」，可以描述字段的含义</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Name <span class="token builtin">string</span> <span class="token string">\`学生名称\`</span> <span class="token comment">// 标签</span>
    Age <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token comment">// 和属性顺序无关</span>
<span class="token keyword">var</span> stu1 <span class="token operator">=</span> Student <span class="token punctuation">{</span>
    Name<span class="token punctuation">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
    Age<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 和属性顺序有关</span>
<span class="token keyword">var</span> stu2 <span class="token operator">=</span> Student <span class="token punctuation">{</span><span class="token string">&quot;lisi&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span><span class="token punctuation">}</span>

<span class="token comment">// 指针</span>
<span class="token keyword">var</span> stu3 <span class="token operator">*</span>Student <span class="token operator">=</span> <span class="token operator">&amp;</span>Student <span class="token punctuation">{</span><span class="token string">&quot;wangwu&quot;</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token punctuation">}</span>
<span class="token comment">// 也可以写成下面的形式</span>
<span class="token keyword">var</span> stu4 <span class="token operator">=</span> <span class="token operator">&amp;</span>Student <span class="token punctuation">{</span>
    Name<span class="token punctuation">:</span> <span class="token string">&quot;zhaoliu&quot;</span><span class="token punctuation">,</span>
    Age<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> student <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Name <span class="token builtin">string</span>
    Age <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token comment">// 工厂模式，只不过是创建单个</span>
<span class="token comment">// 下面的函数可以看成是构造函数</span>
<span class="token keyword">func</span> <span class="token function">Student</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>student <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>student <span class="token punctuation">{</span>
        Name<span class="token punctuation">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
    	Age<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h3><blockquote><p>跟指定类型进行绑定，只能由指定的类型进行调用</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token comment">// 和 A 类型绑定，只能由 A 类型调用</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>a A<span class="token punctuation">)</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">mian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a A
    <span class="token comment">// 调用方法，a 的拷贝被传入方法中</span>
    a<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h2><p>三大特性：</p><ol><li>封装</li><li>继承</li><li>多态</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Name <span class="token builtin">string</span>
    Age <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token comment">// * 传递引用，不加 * 则是拷贝值</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>stu <span class="token operator">*</span>Student<span class="token punctuation">)</span> <span class="token function">ShowInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>stu <span class="token operator">*</span>Student<span class="token punctuation">)</span> <span class="token function">ShowDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

<span class="token keyword">type</span> Pupil <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">// 继承，匿名结构体</span>
    Student
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Graduate <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">// 继承，匿名结构体</span>
    Student
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pupil <span class="token operator">:=</span> <span class="token operator">&amp;</span>Pupil<span class="token punctuation">{</span>
        <span class="token operator">&amp;</span>Student <span class="token punctuation">{</span>
            Name<span class="token punctuation">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
            Age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 通用调用写法</span>
    pupil<span class="token punctuation">.</span>Student<span class="token punctuation">.</span><span class="token function">ShowInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 也可以写成下面的形式</span>
    pupil<span class="token punctuation">.</span><span class="token function">ShowInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h2><blockquote><p>Go 语言提供了另外一种数据类型即接口，它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Phone <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> NokiaPhone <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>nokiaPhone NokiaPhone<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;I am Nokia, I can call you!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> IPhone <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>iPhone IPhone<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;I am iPhone, I can call you!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> phone Phone

    phone <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>NokiaPhone<span class="token punctuation">)</span>
    phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    phone <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>IPhone<span class="token punctuation">)</span>
    phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：空接口称为万能数据类型，因为空接口可以是任意类型的父类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>arg <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 断言数据类型，断言该类型是一个 string 类型</span>
    value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> arg<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;arg is string&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射" aria-hidden="true">#</a> 反射</h2><div class="hint-container info"><p class="hint-container-title">说明</p><p>Go 中每一个变量都对应一个 pair，存储了变量的「类型」和「值」，例如字符串为 <code>pair&lt;type: string, value: &quot;xxx&quot;&gt;</code></p></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;reflect&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">reflectsetvalue1</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	value<span class="token operator">:=</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
	<span class="token keyword">if</span> value<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>String<span class="token punctuation">{</span>
		value<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;欢迎来到W3Cschool&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
<span class="token keyword">func</span> <span class="token function">reflectsetvalue2</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	value<span class="token operator">:=</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token comment">// 反射中使用Elem()方法获取指针所指向的值</span>
	<span class="token keyword">if</span> value<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>String<span class="token punctuation">{</span>
		value<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;欢迎来到W3Cschool&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span> 

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	address <span class="token operator">:=</span> <span class="token string">&quot;www.w3cschool.cn&quot;</span>
	<span class="token comment">// reflectsetvalue1(address) </span>
    <span class="token comment">// 反射修改值必须通过传递变量地址来修改。若函数传递的参数是值拷贝，则会发生下述错误。</span>
    <span class="token comment">// panic: reflect: reflect.Value.SetString using unaddressable value</span>
	<span class="token function">reflectsetvalue2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>address<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="并发" tabindex="-1"><a class="header-anchor" href="#并发" aria-hidden="true">#</a> 并发</h2><blockquote><p>Go语言中的并发程序主要是通过基于CSP（communicating sequential processes）的goroutine和channel来实现，当然也支持使用传统的多线程共享内存的并发方式</p><p>Go语言中使用goroutine非常简单，只需要在函数或者方法前面加上go关键字就可以创建一个goroutine，从而让该函数或者方法在新的goroutine中执行</p><p>操作系统的线程一般都有固定的栈内存（通常为2MB），而 Go 语言中的 goroutine 非常轻量级，一个 goroutine 的初始栈空间很小（一般为2KB），所以在 Go 语言中一次创建数万个 goroutine 也是可能的。并且 goroutine 的栈不是固定的，可以根据需要动态地增大或缩小， Go 的 runtime 会自动为 goroutine 分配合适的栈空间。</p></blockquote><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//go/20230730/go的gpm.png" alt="go的gpm" tabindex="0" loading="lazy"><figcaption>go的gpm</figcaption></figure><p>在经过数个版本迭代之后，目前Go语言的调度器采用的是GPM调度模型</p><ul><li>G: 表示goroutine，存储了goroutine的执行stack信息、goroutine状态以及goroutine的任务函数等；另外G对象是可以重用的。</li><li>P: 表示逻辑processor，P的数量决定了系统内最大可并行的G的数量（前提：系统的物理cpu核数&gt;=P的数量）；P的最大作用还是其拥有的各种G对象队列、链表、一些cache和状态。</li><li>M: M代表着真正的执行计算资源。在绑定有效的p后，进入schedule循环；而schedule循环的机制大致是从各种队列、p的本地队列中获取G，切换到G的执行栈上并执行G的函数，调用goexit做清理工作并回到m，如此反复。M并不保留G状态，这是G可以跨M调度的基础。</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup

<span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello,欢迎来到编程狮%v\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//goroutine结束计数器-1</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">go</span> <span class="token function">hello</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//启动一个goroutine计数器+1</span>
	<span class="token punctuation">}</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//等待所有的goroutine执行结束</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GPM 的机制：</p><ol><li><p>work stealing：可以偷取其他 P 中的 G</p></li><li><p>hand off：阻塞时分离 P 到其他的 M 中</p></li></ol><p>调度器的设计策略：</p><ol><li>复用线程</li><li>利用并行</li><li>抢占</li><li>全局队列（配合 work stealing）</li></ol><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> Channel</h3><p>Channel 基本使用</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NoBufferChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
   <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;go finish&quot;</span><span class="token punctuation">)</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;go running...&quot;</span><span class="token punctuation">)</span>

      <span class="token comment">// 同步阻塞发送数据</span>
      c <span class="token operator">&lt;-</span> <span class="token number">1</span>
   <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

   <span class="token comment">// 接收之后才能继续运行</span>
   num <span class="token operator">:=</span> <span class="token operator">&lt;-</span> c

   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;num = %v&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BufferChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
   <span class="token comment">// 带有缓存的 channel</span>
   bc <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>

   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;len = %v\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>bc<span class="token punctuation">)</span><span class="token punctuation">)</span>

   <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;go finish&quot;</span><span class="token punctuation">)</span>
      <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
         bc <span class="token operator">&lt;-</span> i
         fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;len = &quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>bc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;cap = &quot;</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>bc<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

   time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>

   <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
      num <span class="token operator">:=</span> <span class="token operator">&lt;-</span> bc
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;num = &quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>

   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;func finish&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">CloseChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
   c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
   <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
         c <span class="token operator">&lt;-</span> i
      <span class="token punctuation">}</span>
      <span class="token comment">// 关闭 channel</span>
      <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
   <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

   <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> data<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span> c<span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
         fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
         <span class="token comment">// channel 关闭之后就退出循环</span>
         <span class="token comment">// 如果向一个已经关闭的 channel 写入数据则会抛异常</span>
         <span class="token keyword">break</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>

   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;main finish&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Channel 配合 range</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ChannelWithRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
   c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
   <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
         c <span class="token operator">&lt;-</span> i
      <span class="token punctuation">}</span>
      <span class="token comment">// 关闭 channel</span>
      <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
   <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

   <span class="token keyword">for</span> data <span class="token operator">:=</span> <span class="token keyword">range</span> c <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>

   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;main finish&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Channel 配合 select</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ChannelWithSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
	quit <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		x<span class="token punctuation">,</span> y <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
		<span class="token keyword">for</span> <span class="token punctuation">{</span>
			<span class="token keyword">select</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> c <span class="token operator">&lt;-</span> x<span class="token punctuation">:</span>
				x <span class="token operator">=</span> y
				y <span class="token operator">=</span> x <span class="token operator">+</span> y
			<span class="token keyword">case</span> <span class="token operator">&lt;-</span> quit<span class="token punctuation">:</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;finish&quot;</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">}</span>

		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>c<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	quit <span class="token operator">&lt;-</span> <span class="token number">0</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="库" tabindex="-1"><a class="header-anchor" href="#库" aria-hidden="true">#</a> 库</h2>`,113),z={href:"https://studygolang.com/pkgdoc",target:"_blank",rel:"noopener noreferrer"},W=n("h2",{id:"其他",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#其他","aria-hidden":"true"},"#"),s(" 其他")],-1),K=n("h3",{id:"文章",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#文章","aria-hidden":"true"},"#"),s(" 文章")],-1),J={href:"https://juejin.cn/post/7061980386640789540#heading-19",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://draveness.me/golang",target:"_blank",rel:"noopener noreferrer"},j=o('<h3 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点" aria-hidden="true">#</a> 注意点</h3><ol><li>函数小写包私有，大写共有</li><li>go 有垃圾收集器</li><li>自定义类型用 type 开头，函数也可以用 type 创建别名</li></ol><h3 id="项目管理" tabindex="-1"><a class="header-anchor" href="#项目管理" aria-hidden="true">#</a> 项目管理</h3><ol><li>go path：无版本控制，无法同步第三方版本号，无法指定当前项目使用的第三方版本号</li><li>go mod：相比 go path 进行一定的改进</li></ol><p><strong>go mod 命令：</strong></p><div class="table-wrapper"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>go mod init</td><td>生成 go.mod 文件</td></tr><tr><td>go mod download</td><td>下载 go.mod 文件中指定的所有依赖</td></tr><tr><td>go mod tidy</td><td>整理现在所有依赖</td></tr><tr><td>go mod graph</td><td>查看现有的依赖结构</td></tr><tr><td>go mod edit</td><td>编辑 go.mod 文件</td></tr><tr><td>go mod vendor</td><td>导出项目所有的依赖到 vendor 目录</td></tr><tr><td>go mod verify</td><td>校验一个模块是否被篡改过</td></tr><tr><td>go mod why</td><td>查看为什么需要依赖某模块</td></tr></tbody></table></div><p><strong>查看环境变量：</strong></p>',7),Q=n("li",null,"只有当 GO111MODULE=on 时 go mod 才会生效",-1),$={href:"https://mirrors.aliyun.com/goproxy/,direct",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://goproxy.cn",target:"_blank",rel:"noopener noreferrer"},nn=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># go env</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>off
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOBIN</span><span class="token operator">=</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOCACHE</span><span class="token operator">=</span>C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>gzw<span class="token punctuation">\\</span>AppData<span class="token punctuation">\\</span>Local<span class="token punctuation">\\</span>go-build
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOENV</span><span class="token operator">=</span>C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>gzw<span class="token punctuation">\\</span>AppData<span class="token punctuation">\\</span>Roaming<span class="token punctuation">\\</span>go<span class="token punctuation">\\</span>env
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOEXE</span><span class="token operator">=</span>.exe
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOEXPERIMENT</span><span class="token operator">=</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOFLAGS</span><span class="token operator">=</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOHOSTARCH</span><span class="token operator">=</span>amd64
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOHOSTOS</span><span class="token operator">=</span>windows
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOINSECURE</span><span class="token operator">=</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOMODCACHE</span><span class="token operator">=</span>C:<span class="token punctuation">\\</span>MyDisk<span class="token punctuation">\\</span>A-Code<span class="token punctuation">\\</span>Go<span class="token punctuation">\\</span>Study<span class="token punctuation">\\</span>pkg<span class="token punctuation">\\</span>mod
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GONOPROXY</span><span class="token operator">=</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GONOSUMDB</span><span class="token operator">=</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>windows
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOPATH</span><span class="token operator">=</span>C:<span class="token punctuation">\\</span>MyDisk<span class="token punctuation">\\</span>A-Code<span class="token punctuation">\\</span>Go<span class="token punctuation">\\</span>Study
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOPRIVATE</span><span class="token operator">=</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.io,direct
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOROOT</span><span class="token operator">=</span>C:<span class="token punctuation">\\</span>MyDisk<span class="token punctuation">\\</span>A-Config<span class="token punctuation">\\</span>Golang<span class="token punctuation">\\</span><span class="token number">1.17</span>.7
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOSUMDB</span><span class="token operator">=</span>sum.golang.org
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOTMPDIR</span><span class="token operator">=</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOTOOLDIR</span><span class="token operator">=</span>xxx
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOVCS</span><span class="token operator">=</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOVERSION</span><span class="token operator">=</span>go1.17.7
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GCCGO</span><span class="token operator">=</span>gccgo
<span class="token builtin class-name">set</span> <span class="token assign-left variable">AR</span><span class="token operator">=</span>ar
<span class="token builtin class-name">set</span> <span class="token assign-left variable">CC</span><span class="token operator">=</span>gcc
<span class="token builtin class-name">set</span> <span class="token assign-left variable">CXX</span><span class="token operator">=</span>g++
<span class="token builtin class-name">set</span> <span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOMOD</span><span class="token operator">=</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">CGO_CFLAGS</span><span class="token operator">=</span>-g <span class="token parameter variable">-O2</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">CGO_CPPFLAGS</span><span class="token operator">=</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">CGO_CXXFLAGS</span><span class="token operator">=</span>-g <span class="token parameter variable">-O2</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">CGO_FFLAGS</span><span class="token operator">=</span>-g <span class="token parameter variable">-O2</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">CGO_LDFLAGS</span><span class="token operator">=</span>-g <span class="token parameter variable">-O2</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">PKG_CONFIG</span><span class="token operator">=</span>pkg-config
<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOGCCFLAGS</span><span class="token operator">=</span>-m64 <span class="token parameter variable">-mthreads</span> -fmessage-length<span class="token operator">=</span><span class="token number">0</span> -fdebug-prefix-map<span class="token operator">=</span>xxxx -gno-record-gcc-switches
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function sn(an,tn){const t=i("router-link"),e=i("ExternalLinkIcon");return c(),u("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[a(t,{to:"#go-简单使用"},{default:p(()=>[s("Go 简单使用")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#go-的特点"},{default:p(()=>[s("Go 的特点")]),_:1})]),n("li",null,[a(t,{to:"#生态"},{default:p(()=>[s("生态")]),_:1})]),n("li",null,[a(t,{to:"#常量"},{default:p(()=>[s("常量")]),_:1})]),n("li",null,[a(t,{to:"#变量"},{default:p(()=>[s("变量")]),_:1})]),n("li",null,[a(t,{to:"#指针"},{default:p(()=>[s("指针")]),_:1})]),n("li",null,[a(t,{to:"#函数"},{default:p(()=>[s("函数")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#函数的简单使用"},{default:p(()=>[s("函数的简单使用")]),_:1})]),n("li",null,[a(t,{to:"#init-函数"},{default:p(()=>[s("init 函数")]),_:1})]),n("li",null,[a(t,{to:"#匿名函数"},{default:p(()=>[s("匿名函数")]),_:1})]),n("li",null,[a(t,{to:"#闭包"},{default:p(()=>[s("闭包")]),_:1})]),n("li",null,[a(t,{to:"#defer"},{default:p(()=>[s("defer")]),_:1})])])]),n("li",null,[a(t,{to:"#异常处理"},{default:p(()=>[s("异常处理")]),_:1})]),n("li",null,[a(t,{to:"#数组"},{default:p(()=>[s("数组")]),_:1})]),n("li",null,[a(t,{to:"#切片"},{default:p(()=>[s("切片")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#简单使用"},{default:p(()=>[s("简单使用")]),_:1})]),n("li",null,[a(t,{to:"#切片示例"},{default:p(()=>[s("切片示例")]),_:1})])])]),n("li",null,[a(t,{to:"#map"},{default:p(()=>[s("Map")]),_:1})]),n("li",null,[a(t,{to:"#结构体"},{default:p(()=>[s("结构体")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#方法"},{default:p(()=>[s("方法")]),_:1})])])]),n("li",null,[a(t,{to:"#面向对象"},{default:p(()=>[s("面向对象")]),_:1})]),n("li",null,[a(t,{to:"#接口"},{default:p(()=>[s("接口")]),_:1})]),n("li",null,[a(t,{to:"#反射"},{default:p(()=>[s("反射")]),_:1})]),n("li",null,[a(t,{to:"#并发"},{default:p(()=>[s("并发")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#channel"},{default:p(()=>[s("Channel")]),_:1})])])]),n("li",null,[a(t,{to:"#库"},{default:p(()=>[s("库")]),_:1})]),n("li",null,[a(t,{to:"#其他"},{default:p(()=>[s("其他")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#文章"},{default:p(()=>[s("文章")]),_:1})]),n("li",null,[a(t,{to:"#注意点"},{default:p(()=>[s("注意点")]),_:1})]),n("li",null,[a(t,{to:"#项目管理"},{default:p(()=>[s("项目管理")]),_:1})])])])])])])]),v,n("div",m,[n("table",null,[b,n("tbody",null,[n("tr",null,[g,f,n("td",null,[n("a",h,[s("github.com/moby/moby"),a(e)])])]),n("tr",null,[y,w,n("td",null,[n("a",q,[s("github.com/kubernetes/kubernetes"),a(e)])])]),n("tr",null,[_,x,n("td",null,[n("a",G,[s("github.com/etcd-io/etcd"),a(e)])])]),n("tr",null,[P,O,n("td",null,[n("a",S,[s("github.com/influxdata/influxdb"),a(e)])])]),n("tr",null,[C,A,n("td",null,[n("a",I,[s("github.com/grafana/grafana"),a(e)])])]),n("tr",null,[M,N,n("td",null,[n("a",E,[s("github.com/prometheus/prometheus"),a(e)])])]),n("tr",null,[D,R,n("td",null,[n("a",F,[s("github.com/hashicorp/consul"),a(e)])])]),n("tr",null,[T,L,n("td",null,[n("a",U,[s("github.com/nsqio/nsq"),a(e)])])]),n("tr",null,[B,V,n("td",null,[n("a",X,[s("github.com/pingcap/tidb"),a(e)])])])])])]),H,n("p",null,[n("a",z,[s("中文文档"),a(e)])]),W,K,n("p",null,[n("a",J,[s("Go 学习路线（2022）"),a(e)])]),n("p",null,[n("a",Y,[s("Go 语言设计与实现"),a(e)])]),j,n("ol",null,[Q,n("li",null,[s("GOPROXY 代理，国内镜像常用： "),n("ol",null,[n("li",null,[s("阿里云："),n("a",$,[s("https://mirrors.aliyun.com/goproxy/,direct"),a(e)])]),n("li",null,[s("七牛云："),n("a",Z,[s("https://goproxy.cn"),a(e)]),s(",direct")])])])]),nn])}const en=l(r,[["render",sn],["__file","Go.html.vue"]]);export{en as default};
