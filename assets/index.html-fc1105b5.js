import{_ as d,Q as o,S as s,U as t,a8 as e,W as l,X as a,a9 as u,H as n}from"./framework-d7e1aa10.js";const c={},h=t("h1",{id:"quartz",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#quartz","aria-hidden":"true"},"#"),e(" Quartz")],-1),g=t("div",{class:"hint-container info"},[t("p",{class:"hint-container-title"},"说明"),t("p",null,"Quartz 简单使用")],-1),p={class:"hint-container info"},x=t("p",{class:"hint-container-title"},"相关文章",-1),z={href:"https://blog.csdn.net/qq_35808136/article/details/89704539",target:"_blank",rel:"noopener noreferrer"},_={href:"https://zhuanlan.zhihu.com/p/437328366",target:"_blank",rel:"noopener noreferrer"},b={class:"table-of-contents"},y=u('<h2 id="quartz-概述" tabindex="-1"><a class="header-anchor" href="#quartz-概述" aria-hidden="true">#</a> Quartz 概述</h2><ul><li><p>Quartz 是开源且具有丰富特性的任务调度库</p></li><li><p>能够集成于任何的 Java 应用</p></li><li><p>能够创建简单或复杂的调度，执行上百上千甚至上万的任务</p></li><li><p>任务 Job 被定义为标准的 Java 组件，能够执行任何想要的功能</p></li><li><p>Quartz 调度框架包含许多企业级的特性，如 JTA 事务、集群的支持</p></li></ul><p><strong>定时任务的实现方式：</strong></p><p><strong>定时任务基础</strong></p><ul><li>Cron表达式</li><li>Linux定时任务工具crontb</li></ul><p><strong>JDK内置</strong></p><ul><li>Timer</li><li>ScheduleExecutorService</li></ul><p><strong>Netty</strong></p><ul><li>HashedWheelTimer</li></ul><p><strong>Spring</strong></p><ul><li>Spring自带Schedule</li><li>Spring集成Quartz</li></ul><p><strong>分布式集群</strong></p><ul><li>Quartz持久化JDBC方式</li><li>Elastic-job</li><li>xxl-job</li></ul><h2 id="quartz-运行环境" tabindex="-1"><a class="header-anchor" href="#quartz-运行环境" aria-hidden="true">#</a> Quartz 运行环境</h2><ul><li>可以运行嵌入在一个独立的应用中</li><li>可以在应用程序服务器内被实例化，并且参与事务</li><li>可以作为一个独立的程序运行，可以通过 RMI 调用</li><li>可以被实例化，作为独立的项目集群（负载均衡和故障转移）</li></ul><h2 id="quartz-设计模式" tabindex="-1"><a class="header-anchor" href="#quartz-设计模式" aria-hidden="true">#</a> Quartz 设计模式</h2><ul><li>Builder 模式</li><li>Factory 模式</li><li>组件模式</li><li>链式编程</li></ul><h2 id="quartz-的核心概念" tabindex="-1"><a class="header-anchor" href="#quartz-的核心概念" aria-hidden="true">#</a> Quartz 的核心概念</h2><ul><li>任务 Job： <ul><li>就是想要实现的任务类</li><li>每个 Job 都必须实现 <code>org.quartz.job</code> 接口，且只需要实现接口定义的 <code>execute</code> 方法</li></ul></li><li>触发器 Trigger： <ul><li>为执行任务的触发器</li><li>主要包含两种：SimpleTrigger 和 CronTrigger</li></ul></li><li>调度器 Scheduler： <ul><li>为任务的调度器</li><li>会将任务 Job 以及 Trigger 整合起来，负责基于 Trigger 设定的时间来执行 Job</li></ul></li></ul><h2 id="quartz-的体系结构" tabindex="-1"><a class="header-anchor" href="#quartz-的体系结构" aria-hidden="true">#</a> Quartz 的体系结构</h2><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//quartz/20230209/Quartz的体系结构.png" alt="image-20220818193350723" tabindex="0" loading="lazy"><figcaption>image-20220818193350723</figcaption></figure><h2 id="常用的-api" tabindex="-1"><a class="header-anchor" href="#常用的-api" aria-hidden="true">#</a> 常用的 API</h2><div class="table-wrapper"><table><thead><tr><th style="text-align:center;">序号</th><th style="text-align:center;">名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">Scheduler</td><td style="text-align:center;">用于与调度程序交互的主程序接口；调度程序-任务执行任务计划表，只有安排进执行计划的 Job 才会在指定时间执行</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">Job</td><td style="text-align:center;">预先定义的希望在位来某个时间点能被调度程序执行的任务类，可以自定义</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">JobDetail</td><td style="text-align:center;">定义定时任务的实例。是通过 JobBuilder 类创建的</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">JobDataMap</td><td style="text-align:center;">可以包含不限量的（序列化的）数据对象；在 Job 实例执行时可以使用其中的数据；是 Java Map 接口的一个实现，额外增加了一些便于存取基本类型的数据的方法</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">Trigger</td><td style="text-align:center;">用于触发执行 Job 任务；当调度一个 Job 时，要创建一个触发器然后调整它的属性来满足 Job 执行的条件；定义一个已经被安排的任务将在什么时候执行的条件</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">JobBuilder</td><td style="text-align:center;">用于声明一个任务实例，也可以定义关于任务的详情，比如任务名、组名等，这个实例将会作为一个实际执行的任务</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">TriggerBuilder</td><td style="text-align:center;">触发器创建器。用于创建触发器实例</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">JobListener、TriggerListener、SchedulerListener</td><td style="text-align:center;">监听器，用于对组件的监听</td></tr></tbody></table></div>',23);function f(q,J){const i=n("ExternalLinkIcon"),r=n("router-link");return o(),s("div",null,[h,g,t("div",p,[x,t("p",null,[t("a",z,[e("springboot的schedule和quartz到底怎么选以及如何支持并发和避坑"),l(i)])]),t("p",null,[t("a",_,[e("简洁明了看懂cron表达式"),l(i)])])]),t("nav",b,[t("ul",null,[t("li",null,[l(r,{to:"#quartz"},{default:a(()=>[e("Quartz")]),_:1}),t("ul",null,[t("li",null,[l(r,{to:"#quartz-概述"},{default:a(()=>[e("Quartz 概述")]),_:1})]),t("li",null,[l(r,{to:"#quartz-运行环境"},{default:a(()=>[e("Quartz 运行环境")]),_:1})]),t("li",null,[l(r,{to:"#quartz-设计模式"},{default:a(()=>[e("Quartz 设计模式")]),_:1})]),t("li",null,[l(r,{to:"#quartz-的核心概念"},{default:a(()=>[e("Quartz 的核心概念")]),_:1})]),t("li",null,[l(r,{to:"#quartz-的体系结构"},{default:a(()=>[e("Quartz 的体系结构")]),_:1})]),t("li",null,[l(r,{to:"#常用的-api"},{default:a(()=>[e("常用的 API")]),_:1})])])])])]),y])}const Q=d(c,[["render",f],["__file","index.html.vue"]]);export{Q as default};
