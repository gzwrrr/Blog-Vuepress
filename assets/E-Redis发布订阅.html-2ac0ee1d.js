import{_ as n,Q as s,S as r,U as t,W as i,X as a,a8 as e,a9 as d,H as c}from"./framework-d7e1aa10.js";const u={},o=t("h1",{id:"redis-发布订阅",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#redis-发布订阅","aria-hidden":"true"},"#"),e(" Redis 发布订阅")],-1),p={class:"table-of-contents"},b=d('<ul><li>redis 发布订阅（pub/sub）是一种消息通信模式</li><li>Redis 客户端可以订阅任意数量的频道</li></ul><div class="table-wrapper"><table><thead><tr><th style="text-align:center;">序号</th><th style="text-align:center;">命令</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">publish channel message</td><td style="text-align:center;">将消息发送到指定的频道</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">punsubscribe [pattern[pattern...]]</td><td style="text-align:center;">退订所有给定模式的频道</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">subscribe channel[channel...]]</td><td style="text-align:center;">订阅给定的一个或多发个频道的消息</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">unsubscribe [channel[channel...]]</td><td style="text-align:center;">指定退订的频道</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">pubsub subcommand [argument[argument...]]</td><td style="text-align:center;">查看订阅与发布系统状态</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">psubscribe pattern[pattern...]</td><td style="text-align:center;">订阅一个或多个符合给定模式的频道</td></tr></tbody></table></div><p><strong>Redis有两种发布/订阅模式：</strong></p><p>基于频道(Channel)的发布/订阅：</p><ul><li>发出去的消息不会被持久化，也就是有客户端订阅channel:1后只能接收到后续发布到该频道的消息，之前的就接收不到了</li><li>消息类型的取值可能是以下3个: <ul><li>subscribe。表示订阅成功的反馈信息。第二个值是订阅成功的频道名称，第三个是当前客户端订阅的频道数量。</li><li>message。表示接收到的消息，第二个值表示产生消息的频道名称，第三个值是消息的内容。</li><li>unsubscribe。表示成功取消订阅某个频道。第二个值是对应的频道名称，第三个值是当前客户端订阅的频道数量，当此值为0时客户端会退出订阅状态，之后就可以执行其他非&quot;发布/订阅&quot;模式的命令了</li></ul></li></ul><p>基于模式(pattern)的发布/订阅：</p><ul><li>如果有某个/某些模式和这个频道匹配的话，那么所有订阅这个/这些频道的客户端也同样会收到信息</li></ul><br><p><strong>订阅发布机制的底层原理：</strong></p><p>基于频道的原理：</p><ul><li>通过 subscribe 订阅某频道后，redis-server 里会维护一个字典，键为 channel，值为链表，链表中保存了所有订阅这个 channel 的客户端，当客户护短订阅时就会将其添加到这个订阅链表中</li><li>通过 publish 向订阅者发送消息，redis-server 会使用给定的频道作为建，在所维护的链表中查找订阅了这个频道的客户端链表，遍历链表将消息发布给所有订阅者</li></ul><p>基于模式的原理：</p><ul><li>底层是pubsubPattern 节点的链表，链表中保存着所有和模式相关的信息</li><li>pubsubPattern 节点中的 client 属性保存着订阅模式的客户端，而 pattern 属性则保存着被订阅的模式</li></ul>',13);function h(g,x){const l=c("router-link");return s(),r("div",null,[o,t("nav",p,[t("ul",null,[t("li",null,[i(l,{to:"#redis-发布订阅"},{default:a(()=>[e("Redis 发布订阅")]),_:1})])])]),b])}const y=n(u,[["render",h],["__file","E-Redis发布订阅.html.vue"]]);export{y as default};
