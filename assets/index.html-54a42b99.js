import{_ as c,Q as u,S as d,U as n,a8 as a,W as s,X as e,a9 as l,H as p}from"./framework-d7e1aa10.js";const r={},k=n("h1",{id:"rabbitmq",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rabbitmq","aria-hidden":"true"},"#"),a(" RabbitMQ")],-1),b={class:"hint-container info"},m=n("p",{class:"hint-container-title"},"说明",-1),v={href:"https://www.bilibili.com/video/BV1cb4y1o7zz?spm_id_from=333.337.search-card.all.click&vd_source=e356fec025b50061af78324a814f8da0",target:"_blank",rel:"noopener noreferrer"},g={class:"table-of-contents"},h=l('<h2 id="什么是-mq" tabindex="-1"><a class="header-anchor" href="#什么是-mq" aria-hidden="true">#</a> 什么是 MQ？</h2><p><strong>概要：</strong></p><ul><li>本质是队列</li><li>FIFO：先入先出，队列中存放的内容是 message，是一种跨进程的通信机制，用于上下游传递信息</li><li>MQ 是一种非常常见的上下游【逻辑解耦】与【物理解耦】的消息通信服务</li><li>使用 MQ 之后，消息发送上游只需要依赖 MQ，不需要依赖其他服务</li></ul><h2 id="mq-的分类" tabindex="-1"><a class="header-anchor" href="#mq-的分类" aria-hidden="true">#</a> MQ 的分类</h2><ul><li>ActiveMQ： <ul><li>Java 语言实现，现在使用较少，JMS 规范，支持 XA 协议，没有在生产上大规模使用</li><li>优点：单机吞吐量万级，时效性 ms 级别，可用性高，基于主从架构实现高可用，较低概率丢失数据</li><li>缺点：官方社区维护越来越少，高吞吐量场景较少使用</li></ul></li><li>Kafka： <ul><li>Scala 语言实现，高性能高可用，适合处理大数据，吞吐量单机百万</li><li>大数据领域的绕不开的消息传输工具，百万级的 TPS（系统的吞吐量）</li><li>优点：性能卓越，最大优点就是吞吐量高；分布式高可用；能保证消息仅被消费一次；有第三方管理界面（Kafka-Manager）；日志领域比较成熟，再大数据领域的实时计算以及日志采集中被大规模使用</li><li>缺点：Kafka 单机超过 64 个队列/分区，Load 会发生明显的飙高显效，队列越多 Load 越高，发送消息相应时间变长；使用短轮询方式，实时性取决于轮询间隔时间；消费失败不支持重试；支持消息顺序，但那时一台代理宕机后，会产生消息乱序；社区更新较慢</li></ul></li><li>RocketMQ： <ul><li>Java 语言开发，参考 Kafaka 设计，吞吐量单机十万</li><li>阿里巴巴的开源产品，使用 Java 实现，在设计时参考了 Kafka，并做出了一定的优化</li><li>优点：单机吞吐量 十万级，分布式高可用；消息可以做到 0 丢失，MQ 的功能较为完善；支持 10 亿级别的消息堆积，不会因为堆积导致性能下降</li><li>缺点：支持的客户端语言不多，目前只支持 Java 和 C++；社区活跃度一般；没有在 MQ 核心中实现 JMS 等接口，有些系统如果要迁移需要修改大量代码</li></ul></li><li>RabbitMQ： <ul><li>Erlang 语言开发，性能好，高并发，吞吐量单机万级</li><li>在 AMQP（高级消息队列协议）基础上完成的，可复用的企业消息系统，时当前最主流的消息中间件之一</li><li>优点：由于 erlang 语言的高并发特性，性能较好；吞吐量达到万级；MQ 的功能较为完备、健壮、稳定、易用、跨平台、支持多种语言、支持 AJAX、文档齐全；开源的管理界面好用、社区活跃度高、更新频率高</li><li>缺点：商业版需要收费，学习成本较高</li></ul></li></ul><br><p><strong>比较：</strong></p><p>Kafka、RabbitMQ和RocketMQ是三个主流的消息队列中间件，在单机吞吐量上有一定的差异，造成差异的原因主要有以下几个方面：</p><ol><li>底层架构设计：Kafka是采用分布式的、基于磁盘的存储方式，利用零拷贝技术提高吞吐量；RabbitMQ和RocketMQ都是采用基于内存的存储方式，适合低延迟和高吞吐量的场景。</li><li>消息持久化机制：Kafka的消息持久化采用顺序写磁盘的方式，可以在高负载情况下提供更高的性能；RabbitMQ和RocketMQ都采用了内存缓存和磁盘持久化相结合的方式。</li><li>网络传输协议：Kafka采用的是自定义的二进制协议，RabbitMQ和RocketMQ采用的是AMQP和自定义的协议，各自在传输效率和兼容性上有所差异。</li><li>数据处理能力：Kafka具有非常强的批量处理和数据分片的能力，适合于大规模的数据处理；RabbitMQ和RocketMQ则更加适合高吞吐量的消息传输和处理。</li></ol><br><p><strong>主要使用场景：</strong></p><ul><li>Kafka：适用于高吞吐量的数据处理场景，例如日志处理、流式处理、事件处理等。Kafka 具有高效的消息处理机制和可靠的数据传输能力，并且可以在多个节点之间水平扩展，具有高可用性和容错性。</li><li>RabbitMQ：适用于高可靠性和灵活性的应用程序场景，例如消息队列和任务队列等。RabbitMQ 提供了多种消息传递模式，例如工作队列、发布/订阅、路由、主题等，具有可靠的消息传递能力和高度的灵活性。</li><li>RocketMQ：适用于大规模分布式应用场景，例如电子商务、金融等领域。RocketMQ 具有高度的可靠性、可扩展性和高吞吐量，支持多租户、延迟消息、定时消息等特性，非常适合构建大规模分布式应用。</li></ul><h2 id="rabbitmq-1" tabindex="-1"><a class="header-anchor" href="#rabbitmq-1" aria-hidden="true">#</a> RabbitMQ</h2><div class="hint-container note"><p class="hint-container-title">RabbitMQ</p><p>RabbitMQ是一个开源的消息中间件，用于在应用程序之间传递消息，提供可靠性、可扩展性和可维护性。它实现了高级消息队列协议（AMQP），但也支持其他协议，例如消息队列标准协议（MQTT）和简单文本协议（STOMP）。RabbitMQ的基本思想是生产者将消息发送到队列中，然后消费者从队列中获取消息并处理它们。通过使用RabbitMQ，可以在分布式系统中实现异步通信，解耦应用程序之间的关系，以及实现高可靠性和高可扩展性的系统。</p></div><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//rabbitmq/20230308/RabbitMQ架构图.png" alt="分布式系统消息中间件——RabbitMQ的使用基础篇 -架构" tabindex="0" loading="lazy"><figcaption>分布式系统消息中间件——RabbitMQ的使用基础篇 -架构</figcaption></figure><h3 id="rabbitmq-概要" tabindex="-1"><a class="header-anchor" href="#rabbitmq-概要" aria-hidden="true">#</a> RabbitMQ 概要</h3><ul><li>是一个消息中间件，接收并转发消息</li><li>四大核心概念： <ul><li>生产者：产生数据发送的程序</li><li>交换机：非常重要的部件，一方面接收来自生产者的消息，另一方面他将消息推送到队列中；交换机必须确切知道如何处理它所接收到的消息，这由交换机的类型决定；交换机可以绑定多个队列</li><li>队列：是内部使用的一种数据结构，消息只能存储在队列中；队列仅受主机的内存和磁盘限制的约束，本质上是一个大的消息缓冲区</li><li>消费者：队列与消费者是一对一的关系；消费与接收具有相似的关系；消费者大多时候是一个等待接收消息的程序；生产者消费者和消息中间件很多时候并不在一个机器上；同一个应用程序既可以是生产者又可以是消费者</li></ul></li><li>其他概念： <ul><li>Connection：publisher / consumer 和 broker 之间的 TCP 连接</li><li>Channel：即信道，是建立在 Connection 之上的虚拟连接，当程序与 Broker 建立 TCP 连接时，</li><li>Broker：RabbitMQ 的服务节点，接收和分发消息的应用，RabbitMQ Server 就是 Message Broker</li><li>RoutingKey：生产者发送消息给交换机时会指定一个 RoutingKey，即用于匹配交换机</li><li>Binding：通过绑定将交换机和队列绑定起来，这样可以正确选择路由到的队列（交换机和队列是 <strong>多对多</strong> 的关系，通过 BindingKey 进行关联）</li></ul></li></ul><h3 id="rabbitmq-相关概念" tabindex="-1"><a class="header-anchor" href="#rabbitmq-相关概念" aria-hidden="true">#</a> RabbitMQ 相关概念</h3><p><strong>名词解释：</strong></p><ul><li>AMQP（Advanced Message Queuing Protocol）： <ul><li>是一种开放标准的消息传递协议，它是一个异步通信协议，支持消息的可靠传递和可靠排队，以及发布和订阅模式。AMQP协议最初由RabbitMQ公司开发，目前已成为ISO标准。</li><li>AMQP协议定义了消息的格式、传递方式和路由规则。消息由消息头、消息体和属性组成。消息头包含消息类型、路由信息和传递模式等信息；消息体是实际的消息内容；属性则提供了一些额外的元数据。</li><li>AMQP支持多种传输协议，包括TCP、TLS和WebSockets等。AMQP还支持多种编程语言，如Java、C++、Python、Node.js和.NET等，使得开发者可以使用各自熟悉的编程语言进行开发。</li></ul></li><li>Virtual host：一个 RabbitMQ 服务器上可以有多个虚拟主机，用于隔离不同的应用或环境。AMQP 的基本组件划分到一个虚拟的分组中（出于多租户和安全因素设计），类似于网络中的 namespace 概念；当多个不同的用户使用同一个 RabbitMQ Server 提供的服务时，可以划分出多个 vhost，每个用户在自己的 vhost 创建 exchange / queue 等</li><li>ACK（Acknowledgment）：消息的确认机制，消费者处理完消息后，需要向 RabbitMQ 确认消息已被正确处理。</li><li>TTL（Time-To-Live）：消息的过期时间，一旦超过过期时间，消息将被 RabbitMQ 自动清除。</li></ul><h3 id="rabbitmq-优缺点" tabindex="-1"><a class="header-anchor" href="#rabbitmq-优缺点" aria-hidden="true">#</a> RabbitMQ 优缺点</h3><p>优点：</p><ul><li>可靠性高：RabbitMQ 采用了多种机制来确保消息的可靠传输，如持久化、消息确认机制等，保证了消息不会丢失。</li><li>可扩展性好：RabbitMQ 采用了 AMQP 协议，通过集群来实现高可用，同时也支持分布式部署，可实现无缝扩容。</li><li>灵活性强：RabbitMQ 提供了丰富的消息模型和交换机类型，能够满足各种场景下的消息传递需求。</li><li>性能较高：RabbitMQ 的消息传递性能较好，能够处理大量的消息。</li></ul><p>缺点：</p><ul><li>部署和维护复杂：相比于其他消息中间件，RabbitMQ 的部署和维护较为复杂，需要了解 AMQP 协议，还需要针对不同的场景进行配置。</li><li>性能有限：尽管 RabbitMQ 的性能较好，但在高并发、大量消息的情况下，性能可能会受到一定的影响。</li></ul><h3 id="rabbitmq-使用场景-比较" tabindex="-1"><a class="header-anchor" href="#rabbitmq-使用场景-比较" aria-hidden="true">#</a> RabbitMQ 使用场景&amp;比较</h3><p>适用场景：</p><ul><li>异步处理：RabbitMQ 适用于异步处理，如异步任务调度、消息通知、日志收集等。</li><li>任务队列：RabbitMQ 可以作为任务队列，实现任务的异步处理和解耦。</li><li>应用解耦：子系统要是耦合在一起，那么其中一个出故障整条链都会受影响，MQ 可以单独监控其中的子系统。</li><li>发布订阅模式：RabbitMQ 支持多个消费者订阅同一个队列，适用于发布订阅模式。</li><li>微服务：RabbitMQ 可以作为微服务架构中的消息中间件，实现微服务之间的异步通信。</li><li>流量消峰：消息过多时排队，保护系统</li></ul><p>同类型框架对比：</p><ul><li>Apache ActiveMQ：与 RabbitMQ 相比，ActiveMQ 支持的协议更多，如 AMQP、JMS 等，但是在性能和可靠性方面不如 RabbitMQ。</li><li>Apache Kafka：与 RabbitMQ 相比，Kafka 适用于大规模的实时数据处理，具有更高的吞吐量和更低的延迟，但是不适用于任务队列和消息通知等场景。</li><li>ZeroMQ：与 RabbitMQ 相比，ZeroMQ 更轻量级，不需要中间件服务器，但是需要在应用程序中实现消息传递逻辑，适用于内部通信和高性能的消息传递场景。</li></ul><h2 id="rabbitmq-核心部分" tabindex="-1"><a class="header-anchor" href="#rabbitmq-核心部分" aria-hidden="true">#</a> RabbitMQ 核心部分</h2>',31),f=["src"],M=l('<h3 id="六大模式" tabindex="-1"><a class="header-anchor" href="#六大模式" aria-hidden="true">#</a> 六大模式</h3><ul><li>简单模式（Simple Mode）：最简单的模式，也是最常见的模式。一个生产者发送一条消息，一个消费者接收一条消息。</li><li>工作模式（Work Queue Mode）：也称为任务队列模式，一个生产者发送一条消息到队列，多个消费者竞争获取消息进行处理。每个消息只会被一个消费者处理。</li><li>发布/订阅模式（Publish/Subscribe Mode）：生产者将消息发布到交换机（Exchange）上，多个消费者绑定到交换机上进行订阅，每个消息将被交换机转发给所有绑定的队列。适用于广播消息的场景。</li><li>路由模式（Routing Mode）：生产者将消息发送到指定的交换机上，并且设置了路由键（Routing Key）。消费者根据自己绑定的路由键，从交换机中获取消息进行处理。</li><li>主题模式（Topic Mode）：是路由模式的一种扩展，支持使用通配符匹配路由键。生产者将消息发送到交换机上，消费者根据自己绑定的路由键通配符，从交换机中获取匹配的消息进行处理。</li><li>发布确认模式（Publish Confirm Mode）：用于确保消息成功发送到RabbitMQ服务端。生产者发送消息后，等待RabbitMQ服务端的确认回执，如果收到了回执则表示消息已经被确认发送，否则则需要重发消息。</li></ul><p>**补充：**还可以使用 RPC 模式。RPC模式与其他模式的区别在于其强调请求和响应之间的关联性，通常用于需要同步处理的场景，例如需要等待服务端返回结果的任务。其他模式则更适用于异步处理的场景，例如事件处理、日志记录等。</p><br><h3 id="交换机的类型" tabindex="-1"><a class="header-anchor" href="#交换机的类型" aria-hidden="true">#</a> 交换机的类型</h3><ol><li>Direct（直接连接）：将消息直接路由到对应的队列中。</li><li>Fanout（扇出（发布/订阅））：将消息广播到所有绑定的队列中。</li><li>Topic（主题）：将消息按照匹配规则路由到对应的队列中。</li><li>Headers（头交换机）：将消息按照消息头中的键值对进行匹配，匹配成功后路由到对应的队列中。</li></ol><br><h3 id="队列的类型" tabindex="-1"><a class="header-anchor" href="#队列的类型" aria-hidden="true">#</a> 队列的类型</h3><ol><li>工作队列</li><li>死信队列</li><li>延迟队列</li><li>镜像队列</li></ol><br><h3 id="事务-消息确认机制" tabindex="-1"><a class="header-anchor" href="#事务-消息确认机制" aria-hidden="true">#</a> 事务&amp;消息确认机制</h3><blockquote><p>事务和消息确认都能提高消息的可靠性，事务对性能影响较大，一般情况使用确认机制。消息确认包括 ack、nack、reject 等，以及如何选择合适的确认方式。</p></blockquote><ul><li>生产者消息确认 <ul><li>生产者确认模式</li><li>事务机制</li></ul></li><li>消费者消息确认 <ul><li>手动确认模式</li><li>自动确认模式</li></ul></li></ul><br><h3 id="消息持久化" tabindex="-1"><a class="header-anchor" href="#消息持久化" aria-hidden="true">#</a> 消息持久化</h3><blockquote><p>包括如何将消息持久化到磁盘，以及如何设置 TTL（Time to Live）等属性来控制消息的生命周期。</p></blockquote><ol><li>消息持久化</li><li>消息确认与持久化的关系</li><li>持久化交换机与队列</li></ol><br><h3 id="集群和高可用" tabindex="-1"><a class="header-anchor" href="#集群和高可用" aria-hidden="true">#</a> 集群和高可用</h3><blockquote><p>包括镜像队列、镜像节点、负载均衡等，以及如何配置和使用。</p></blockquote><ol><li>集群模式</li><li>高可用模式</li><li>镜像队列与集群</li></ol><br><h3 id="核心对象和方法" tabindex="-1"><a class="header-anchor" href="#核心对象和方法" aria-hidden="true">#</a> 核心对象和方法</h3><div class="table-wrapper"><table><thead><tr><th>对象</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Connection</td><td>open()</td><td>打开与 RabbitMQ 服务器的 TCP 连接。连接成功后，可以创建一个或多个通道。</td></tr><tr><td>Connection</td><td>close()</td><td>关闭连接。</td></tr><tr><td>Connection</td><td>channel()</td><td>创建一个新的通道，用于执行 AMQP 操作。</td></tr><tr><td>Channel</td><td>queue_declare()</td><td>声明一个队列。如果队列不存在，则会创建一个新队列。如果队列已存在，则检查队列的参数是否与声明的参数匹配。</td></tr><tr><td>Channel</td><td>queue_bind()</td><td>将队列绑定到一个交换器。消息通过交换器路由到队列。</td></tr><tr><td>Channel</td><td>basic_publish()</td><td>将消息发布到一个交换器。消息必须包含一个路由键，用于将消息路由到正确的队列。</td></tr><tr><td>Channel</td><td>basic_consume()</td><td>注册一个消费者，开始消费消息。消费者会从指定的队列接收消息，直到取消注册或通道关闭。</td></tr><tr><td>Channel</td><td>basic_ack()</td><td>确认消息已被消费。消费者在成功处理消息后，应该发送 ACK 给 RabbitMQ。</td></tr><tr><td>Channel</td><td>close()</td><td>关闭通道。</td></tr><tr><td>Exchange</td><td>exchange_declare()</td><td>声明一个交换器。交换器接收生产者发布的消息，并将其路由到绑定的队列。</td></tr><tr><td>Exchange</td><td>exchange_bind()</td><td>将一个交换器绑定到另一个交换器。可以使用此方法将一个交换器路由到另一个交换器。</td></tr><tr><td>Exchange</td><td>exchange_unbind()</td><td>解绑一个交换器。</td></tr><tr><td>Exchange</td><td>exchange_delete()</td><td>删除一个交换器。</td></tr><tr><td>Queue</td><td>queue_declare()</td><td>声明一个队列。如果队列不存在，则会创建一个新队列。如果队列</td></tr><tr><td>Queue</td><td>queue_bind()</td><td>将队列绑定到一个交换器。消息通过交换器路由到队列。</td></tr><tr><td>Queue</td><td>queue_unbind()</td><td>解绑一个队列。</td></tr><tr><td>Queue</td><td>queue_delete()</td><td>删除一个队列。</td></tr><tr><td>Queue</td><td>basic_get()</td><td>从队列中获取消息。如果队列为空，则返回 None。</td></tr><tr><td>Queue</td><td>basic_consume()</td><td>注册一个消费者开始消费消息。</td></tr><tr><td>Message</td><td>/</td><td>消息对象是由生产者发布到交换器的数据单元，包含消息头和消息体。消息头包含元数据，如路由键、消息 ID、时间戳等。消息体包含实际的数据。</td></tr></tbody></table></div><br><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><blockquote><p>插件机制等… TODO</p></blockquote><h2 id="linux-上安装-rabbitmq" tabindex="-1"><a class="header-anchor" href="#linux-上安装-rabbitmq" aria-hidden="true">#</a> Linux 上安装 RabbitMQ</h2>',28),Q={href:"https://www.rabbitmq.com/",target:"_blank",rel:"noopener noreferrer"},q=l("<li><p>创建 erlang 目录，在官网找到 erlang 的 rpm 安装包，使用 wget 命令下载，此处用的版本是：erlang-21.3.8.14-1.el7.x86_64.rpm</p></li><li><p>创建 rabbitmq 目录，在官网找到 rabbitmq-server 的 rpm 安装包，使用 wget 命令下载，此处用的版本是 rabbitmq-server-3.8.8-1.el7.noarch.rpm</p></li><li><p>下载完成后在对应的目录下安装：</p><ul><li>rpm -ivh erlang-21.3.8.14-1.el7.x86_64.rpm</li><li>yum install socat -y（RabbitMQ 的依赖）</li><li>rpm -ivh rabbitmq-server-3.8.8-1.el7.noarch.rpm</li></ul></li><li><p>启动服务：</p><ul><li>chkconfig rabbitmq-server on（开机启动）</li><li>/sbin/service rabbitmq-server start（启动服务）</li><li>/sbin/service rabbitmq-server status（查看服务状态）</li></ul></li><li><p>安装管理插件：</p><ul><li>/sbin/service rabbitmq-server stop（停止服务）</li><li>rabbitmq-plugins enable rabbitmq_management（安装插件，默认端口：15672）</li></ul></li><li><p>创建超级管理员权限：</p><ul><li>rabbitmqctl add_user 名称 密码</li><li>rabbitmqctl set_user_tags 名称 administrator</li><li>rabbitmqctl set_permissions -p &quot;/&quot; 名称 &quot; .* &quot; &quot; .* &quot; &quot; .* &quot;</li><li>rabbitmqctl list_users（查看当前用户）</li></ul></li>",6),x=l(`<h2 id="quick-start" tabindex="-1"><a class="header-anchor" href="#quick-start" aria-hidden="true">#</a> Quick start</h2><p><strong>引入相关依赖：</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>RabbitMQ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.10.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>生产者代码：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建一个连接工厂</span>
        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 工厂 ip，连接队列</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 设置用户名和密码</span>
        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建连接，如果出现连接超时记得将服务器的 5672 端口打开</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取信道</span>
        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 生成一个队列，各个参数的含义：
         *  1.队列的名称
         *  2.队列中的消息是否持久化，默认情况是将消息存储在内存中
         *  3.该队列是否只供一个消费者进行消费，是否进行消息共享，false 代表只能一个消费者消费
         *  4.是否自动删除，最后一个消费者端开启连接之后，该队列是否自动删除，false 表示不自动删除
         *  5.其他参数
         */</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 发消息</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 发送一个消息，参数的含义如下
         *  1.发送到那个交换机
         *  2.路由的 key 值是哪个，本次是队列的名称
         *  3.其他参数信息
         *  4.消息体，二进制形式
         */</span>
        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送完毕&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>消费者代码：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建连接工厂</span>
        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 工厂 ip，连接队列</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 设置用户名和密码</span>
        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建连接</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取信道</span>
        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">// 接收消息的回调</span>
        <span class="token class-name">DeliverCallback</span> deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// 取消消息的回调</span>
        <span class="token class-name">CancelCallback</span> cancelCallback <span class="token operator">=</span> consumerTag <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费消息被中断&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 消费者消费消息，参数的含义
         *  1.消费哪个队列
         *  2.消费成功之后是否要自动应答，true 代表自动应答
         *  3.消费者未成功消费的回调
         *  4.消费者取消消费的回调
         */</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> deliverCallback<span class="token punctuation">,</span> cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function _(o,R){const i=p("ExternalLinkIcon"),t=p("router-link");return u(),d("div",null,[k,n("div",b,[m,n("p",null,[a("本文章为学习 RabbitMQ 的笔记，根据视频教程记录："),n("a",v,[a("尚硅谷 RabbitMQ 教程"),s(i)])])]),n("nav",g,[n("ul",null,[n("li",null,[s(t,{to:"#rabbitmq"},{default:e(()=>[a("RabbitMQ")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#什么是-mq"},{default:e(()=>[a("什么是 MQ？")]),_:1})]),n("li",null,[s(t,{to:"#mq-的分类"},{default:e(()=>[a("MQ 的分类")]),_:1})]),n("li",null,[s(t,{to:"#rabbitmq-1"},{default:e(()=>[a("RabbitMQ")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#rabbitmq-概要"},{default:e(()=>[a("RabbitMQ 概要")]),_:1})]),n("li",null,[s(t,{to:"#rabbitmq-相关概念"},{default:e(()=>[a("RabbitMQ 相关概念")]),_:1})]),n("li",null,[s(t,{to:"#rabbitmq-优缺点"},{default:e(()=>[a("RabbitMQ 优缺点")]),_:1})]),n("li",null,[s(t,{to:"#rabbitmq-使用场景-比较"},{default:e(()=>[a("RabbitMQ 使用场景&比较")]),_:1})])])]),n("li",null,[s(t,{to:"#rabbitmq-核心部分"},{default:e(()=>[a("RabbitMQ 核心部分")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#六大模式"},{default:e(()=>[a("六大模式")]),_:1})]),n("li",null,[s(t,{to:"#交换机的类型"},{default:e(()=>[a("交换机的类型")]),_:1})]),n("li",null,[s(t,{to:"#队列的类型"},{default:e(()=>[a("队列的类型")]),_:1})]),n("li",null,[s(t,{to:"#事务-消息确认机制"},{default:e(()=>[a("事务&消息确认机制")]),_:1})]),n("li",null,[s(t,{to:"#消息持久化"},{default:e(()=>[a("消息持久化")]),_:1})]),n("li",null,[s(t,{to:"#集群和高可用"},{default:e(()=>[a("集群和高可用")]),_:1})]),n("li",null,[s(t,{to:"#核心对象和方法"},{default:e(()=>[a("核心对象和方法")]),_:1})]),n("li",null,[s(t,{to:"#其他"},{default:e(()=>[a("其他")]),_:1})])])]),n("li",null,[s(t,{to:"#linux-上安装-rabbitmq"},{default:e(()=>[a("Linux 上安装 RabbitMQ")]),_:1})]),n("li",null,[s(t,{to:"#quick-start"},{default:e(()=>[a("Quick start")]),_:1})])])])])]),h,n("iframe",{src:o.$withBase("/markmap/html/rabbitmq/核心内容.html"),width:"100%",height:"400",frameborder:"0",scrolling:"No",leftmargin:"0",topmargin:"0"},null,8,f),M,n("ul",null,[n("li",null,[n("p",null,[a("进入 "),n("a",Q,[a("RabbitMQ 官网"),s(i)])])]),q]),x])}const w=c(r,[["render",_],["__file","index.html.vue"]]);export{w as default};
