import{_ as p,Q as c,S as o,U as n,W as e,X as t,a8 as s,a9 as l,H as i}from"./framework-d7e1aa10.js";const u={},r=n("h1",{id:"java-中的数据结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#java-中的数据结构","aria-hidden":"true"},"#"),s(" Java 中的数据结构")],-1),k={class:"table-of-contents"},d=l(`<h2 id="java-中的容器" tabindex="-1"><a class="header-anchor" href="#java-中的容器" aria-hidden="true">#</a> java 中的容器</h2><blockquote><p>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对（两个对象）的映射表</p></blockquote><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//算法/20230314/java集合框架架构.png" alt="集合框架" tabindex="0" loading="lazy"><figcaption>集合框架</figcaption></figure><h3 id="_1-collection" tabindex="-1"><a class="header-anchor" href="#_1-collection" aria-hidden="true">#</a> 1.Collection</h3><p><strong>1.Set：</strong></p><ul><li><code>TreeSet</code>：基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，<code>TreeSet</code> 则为 O(logN)。</li><li><code>HashSet</code>：基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</li><li><code>LinkedHashSet</code>：具有 HashSet 的查找效率，并且内部使用双向链表维护元素的插入顺序。</li></ul><p><strong>2.List：</strong></p><ul><li><code>ArrayList</code>：基于动态数组实现，支持随机访问。</li><li><code>Vector</code>：和 <code>ArrayList</code> 类似，但它是线程安全的。</li><li><code>LinkedList</code>：基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。</li></ul><p><strong>3.Queue：</strong></p><ul><li><code>LinkedList</code>：可以用它来实现双向队列。</li><li><code>PriorityQueue</code>：基于堆结构实现，可以用它来实现优先队列。</li></ul><br><h3 id="_2-map" tabindex="-1"><a class="header-anchor" href="#_2-map" aria-hidden="true">#</a> 2.Map</h3><ul><li><code>TreeMap</code>：基于红黑树实现。</li><li><code>HashMap</code>：基于哈希表实现。</li><li><code>HashTable</code>：和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程同时写入 HashTable 不会导致数据不一致。它是遗留类，不应该去使用它，而是使用 ConcurrentHashMap 来支持线程安全，ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。</li><li><code>LinkedHashMap</code>：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序。</li></ul><br><h2 id="java-容器的相关知识点" tabindex="-1"><a class="header-anchor" href="#java-容器的相关知识点" aria-hidden="true">#</a> Java 容器的相关知识点</h2><h3 id="_1-arraylist" tabindex="-1"><a class="header-anchor" href="#_1-arraylist" aria-hidden="true">#</a> 1.Arraylist</h3><p>因为 <code>ArrayList</code> 是基于数组实现的，所以支持快速随机访问：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>数组的默认大小为 10：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_CAPACITY</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_2-vector" tabindex="-1"><a class="header-anchor" href="#_2-vector" aria-hidden="true">#</a> 2.Vector</h3><p>它的实现与 <code>ArrayList</code> 类似，但是使用了 <code>synchronized</code> 进行同步：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     modCount<span class="token operator">++</span><span class="token punctuation">;</span>
     <span class="token function">ensureCapacityHelper</span><span class="token punctuation">(</span>elementCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     elementData<span class="token punctuation">[</span>elementCount<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> elementCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>    
	<span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 ArrayList 的比较：</p><ul><li>Vector 是同步的，因此开销就比 ArrayList 要大，访问速度更慢。最好使用 ArrayList 而不是 Vector，因为同步操作完全可以由程序员自己来控制；</li><li>Vector 每次扩容请求其大小的 2 倍（也可以通过构造函数设置增长的容量），而 ArrayList 是 1.5 倍。</li></ul><br><h3 id="_3-linkedlist" tabindex="-1"><a class="header-anchor" href="#_3-linkedlist" aria-hidden="true">#</a> 3. LinkedList</h3><p>基于双向链表实现，使用 Node 存储链表节点信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
	<span class="token class-name">E</span> item<span class="token punctuation">;</span>
	<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
	<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个链表存储了 first 和 last 指针：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">;</span>
	<span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> last<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>与 ArrayList 的比较：</p><ul><li><p>ArrayList 基于动态数组实现，LinkedList 基于双向链表实现。ArrayList 和 LinkedList 的区别可以归结为数组和链表的区别：</p></li><li><p>数组支持随机访问，但插入删除的代价很高，需要移动大量元素；</p></li><li><p>链表不支持随机访问，但插入删除只需要改变指针。</p></li></ul><br><h3 id="_4-hashmap" tabindex="-1"><a class="header-anchor" href="#_4-hashmap" aria-hidden="true">#</a> 4 HashMap</h3><p><strong>HashMap 的底层实现是「数组」+「链表」</strong></p><p>存储结构：</p><ul><li>内部包含了一个 Entry 类型的数组 table。</li><li>Entry 存储着键值对。它包含了四个字段，从 next 字段我们可以看出 Entry 是一个链表。即数组中的每个位置被当成一个桶，一个桶存放一个链表</li><li>HashMap 使用拉链法来解决冲突，同一个链表中存放哈希值和散列桶取模运算结果相同的 Entry。</li></ul><h3 id="队列" tabindex="-1"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> 队列</h3><p>在 Java 中，「队列接口」主要有以下几种：</p><ol><li><code>Queue&lt;E&gt;</code>: Queue 是 Java 集合框架中的队列接口，它表示一个典型的队列结构，即具有先进先出（FIFO）特点的数据结构，可以存储一系列元素（可重复或不可重复），支持在队列的尾部添加元素、在队列的头部获取并删除元素、获取但不删除队头元素等操作。Queue 是一个接口，它有多个实现类，包括 LinkedList、PriorityQueue 等。</li><li><code>Deque&lt;E&gt;</code>: Deque 是 Queue 的子接口，它是一个双端队列，支持在队列的两端添加和删除元素。Deque 提供了一系列的方法，可以允许在队列的头部和尾部进行插入、删除等操作。Deque 也是一个接口，它有多个实现类，包括 ArrayDeque、LinkedList 等。</li><li><code>BlockingQueue&lt;E&gt;</code>: BlockingQueue 是一个支持线程安全的队列接口，它继承自 Queue 接口。它提供了一些阻塞操作，当队列为空时会阻塞获取元素的线程，当队列已满时会阻塞添加元素的线程。BlockingQueue 是一个接口，它有多个实现类，包括 ArrayBlockingQueue、LinkedBlockingQueue、PriorityBlockingQueue、SynchronousQueue 等。</li><li><code>TransferQueue&lt;E&gt;</code>: TransferQueue 是 BlockingQueue 的子接口，它提供了一些扩展的方法，允许在队列中传输元素，即生产者可以将元素传输给消费者，而不是将元素放在队列中等待消费者取走。TransferQueue 是一个接口，目前只有一个实现类 SynchronousQueue。</li></ol><p>在Java中，常见的队列实现有以下几种：</p><ol><li><p>LinkedList</p><p>LinkedList是Java集合框架中的一个双向链表实现，也可以用作队列的实现。由于LinkedList实现了Queue接口，所以可以通过调用Queue中的方法来进行队列操作，如offer()和poll()。</p></li><li><p>ArrayDeque</p><p>ArrayDeque是Java集合框架中的一个双端队列实现，同时也可以用作队列的实现。ArrayDeque使用可调整大小的数组来存储元素，并提供了高效的添加和删除元素的方法。由于ArrayDeque同样实现了Queue接口，所以也可以通过Queue中的方法来进行队列操作。</p></li><li><p>PriorityQueue</p><p>PriorityQueue是Java集合框架中的一个优先队列实现，它可以按照元素的优先级进行排序。PriorityQueue通过二叉堆来实现，每次插入元素时会进行自动排序，可以使用Comparator来指定元素的排序方式。虽然PriorityQueue同样实现了Queue接口，但由于其内部是有序的，所以使用peek()方法查看队列头部元素并不一定返回队列中最先插入的元素，而是最小的元素。</p></li><li><p>ConcurrentLinkedQueue</p><p>ConcurrentLinkedQueue是Java集合框架中的一个线程安全的队列实现，可以用于多线程环境下的并发操作。ConcurrentLinkedQueue的内部实现是基于链表的，每个节点包含一个元素和一个指向下一个节点的引用。由于其采用了无锁的CAS算法实现，因此能够保证在多线程并发操作下的线程安全性。</p></li><li><p>LinkedBlockingQueue</p><p>LinkedBlockingQueue是Java集合框架中的一个阻塞队列实现，可以用于在多线程环境下进行数据传输。它使用链表来存储元素，并提供了阻塞的插入和移除元素的方法，即在队列为空或已满时会阻塞等待。LinkedBlockingQueue中的put()和take()方法会阻塞调用线程，直到队列不为空或不满。</p></li><li><p>ArrayBlockingQueue</p><p>ArrayBlockingQueue是Java集合框架中的一个阻塞队列实现，它使用数组来存储元素。与LinkedBlockingQueue不同，ArrayBlockingQueue的容量是有限的，因此在创建ArrayBlockingQueue对象时需要指定容量。与LinkedBlockingQueue一样，ArrayBlockingQueue也提供了阻塞的插入和移除元素的方法，即在队列为空或已满时会阻塞等待。</p></li></ol><h3 id="stack" tabindex="-1"><a class="header-anchor" href="#stack" aria-hidden="true">#</a> Stack</h3><p>数组实现栈（注意栈满栈空的情况）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> top<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ArrayStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
        top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">T</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Stack is full&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        arr<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Stack is empty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Stack is empty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> top <span class="token operator">==</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用链表实现栈：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> top<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">T</span> value<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">T</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            top <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> top<span class="token punctuation">;</span>
            top <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Stack is empty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">T</span> value <span class="token operator">=</span> top<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        top <span class="token operator">=</span> top<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Stack is empty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> top<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 中提供了 <code>Stack</code> 类，但是在实际开发中并不常用，主要是因为以下几个原因：</p><ol><li><code>Stack</code> 继承自 <code>Vector</code> 类，而 <code>Vector</code> 是同步的，线程安全的。但是在实际开发中使用同步容器会影响性能。</li><li><code>Stack</code> 的底层实现是基于数组，当元素数量超过数组大小时，需要重新分配内存并进行数据复制，这个过程比较耗时。</li><li>在 JDK1.6 之后，Java 官方推出了新的数据结构 <code>Deque</code>，即双端队列，它继承自 <code>Queue</code> 接口，可以实现栈的功能，而且性能更好。因此，在实际开发中，更推荐使用 <code>Deque</code> 而不是 <code>Stack</code>。</li></ol><p>Java中<code>Deque</code>接口有以下实现类：</p><ul><li><code>ArrayDeque</code>: 基于数组实现的双端队列，可以当作栈使用；</li><li><code>LinkedList</code>: 基于链表实现的双端队列，可以当作栈使用。</li></ul><p>除了以上两种实现类外，还有<code>ConcurrentLinkedDeque</code>和<code>LinkedBlockingDeque</code>，这两个类都是基于链表实现的并发队列，不适合用作栈。</p><p>总结来说，<code>ArrayDeque</code>和<code>LinkedList</code>可以用作栈的实现，但在性能和使用场景上存在一些差异。<code>ArrayDeque</code>基于数组实现，在频繁添加和删除元素时性能更好，适合用于需要高效的push和pop操作的场景；而<code>LinkedList</code>基于链表实现，在随机访问和迭代访问元素时性能更好，适合用于需要快速遍历栈内元素的场景。</p><h3 id="数组与集合" tabindex="-1"><a class="header-anchor" href="#数组与集合" aria-hidden="true">#</a> 数组与集合</h3><h4>数组转成集合</h4><p>循环遍历数组，将每个元素添加到集合中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> item <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>使用Arrays.asList()方法：将数组转换成List集合。需要注意的是，通过这种方式得到的List是不可变的，不能修改其大小，否则会抛出UnsupportedOperationException异常。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>Arrays.asList()返回的是一个固定大小的列表（ArrayList），不支持 <code>add()、remove()</code> 等修改操作。如果需要对该列表进行增删操作，可以将其复制到一个新的可修改列表中，例如 <code>new ArrayList&lt;&gt;(Arrays.asList(arr))</code>。</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">特别说明</p><p>上述参数中 <code>...</code> 被称为可变参数或者参数列表（varargs）。</p><p>当使用可变参数时，可以在方法中使用任意数量的相同类型的参数，这些参数将被封装为一个数组传递给方法。在上述代码中，T... a 表示这是一个可变参数，a是一个T类型的数组，它可以接受任意数量的T类型参数。</p></div><br><p>使用Collections.addAll()方法：可以将数组元素添加到任何实现了Collection接口的集合中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>javaCopy codeString<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>使用<code>Arrays</code>类中的<code>stream()</code>方法可以将数组转换成流，然后使用<code>Stream</code>中的<code>collect()</code>方法可以将流转换成集合。例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>javaCopy codeInteger[] array = {1, 2, 3};
List&lt;Integer&gt; list = Arrays.stream(array).collect(Collectors.toList());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4>集合转换数组</h4><div class="hint-container warning"><p class="hint-container-title">注意</p><p>从集合转换到数组，可以使用集合类的 <code>toArray()</code> 方法，但需要注意 <code>toArray()</code> 方法有多个重载，需要指定目标数组的类型。例如 <code>List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); Integer[] arr = list.toArray(new Integer[0])</code>。</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加元素到list中</span>
<span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指定数组大小</span>

<span class="token comment">// 或者</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加元素到list中</span>
<span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 注意，toArray() 不指定的话返回的是一个 Object 数组</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加元素到list中，需要进行强制类型转换</span>
<span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用 Stream 进行转换：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,76);function v(m,b){const a=i("router-link");return c(),o("div",null,[r,n("nav",k,[n("ul",null,[n("li",null,[e(a,{to:"#java-中的数据结构"},{default:t(()=>[s("Java 中的数据结构")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#java-中的容器"},{default:t(()=>[s("java 中的容器")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#_1-collection"},{default:t(()=>[s("1.Collection")]),_:1})]),n("li",null,[e(a,{to:"#_2-map"},{default:t(()=>[s("2.Map")]),_:1})])])]),n("li",null,[e(a,{to:"#java-容器的相关知识点"},{default:t(()=>[s("Java 容器的相关知识点")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#_1-arraylist"},{default:t(()=>[s("1.Arraylist")]),_:1})]),n("li",null,[e(a,{to:"#_2-vector"},{default:t(()=>[s("2.Vector")]),_:1})]),n("li",null,[e(a,{to:"#_3-linkedlist"},{default:t(()=>[s("3. LinkedList")]),_:1})]),n("li",null,[e(a,{to:"#_4-hashmap"},{default:t(()=>[s("4 HashMap")]),_:1})]),n("li",null,[e(a,{to:"#队列"},{default:t(()=>[s("队列")]),_:1})]),n("li",null,[e(a,{to:"#stack"},{default:t(()=>[s("Stack")]),_:1})]),n("li",null,[e(a,{to:"#数组与集合"},{default:t(()=>[s("数组与集合")]),_:1})])])])])])])]),d])}const y=p(u,[["render",v],["__file","A-Java中的数据结构.html.vue"]]);export{y as default};
