import{_ as c,Q as l,S as i,U as n,W as a,X as e,a8 as s,a9 as u,H as p}from"./framework-d7e1aa10.js";const k={},r=n("h1",{id:"netty-简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#netty-简介","aria-hidden":"true"},"#"),s(" Netty 简介")],-1),d={class:"table-of-contents"},m={class:"hint-container info"},v=n("p",{class:"hint-container-title"},"说明",-1),b={href:"https://dongzl.github.io/netty-handbook/",target:"_blank",rel:"noopener noreferrer"},h=u(`<ul><li>Netty 是一个异步的、基于事件驱动的网络应用框架，用以快速开发高性能、高可靠的网络 IO 程序，简化了 NIO 的开发流程</li><li>Netty 主要针对在 TCP 协议下，面向 Clients 端的高并发应用，或者 Peer-to-Peer 场景下的大量数据持续传输的应用</li><li>Netty 本质是一个 NIO 框架，适用于服务器通讯相关的多种应用场景</li><li>Netty 是高性能的网络通信框架，许多高性能的 RPC 框架和大数据框架都会使用 Netty 作为通信组件</li><li>目前存在的线程模型有：传统阻塞 I/O 服务模型、Reactor 模式，后者又根据 Reactor 的数量和处理资源池线程的数量不同，有三种典型的表现： <ul><li>单 Reactor 单线程</li><li>单 Reactor 多线程</li><li>主从 Reactor 多线程</li></ul></li><li>Netty 线程模式主要是从主从 Reactor 多线程模型做出了一定的改进（有多个 Reactor）</li></ul><h2 id="reactor-模式" tabindex="-1"><a class="header-anchor" href="#reactor-模式" aria-hidden="true">#</a> Reactor 模式</h2><ul><li>Reactor 模式又称为反应器模式、分发者模式、通知者模式</li><li>基于 I/O 复用模型：多个连接共用一个「阻塞对象」，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接，当某个连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理</li><li>基于线程池复用线程资源：不必再为每个连接创建线程，将连接完成后的业务处理任务分配给线程进行处理，一个线程可以处理多个连接业务</li><li>Reactor 模式使用 I/O 复用监听事件，收到事件后，分给某个线程进行处理，进而达到高并发</li><li>Reactor 核心组成： <ul><li>Reactor：在一个单独的线程中运行，负责「监听」和「分发」事件，分发给适当的处理程序对 I/O 事件做出反应</li><li>Handlers：处理程序执行 I/O 事件要完成的实际事件，Reactor 通过调度适当的处理程序来相应 I/O 事件，处理程序会执行非阻塞操作</li></ul></li><li>优点： <ul><li>响应快，不必为单个同步所阻塞（虽然 Reactor 本身依旧是同步的）</li><li>可以最大程度地避免复杂的多线程以及同步问题，并且避免了多线程/多进程的切换开销</li><li>扩展性好，可以方便地通过增加 Reactor 实例个数来充分利用 CPU 资源</li><li>复用性好，Reactor 模型本身与具体事件处理逻辑无关，具有很高的复用性</li></ul></li></ul><h3 id="单线程模型" tabindex="-1"><a class="header-anchor" href="#单线程模型" aria-hidden="true">#</a> 单线程模型</h3><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//netty/20230209/单线程模型.jpg" alt="什么是Netty？_慕课手记" tabindex="0" loading="lazy"><figcaption>什么是Netty？_慕课手记</figcaption></figure><ul><li><p>可以实现应用程序通过一个「阻塞对象」监听「多路连接请求」</p></li><li><p>Reactor 对象通过监控客户端请求事件，收到事件进行分发</p></li><li><p>如果建立连接请求事件，则由 Acceptor 对象通过 Accept 处理连接请求，然后创建一个 Handler 对象处理连续完成后的后续业务处理</p></li><li><p>如果建立的不是连接事件，则 Reactor 会分发调用连接对应的 Handler 来响应事件</p></li><li><p>Handler 会完成 Read -&gt; 业务处理 -&gt; Send 的完整业务流程</p></li><li><p>这样服务端就用「一个线程」通过多路复用完成了所有的 I/O 操作（包括连接、读写等），编码简单清晰，但是如果客户端连接数量比较多的话，将无法支撑</p></li><li><p>优点：模型简单，没有多线程、进程通信、竞争的问题，即全部都在一个线程内完成</p></li><li><p>缺点：因为只有一个线程，所以会有性能问题，整个进程无法处理其他连接事件，很容易导致性能瓶颈；而且线程如果意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障（可靠性问题）</p></li><li><p>使用场景：客户端的数量有限，业务处理非常快的情况，比如 Redis 在业务处理时间复杂度 O(1) 的情况</p></li></ul><h3 id="多线程模型" tabindex="-1"><a class="header-anchor" href="#多线程模型" aria-hidden="true">#</a> 多线程模型</h3><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//netty/20230209/多线程模型.jpeg" alt="image-20230108113811182" tabindex="0" loading="lazy"><figcaption>image-20230108113811182</figcaption></figure><ul><li>Reactor 对象通过 select 监控客户端请求事件，收到事件后通过 dispatch 进行分发</li><li>如果建立连接请求，则 Acceptor 对象通过 Accept 处理连接请求，然后创建一个 Handler 对象处理完成连接后的各个事件</li><li>如果不是连接请求，则由 Reactor 分发调用连接对应的 Handler 来处理</li><li>Handler 只负责响应事件，不做具体的业务处理，通过 Read 读取数据后，会分发给后面的 Worker 线程池的某个线程处理业务</li><li>Worker 线程池会分配独立的线程完成真正的业务，并将结果返回给 Handler，Handler 收到响应后，通过 Send 将结果返回给客户端</li><li>优点：可以充分地利用多核 CPU 的处理能力</li><li>缺点：多线程「数据共享」和「访问」比较复杂，Reactor 处理所有的事件的「监听」和「响应」，Reactor 在单线程高并发场景下容易出现瓶颈</li></ul><h3 id="主从-reactor-多线程" tabindex="-1"><a class="header-anchor" href="#主从-reactor-多线程" aria-hidden="true">#</a> 主从 Reactor 多线程</h3><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//netty/20230209/主从Reactor多线程.jpeg" alt="什么是Netty？_慕课手记" style="zoom:50%;"><ul><li>SubReactor 可以有多个，即 Reactor 主线程可以对应多个 Reactor 子线程，以此解决 Reactor 的性能瓶颈</li><li>MainReactor 对象通过 Select 监听连接事件，收到后通过 Acceptor 对象处理连接事件</li><li>当 Acceptor 对象处理连接事件后，MainReactor 会将连接分发给 SubReactor</li><li>SubReactor 将连接加入到连接队列进行监听，并创建 Handler 进行各种事件的处理</li><li>当有新事件发生时，SubReactor 就会调用对应的 Handler 处理，Handler 通过 Read 读取数据，分发给之后的 Worker 线程处理</li><li>Worker 线程池会分配独立的 Worker 线程进行业务处理并返回结果</li><li>Handler 收到响应结果后，再通过 Send 将结果返回给客户端</li><li>优点：父线程与子线程的数据交互职责明确，父线程只需要接收新连接，子线程则完成后续的业务处理；父子线程之间的数据交互也简单，Reactor 主线程只需要把新连接传递给子线程即可，子线程无需返回数据</li><li>缺点：编程复杂度较高</li><li>该模型再许多项目中都有应用，比如 Nginx 主从 Reactor 多线程模型、Memcahed 主从多线程、Netty 主从多线程</li></ul><h3 id="netty-主从多线程" tabindex="-1"><a class="header-anchor" href="#netty-主从多线程" aria-hidden="true">#</a> Netty 主从多线程</h3><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//netty/20230209/主从多线程.jpeg" alt="使用netty手撸一个简易http服务器" tabindex="0" loading="lazy"><figcaption>使用netty手撸一个简易http服务器</figcaption></figure><ul><li>BossGroup 线程维护 Selector，只关注 Accept，接收到 Accept 事件后，会获取对应的 SocketChannel，封装成 NIOSocketChannel 注册到 Worker 线程（事件循环）并进行维护</li><li>当 Worker 线程监听到 Selector 中通道发生了 Worker 关心的事件时，就会进行处理（由 Handler 处理，这里的 Handler 已经加入到通道了）</li><li>BossGroup 相当于 MainReactor，专门复杂接收客户端的连接，而 WorkerGroup 相当于 SubReactorGroup，专门复杂网络的读写，二者的事件循环（NioEventLoop）可以有多个，以此构成 NioEventGroup</li><li>NioEventLoop 表示一个不断循环的执行处理任务的线程，每个 NioEventLoop 都有一个 Selector，用于监听绑定在其上的 Socket 网络通讯</li><li>每个 Boss NioEventLoop 执行的步骤有： <ul><li>轮询 Accept 事件</li><li>处理 Accept 事件，与客户端建立连接，生成 NioSocketChannel，并将其注册到某个 Worker NioEventLoop 上的 Selector</li><li>处理任务队列的任务，即 runAllTasks</li></ul></li><li>每个 Worker NioEventLoop 执行的步骤有： <ul><li>轮询 Read、Write 事件</li><li>处理 I/O 事件，即读写事件，在对应的 NioSocketChannel 中处理</li><li>处理任务队列的任务，即 runAllTasks</li></ul></li><li>每个 Worker NioEventLoop 处理业务时，会使用 Pipeline（管道），其中包含了 Channel，即通过 Pipeline 可以获得对应的管道，管道中维护了很多的 Handler</li><li>NioEventLoop 内部采用「串行化」设计，消息的读取、解码、处理、编码、发送，始终都由 I/O 线程 NioEventLoop 负责</li><li>每个 NioEventLoop 都包含一个 Selector 和一个 TaskQueue，Selector 上可以注册监听多个 NioChannel，每个 NioChannel 只会绑定在唯一的 NioEventLoop 上，而且每个 NioChannel 都绑定有一个 ChannelPipeline</li></ul><h2 id="netty-简单使用" tabindex="-1"><a class="header-anchor" href="#netty-简单使用" aria-hidden="true">#</a> Netty 简单使用</h2><p><strong>服务端：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建两个线程组（两个底层都是无限循环）</span>
        <span class="token comment">// 包含的子线程数为：CPU 核数 * 2</span>
        <span class="token class-name">NioEventLoopGroup</span> bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">NioEventLoopGroup</span> workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 创建服务器端的启动对象，配置参数</span>
            <span class="token class-name">ServerBootstrap</span> bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 链式编程配置</span>
            bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span>
                    <span class="token comment">// 使用 NioServerSocketChannel 作为服务器的通道实现</span>
                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                    <span class="token comment">// 线程队列的连接个数</span>
                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_BACKLOG</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>
                    <span class="token comment">// 保持连接状态</span>
                    <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_KEEPALIVE</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
                    <span class="token comment">// 设置 workerGroup 的 EventGroup 对应的管道的处理器</span>
                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 给 Pipeline 设置处理器</span>
                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                            socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服务器准备就绪...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 绑定一个端口并同步，生成一个 ChannelFuture 对象</span>
            <span class="token class-name">ChannelFuture</span> cf <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">6668</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 对关闭通道进行监听</span>
            cf<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 客户端只需要一个事件循环组</span>
        <span class="token class-name">EventLoopGroup</span> eventExecutors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 创建客户端的启动对象（不是 ServerBootstrap）</span>
            <span class="token class-name">Bootstrap</span> bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 设置相关参数</span>
            bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>eventExecutors<span class="token punctuation">)</span>
                    <span class="token comment">// 设置客户端通道的实现</span>
                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                    <span class="token comment">// 设置处理器</span>
                    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                            socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;客户端准备就绪...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 启动客户端，连接服务端</span>
            <span class="token class-name">ChannelFuture</span> channelFuture <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">6668</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 给关闭通道进行监听</span>
            channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            eventExecutors<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务端的处理器：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 自定义处理器，需要遵守 Netty 的规范（ChannelInboundHandlerAdapter）
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     *
     * <span class="token keyword">@param</span> <span class="token parameter">ctx</span> 上下文对象，含有 pipeline
     * <span class="token keyword">@param</span> <span class="token parameter">msg</span> 客户端发送的数据，默认是 Object
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Server Context: &quot;</span> <span class="token operator">+</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将 msg 转成一个缓冲区（netty 提供的性能更高的缓冲区）</span>
        <span class="token class-name">ByteBuf</span> buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;客户端发送的消息是: &quot;</span> <span class="token operator">+</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;客户端地址: &quot;</span> <span class="token operator">+</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 数据读取完毕后做的处理
     * <span class="token keyword">@param</span> <span class="token parameter">ctx</span> 上下文对象
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelReadComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将数据写入缓冲区并刷新，信息需要进行编码</span>
        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">,</span> <span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 处理异常，一般是需要关闭通道
     * <span class="token keyword">@param</span> <span class="token parameter">ctx</span> 上下文对象
     * <span class="token keyword">@param</span> <span class="token parameter">cause</span> 异常
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端的处理器：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 当通道就绪就会触发这个方法
     * <span class="token keyword">@param</span> <span class="token parameter">ctx</span> 上下文对象
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Client Context: &quot;</span> <span class="token operator">+</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Server&quot;</span><span class="token punctuation">,</span> <span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 当通道有读取事件时就会触发这个方法
     * <span class="token keyword">@param</span> <span class="token parameter">ctx</span> 上下文对象
     * <span class="token keyword">@param</span> <span class="token parameter">msg</span> 服务端发送的消息
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">ByteBuf</span> byteBuf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服务器回复的消息: &quot;</span> <span class="token operator">+</span> byteBuf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服务器的地址: &quot;</span> <span class="token operator">+</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 处理异常，一般是关闭管道
     * <span class="token keyword">@param</span> <span class="token parameter">ctx</span> 上下文对象
     * <span class="token keyword">@param</span> <span class="token parameter">cause</span> 异常
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        cause<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24);function y(w,f){const t=p("router-link"),o=p("ExternalLinkIcon");return l(),i("div",null,[r,n("nav",d,[n("ul",null,[n("li",null,[a(t,{to:"#netty-简介"},{default:e(()=>[s("Netty 简介")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#reactor-模式"},{default:e(()=>[s("Reactor 模式")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#单线程模型"},{default:e(()=>[s("单线程模型")]),_:1})]),n("li",null,[a(t,{to:"#多线程模型"},{default:e(()=>[s("多线程模型")]),_:1})]),n("li",null,[a(t,{to:"#主从-reactor-多线程"},{default:e(()=>[s("主从 Reactor 多线程")]),_:1})]),n("li",null,[a(t,{to:"#netty-主从多线程"},{default:e(()=>[s("Netty 主从多线程")]),_:1})])])]),n("li",null,[a(t,{to:"#netty-简单使用"},{default:e(()=>[s("Netty 简单使用")]),_:1})])])])])]),n("div",m,[v,n("p",null,[n("a",b,[s("Netty 学习手册"),a(o)])])]),h])}const x=c(k,[["render",y],["__file","B-Netty简介.html.vue"]]);export{x as default};
