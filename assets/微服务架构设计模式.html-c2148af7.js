import{_ as l,Q as e,S as t,U as i,a8 as a,W as n,a9 as s,H as o}from"./framework-d7e1aa10.js";const h={},d=i("h1",{id:"微服务架构设计模式",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#微服务架构设计模式","aria-hidden":"true"},"#"),a(" 微服务架构设计模式")],-1),c={href:"https://dzone.com/articles/popular-design-patterns-for-microservices-architec",target:"_blank",rel:"noopener noreferrer"},u=s('<h1 id="api-网关模式" tabindex="-1"><a class="header-anchor" href="#api-网关模式" aria-hidden="true">#</a> API 网关模式</h1><p>将业务分解为多个微服务带来的问题：</p><ul><li>如何处理横切关注点：授权、速率控制、负载均衡、重试策略、服务发现</li><li>如何解决客户端和服务端之间的直接通信会导致过多的流量往返和紧密耦合</li><li>如何过滤和映射得到数据子集</li><li>如何将多个微服务的数据进行耦合</li></ul><p><strong>使用 API 网关，具有的功能有：</strong></p><ul><li>反向代理</li><li>请求聚合</li><li>网关卸载</li><li>服务发现</li><li>...</li></ul><br><h1 id="客户端-ui-组合-spa-模式" tabindex="-1"><a class="header-anchor" href="#客户端-ui-组合-spa-模式" aria-hidden="true">#</a> 客户端 UI 组合（SPA）模式</h1><ul><li>每个微服务都由面向业务功能的团队负责开发</li><li>一些 UI 界面可能需要来自多个微服务的数据，其中每个数据项都由不同的团队维护</li><li>为了实现这些 UI 团队应该创建一个页面骨架（SPA），通过组合多个 UI 组件来构建页面</li><li>每个团队开发一个特定于某个服务的客户端 UI 组件</li></ul><br><h1 id="服务-数据库对应模式" tabindex="-1"><a class="header-anchor" href="#服务-数据库对应模式" aria-hidden="true">#</a> 服务-数据库对应模式</h1><ul><li>微服务需要的是<strong>独立</strong>和<strong>松耦合</strong></li><li>在多语言的微服务架构中，每个微服务可能有着不一样的数据存储需求，数据库也需要通过复制和分片来实现伸缩性</li><li>这里的微服务的事务就必须限制在自己的数据库中，其他服务要想使用数据必须通过 API 来获取</li><li>如果使用的是关系型数据库，那么一个服务对应一个 Schema 是实现数据私有化的最佳选择。可以为每一个服务分配不同的数据库用户 ID 来创建这种屏障</li></ul><br><h1 id="saga-模式" tabindex="-1"><a class="header-anchor" href="#saga-模式" aria-hidden="true">#</a> Saga 模式</h1><ul><li>如果每一个服务都使用一个数据库，那么在实现跨服务的事务时会出问题，此时需要考虑如何保持数据的一致性</li><li>本地的 ACID 事务在这里不会起作用，此时可以采用 Saga 模式</li><li>Saga 是一种<strong>本地事务链</strong>，事务链中的每一个事务更新数据库并发布一个<strong>事件</strong>来触发下一个本地事务</li><li>Saga 模式要求在本地事务失败时对事务进行补偿</li></ul><p><strong>Saga 模式的两种实现方式：</strong></p><ul><li>编配（Orchestration）：<strong>编配器</strong>负责协调所有的服务执行本地事务、获取更新和执行下一个事件。如果失败，则它负责触发补偿事件</li><li>编排（Choreography）：每个微服务负责<strong>监听</strong>和<strong>发布</strong>事件，并且在失败时触发补偿事件</li></ul><p>注：<strong>编配</strong>比<strong>编排</strong>更容易实现。在编配实现中只有一个组件需要协调所有事件；而在编排视线中，每个微服务都必须监听和响应事件</p><br><h1 id="断路器模式" tabindex="-1"><a class="header-anchor" href="#断路器模式" aria-hidden="true">#</a> 断路器模式</h1><p>在微服务架构中，如果一个事务涉及到多个服务，那么当下游微服务发生故障时，还会继续调用并耗尽所有服务的网络资源，并且还会影响到用户体验</p><p>如何解决<strong>级联故障：</strong></p><ul><li>在客户端和服务端之间设置一个代理，跟踪连续调用失败的次数，如果超过一个阈值，那么就中断连接并立即<strong>宣告失败</strong></li><li>在经过一个超时时间之后，断路器再次允许有限数量的测试请求，检查连接是否可以恢复，否则超时时间重置</li></ul><br><h1 id="业务能力或子域分解模式" tabindex="-1"><a class="header-anchor" href="#业务能力或子域分解模式" aria-hidden="true">#</a> 业务能力或子域分解模式</h1><ul><li>在微服务加否中，复杂的大型应用不仅需要进行分解、内聚和松耦合，还必须是自主且足够小的</li><li>有两种分解方法： <ul><li>根据业务能力分解：业务能力是产生价值的东西，如航空公司中可以是预定、销售、支付等</li><li>根据子域分解：子域的概念来自于领域驱动设计（DDD），一个域由多个子域组成，如产品目录、订单管理、交付管理等</li></ul></li></ul><br><h1 id="绞杀榕模式" tabindex="-1"><a class="header-anchor" href="#绞杀榕模式" aria-hidden="true">#</a> 绞杀榕模式</h1><ul><li>此模式是描述如何将单体应用转化成微服务架构的，绞杀榕模式以藤蔓作为类比，藤蔓会扼死它所缠绕的树。</li><li>将单体应用程序的一小部分转化为微服务，对于用户而言其外部的 API 保持不变，直至所有部分被重构形成微服务架构</li></ul><br><h1 id="反腐蚀层模式" tabindex="-1"><a class="header-anchor" href="#反腐蚀层模式" aria-hidden="true">#</a> 反腐蚀层模式</h1><ul><li>当现代应用程序需要于遗留应用程序集成时，与过时的基础设施协议、API和数据模型交互将是一项巨大的挑战。坚持旧的模式和语义可能会腐蚀新系统</li><li>此时需要一个层来装欢两个系统之间的通信。反腐蚀层于遗留系统或新系统的数据模式相匹配，具体取决于他从哪个系统获取数据</li><li>这样可以确保旧的系统不需要做出改变，同时新系统也不需要在设计和技术方面做出妥协</li></ul><br><br>',33);function g(p,_){const r=o("ExternalLinkIcon");return e(),t("div",null,[d,i("p",null,[a("原文："),i("a",c,[a("https://dzone.com/articles/popular-design-patterns-for-microservices-architec"),n(r)])]),u])}const b=l(h,[["render",g],["__file","微服务架构设计模式.html.vue"]]);export{b as default};
