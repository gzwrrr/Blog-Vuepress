import{_ as p,Q as i,S as l,U as n,W as a,X as e,a8 as s,a9 as u,H as o}from"./framework-d7e1aa10.js";const d={},r=n("h1",{id:"rabbitmq-事务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rabbitmq-事务","aria-hidden":"true"},"#"),s(" RabbitMQ 事务")],-1),k=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"事务"),n("p",null,"在 RabbitMQ 中，事务消息是指生产者将多条消息发送到 RabbitMQ 服务器，然后将它们视为一个单元，并将它们放在一个单独的事务中。如果这些消息不能全部成功写入 RabbitMQ 服务器，则会回滚整个事务，否则，将一次性写入所有消息。事务可以保证在所有消息都被写入队列之后，消费者才能消费这些消息。")],-1),b={class:"table-of-contents"},v=u(`<p>事务消息的原理如下：</p><ol><li>开启事务：使用 Connection 对象的 <code>txSelect()</code> 方法开启事务。</li><li>发送消息：使用 Channel 对象的 <code>basicPublish()</code> 方法发送消息。</li><li>提交事务：使用 Channel 对象的 <code>txCommit()</code> 方法提交事务。在提交事务之前，所有的消息都会存储在 RabbitMQ 中，并且不会被消费者获取。</li><li>回滚事务：使用 Channel 对象的 <code>txRollback()</code> 方法回滚事务。在回滚事务之后，之前发送的消息都会被撤回，并且不会被消费者获取。</li></ol><p>事务消息的机制能够确保消息的可靠性，但是同时也会影响消息的性能。因此，在使用事务消息时需要注意，尽量减少事务的使用（可以使用消息确认机制代替），提高消息的吞吐量。</p><h2 id="简单示例" tabindex="-1"><a class="header-anchor" href="#简单示例" aria-hidden="true">#</a> 简单示例</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">TransactionTemplate</span> transactionTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionCallbackWithoutResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doInTransactionWithoutResult</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;my.exchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my.routing.key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello, RabbitMQ!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    status<span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;my.queue&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Received message: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：使用了Spring AMQP提供的<code>RabbitTemplate</code>发送消息，并使用了<code>TransactionTemplate</code>来管理事务。发送消息时，使用<code>transactionTemplate.execute()</code>方法包裹发送逻辑，在发送成功后自动提交事务，发送失败则回滚事务。接收消息时，使用了<code>@RabbitListener</code>注解标注方法，表示该方法监听名为<code>my.queue</code>的队列，当有消息到达时自动调用该方法进行处理。</p><p>使用场景：</p><ul><li>对消息可靠性要求较高的业务场景，确保消息在发送成功后才被处理，避免消息丢失或重复处理。</li><li>对消息吞吐量要求较低的业务场景，因为事务会对性能产生一定影响。</li></ul>`,8),m={class:"hint-container info"},h=n("p",{class:"hint-container-title"},"相关文章（转）",-1),_={href:"https://www.cnblogs.com/qlqwjy/p/13934573.html",target:"_blank",rel:"noopener noreferrer"};function f(y,w){const t=o("router-link"),c=o("ExternalLinkIcon");return i(),l("div",null,[r,k,n("nav",b,[n("ul",null,[n("li",null,[a(t,{to:"#rabbitmq-事务"},{default:e(()=>[s("RabbitMQ 事务")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#简单示例"},{default:e(()=>[s("简单示例")]),_:1})])])])])]),v,n("div",m,[h,n("p",null,[n("a",_,[s("RabbitMQ事务性消息和确认模式 – 博客园 Qiao_Zhi"),a(c)])])])])}const R=p(d,[["render",f],["__file","E-RabbitMQ事务.html.vue"]]);export{R as default};
