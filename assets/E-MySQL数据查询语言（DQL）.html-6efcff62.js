import{_ as s,Q as n,S as r,U as e,W as i,X as d,a8 as l,a9 as t,H as c}from"./framework-d7e1aa10.js";const u={},o=e("h1",{id:"mysql-数据查询语言-dql",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mysql-数据查询语言-dql","aria-hidden":"true"},"#"),l(" MySQL 数据查询语言（DQL）")],-1),m={class:"table-of-contents"},h=t(`<p>基础查询（注意：查询的表格是一个虚拟的表格） 查询的列表可以是：</p><ol><li>表中的字段</li><li>常量值</li><li>表达式</li><li>函数</li></ol><div class="hint-container info"><p class="hint-container-title">语法</p><p>select 查询列表</p><p>from 查询的表名</p></div><h3 id="查询表中的单个字段" tabindex="-1"><a class="header-anchor" href="#查询表中的单个字段" aria-hidden="true">#</a> 查询表中的单个字段</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select 单个字段名 from 表名;  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查询表中的多个字段" tabindex="-1"><a class="header-anchor" href="#查询表中的多个字段" aria-hidden="true">#</a> 查询表中的多个字段</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select 字段名,字段名,... from 表名;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查询表中的全部字段" tabindex="-1"><a class="header-anchor" href="#查询表中的全部字段" aria-hidden="true">#</a> 查询表中的全部字段</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from 表名;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查询表中的常量" tabindex="-1"><a class="header-anchor" href="#查询表中的常量" aria-hidden="true">#</a> 查询表中的常量</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select 常量;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查询表达式-表达式如-100-10" tabindex="-1"><a class="header-anchor" href="#查询表达式-表达式如-100-10" aria-hidden="true">#</a> 查询表达式（表达式如：100*10）</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select 表达式;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查询函数" tabindex="-1"><a class="header-anchor" href="#查询函数" aria-hidden="true">#</a> 查询函数</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select 函数名();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查询数据时起别名-便于理解-如果要查询的字段有重名的情况-使用别名可以区分开来" tabindex="-1"><a class="header-anchor" href="#查询数据时起别名-便于理解-如果要查询的字段有重名的情况-使用别名可以区分开来" aria-hidden="true">#</a> 查询数据时起别名（便于理解，如果要查询的字段有重名的情况，使用别名可以区分开来）</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>1、select 表达式 as 别名, 表达式 as 别名,... from 表名;
2、select 表达式 别名, 表达式 别名,... from 表名;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="去除重复的数据" tabindex="-1"><a class="header-anchor" href="#去除重复的数据" aria-hidden="true">#</a> 去除重复的数据</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select distinct 字段 from 表名;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="mysql中的-只是运算符-字段拼接则需要" tabindex="-1"><a class="header-anchor" href="#mysql中的-只是运算符-字段拼接则需要" aria-hidden="true">#</a> mysql中的+只是运算符，字段拼接则需要：</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select concat(字段，字段，字段) as 结果 from 表名;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="判断是否为null-如果是则给出其他结果" tabindex="-1"><a class="header-anchor" href="#判断是否为null-如果是则给出其他结果" aria-hidden="true">#</a> 判断是否为null，如果是则给出其他结果</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select ifnull(可能为空的字段,希望的输出的结果) as 字段的别名 （可加原来的字段做对比） from 表名;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">语法</p><p>select 查询列表 from 表名 where 筛选条件;</p></div><div class="hint-container info"><p class="hint-container-title">分类</p><p>分类：</p><ol><li>按条件表达式筛选:</li><li>条件运算符：<code>&gt; &lt; = （不等于）&lt;&gt; &gt;= &lt;= （安全等于）&lt;=&gt;</code></li><li>按逻辑表达式筛选</li><li>逻辑运算符：<code>（&amp;&amp; || ! ） 标准的是：and or not</code></li><li>模糊查询，涉及的关键词：<code>like (between and) in (is null)</code><ol><li>通配符：</li><li><code>%</code> 代表任意多个字符（包含0个字符）</li><li><code>_</code> 代表任意单个字符</li><li>转义符可以为：<code>\\</code> 或者指定任意字符为转义符（以指定 <code>#</code> 为转义符为例），语法：... like &#39;任意通配符#任意通配符&#39; escape &#39;#&#39;;</li></ol></li></ol></div><h3 id="按条件表达式筛选" tabindex="-1"><a class="header-anchor" href="#按条件表达式筛选" aria-hidden="true">#</a> 按条件表达式筛选</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select 查询列表 from 表名 where 条件表达式语句（包含但不全有：\`&gt; &lt; = &lt;&gt; &gt;= &lt;= &lt;=&gt;\`）;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="按逻辑表达式子" tabindex="-1"><a class="header-anchor" href="#按逻辑表达式子" aria-hidden="true">#</a> 按逻辑表达式子</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select 查询列表 from 表名 where 逻辑表达式语句（包含但不全有：\`and or not &gt; &lt; = &lt;&gt; &gt;= &lt;= &lt;=&gt;\`）;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="模糊查询-为通配符-注意-like后的模糊匹配字符必须用单引号" tabindex="-1"><a class="header-anchor" href="#模糊查询-为通配符-注意-like后的模糊匹配字符必须用单引号" aria-hidden="true">#</a> 模糊查询（%为通配符；注意：like后的模糊匹配字符必须用单引号）</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>（1）like（一般和通配符一起使用）：  
    select 查询列表 from 表名 where 字段名 like &#39;%包含的字符%&#39;（用通配符筛选出字段应该包含的内容）;  
（2）between .. and .. （包含临界值，相当于：字段名&gt;=条件1 and 字段名&lt;=条件2）：  
    select 查询列表 from 表名 where 字段名 between 条件 and 条件;  
（3）in（注意：不支持通配符，且相当于：字段名=字段1 or 字段名=字段2 or ...）：  
     select 查询列表 from 表名 where 字段名 in(字段,字段,...);  
（4）is null：  
    select 查询列表 from 表名 where 字段名 is （not） null;  
    注：用\`&lt;=&gt;\`表示判断是否等于（既可以判断null又可以判断具体的值，但可读性较差），返回true或false，如：  
    select 查询列表 from 表名 where 字段名 \`&lt;=&gt;\` 值;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31);function v(b,g){const a=c("router-link");return n(),r("div",null,[o,e("nav",m,[e("ul",null,[e("li",null,[i(a,{to:"#mysql-数据查询语言-dql"},{default:d(()=>[l("MySQL 数据查询语言（DQL）")]),_:1}),e("ul",null,[e("li",null,[i(a,{to:"#查询表中的单个字段"},{default:d(()=>[l("查询表中的单个字段")]),_:1})]),e("li",null,[i(a,{to:"#查询表中的多个字段"},{default:d(()=>[l("查询表中的多个字段")]),_:1})]),e("li",null,[i(a,{to:"#查询表中的全部字段"},{default:d(()=>[l("查询表中的全部字段")]),_:1})]),e("li",null,[i(a,{to:"#查询表中的常量"},{default:d(()=>[l("查询表中的常量")]),_:1})]),e("li",null,[i(a,{to:"#查询表达式-表达式如-100-10"},{default:d(()=>[l("查询表达式（表达式如：100*10）")]),_:1})]),e("li",null,[i(a,{to:"#查询函数"},{default:d(()=>[l("查询函数")]),_:1})]),e("li",null,[i(a,{to:"#查询数据时起别名-便于理解-如果要查询的字段有重名的情况-使用别名可以区分开来"},{default:d(()=>[l("查询数据时起别名（便于理解，如果要查询的字段有重名的情况，使用别名可以区分开来）")]),_:1})]),e("li",null,[i(a,{to:"#去除重复的数据"},{default:d(()=>[l("去除重复的数据")]),_:1})]),e("li",null,[i(a,{to:"#mysql中的-只是运算符-字段拼接则需要"},{default:d(()=>[l("mysql中的+只是运算符，字段拼接则需要：")]),_:1})]),e("li",null,[i(a,{to:"#判断是否为null-如果是则给出其他结果"},{default:d(()=>[l("判断是否为null，如果是则给出其他结果")]),_:1})]),e("li",null,[i(a,{to:"#按条件表达式筛选"},{default:d(()=>[l("按条件表达式筛选")]),_:1})]),e("li",null,[i(a,{to:"#按逻辑表达式子"},{default:d(()=>[l("按逻辑表达式子")]),_:1})]),e("li",null,[i(a,{to:"#模糊查询-为通配符-注意-like后的模糊匹配字符必须用单引号"},{default:d(()=>[l("模糊查询（%为通配符；注意：like后的模糊匹配字符必须用单引号）")]),_:1})])])])])]),h])}const p=s(u,[["render",v],["__file","E-MySQL数据查询语言（DQL）.html.vue"]]);export{p as default};
