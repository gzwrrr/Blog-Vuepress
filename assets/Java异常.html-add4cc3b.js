import{_ as o,Q as c,S as l,U as e,W as t,X as n,a8 as i,a9 as p,H as r}from"./framework-d7e1aa10.js";const d={},s=e("h1",{id:"java-异常",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#java-异常","aria-hidden":"true"},"#"),i(" Java 异常")],-1),h={class:"table-of-contents"},u=p('<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java异常/20230209/异常的继承结构图.png" alt="异常的继承结构图" tabindex="0" loading="lazy"><figcaption>异常的继承结构图</figcaption></figure><ul><li>不管是错误还是异常，都是可抛出的，同样也都可以捕获，但是注意错误抛出后一般不会进行捕获</li><li>Exception 分为两类：编译时异常和运行时异常（受检异常和非受检异常）。这两个异常都是发生在运行阶段，编译阶段异常是不会发生的</li><li>编译时异常是表示必须在编写程序的时候预先对这种异常进行处理，否则编译器会报错（并不是在编译阶段发生的）；运行时异常在编写程序阶段可以选择处理也可以选择不处理</li><li>Error 一旦发生，Java 程序便会终止执行，退出 JVM，即错误时不能处理的</li></ul><h2 id="受检异常和非受检异常" tabindex="-1"><a class="header-anchor" href="#受检异常和非受检异常" aria-hidden="true">#</a> 受检异常和非受检异常</h2><p>受检异常和非受检异常可以称为编译时异常（Checked Exceptions）和运行时异常（Runtime Exceptions）。</p><p>编译时异常（Checked Exceptions）是在编译时期由编译器强制检查的异常。这些异常通常表示程序中的外部条件可能导致异常情况，例如I/O错误、网络连接问题等。编译器要求程序员在方法签名中声明可能抛出的受检异常或在方法内部使用<code>try-catch</code>块进行处理。如果不处理或声明这些受检异常，编译器会报告编译错误。</p><p>运行时异常（Runtime Exceptions）是在运行时期抛出的异常，通常表示程序错误或逻辑错误，例如空指针引用、数组越界等。与受检异常不同，运行时异常在编译器不强制要求捕获或在方法签名中声明。这意味着程序员可以选择是否捕获和处理这些异常。运行时异常通常由程序的逻辑和设计问题引起，应该通过代码的质量保证和逻辑检查来避免它们的发生。</p><p>需要注意的是，Java的RuntimeException及其子类都属于运行时异常。它们在编译器不进行强制检查，因此可以在代码中选择是否处理。这为程序员提供了更大的自由度，但也要求程序员在设计和编码过程中更加小心，以避免潜在的运行时异常导致程序错误或不稳定性。</p><p>在Java中，常见的受检异常（Checked Exceptions）和非受检异常（Unchecked Exceptions）有以下几种：</p><p>常见的受检异常（Checked Exceptions）：</p><ol><li>IOException：处理输入输出操作时可能抛出的异常，如文件读写错误、网络连接问题等。</li><li>SQLException：处理数据库操作时可能抛出的异常，如连接数据库失败、SQL查询错误等。</li><li>ClassNotFoundException：在使用反射时，如果找不到指定的类，就会抛出此异常。</li><li>InterruptedException：处理多线程操作时可能抛出的异常，如线程被中断等。</li><li>ParseException：处理日期时间格式化或解析时可能抛出的异常，如字符串无法解析为指定的日期格式等。</li></ol><p>常见的非受检异常（Unchecked Exceptions）：</p><ol><li>NullPointerException：当程序试图访问空对象时抛出的异常。</li><li>IllegalArgumentException：当传递给方法的参数不合法时抛出的异常。</li><li>IllegalStateException：当对象的状态不合法或不一致时抛出的异常。</li><li>ArrayIndexOutOfBoundsException：访问数组元素时下标越界时抛出的异常。</li><li>ArithmeticException：执行算术运算时发生错误时抛出的异常，如除数为零等。</li></ol><p>需要注意的是，RuntimeException及其子类是一种特殊的非受检异常，它们通常表示程序错误或逻辑错误，如NullPointerException、ArrayIndexOutOfBoundsException等。与受检异常不同，对于RuntimeException及其子类，编译器不会强制要求捕获或在方法签名中声明。</p><p>受检异常和非受检异常的区别在于受检异常需要在方法签名中声明或捕获处理，而非受检异常可以选择是否捕获和处理。通常情况下，受检异常应该由程序员在代码中进行适当的处理，而非受检异常则更多地由程序的逻辑和设计来避免发生。</p><h2 id="处理异常" tabindex="-1"><a class="header-anchor" href="#处理异常" aria-hidden="true">#</a> 处理异常</h2><p>java 中对异常的处理包括两种方式：</p><ol><li>在方法声明式使用 throws 关键字，即抛给上一级</li><li>使用 try ... catch 语句进行异常捕获</li></ol><p>【注意】如果 Java 中异常发生之后一直上抛，最终抛给 main 方法且 main 继续上抛至调用者 JVM，这时只有一个结果，即终止 Java 程序的执行</p><h2 id="runtimeexception" tabindex="-1"><a class="header-anchor" href="#runtimeexception" aria-hidden="true">#</a> RuntimeException</h2><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java异常/20230224/runtimeException.png" alt="image-20230224162650522" tabindex="0" loading="lazy"><figcaption>image-20230224162650522</figcaption></figure><h2 id="uncheckedexception" tabindex="-1"><a class="header-anchor" href="#uncheckedexception" aria-hidden="true">#</a> UncheckedException</h2><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java异常/20230224/uncheckedException.png" alt="image-20230224162757266" tabindex="0" loading="lazy"><figcaption>image-20230224162757266</figcaption></figure>',22);function x(m,f){const a=r("router-link");return c(),l("div",null,[s,e("nav",h,[e("ul",null,[e("li",null,[t(a,{to:"#java-异常"},{default:n(()=>[i("Java 异常")]),_:1}),e("ul",null,[e("li",null,[t(a,{to:"#受检异常和非受检异常"},{default:n(()=>[i("受检异常和非受检异常")]),_:1})]),e("li",null,[t(a,{to:"#处理异常"},{default:n(()=>[i("处理异常")]),_:1})]),e("li",null,[t(a,{to:"#runtimeexception"},{default:n(()=>[i("RuntimeException")]),_:1})]),e("li",null,[t(a,{to:"#uncheckedexception"},{default:n(()=>[i("UncheckedException")]),_:1})])])])])]),u])}const g=o(d,[["render",x],["__file","Java异常.html.vue"]]);export{g as default};
