import{_ as r,Q as a,S as s,U as e,W as o,X as l,a8 as t,a9 as d,H as c}from"./framework-d7e1aa10.js";const h={},_=e("h2",{id:"android-activity",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#android-activity","aria-hidden":"true"},"#"),t(" Android Activity")],-1),u={class:"table-of-contents"},p=d('<h3 id="启动模式" tabindex="-1"><a class="header-anchor" href="#启动模式" aria-hidden="true">#</a> 启动模式</h3><p><strong>launchMode：</strong></p><ol><li><code>standard</code>：先进后出</li><li><code>singleTop</code>：栈顶复用</li><li><code>singleInstance</code>：全局唯一</li><li><code>singleTask</code>：栈顶复用并清空目标活动上面的所有活动</li></ol><p><strong>启动标志（在 intent 种设置）：</strong></p><ol><li><code>FLAG_ACTIVITY_SINGLE_TOP</code>：当栈顶为待跳转的活动时，重用该活动</li><li><code>FLAG_ACTIVITY_CLEAR_TOP</code>：创建新的活动并销毁</li><li><code>FLAG_ACTIVITY_CLEAR_TASK</code>：跳转到新活动中时，将栈中所有的任务清除</li><li><code>FLAG_ACTIVITY_NEW_TASK</code>：开启新的任务栈</li><li><code>FLAG_ACTIVITY_NO_HISTORY</code>：栈中不保存新启动的实例</li><li>如要启动 Activity，可以向 <code>startActivity()</code> 或 <code>startActivityForResult()</code> 传递 <code>Intent</code>（想让 Activity 返回结果时），或者为其安排新任务。</li><li>在 Android 5.0（API 级别 21）及更高版本中，可以使用 <code>JobScheduler</code> 类来调度操作。对于早期 Android 版本，可以通过向 <code>startService()</code> 传递 <code>Intent</code> 来启动服务（或对执行中的服务下达新指令）。也可通过向将 <code>bindService()</code> 传递 <code>Intent</code> 来绑定到该服务。</li><li>可以通过向 <code>sendBroadcast()</code>、<code>sendOrderedBroadcast()</code> 或 <code>sendStickyBroadcast()</code> 等方法传递 <code>Intent</code> 来发起广播。</li><li>可以通过在 <code>ContentResolver</code> 上调用 <code>query()</code>，对内容提供程序执行查询。</li></ol><h3 id="启动过程" tabindex="-1"><a class="header-anchor" href="#启动过程" aria-hidden="true">#</a> 启动过程</h3><ul><li>Activity启动过程的源码相当复杂，涉及Instrumentation、ActivityThread和ActivityManagerService（简称AMS）。</li><li>在新Activity启动之前，桟顶的Activity需要先onPause后，新Activity才能启动。</li></ul><h3 id="intent" tabindex="-1"><a class="header-anchor" href="#intent" aria-hidden="true">#</a> Intent</h3>',8),v={class:"hint-container info"},f=e("p",{class:"hint-container-title"},"说明",-1),g={href:"https://developer.android.google.cn/guide/components/intents-common?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},y=d("<blockquote><p>意图：分为显式和隐式</p></blockquote><ol><li>表明本次通信的请求方向</li><li>存储通信所需的数据</li><li>接收应答方的响应数据</li></ol><p>显式意图：直接指定来源与目标，数据精确匹配</p><ol><li>直接创建</li><li>调用 <code>setClass</code></li><li>调用 <code>setComponent</code></li></ol><p>隐式意图：没有明确指定，只给出一个动作字符串让系统自行匹配，属于模糊匹配</p><ol><li>通过 <code>setAction</code></li></ol><p>注意点：</p>",7),A=e("li",null,[t("根据 Activity 是否希望从即将启动的新 Activity 中获取返回结果，可以使用 "),e("code",null,"startActivity()"),t(" 或 "),e("code",null,"startActivityForResult()"),t(" 方法启动新 Activity。这两种方法都需要传入一个 "),e("code",null,"Intent"),t(" 对象。")],-1),b=e("code",null,"Intent",-1),m=e("code",null,"Intent",-1),S={href:"https://developer.android.google.cn/guide/components/intents-filters?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},w=e("li",null,[t("与 Activity、服务和广播接收器不同，内容提供程序并非由 Intent 启动。相反，它们会在成为 "),e("code",null,"ContentResolver"),t(" 的请求目标时启动。")],-1),k=e("li",null,[t("通过将收到的 Intent 与设备上其他应用的清单文件中提供的 "),e("em",null,"Intent 过滤器"),t("进行比较，系统便可识别能响应 Intent 的组件。")],-1),I=e("li",null,"在应用的清单文件中声明 Activity 时，可以选择性地加入声明 Activity 功能的 Intent 过滤器，以便响应来自其他应用的 Intent。",-1),C=d('<div class="table-wrapper"><table><thead><tr><th>Intent 常用动作名</th><th>常量值</th><th>说明</th></tr></thead><tbody><tr><td>ACTION_MAIN</td><td><code>android.intent.action.MAIN</code></td><td>APP 启动时的入口</td></tr><tr><td>ACTION_VIEW</td><td><code>android.intent.action.VIEW</code></td><td>向用户显示数据</td></tr><tr><td>ACTION_SEND</td><td><code>android.intent.action.SEND</code></td><td>分享内容</td></tr><tr><td>ACTION_CALL</td><td><code>android.intent.action.CALL</code></td><td>直接拨号</td></tr><tr><td>ACTION_DIAL</td><td><code>android.intent.action.DIAL</code></td><td>间接拨号</td></tr><tr><td>ACTION_SENDTO</td><td><code>android.intent.action.SENDTO</code></td><td>发送短信</td></tr><tr><td>ACTION_ANSWER</td><td><code>android.intent.action.ANSWER</code></td><td>接听电话</td></tr></tbody></table></div><div class="table-wrapper"><table><thead><tr><th>元素名称</th><th>设置方法</th><th>说明</th></tr></thead><tbody><tr><td>Component</td><td><code>setComponent</code></td><td>组件，指定 intent 的来源与目标</td></tr><tr><td>Action</td><td><code>setAction</code></td><td>行为，指定意图的动作行为</td></tr><tr><td>Data</td><td><code>setData</code></td><td>URI，指定动作要操作的数据路径</td></tr><tr><td>Category</td><td><code>addCategory</code></td><td>类别，指定 intent 的操作类别</td></tr><tr><td>Type</td><td><code>setType</code></td><td>数据类型，指定消息的数据类型</td></tr><tr><td>Extras</td><td><code>putExtras</code></td><td>扩展信息，指定装载的包裹信息</td></tr><tr><td>Flags</td><td><code>setFlags</code></td><td>标志位，指定活动的启动标志</td></tr></tbody></table></div><h3 id="bundle" tabindex="-1"><a class="header-anchor" href="#bundle" aria-hidden="true">#</a> Bundle</h3>',3),x={href:"https://developer.android.google.cn/reference/android/os/Bundle?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},N=e("code",null,"Bundle",-1),z={href:"https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onSaveInstanceState(android.os.Bundle)",target:"_blank",rel:"noopener noreferrer"},E=e("code",null,"onSaveInstanceState()",-1),V={href:"https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},L=e("code",null,"ViewModel",-1),T={href:"https://developer.android.google.cn/reference/android/os/Bundle?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},O=e("code",null,"Bundle",-1),R={href:"https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onCreate(android.os.Bundle)",target:"_blank",rel:"noopener noreferrer"},P=e("code",null,"onCreate()",-1),M={href:"https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onRestoreInstanceState(android.os.Bundle)",target:"_blank",rel:"noopener noreferrer"},B=e("code",null,"onRestoreInstanceState()",-1),D={href:"https://developer.android.google.cn/reference/android/os/Bundle?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},F=e("code",null,"Bundle",-1),U=e("h3",{id:"生命周期",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#生命周期","aria-hidden":"true"},"#"),t(" 生命周期")],-1),Y={class:"hint-container info"},G=e("p",{class:"hint-container-title"},"相关文章",-1),q={href:"https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#java",target:"_blank",rel:"noopener noreferrer"},W=d('<p>为了在 Activity 生命周期的各个阶段之间导航转换，Activity 类提供六个核心回调：<code>onCreate()</code>、<code>onStart()</code>、<code>onResume()</code>、<code>onPause()</code>、<code>onStop()</code> 和 <code>onDestroy()</code>。当 Activity 进入新状态时，系统会调用其中每个回调。</p><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//android/20231005/androidActivity生命周期.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4>onCreate</h4>',3),j=d("<li>在系统首次创建 Activity 时触发。Activity 会在创建后进入“已创建”状态。</li><li>在 <code>onCreate()</code> 方法中，您需执行基本应用启动逻辑，该逻辑在 Activity 的整个生命周期中<strong>只应发生一次</strong>。</li><li>例如，<code>onCreate()</code> 的实现可能会将数据绑定到列表，将 <code>Activity</code> 与 <code>ViewModel</code> 相关联，并实例化某些类作用域变量。此方法会接收 <code>savedInstanceState</code> 参数，后者是包含 Activity 先前保存状态的 <code>Bundle</code> 对象。如果 Activity 此前未曾存在，<code>Bundle</code> 对象的值为 null。</li>",3),J=e("code",null,"View",-1),K=e("code",null,"View",-1),H=e("code",null,"ViewGroup",-1),Q=e("code",null,"ViewGroup",-1),X=e("code",null,"setContentView()",-1),Z={href:"https://developer.android.google.cn/guide/topics/ui?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},$=e("li",null,[e("code",null,"onCreate()"),t(" 方法完成执行后，Activity 进入“已开始”状态，系统会相继调用 "),e("code",null,"onStart()"),t(" 和 "),e("code",null,"onResume()"),t(" 方法。")],-1),ee=e("h4",null,"onStart",-1),te=e("li",null,[t("当 Activity 进入“已开始”状态时，系统会调用此回调。"),e("code",null,"onStart()"),t(" 调用使 Activity 对用户可见，因为应用会为 Activity 进入前台并支持互动做准备。")],-1),oe={href:"https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle.Event?hl=zh-cn#ON_START",target:"_blank",rel:"noopener noreferrer"},ne=e("code",null,"ON_START",-1),ie=e("li",null,[e("code",null,"onStart()"),t(" 方法会非常快速地完成，并且与“已创建”状态一样，Activity 不会一直处于“已开始”状态。一旦此回调结束，Activity 便会进入“已恢复”状态，系统将调用 "),e("code",null,"onResume()"),t(" 方法。")],-1),le=e("h4",null,"onResume",-1),de={class:"hint-container warning"},ce=e("p",{class:"hint-container-title"},"注意",-1),re={href:"https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#java",target:"_blank",rel:"noopener noreferrer"},ae=e("li",null,[t("Activity 会在进入“已恢复”状态时来到前台，然后系统调用 "),e("code",null,"onResume()"),t(" 回调。这是应用与用户互动的状态。")],-1),se=e("li",null,"应用会一直保持这种状态，直到某些事件发生，让焦点远离应用。此类事件包括接到来电、用户导航到另一个 Activity，或设备屏幕关闭。",-1),he={href:"https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle.Event?hl=zh-cn#ON_RESUME",target:"_blank",rel:"noopener noreferrer"},_e=e("code",null,"ON_RESUME",-1),ue=e("li",null,[t("当发生中断事件时，Activity 进入“已暂停”状态，系统调用 "),e("code",null,"onPause()"),t(" 回调。如果 Activity 从“已暂停”状态返回“已恢复”状态，系统将再次调用 "),e("code",null,"onResume()"),t(" 方法。")],-1),pe=e("code",null,"onResume()",-1),ve={href:"https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onPause()",target:"_blank",rel:"noopener noreferrer"},fe=e("code",null,"onPause()",-1),ge=e("li",null,[t("无论选择在哪个构建事件中执行初始化操作，都务必使用相应的生命周期事件来释放资源： "),e("ol",null,[e("li",null,"如果在收到 ON_START 事件后初始化某些内容，那么就在收到 ON_STOP 事件后释放或终止相应内容"),e("li",null,"如果在收到 ON_RESUME 事件后初始化某些内容，那么就在收到 ON_PAUSE 事件后将其释放")])],-1),ye={class:"hint-container warning"},Ae=e("p",{class:"hint-container-title"},"注意",-1),be={href:"https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onStart()",target:"_blank",rel:"noopener noreferrer"},me=e("code",null,"onStart()",-1),Se={href:"https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onStop()",target:"_blank",rel:"noopener noreferrer"},we=e("code",null,"onStop()",-1),ke={href:"https://developer.android.google.cn/topic/libraries/architecture/lifecycle?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},Ie=e("h4",null,"onPause",-1),Ce=e("li",null,"系统将此方法视为用户将要离开 Activity 的第一个标志（尽管这并不总是意味着 Activity 会被销毁）",-1),xe=e("li",null,"此方法表示 Activity 不再位于前台（尽管在用户处于多窗口模式时 Activity 仍然可见）",-1),Ne=e("li",null,[t("在此方法中，"),e("strong",null,"暂停或调整"),t("处于"),e("strong",null,"暂停状态"),t("时，不应该继续或者应该尽量少调用或者希望快速恢复的操作")],-1),ze=e("li",null,"某个事件会中断应用执行（最常见的情况）",-1),Ee=e("li",null,"在 Android 7.0（API 级别 24）或更高版本中，有多个应用在多窗口模式下运行。无论何时，都只有一个应用（窗口）可以拥有焦点，因此系统会暂停所有其他应用。",-1),Ve=e("li",null,"有新的半透明 Activity（例如对话框）处于开启状态。只要 Activity 仍然部分可见但并未处于焦点之中，它便会一直暂停。",-1),Le={href:"https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle.Event?hl=zh-cn#ON_PAUSE",target:"_blank",rel:"noopener noreferrer"},Te=e("code",null,"ON_PAUSE",-1),Oe=e("code",null,"onPause()",-1),Re=e("strong",null,"不应使用",-1),Pe=e("code",null,"onPause()",-1),Me=e("code",null,"onStop()",-1),Be={href:"https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#onstop",target:"_blank",rel:"noopener noreferrer"},De={href:"https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#saras",target:"_blank",rel:"noopener noreferrer"},Fe={class:"hint-container warning"},Ue=e("p",{class:"hint-container-title"},"注意",-1),Ye={href:"https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onPause()",target:"_blank",rel:"noopener noreferrer"},Ge=e("code",null,"onPause()",-1),qe=e("p",null,"然而，如果处于多窗口模式，“已暂停”的 Activity 仍完全可见。因此，应该考虑使用 onStop() 而非 onPause() 来完全释放或调整与界面相关的资源和操作，以便更好地支持多窗口模式。",-1),We=e("h4",null,"onStop",-1),je=e("li",null,[t("如果 Activity 不再对用户可见，说明其已进入“已停止”状态，因此系统将调用 "),e("code",null,"onStop()"),t(" 回调。")],-1),Je={href:"https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle.Event?hl=zh-cn#ON_STOP",target:"_blank",rel:"noopener noreferrer"},Ke=e("code",null,"ON_STOP",-1),He=d("<li>在 <code>onStop()</code> 方法中，应用应释放或调整在应用对用户不可见时的无用资源。</li><li>使用 <code>onStop()</code> 而非 <code>onPause()</code> 可确保与界面相关的工作继续进行，即使用户在多窗口模式下查看您的 Activity 也能如此。</li><li>还应使用 <code>onStop()</code> 执行 CPU 相对密集的关闭操作。例如，如果您无法找到更合适的时机来将信息保存到数据库，可以在 <code>onStop()</code> 期间执行此操作。</li><li>当您的 Activity 进入“已停止”状态时，<code>Activity</code> 对象会继续驻留在内存中：该对象将维护所有状态和成员信息，但不会附加到窗口管理器。Activity 恢复后，Activity 会重新调用这些信息。您无需重新初始化在任何回调方法导致 Activity 进入“已恢复”状态期间创建的组件。</li><li>系统还会追踪布局中每个 <code>View</code> 对象的当前状态，如果用户在 <code>EditText</code> 微件中输入文本，系统将保留文本内容，因此您无需保存和恢复文本。</li><li>进入“已停止”状态后，Activity 要么返回与用户互动，要么结束运行并消失。如果 Activity 返回，系统将调用 <code>onRestart()</code>。如果 <code>Activity</code> 结束运行，系统将调用 <code>onDestroy()</code>。</li>",6),Qe=e("div",{class:"hint-container warning"},[e("p",{class:"hint-container-title"},"注意"),e("p",null,[t("Activity 停止后，如果系统需要恢复内存，可能会销毁包含该 Activity 的进程。即使系统在 Activity 停止后销毁相应进程，系统仍会保留 "),e("code",null,"Bundle"),t("（键值对的 blob）中 "),e("code",null,"View"),t(" 对象（例如 "),e("code",null,"EditText"),t(" 微件中的文本）的状态，并在用户返回 Activity 时恢复这些对象。")])],-1),Xe=e("h4",null,"onDestroy",-1),Ze={href:"https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#isFinishing()",target:"_blank",rel:"noopener noreferrer"},$e=e("code",null,"isFinishing()",-1),et={href:"https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#finish()",target:"_blank",rel:"noopener noreferrer"},tt=e("code",null,"finish()",-1),ot=e("li",null,"由于配置变更（例如设备旋转或多窗口模式），系统暂时销毁 Activity",-1),nt={href:"https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle.Event?hl=zh-cn#ON_DESTROY",target:"_blank",rel:"noopener noreferrer"},it=e("code",null,"ON_DESTROY",-1),lt={href:"https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},dt=e("code",null,"ViewModel",-1),ct={href:"https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn#onCleared()",target:"_blank",rel:"noopener noreferrer"},rt=e("code",null,"onCleared()",-1),at={href:"https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onCreate(android.os.Bundle)",target:"_blank",rel:"noopener noreferrer"},st=e("code",null,"onCreate()",-1),ht=d('<h4>常见的情况</h4><ol><li>针对一个特定的Activity，第一次启动，回调如下：<code>onCreate </code>-&gt; <code>onStart </code>-&gt; <code>onResume</code>。</li><li>当用户打开新的Activity或者切换到桌面的时候，回调如下：<code>onPause </code>-&gt; <code>onStop</code>。这里有一种特殊情况，如果新Activity采用了透明主题，那么当前Activity不会回调<code>onStop</code>。</li><li>当用户再次回到原Activity时，回调如下：<code>onRestart </code>-&gt; <code>onStart </code>-&gt; <code>onResume</code>。</li><li>当用户按back键回退时，回调如下：<code>onPause </code>-&gt; <code>onStop </code>-&gt; <code>onDestroy</code>。</li><li>当Activity被系统回收后再次打开，生命周期方法回调过程和第一种一样，注意只是生命周期方法一样，不代表所有过程都一样，这个问题在下一节会详细说明。</li><li>从整个生命周期来说，<code>onCreate</code>和<code>onDestroy</code>是配对的，分别标识着Activity的创建和销毁，并且只可能有一次调用。从Activity是否可见来说，<code>onStart</code>和<code>onStop</code>是配对的，随着用户的操作或者设备屏幕的点亮和熄灭，这两个方法可能被调用多次；从Activity是否在前台来说，<code>onResume</code>和<code>onPause</code>是配对的，随着用户操作或者设备屏幕的点亮和熄灭，这两个方法可能被调用多次。</li></ol><div class="hint-container info"><p class="hint-container-title">onStart/onStop 与 onResume/onPause</p><p>onStart和onStop是从Activity是否可见这个角度来回调的，而onResume和onPause是从Activity是否位于前台这个角度来回调的，除了这种区别，在实际使用中没有其他明显区别。</p></div><h3 id="生命周期事件" tabindex="-1"><a class="header-anchor" href="#生命周期事件" aria-hidden="true">#</a> 生命周期事件</h3><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">事件</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ON_ANY</code></td><td>所有事件</td></tr><tr><td style="text-align:left;"><code>ON_CREATE</code></td><td><code>onCreate</code> 事件</td></tr><tr><td style="text-align:left;"><code>ON_DESTROY</code></td><td><code>onDestroy</code> 事件</td></tr><tr><td style="text-align:left;"><code>ON_PAUSE</code></td><td><code>onPause</code> 事件</td></tr><tr><td style="text-align:left;"><code>ON_RESUME</code></td><td><code>onResume</code> 事件</td></tr><tr><td style="text-align:left;"><code>ON_START</code></td><td><code>onStart</code> 事件</td></tr><tr><td style="text-align:left;"><code>ON_STOP</code></td><td><code>onStop</code> 事件</td></tr></tbody></table></div><div class="hide-container"><p class="hide-container-title">HIDE</p><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">公共方法</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>static final Lifecycle.Event</code></td><td><code>downFrom(@NonNull Lifecycle.State state)</code>Returns the <code>Lifecycle.Event</code> that will be reported by a <code>Lifecycle</code> leaving the specified <code>Lifecycle.State</code> to a lower state, or <code>null</code> if there is no valid event that can move down from the given state.</td></tr><tr><td style="text-align:left;"><code>static final Lifecycle.Event</code></td><td><code>downTo(@NonNull Lifecycle.State state)</code>Returns the <code>Lifecycle.Event</code> that will be reported by a <code>Lifecycle</code> entering the specified <code>Lifecycle.State</code> from a higher state, or <code>null</code> if there is no valid event that can move down to the given state.</td></tr><tr><td style="text-align:left;"><code>final @NonNull Lifecycle.State</code></td><td><code>getTargetState()</code>Returns the new <code>Lifecycle.State</code> of a <code>Lifecycle</code> that just reported this <code>Lifecycle.Event</code>.</td></tr><tr><td style="text-align:left;"><code>static final Lifecycle.Event</code></td><td><code>upFrom(@NonNull Lifecycle.State state)</code>Returns the <code>Lifecycle.Event</code> that will be reported by a <code>Lifecycle</code> leaving the specified <code>Lifecycle.State</code> to a higher state, or <code>null</code> if there is no valid event that can move up from the given state.</td></tr><tr><td style="text-align:left;"><code>static final Lifecycle.Event</code></td><td><code>upTo(@NonNull Lifecycle.State state)</code>Returns the <code>Lifecycle.Event</code> that will be reported by a <code>Lifecycle</code> entering the specified <code>Lifecycle.State</code> from a lower state, or <code>null</code> if there is no valid event that can move up to the given state.</td></tr><tr><td style="text-align:left;"><code>final @NonNull Lifecycle.Event</code></td><td><code>valueOf(@NonNull String value)</code>Returns the enum constant of this type with the specified name.</td></tr><tr><td style="text-align:left;"><code>final @NonNull Lifecycle.Event[]</code></td><td><code>values()</code>Returns an array containing the constants of this enum type, in the order they&#39;re declared.</td></tr></tbody></table></div></div><h3 id="处理生命周期" tabindex="-1"><a class="header-anchor" href="#处理生命周期" aria-hidden="true">#</a> 处理生命周期</h3><blockquote><p>基于观察者模式/监听器模式</p></blockquote><ol><li>核心类：<code>Lifecycle</code>、<code>DefaultLifecycleObserver</code>、<code>LifecycleOwner</code></li></ol>',9),_t={href:"https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},ut=e("code",null,"ViewModel",-1),pt={href:"https://developer.android.google.cn/reference/androidx/lifecycle/LiveData?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},vt=e("code",null,"LiveData",-1),ft={href:"https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},gt=e("code",null,"ViewModel",-1),yt={href:"https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},At=e("code",null,"ViewModel",-1),bt={href:"https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},mt=e("code",null,"ViewModel",-1),St={href:"https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},wt=e("code",null,"ViewModel",-1),kt={href:"https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},It=e("code",null,"ViewModel",-1),Ct={href:"https://developer.android.google.cn/topic/libraries/data-binding?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},xt={href:"http://jakewharton.github.io/butterknife/",target:"_blank",rel:"noopener noreferrer"},Nt={href:"http://www.gwtproject.org/articles/mvp-architecture.html#presenter",target:"_blank",rel:"noopener noreferrer"},zt={href:"https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},Et=e("code",null,"ViewModel",-1),Vt=e("code",null,"View",-1),Lt=e("code",null,"Activity",-1),Tt=e("code",null,"ViewModel",-1),Ot={href:"https://developer.android.google.cn/topic/libraries/architecture/coroutines?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},Rt=d('<h3 id="状态变更" tabindex="-1"><a class="header-anchor" href="#状态变更" aria-hidden="true">#</a> 状态变更</h3><blockquote><p>TODO</p></blockquote><ol><li>配置发生了更改</li><li>Activity 或对话框显示在前台</li><li>用户点按“返回”按钮</li><li>系统终止应用进程</li></ol><h3 id="viewmodel" tabindex="-1"><a class="header-anchor" href="#viewmodel" aria-hidden="true">#</a> ViewModel</h3>',4),Pt={href:"https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},Mt=e("code",null,"ViewModel",-1),Bt={href:"https://developer.android.google.cn/topic/architecture/ui-layer/stateholders?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},Dt=e("li",null,[e("p",null,"它用于将状态公开给界面，以及封装相关的业务逻辑。")],-1),Ft=e("li",null,[e("p",null,"它的主要优点是，它可以缓存状态，并可在配置更改后持久保留相应状态。这意味着在 activity 之间导航时或进行配置更改后（例如旋转屏幕时），界面将无需重新提取数据。")],-1),Ut=d('<h3 id="生命周期感知型组件" tabindex="-1"><a class="header-anchor" href="#生命周期感知型组件" aria-hidden="true">#</a> 生命周期感知型组件</h3><div class="hint-container info"><p class="hint-container-title">说明</p><p>生命周期感知型组件可执行操作来响应另一个组件（如 activity 和 fragment）的生命周期状态的变化。</p><p>这些组件有助于编写出更有条理且往往更精简的代码，此类代码更易于维护。</p></div><h3 id="配置变更" tabindex="-1"><a class="header-anchor" href="#配置变更" aria-hidden="true">#</a> 配置变更</h3>',3),Yt=e("code",null,"Activity",-1),Gt={href:"https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onDestroy()",target:"_blank",rel:"noopener noreferrer"},qt=e("code",null,"onDestroy()",-1),Wt=e("code",null,"Activity",-1),jt={href:"https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onCreate(android.os.Bundle)",target:"_blank",rel:"noopener noreferrer"},Jt=e("code",null,"onCreate()",-1),Kt=e("code",null,"Activity",-1),Ht=d("<p>重新创建过程还会清除您在 <code>Activity</code> 或其包含的 <code>Fragment</code>、<code>View</code> 或其他对象中，以字段形式保留的任何状态。这是因为 <code>Activity</code> 重新创建过程会创建 <code>Activity</code> 和界面的全新实例。此外，之前的旧 <code>Activity</code> 不再可见或不再有效，因此对该 activity 或其所含对象的任何其余引用都已过时。它们会导致 bug、内存泄漏和崩溃。</p><ol><li>变更时发生了什么？</li><li>保持用户期望</li><li>限制 Activity 重新创建</li></ol><p>如需验证应用中是否保留了状态，您可以在应用处于前台和后台时执行会导致配置变更的操作。这些操作包括：</p><ul><li>旋转设备</li><li>进入多窗口模式</li><li>在多窗口模式或自由窗口模式下调整应用大小</li><li>折叠具有多个显示屏的可折叠设备</li><li>更改系统主题，例如深色模式与浅色模式</li><li>更改字体大小</li><li>更改系统或应用语言</li><li>连接或断开硬件键盘</li><li>连接或断开基座</li></ul><p>可以采用三种主要方法在重新创建 <code>Activity</code> 的过程中保留相关状态。采用哪种方法取决于要保留的状态类型：</p>",5),Qt={href:"https://developer.android.google.cn/topic/libraries/architecture/saving-states?hl=zh-cn#local",target:"_blank",rel:"noopener noreferrer"},Xt={href:"https://developer.android.google.cn/topic/libraries/architecture/datastore?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},Zt=e("code",null,"DataStore",-1),$t={href:"https://developer.android.google.cn/topic/libraries/architecture/saving-states?hl=zh-cn#viewmodel",target:"_blank",rel:"noopener noreferrer"},eo={href:"https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},to=e("code",null,"ViewModel",-1),oo={href:"https://developer.android.google.cn/topic/libraries/architecture/saving-states?hl=zh-cn#onsaveinstancestate",target:"_blank",rel:"noopener noreferrer"},no={href:"https://developer.android.google.cn/topic/libraries/architecture/saving-states?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},io=e("code",null,"View",-1),lo=e("code",null,"Activity",-1),co={href:"https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onConfigurationChanged(android.content.res.Configuration)",target:"_blank",rel:"noopener noreferrer"},ro=e("code",null,"Activity.onConfigurationChanged()",-1),ao={href:"https://developer.android.google.cn/reference/kotlin/android/view/View?hl=zh-cn#onconfigurationchanged",target:"_blank",rel:"noopener noreferrer"},so=e("code",null,"View.onConfigurationChanged()",-1),ho=e("code",null,"android:configChanges",-1),_o=e("code",null,"onConfigurationChanged()",-1),uo={href:"https://developer.android.google.cn/reference/android/content/res/Configuration?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},po=e("code",null,"Configuration",-1),vo=e("code",null,"Configuration",-1),fo=e("code",null,"Resources",-1),go=e("p",null,"在处理配置变更时，需要了解以下关键概念：",-1),yo=d("<li>**配置：**设备配置用于定义界面如何向用户显示内容，例如应用显示大小、语言区域或系统主题。</li><li>**配置变更：**配置会根据用户互动发生变更。例如，用户可能会更改设备设置或与设备的物理互动方式。您无法阻止配置变更。</li><li>**<code>Activity</code> 重新创建：**默认情况下，配置变更会导致重新创建 <code>Activity</code>。这是为新配置重新初始化应用状态的内置机制。</li><li><strong><code>Activity</code> 销毁：</strong><code>Activity</code> 重新创建会导致系统销毁旧的 <code>Activity</code> 实例，并创建一个新实例来代替它。旧实例现已过时。对该实例的任何其余引用都会导致内存泄漏、bug 或崩溃。</li>",4),Ao=e("code",null,"Activity",-1),bo=e("code",null,"Activity",-1),mo={href:"https://developer.android.google.cn/topic/libraries/architecture/saving-states?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},So=e("li",null,"**停用：**为某种类型的配置变更停用 activity 重新创建功能是一种潜在的优化方案。您需要确保应用根据新配置进行正确更新。",-1),wo=e("p",null,"为了提供良好的用户体验，遵循以下最佳实践：",-1),ko=e("li",null,[e("strong",null,"为配置频繁变更做好准备"),t("：不要认为配置变更会很少发生或从不发生过，无论 API 级别、外形规格或界面工具包如何。当用户导致配置变更时，他们会希望应用进行更新，并继续使用新配置正常运行。")],-1),Io=e("code",null,"Activity",-1),Co={href:"https://developer.android.google.cn/topic/libraries/architecture/saving-states?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},xo=e("code",null,"Activity",-1),No=e("code",null,"Activity",-1),zo=e("code",null,"Activity",-1),Eo={href:"https://developer.android.google.cn/topic/libraries/architecture/saving-states?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},Vo=e("li",null,[t("**不要回避配置变更：**不要为了回避配置变更和 "),e("code",null,"Activity"),t(" 重新创建，而对屏幕方向、宽高比或尺寸可调整性施加限制。这会对想要按照自己首选方式使用应用的用户产生负面影响。")],-1),Lo=d('<h3 id="fragment" tabindex="-1"><a class="header-anchor" href="#fragment" aria-hidden="true">#</a> Fragment</h3><div class="table-wrapper"><table><thead><tr><th>函数钩子</th><th>说明</th></tr></thead><tbody><tr><td><code>onAttach()</code></td><td>当Fragment和Activity建立关联时调用</td></tr><tr><td><code>onCreateView()</code></td><td>为Fragment创建视图（加载布局）时调用</td></tr><tr><td><code>onActivityCreated()</code></td><td>确保与Fragment相关联的Activity已经创建完毕时调用</td></tr><tr><td><code>onDestroyView()</code></td><td>当与Fragment关联的视图被移除时调用</td></tr><tr><td><code>onDetach()</code></td><td>当Fragment和Activity解除关联时调用</td></tr></tbody></table></div><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//android/20231002/androidFragment生命周期.png" alt="image-20230922154152968" tabindex="0" loading="lazy"><figcaption>image-20230922154152968</figcaption></figure><p>Fragments应该作为实现UI界面默认选择。可以重复使用Fragments用户接口来组合成应用。官方强烈推荐使用Fragments而不是activity来呈现UI界面，理由如下：</p>',4),To=e("li",null,"提供多窗格布局解决方案 Fragments 的引入主要将手机应用延伸到平板电脑，所以在平板电脑上你可能有A、B两个窗格，但是在手机应用上A、B可能分别充满 整个屏幕。如果应用在最初就使用了fragments，那么以后应用适配到其他不同尺寸屏幕就会非常简单。",-1),Oo=e("li",null,"屏幕间数据通信从一个Activity发送复杂数据(例如Java对象)到另外一个Activity，Android的API并没有提供合适的方法。不过使用Fragment，你可以使用 一个activity实例作为这个activity子fragments的通信通道。即使这样比Activity与Activity间的通信好，你也想考虑使用Event Bus架构，使用如 Otto 或者 greenrobot EventBus作为更简洁的实现。 如果你希望避免添加另外一个类库，RxJava同样可以实现一个Event Bus。",-1),Ro=e("li",null,"Fragments 一般通用的不只有UI 你可以有一个没有界面的fragment作为Activity提供后台工作。 进一步你可以使用这个特性来创建一个fragment 包含改变其它fragment的逻辑而不是把这个逻辑放在activity中。",-1),Po={href:"http://www.grokkingandroid.com/adding-action-items-from-within-fragments/",target:"_blank",rel:"noopener noreferrer"},Mo=e("p",null,"很不幸，我们不建议广泛的使用嵌套的fragments，因为 有时会引起matryoshka bugs。我们只有当它有意义(例如，在水平滑动的ViewPager在 像屏幕一样fragment中)或者他的确是一个明智的选择的时候才广泛的使用fragment。",-1),Bo=e("p",null,[t("在一个架构级别，你的APP应该有一个顶级的activity来包含绝大部分业务相关的fragment。你也可能还有一些辅助的activity ，这些辅助的activity与主activity 通信很简单限制在这两种方法 "),e("code",null,"Intent.setData()"),t(" 或 "),e("code",null,"Intent.setAction()"),t("或类似的方法。")],-1);function Do(Fo,Uo){const i=c("router-link"),n=c("ExternalLinkIcon");return a(),s("div",null,[_,e("nav",u,[e("ul",null,[e("li",null,[o(i,{to:"#android-activity"},{default:l(()=>[t("Android Activity")]),_:1}),e("ul",null,[e("li",null,[o(i,{to:"#启动模式"},{default:l(()=>[t("启动模式")]),_:1})]),e("li",null,[o(i,{to:"#启动过程"},{default:l(()=>[t("启动过程")]),_:1})]),e("li",null,[o(i,{to:"#intent"},{default:l(()=>[t("Intent")]),_:1})]),e("li",null,[o(i,{to:"#bundle"},{default:l(()=>[t("Bundle")]),_:1})]),e("li",null,[o(i,{to:"#生命周期"},{default:l(()=>[t("生命周期")]),_:1})]),e("li",null,[o(i,{to:"#生命周期事件"},{default:l(()=>[t("生命周期事件")]),_:1})]),e("li",null,[o(i,{to:"#处理生命周期"},{default:l(()=>[t("处理生命周期")]),_:1})]),e("li",null,[o(i,{to:"#状态变更"},{default:l(()=>[t("状态变更")]),_:1})]),e("li",null,[o(i,{to:"#viewmodel"},{default:l(()=>[t("ViewModel")]),_:1})]),e("li",null,[o(i,{to:"#生命周期感知型组件"},{default:l(()=>[t("生命周期感知型组件")]),_:1})]),e("li",null,[o(i,{to:"#配置变更"},{default:l(()=>[t("配置变更")]),_:1})]),e("li",null,[o(i,{to:"#fragment"},{default:l(()=>[t("Fragment")]),_:1})])])])])]),p,e("div",v,[f,e("p",null,[e("a",g,[t("常用 Intent"),o(n)])])]),y,e("ol",null,[A,e("li",null,[b,t(" 对象指定要启动的具体 Activity，或描述要执行的操作类型（系统选择相应的 Activity，该 Activity 甚至可以来自不同应用）。"),m,t(" 对象还可以携带由已启动的 Activity 使用的少量数据。（"),e("a",S,[t("Intent 和 Intent 过滤器"),o(n)]),t("）")]),w,k,I]),C,e("ol",null,[e("li",null,[e("a",x,[N,o(n)]),t(" 对象并不适合保留大量数据，因为它需要在主线程上进行序列化处理并占用系统进程内存。如需保存大量数据，您应组合使用持久性本地存储、"),e("a",z,[E,o(n)]),t(" 方法和 "),e("a",V,[L,o(n)]),t(" 类来保存数据")]),e("li",null,[t("重建先前被销毁的 Activity 后，您可以从系统传递给 Activity 的 "),e("a",T,[O,o(n)]),t(" 中恢复保存的实例状态。"),e("a",R,[P,o(n)]),t(" 和 "),e("a",M,[B,o(n)]),t(" 回调方法均会收到包含实例状态信息的相同 "),e("a",D,[F,o(n)]),t("。")])]),U,e("div",Y,[G,e("p",null,[e("a",q,[t("官方文档"),o(n)])])]),W,e("ol",null,[j,e("li",null,[t("还可以在 Activity 代码中新建 "),J,t(" 对象，并将新建的 "),K,t(" 插入到 "),H,t(" 中，以构建视图层次结构。然后，将根 "),Q,t(" 传递给 "),X,t(" 以使用该布局（"),e("a",Z,[t("参考"),o(n)]),t("）")]),$]),ee,e("ol",null,[te,e("li",null,[t("当 Activity 进入已开始状态时，与 Activity 生命周期相关联的所有生命周期感知型组件都将收到 "),e("a",oe,[ne,o(n)]),t(" 事件。")]),ie]),le,e("div",de,[ce,e("p",null,[t("事件在何时触发需要慎重，会影响用户体验（"),e("a",re,[t("参考"),o(n)]),t("）")])]),e("ol",null,[ae,se,e("li",null,[t("当 Activity 进入已恢复状态时，与 Activity 生命周期相关联的所有生命周期感知型组件都将收到 "),e("a",he,[_e,o(n)]),t(" 事件。")]),ue,e("li",null,[t("应实现 "),pe,t("，以初始化在 "),e("a",ve,[fe,o(n)]),t(" 期间释放的组件，并执行每次 Activity 进入“已恢复”状态时必须完成的任何其他初始化操作。")]),ge]),e("div",ye,[Ae,e("p",null,[t("可以将组件初始化代码放置在生命周期感知型组件中，也可以直接将此代码放入 Activity 生命周期回调（例如 "),e("a",be,[me,o(n)]),t(" 和 "),e("a",Se,[we,o(n)]),t("），但官方不建议这样做。")]),e("p",null,[t("通过将此逻辑添加到独立的生命周期感知型组件中，可以对多个 Activity 重复使用该组件，而无需复制代码（参阅："),e("a",ke,[t("使用生命周期感知型组件处理生命周期"),o(n)]),t("）")])]),Ie,e("ol",null,[Ce,xe,Ne,e("li",null,[t("进入暂停状态的原因包括： "),e("ol",null,[ze,Ee,Ve,e("li",null,[t("当 Activity 进入已暂停状态时，与 Activity 生命周期相关联的所有生命周期感知型组件都将收到 "),e("a",Le,[Te,o(n)]),t(" 事件。这时，生命周期组件可以停止在组件未位于前台时无需运行的任何功能，例如停止相机预览。")])])]),e("li",null,[Oe,t(" 执行非常简单，而且不一定要有足够的时间来执行保存操作。因此，"),Re,t(),Pe,t(" 来保存应用或用户数据、进行网络调用或执行数据库事务。因为在该方法完成之前，此类工作可能无法完成（应在 "),Me,t(" 期间执行高负载的关闭操作。"),e("a",Be,[t("参阅 onStop()"),o(n)]),t("。如需详细了解如何保存数据（参阅："),e("a",De,[t("保存和恢复 Activity 状态"),o(n)]),t("））")])]),e("div",Fe,[Ue,e("p",null,[t("还可以使用 "),e("a",Ye,[Ge,o(n)]),t(" 方法释放系统资源、传感器（例如 GPS）手柄，或当 Activity 暂停且用户不需要它们时仍然可能影响电池续航时间的任何资源。")]),qe]),We,e("ol",null,[je,e("li",null,[t("当 Activity 进入已停止状态时，与 Activity 生命周期相关联的所有生命周期感知型组件都将收到 "),e("a",Je,[Ke,o(n)]),t(" 事件。这时，生命周期组件可以停止在组件未显示在屏幕上时无需运行的任何功能。")]),He]),Qe,Xe,e("ol",null,[e("li",null,[t("调用该方法可能的原因（可以使用 "),e("a",Ze,[$e,o(n)]),t(" 方法区分这两种情况）： "),e("ol",null,[e("li",null,[t("Activity 即将结束（由于用户彻底关闭 Activity 或由于系统为 Activity 调用 "),e("a",et,[tt,o(n)]),t("）")]),ot])]),e("li",null,[t("当 Activity 进入已销毁状态时，与 Activity 生命周期相关联的所有生命周期感知型组件都将收到 "),e("a",nt,[it,o(n)]),t(" 事件。这时，生命周期组件可以在 Activity 被销毁之前清理所需的任何数据。")]),e("li",null,[t("应使用 "),e("a",lt,[dt,o(n)]),t(" 对象来包含 Activity 的相关视图数据，而不是在 Activity 中加入逻辑来确定 Activity 被销毁的原因。这样做之后，如果因配置变更而重新创建 Activity，ViewModel 不必执行任何操作，因为系统将保留 ViewModel 并将其提供给下一个 Activity 实例。如果不重新创建 Activity，ViewModel 将调用 "),e("a",ct,[rt,o(n)]),t(" 方法，以便在 Activity 被销毁前清除所需的任何数据。")]),e("li",null,[t("如果 Activity 即将结束，onDestroy() 是 Activity 收到的最后一个生命周期回调。如果由于配置变更而调用 onDestroy()，系统会立即新建 Activity 实例，然后在新配置中为新实例调用 "),e("a",at,[st,o(n)]),t("。")])]),ht,e("ul",null,[e("li",null,[t("使界面控制器（activity 和 fragment）尽可能保持精简。它们不应试图获取自己的数据，而应使用 "),e("a",_t,[ut,o(n)]),t(" 执行此操作，同时应观测 "),e("a",pt,[vt,o(n)]),t(" 对象以在视图中体现相应变化。")]),e("li",null,[t("设法编写数据驱动型界面，在此类界面中，界面控制器负责随着数据的更改更新视图，或者向 "),e("a",ft,[gt,o(n)]),t(" 通知用户的操作。")]),e("li",null,[t("将数据逻辑放在 "),e("a",yt,[At,o(n)]),t(" 类中。"),e("a",bt,[mt,o(n)]),t(" 应充当界面控制器与应用其余部分之间的连接器。不过要注意，"),e("a",St,[wt,o(n)]),t(" 不负责提取数据（例如，从网络提取）。但是，"),e("a",kt,[It,o(n)]),t(" 应调用相应的组件来提取数据，然后将结果提供给界面控制器。")]),e("li",null,[t("使用"),e("a",Ct,[t("数据绑定"),o(n)]),t("在视图与界面控制器之间维持干净的接口。这样可以让视图更具声明性，并尽量减少需要在 activity 和 fragment 中编写的更新代码。如果您更愿意使用 Java 编程语言来达成此目的，请使用 "),e("a",xt,[t("Butter Knife"),o(n)]),t(" 之类的库，以避免样板代码并实现更好的抽象化。")]),e("li",null,[t("如果界面很复杂，不妨考虑创建 "),e("a",Nt,[t("presenter"),o(n)]),t(" 类来处理界面的修改。这可能是一项艰巨的任务，但这样做可使界面组件更易于测试。")]),e("li",null,[t("避免在 "),e("a",zt,[Et,o(n)]),t(" 中引用 "),Vt,t(" 或 "),Lt,t(" 上下文。如果 "),Tt,t(" 存在的时间比 activity 更长（在配置更改的情况下），activity 将泄漏并且不会获得垃圾回收器的妥善处置。")]),e("li",null,[t("使用 "),e("a",Ot,[t("Kotlin 协程"),o(n)]),t("管理长时间运行的任务和其他可以异步运行的操作。")])]),Rt,e("ol",null,[e("li",null,[e("p",null,[e("a",Pt,[Mt,o(n)]),t(" 类是一种"),e("a",Bt,[t("业务逻辑或屏幕级状态容器"),o(n)]),t("。")])]),Dt,Ft]),Ut,e("p",null,[t("当发生配置变更时，系统会重新创建 "),Yt,t("。为此，系统会调用 "),e("a",Gt,[qt,o(n)]),t(" 并销毁现有的 "),Wt,t(" 实例。随后，系统会使用 "),e("a",jt,[Jt,o(n)]),t(" 创建一个新实例，并且这个新的 "),Kt,t(" 实例会使用更新后的新配置进行初始化。这也意味着，系统还会使用新配置重新创建界面。")]),Ht,e("ul",null,[e("li",null,[e("a",Qt,[t("本地持久性存储"),o(n)]),t("可用于处理复杂或大型数据的进程终止。持久性本地存储包括数据库或 "),e("a",Xt,[Zt,o(n)]),t("。")]),e("li",null,[e("a",$t,[t("保留的对象"),o(n)]),t("（如 "),e("a",eo,[to,o(n)]),t(" 实例）可在用户正在使用应用时，处理内存中与界面相关的状态。")]),e("li",null,[e("a",oo,[t("已保存的实例状态"),o(n)]),t("可用于处理系统发起的进程终止，并根据用户输入或导航情况保留瞬时状态。")])]),e("p",null,[t("如需详细了解各个 API 以及各自适用的使用场景，请参阅"),e("a",no,[t("保存界面状态"),o(n)]),t("。")]),e("p",null,[t("在 "),io,t(" 系统中，如果发生配置变更并且已停用 "),lo,t(" 重新创建功能，activity 会收到对 "),e("a",co,[ro,o(n)]),t(" 的调用。任何关联的视图也会收到对 "),e("a",ao,[so,o(n)]),t(" 的调用。对于尚未添加到 "),ho,t(" 的配置变更，系统会照常重新创建 activity。")]),e("p",null,[_o,t(" 回调方法会收到一个 "),e("a",uo,[po,o(n)]),t(" 对象，其中指定了新的设备配置。请读取 "),vo,t(" 对象中的字段来确定您的新配置。如需进行后续更改，请更新您在接口中使用的资源。当系统调用此方法时，activity 的 "),fo,t(" 对象会相应地进行更新，并根据新配置返回资源。这样一来，您就可以在系统不重启 activity 的情况下轻松重置界面元素。")]),go,e("ul",null,[yo,e("li",null,[t("**状态：**旧 "),Ao,t(" 实例中的状态不存在于新 "),bo,t(" 实例中，因为它们是两个不同的对象实例。请按照"),e("a",mo,[t("保存界面状态"),o(n)]),t("中描述的方法保留应用和用户状态。")]),So]),wo,e("ul",null,[ko,e("li",null,[t("**保留状态：**在重新创建 "),Io,t(" 时，不要丢失用户的状态。请按照"),e("a",Co,[t("保存界面状态"),o(n)]),t("中描述的方法保留状态。")]),e("li",null,[t("**避免停用快速修复功能：**不要停用 "),xo,t(" 重新创建功能，这样可以轻松避免丢失状态。停用 activity 重新创建功能需要实现处理变更的承诺，而您可能会因为其他配置变更、进程终止或应用关闭所带来的 "),No,t(" 重新创建而丢失状态。因此，您无法完全停用 "),zo,t(" 重新创建功能。请按照"),e("a",Eo,[t("保存界面状态"),o(n)]),t("中描述的方法保留状态。")]),Vo]),Lo,e("ul",null,[To,Oo,Ro,e("li",null,[t("甚至ActionBar 都可以使用内部fragment来管理 你可以选择使用一个没有UI界面的fragment来专门管理ActionBar,或者你可以选择使用在每个Fragment中 添加它自己的action 来作为父Activity的ActionBar（"),e("a",Po,[t("参考"),o(n)]),t("）")])]),Mo,Bo])}const Go=r(h,[["render",Do],["__file","C-AndroidActivity.html.vue"]]);export{Go as default};
