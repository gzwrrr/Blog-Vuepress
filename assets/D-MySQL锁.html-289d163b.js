import{_ as a,Q as o,S as r,U as t,W as e,X as i,a8 as d,a9 as n,H as c}from"./framework-d7e1aa10.js";const s={},p=t("h1",{id:"mysql-锁",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#mysql-锁","aria-hidden":"true"},"#"),d(" MySQL 锁")],-1),h={class:"table-of-contents"},u=n('<h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h2><p><strong>按锁粒度分类：</strong></p><ol><li>行锁：锁某行数据，粒度最小，并发度最高</li><li>表锁：锁整张表，粒度最大，并发度最低</li><li>间隙锁：锁住一个区间</li></ol><p><strong>按读写分类：</strong></p><ol><li>共享锁（S 锁）：读锁，一个事务给某行数据加了读锁，那么其他事务还是能读但是不能写</li><li>排他锁（X 锁）：写锁，一个事务给某行数据加了写锁，那么其他事务不能读也不能写</li></ol><p><strong>还可以分为：</strong></p><ol><li>悲观锁：上述的锁都是悲观锁</li><li>乐观锁：使用版本号等不会真正锁住某行数据的方式来实现</li></ol><div class="table-wrapper"><table><thead><tr><th>锁名称</th><th>解释</th><th>隔离级别</th><th>使用场景</th></tr></thead><tbody><tr><td>共享锁（Shared Lock）</td><td>允许读取并发操作，但阻止写操作</td><td>RR、RC、Serializable</td><td>适用于读取操作较多的情况，如查询</td></tr><tr><td>排他锁（Exclusive Lock）</td><td>阻止读取和写操作并发进行</td><td>RR、RC、Serializable</td><td>适用于写操作较多的情况，如更新、删除</td></tr><tr><td>意向共享锁（Intention Shared Lock）</td><td>表示事务将要在某个范围内加共享锁</td><td>所有隔离级别</td><td>由数据库自动加上，一般不需要手动加锁</td></tr><tr><td>意向排他锁（Intention Exclusive Lock）</td><td>表示事务将要在某个范围内加排他锁</td><td>所有隔离级别</td><td>由数据库自动加上，一般不需要手动加锁</td></tr><tr><td>记录锁（Record Lock）</td><td>锁定一条记录</td><td>RR、RC、Serializable</td><td>适用于对某些记录进行加锁的场景</td></tr><tr><td>间隙锁（Gap Lock）</td><td>锁定记录之间的间隙，防止其他事务在这个范围内插入记录</td><td>RR、RC、Serializable</td><td>适用于防止其他事务在某个范围内插入记录的场景</td></tr><tr><td>临键锁（Next-Key Lock）</td><td>既锁定了记录之间的间隙，也锁定了记录本身，防止其他事务在这个范围内插入或修改记录</td><td>RR、RC、Serializable</td><td>适用于防止其他事务在某个范围内插入或修改记录的场景</td></tr><tr><td>行锁（Row Lock）</td><td>锁定一行记录</td><td>RR、RC、Serializable</td><td>适用于需要锁定单个记录的场景</td></tr><tr><td>表锁（Table Lock）</td><td>锁定整张表</td><td>所有隔离级别</td><td>适用于需要全表操作的场景，如备份、数据导入等</td></tr></tbody></table></div><p>==注意：==以上隔离级别指的是使用该锁时可以使用的隔离级别，但并不代表该锁只能在该隔离级别下使用，实际上大多数锁在所有隔离级别下都可以使用。</p><h2 id="行锁和记录锁" tabindex="-1"><a class="header-anchor" href="#行锁和记录锁" aria-hidden="true">#</a> 行锁和记录锁</h2><p>在MySQL中，行锁和记录锁是两种不同的锁类型。它们的区别在于锁定的粒度不同。</p><ol><li><p>行锁：</p><p>行锁是指在执行SQL语句时，对某一行记录进行的锁定。行锁的优点是粒度小，可以避免大面积的锁冲突，提高并发性能。MySQL中的InnoDB引擎支持行锁。</p></li><li><p>记录锁：</p><p>记录锁是指在执行SQL语句时，对某一个索引记录进行的锁定。记录锁的优点是锁定的范围更小，能够减少锁冲突，提高并发性能。MySQL中的MyISAM引擎支持记录锁。</p></li></ol><p>需要注意的是，MySQL中的行锁和记录锁并不是严格区分的。如果对某一行记录进行锁定，也会同时对其对应的索引记录进行锁定，因为这两者是相关的。同时，在使用InnoDB引擎时，可以通过设置参数来控制行锁和记录锁的使用，以提高并发性能和数据一致性。</p><h2 id="临键锁和间隙锁" tabindex="-1"><a class="header-anchor" href="#临键锁和间隙锁" aria-hidden="true">#</a> 临键锁和间隙锁</h2><blockquote><p>临键锁相当于记录锁和间隙锁的组合</p></blockquote><p>“临键”指的是记录之间的空隙（gap），因为临键锁实际上是锁定了记录之间的空隙。在执行一个查询语句时，如果MySQL需要对一个范围内的记录加锁，它会将这个范围分为若干个间隙，然后对这些间隙加锁。例如，对id在1到10之间的记录加锁时，MySQL会将这个范围分为10个间隙（1-2之间的间隙、2-3之间的间隙、3-4之间的间隙……9-10之间的间隙），然后对这些间隙加锁。</p><p>和临键锁类似的是间隙锁（Gap Lock），间隙锁也是锁定记录之间的间隙。不同的是，临键锁既锁定了记录之间的间隙，也锁定了记录本身；而间隙锁只锁定了记录之间的间隙，不锁定记录本身。举个例子，假设在一个表中id为1的记录被加了排他锁，这个时候如果有一个查询语句需要锁定id在1到10之间的记录，MySQL会先锁定id为1的记录，然后锁定id为2到10之间的间隙，这样其他事务就无法在这个范围内插入记录。如果使用的是临键锁，MySQL会将id为1到10之间的所有记录都锁定，包括id为1的记录和id为2到10之间的间隙。</p><p>由于临键锁和间隙锁都是锁定了记录之间的间隙，它们的作用和特点比较相似，容易混淆。区别在于临键锁除了锁定间隙，还锁定了记录本身，而间隙锁只锁定了间隙。因此，在使用这两种锁的时候，需要根据具体情况进行选择。例如，如果要防止其他事务在一个范围内插入记录，可以使用间隙锁；如果要防止其他事务在一个范围内插入或修改记录，可以使用临键锁。</p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><ol><li><p>innodb对于行的查询使用next-key lock</p></li><li><p>Next-locking keying为了解决Phantom Problem幻读问题</p></li><li><p>当查询的索引含有唯一属性时，将next-key lock降级为record key</p></li><li><p>Gap锁设计的目的是为了阻止多个事务将记录插入到同一范围内，而这会导致幻读问题的产生</p></li><li><p>有两种方式显式关闭gap锁：（除了外键约束和唯一性检查外，其余情况仅使用record lock）</p><ol><li>将事务隔离级别设置为RC</li><li>将参数innodb_locks_unsafe_for_binlog设置为1</li></ol></li></ol>',20);function _(S,k){const l=c("router-link");return o(),r("div",null,[p,t("nav",h,[t("ul",null,[t("li",null,[e(l,{to:"#mysql-锁"},{default:i(()=>[d("MySQL 锁")]),_:1}),t("ul",null,[t("li",null,[e(l,{to:"#分类"},{default:i(()=>[d("分类")]),_:1})]),t("li",null,[e(l,{to:"#行锁和记录锁"},{default:i(()=>[d("行锁和记录锁")]),_:1})]),t("li",null,[e(l,{to:"#临键锁和间隙锁"},{default:i(()=>[d("临键锁和间隙锁")]),_:1})]),t("li",null,[e(l,{to:"#其他"},{default:i(()=>[d("其他")]),_:1})])])])])]),u])}const L=a(s,[["render",_],["__file","D-MySQL锁.html.vue"]]);export{L as default};
