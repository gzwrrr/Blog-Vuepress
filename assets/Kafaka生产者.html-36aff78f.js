import{_ as p,Q as o,S as c,U as n,a8 as s,W as t,a9 as e,H as l}from"./framework-d7e1aa10.js";const i={},u=e(`<h1 id="kafaka-生产者" tabindex="-1"><a class="header-anchor" href="#kafaka-生产者" aria-hidden="true">#</a> Kafaka 生产者</h1><h2 id="发送流程" tabindex="-1"><a class="header-anchor" href="#发送流程" aria-hidden="true">#</a> 发送流程</h2><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//kafaka/20230731/生产者发送流程.png" alt="生产者发送流程" tabindex="0" loading="lazy"><figcaption>生产者发送流程</figcaption></figure><h2 id="异步发送" tabindex="-1"><a class="header-anchor" href="#异步发送" aria-hidden="true">#</a> 异步发送</h2><ol><li>普通异步发送</li><li>回调异步发送</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;192.168.30.201:9092,192.168.30.201:9093,192.168.30.201:9094&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>recordMetadata<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;主题：&quot;</span> <span class="token operator">+</span> recordMetadata<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 分区：&quot;</span> <span class="token operator">+</span> recordMetadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>分区的好处：</strong></p><ol><li>便于合理使用存储资源，每个分区在一个 Broker 上存储，可以把海量的数据按照分区切割成一块一块数据存储在多台 Broker 上，合理控制分区的任务，可以实现负载均衡的效果</li><li>提高并行度：生产者可以以分区为单位发送数据，消费者可以以分区为单位消费数据</li></ol><br><p><strong>默认分区规则：</strong></p><ol><li>指定分区时直接将指明的值作为分区的值</li><li>没有指明分区值，但是有 key 的情况下，将 key 的 hash 值与 topic 的分区数进行取余得到分区值</li><li>既没有分区值也没有 key 时，采用 Sticky Partiton（黏性分区器），随机选择一个分区，并尽可能一直使用该分区，待该分区的 batch 已满或者已完成，再随机选择一个分区进行使用（和上一次的分区不一样）</li></ol><br><p><strong>自定义分区：</strong></p><p>实现 Partitioner 接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// properties.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, &quot;xxx.xxx.xxx.CustomerPartition&quot;)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerPartition</span> <span class="token keyword">implements</span> <span class="token class-name">Partitioner</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1<span class="token punctuation">,</span> <span class="token class-name">Cluster</span> cluster<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><strong>生产者提高吞吐量：</strong></p>`,17),r=n("li",null,"改变 batch.size 大小，默认是 16 k",-1),k={href:"http://linger.ms",target:"_blank",rel:"noopener noreferrer"},d=n("li",null,"改变 compression.type，压缩 snappy",-1),m=n("li",null,"改变 RecordAccumulator 缓冲区大小，可以修改为 64M",-1),v=e('<p><strong>ack 应答级别：</strong></p><blockquote><p>从上到下可靠性上升，效率下降</p></blockquote><ol><li>级别 0：生产者发送过来的数据，不需要等待数据落盘应答</li><li>级别 1：生产者发送过来的数据，Leader 收到数据后应答</li><li>级别 -1（all）：生产者发送过来的数据，Leader 和 ISR 队列里面的所有节点收齐数据后应答</li></ol><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2><blockquote><p>注意：开启事务，必须开启幂等性</p></blockquote>',5),b={href:"http://transactional.id",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"事务信息存储在一个特定的分区中：",-1),f=n("li",null,"默认有50个分区，每个分区负责一部分事务。",-1),g={href:"http://transactional.id",target:"_blank",rel:"noopener noreferrer"},_={href:"http://transactional.id",target:"_blank",rel:"noopener noreferrer"},y=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1.初始化事务</span>
<span class="token keyword">void</span> <span class="token function">initTransactions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.开启事务</span>
<span class="token keyword">void</span> <span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ProducerFencedException</span><span class="token punctuation">;</span>

<span class="token comment">// 3.在事务内提交已经消费的偏移量（主要用于消费者）</span>
<span class="token keyword">void</span> <span class="token function">sendOffsetsToTransaction</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">OffsetAndMetadata</span><span class="token punctuation">&gt;</span></span> offsets<span class="token punctuation">,</span>
                              <span class="token class-name">String</span> consumerGroupId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ProducerFencedException</span><span class="token punctuation">;</span>

<span class="token comment">// 4.提交事务</span>
<span class="token keyword">void</span> <span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ProducerFencedException</span><span class="token punctuation">;</span>

<span class="token comment">// 5.放弃事务（类似于回滚事务的操作）</span>
<span class="token keyword">void</span> <span class="token function">abortTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ProducerFencedException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据去重" tabindex="-1"><a class="header-anchor" href="#数据去重" aria-hidden="true">#</a> 数据去重</h2><p><strong>幂等性原理：</strong></p><p>值 Producer 不论向 Broker 发送多少次重复数据，Broker 端都只会持久化一条，保证了不重复</p><p>重复数据的判断标准：具有 <code>&lt;PID, Partition, SeqNumber&gt;</code> 相同主键的消息提交时，Broker 只会持久化一条，其中 PID 是 Kafka 每次重启都会分配的 ID，Partition 表示分区号，Sequence Number 是单调自增的</p><p>所以幂等性只能保证再「单分区单会话」内不会重复</p><ol><li>精确一次：幂等性 + 至少一次（ack = -1 + 分区副本数 》= 2 + ISR 最小副本数 &gt;= 2）</li></ol><h2 id="数据有序" tabindex="-1"><a class="header-anchor" href="#数据有序" aria-hidden="true">#</a> 数据有序</h2><ol><li>单分区内有序</li><li>多分区时分区与分区无序</li></ol><p>Broker 默认最多缓存 5 个请求</p><p>kafka 1.x 之前无法保证单分区有序，需要单分区有序可以将 max.in.flight.requests.per.connection = 1（不需要考虑是否开启幂等性 ）</p><p>kafka 1.x 之后保证单分区有序可以使用：</p><ol><li>未开启幂等性：max.in.flight.requests.per.connection = 1</li><li>开启幂等性：max.in.flight.requests.per.connection &lt;= 5</li></ol>`,13),w={href:"https://www.bilibili.com/video/BV1vr4y1677k?p=22&vd_source=e356fec025b50061af78324a814f8da0",target:"_blank",rel:"noopener noreferrer"};function x(P,S){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("ol",null,[r,n("li",null,[s("改变等待时间 "),n("a",k,[s("linger.ms"),t(a)]),s("，可以修改为 5 ~ 100ms")]),d,m]),v,n("p",null,[s("Producer 在使用事务功能之前，必须先自定义一个唯一的 "),n("a",b,[s("transactional.id"),t(a)]),s("，有了该 ID 后即使客户端挂掉了，重启后也能继续处理未完成的事务")]),h,n("ol",null,[f,n("li",null,[s("事务划分是根据 "),n("a",g,[s("transactional.id"),t(a)]),s(" 的 hashcode 值 %50，计算出该事务属于哪个分区。")]),n("li",null,[s("该分区 Leader 副本所在的 broker 节点即为这个 "),n("a",_,[s("transactional.id"),t(a)]),s(" 对应的 Transaction Coordinator 节点。")])]),y,n("p",null,[n("a",w,[s("https://www.bilibili.com/video/BV1vr4y1677k?p=22&vd_source=e356fec025b50061af78324a814f8da0"),t(a)])])])}const I=p(i,[["render",x],["__file","Kafaka生产者.html.vue"]]);export{I as default};
