import{_ as p,Q as d,S as r,U as n,W as a,X as t,a8 as e,a9 as i,H as o}from"./framework-d7e1aa10.js";const u={},k=n("h1",{id:"spring-bean",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring-bean","aria-hidden":"true"},"#"),e(" Spring Bean")],-1),B={class:"table-of-contents"},g=i(`<h2 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h2><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">作用域</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">singleton</td><td style="text-align:left;">在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，默认值</td></tr><tr><td style="text-align:left;">prototype</td><td style="text-align:left;">每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()</td></tr><tr><td style="text-align:left;">request</td><td style="text-align:left;">每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境</td></tr><tr><td style="text-align:left;">session</td><td style="text-align:left;">同一个HTTP Session共享一个Bean，不同Session使用不同的Bean，仅适用于WebApplicationContext环境</td></tr><tr><td style="text-align:left;">global-session</td><td style="text-align:left;">一般用于Portlet应用环境，该作用域仅适用于WebApplicationContext环境</td></tr></tbody></table></div><h2 id="创建的生命周期步骤" tabindex="-1"><a class="header-anchor" href="#创建的生命周期步骤" aria-hidden="true">#</a> 创建的生命周期步骤</h2><p>所以创建bean的整个步骤为：</p><ol><li>从配置文件中读取 <code>Bean</code> 配置并生成 <code>BeanDefinition</code></li><li>如果有 <code>BeanFactoryPostProcessor</code> 实现类，那么执行 <code>postProcessBeanFactory</code> 对 <code>BeanDefinition</code> 做出修改</li><li>实例化 <code>Bean</code></li><li><code>Bean</code> 属性赋值，如果有 <code>InitializingBean</code> 实现类，那么执行 <code>@PostConstruct</code> 或者 <code>afterPropertiesSet</code> 方法对 <code>Bean</code> 做出修改</li><li>初始化 <code>Bean</code>，如果有 <code>BeanPostProcessor</code> 实现类，执行 <code>postProcessBeforeInitialization</code> 和 <code>postProcessAfterInitialization</code>，用于在 <code>Bean</code> 初始化前后执行自定义的处理逻辑。它允许你在初始化阶段对 Bean 进行修改，例如代理对象、添加额外的处理等</li><li>使用 <code>Bean</code></li><li>销毁 <code>Bean</code>，如果有 <code>DisposableBean</code> 实现类，那么先执行 <code>@PreDestroy</code> 或者 <code>destroy</code> 方法</li></ol><h3 id="概览" tabindex="-1"><a class="header-anchor" href="#概览" aria-hidden="true">#</a> 概览</h3><p>在 Spring Framework 中，每个 Bean 都有其生命周期，即它从被创建到被销毁的整个过程。Spring 提供了一系列回调方法，允许你在不同的生命周期阶段执行自定义的逻辑。以下是典型的 Spring Bean 生命周期阶段：</p><ol><li><strong>实例化（Instantiation）：</strong> 在这个阶段，容器根据配置元数据或编程方式创建 Bean 的实例。这可以通过构造函数或工厂方法来完成。</li><li><strong>属性赋值（Population）：</strong> 在这个阶段，容器将依赖项和属性值注入到 Bean 实例中。这可以通过 setter 方法、字段注入或构造函数参数注入来完成。</li><li><strong>初始化（Initialization）：</strong> 在这个阶段，容器对 Bean 进行初始化。这包括执行自定义的初始化逻辑，以及实现 <code>InitializingBean</code> 接口的 <code>afterPropertiesSet()</code> 方法或使用 <code>@PostConstruct</code> 注解。</li><li><strong>使用（In Use）：</strong> 在这个阶段，Bean 已经初始化，可以正常使用。</li><li><strong>销毁（Destruction）：</strong> 在容器关闭或显式调用销毁方法时，容器会触发 Bean 的销毁过程。这包括实现 <code>DisposableBean</code> 接口的 <code>destroy()</code> 方法、使用 <code>@PreDestroy</code> 注解以及在 XML 配置中指定销毁方法。</li></ol><p>下面是一个简化的示例，展示了 Bean 生命周期的不同阶段：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PreDestroy</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Bean instantiated&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Property Injection</span>
    
    <span class="token comment">// 也可以使用 InitializingBean</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Bean initialized&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">someBusinessLogic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Bean in use&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 也可以使用 InitializingBean</span>
    <span class="token annotation punctuation">@PreDestroy</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Bean destroyed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，虽然这个示例使用了 <code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注解，但 Spring 还支持使用接口实现和 XML 配置来定义初始化和销毁方法。</p><h3 id="详细" tabindex="-1"><a class="header-anchor" href="#详细" aria-hidden="true">#</a> 详细</h3><p>大概分为 7 个步骤：</p><ol><li>推断构造方法</li><li>实例化</li><li>填充属性，也就是依赖注入</li><li>处理 Aware 回调</li><li>初始化前，处理 @PostConstruct 注解</li><li>初始化时，处理 InitalizingBean 接口</li><li>初始化后，进行 AOP</li></ol>`,14),v=i('<p>注解：</p><ul><li><code>用户</code>：请求获取 Bean 的用户</li><li><code>Spring容器</code>：Spring 容器，即 ApplicationContext</li><li><code>BeanFactory</code>：Bean 工厂，即 DefaultListableBeanFactory</li><li><code>SingletonBeanRegistry</code>：单例 Bean 注册表，即 DefaultSingletonBeanRegistry</li></ul><p>上述序列图展示了一个典型的 Spring Bean 的创建过程。当用户请求获取一个 Bean 时，Spring 容器首先判断该 Bean 是否存在。如果存在，Spring 容器接着判断该 Bean 是否为单例模式。如果是单例模式，Spring 容器再判断该 Bean 是否已经被实例化过。如果已经被实例化过，Spring 容器直接返回该 Bean 的实例，否则 Spring 容器会实例化该 Bean，并将其注册到单例 Bean 注册表中，然后再返回该 Bean 的实例。如果该 Bean 不是单例模式，Spring 容器每次都会创建一个新的实例并返回。</p><p>当用户修改单例 Bean 的属性值时，Spring 容器会调用该 Bean 的 setter 方法注入新值。</p><p>总的来说，Spring Bean 的创建过程包括 Bean 实例化、Bean 属性注入和 Bean 初始化三个阶段。当用户请求获取 Bean 时，Spring 容器会自动完成这些操作并返回该 Bean 的实例。</p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2>',6),m={href:"https://muyinchen.github.io/2017/09/16/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84bean%E5%B7%A5%E5%8E%82%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/",target:"_blank",rel:"noopener noreferrer"};function b(h,f){const s=o("router-link"),l=o("Mermaid"),c=o("ExternalLinkIcon");return d(),r("div",null,[k,n("nav",B,[n("ul",null,[n("li",null,[a(s,{to:"#spring-bean"},{default:t(()=>[e("Spring Bean")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#作用域"},{default:t(()=>[e("作用域")]),_:1})]),n("li",null,[a(s,{to:"#创建的生命周期步骤"},{default:t(()=>[e("创建的生命周期步骤")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#概览"},{default:t(()=>[e("概览")]),_:1})]),n("li",null,[a(s,{to:"#详细"},{default:t(()=>[e("详细")]),_:1})])])]),n("li",null,[a(s,{to:"#其他"},{default:t(()=>[e("其他")]),_:1})])])])])]),g,a(l,{id:"mermaid-189",code:"eJwrTi0sTc1LTnXJTEwvSszlUlB4PmXFs47tunbBBUWZeelP1+18OnOFlcKL9dufbWx60bf9af80p9TEPKBCZAW6diBBt8TkkvyiSiuFZzPWP52w7OnaGU/nrHixfilI7v2e+UA9SKp00a2AKCfG4Cc7dj3tnfpkX/ezFQuf7uknbDRIG5IGDDuCgeyc1JL8PJAhQanpmcUlOLzxfFbL03XzgCZBLMWqEYfP0E3AcAUk5IFhvX/K09nzsCjHHjVP9q97NmUnTO3Gec8alj9t2IM/HF9saAYahrCiOLWkJLXo2bSdzzZPfbZ5xdPWpc+mbYCYMpoeBml6AAB8x/KL"}),v,n("ol",null,[n("li",null,[n("a",m,[e("Bean 工厂后置处理器"),a(c)])])])])}const x=p(u,[["render",b],["__file","B-SpringBean.html.vue"]]);export{x as default};
