import{_ as c,Q as i,S as l,U as n,W as a,X as p,a8 as s,a9 as u,H as e}from"./framework-d7e1aa10.js";const k={},r=n("h1",{id:"回溯算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#回溯算法","aria-hidden":"true"},"#"),s(" 回溯算法")],-1),d={class:"table-of-contents"},v={class:"hint-container info"},m=n("p",{class:"hint-container-title"},"相关文章",-1),b={href:"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247496080&idx=1&sn=a2ae8c8ebf13c7ea704ffb6b16018f08&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},_=u(`<blockquote><p>其实回溯也算是暴力递归，只不过有优化手段，比如剪枝</p></blockquote><h2 id="组合-排列-子集" tabindex="-1"><a class="header-anchor" href="#组合-排列-子集" aria-hidden="true">#</a> 组合/排列/子集</h2><blockquote><p>组合/排列/子集问题基本上都可以使用回溯剪枝来解决，本质上就是对决策树进行不同程度的剪枝</p></blockquote><p><strong>要点：</strong></p><ol><li>子集问题和组合问题本质上是一样的，关键在于 base case 不太一样</li><li>组合和排列只是在剪枝时不太一样，组合涉及的回溯不走回头路，而排列涉及的回溯要走回头路，因此还需要额外的数据结构存储是否访问过之类的</li></ol><p><strong>表现形式：</strong></p><ol><li>元素无重复，不可重复选</li><li>元素重复，不可重复选。先排序再进行剪枝</li><li>元素无重复，可以重复选</li></ol><p><strong>组合和排列的回溯框架：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/* 组合/子集问题回溯算法框架 */</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 回溯算法标准框架</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 做选择</span>
        track<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 注意参数</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 撤销选择</span>
        track<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 排列问题回溯算法框架 */</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 剪枝逻辑</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 做选择</span>
        used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        track<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 取消选择</span>
        track<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function f(h,w){const t=e("router-link"),o=e("ExternalLinkIcon");return i(),l("div",null,[r,n("nav",d,[n("ul",null,[n("li",null,[a(t,{to:"#回溯算法"},{default:p(()=>[s("回溯算法")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#组合-排列-子集"},{default:p(()=>[s("组合/排列/子集")]),_:1})])])])])]),n("div",v,[m,n("p",null,[n("a",b,[s("一文秒杀排列组合问题的 9 种题型"),a(o)])])]),_])}const g=c(k,[["render",f],["__file","C-回溯算法.html.vue"]]);export{g as default};
