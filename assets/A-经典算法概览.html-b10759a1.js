import{_ as d,Q as r,S as o,U as l,W as e,X as t,a8 as i,a9 as h,H as n}from"./framework-d7e1aa10.js";const s={},c=l("h1",{id:"经典算法概览",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#经典算法概览","aria-hidden":"true"},"#"),i(" 经典算法概览")],-1),u={class:"table-of-contents"},_=h('<h2 id="算法汇总" tabindex="-1"><a class="header-anchor" href="#算法汇总" aria-hidden="true">#</a> 算法汇总</h2><h3 id="顺序表相关" tabindex="-1"><a class="header-anchor" href="#顺序表相关" aria-hidden="true">#</a> 顺序表相关</h3><ol><li>线性枚举</li><li>前缀和</li><li>双指针</li><li>二分/三分枚举</li><li>离散化</li><li>排序：冒泡、选择、插入、快速、希尔、归并、堆排、基数、计数</li><li>贪心</li><li>模拟</li></ol><h3 id="链表相关" tabindex="-1"><a class="header-anchor" href="#链表相关" aria-hidden="true">#</a> 链表相关</h3><ol><li>单向链表</li><li>双向链表</li></ol><h3 id="栈相关" tabindex="-1"><a class="header-anchor" href="#栈相关" aria-hidden="true">#</a> 栈相关</h3><ol><li>LIFO 后进先出栈</li><li>单调栈</li></ol><h3 id="队列相关" tabindex="-1"><a class="header-anchor" href="#队列相关" aria-hidden="true">#</a> 队列相关</h3><ol><li>FIFO 先进先出队列</li><li>双端队列</li><li>单调队列</li></ol><h3 id="字符串相关" tabindex="-1"><a class="header-anchor" href="#字符串相关" aria-hidden="true">#</a> 字符串相关</h3><ol><li>KMP</li><li>字典树</li><li>Manacher</li><li>AC 自动机</li><li>后缀树组</li><li>BM</li></ol><h3 id="树相关" tabindex="-1"><a class="header-anchor" href="#树相关" aria-hidden="true">#</a> 树相关</h3><ol><li>二叉树</li><li>二叉搜索树</li><li>二叉平衡搜索树：AVL 树、SB 树、红黑树</li><li>线段树</li><li>哈夫曼树</li><li>堆</li><li>伸展树</li><li>左偏树</li><li>Treap</li><li>B/B+ 树</li><li>树链剖分</li></ol><h3 id="图相关" tabindex="-1"><a class="header-anchor" href="#图相关" aria-hidden="true">#</a> 图相关</h3><ol><li>树状数组</li><li>哈希表</li><li>跳表</li><li>并查集</li><li>二分图</li><li>最短路</li><li>最小生成树</li><li>最近公共祖先</li><li>深度优先搜索/广度优先搜索/双向广度搜索</li><li>强连通分量/双连通分量</li><li>2-sat</li><li>欧拉回路/哈密尔顿回路</li><li>迭代加深</li><li>拓扑排序</li><li>A*</li><li>差分约束</li><li>最大流</li></ol><h3 id="dp-相关" tabindex="-1"><a class="header-anchor" href="#dp-相关" aria-hidden="true">#</a> DP 相关</h3><ol><li>递推</li><li>线性 DP</li><li>树形 DP</li><li>区间 DP</li><li>数位 DP</li><li>状态压缩</li><li>记忆化搜索</li><li>背包问题：01、完全、多重</li></ol><h2 id="常用的算法" tabindex="-1"><a class="header-anchor" href="#常用的算法" aria-hidden="true">#</a> 常用的算法</h2><blockquote><p>基本上带名字的算法都不考，但是原理要知道</p></blockquote><p>常用：</p><ol><li>二分法</li><li>拓扑排序</li><li>动态规划</li><li>分治法</li><li>贪心</li><li>最小生成树</li></ol><p>不常用：</p><ol><li>最短路算法（Dijkstra、Floyd）</li><li>Morris 遍历</li><li>Manacher</li><li>KMP</li><li>网络流</li><li>希尔排序</li></ol><h2 id="常用的数据结构" tabindex="-1"><a class="header-anchor" href="#常用的数据结构" aria-hidden="true">#</a> 常用的数据结构</h2><p>常用：</p><ol><li>哈希表</li><li>二叉搜索树</li><li>堆</li><li>并查集</li><li>字典树</li></ol><p>不常用：</p><ol><li>跳表</li><li>线段树</li><li>平衡排序二叉树（比如红黑树）</li><li>B/B+ 树</li><li>KD 树</li></ol>',28);function f(p,x){const a=n("router-link");return r(),o("div",null,[c,l("nav",u,[l("ul",null,[l("li",null,[e(a,{to:"#经典算法概览"},{default:t(()=>[i("经典算法概览")]),_:1}),l("ul",null,[l("li",null,[e(a,{to:"#算法汇总"},{default:t(()=>[i("算法汇总")]),_:1}),l("ul",null,[l("li",null,[e(a,{to:"#顺序表相关"},{default:t(()=>[i("顺序表相关")]),_:1})]),l("li",null,[e(a,{to:"#链表相关"},{default:t(()=>[i("链表相关")]),_:1})]),l("li",null,[e(a,{to:"#栈相关"},{default:t(()=>[i("栈相关")]),_:1})]),l("li",null,[e(a,{to:"#队列相关"},{default:t(()=>[i("队列相关")]),_:1})]),l("li",null,[e(a,{to:"#字符串相关"},{default:t(()=>[i("字符串相关")]),_:1})]),l("li",null,[e(a,{to:"#树相关"},{default:t(()=>[i("树相关")]),_:1})]),l("li",null,[e(a,{to:"#图相关"},{default:t(()=>[i("图相关")]),_:1})]),l("li",null,[e(a,{to:"#dp-相关"},{default:t(()=>[i("DP 相关")]),_:1})])])]),l("li",null,[e(a,{to:"#常用的算法"},{default:t(()=>[i("常用的算法")]),_:1})]),l("li",null,[e(a,{to:"#常用的数据结构"},{default:t(()=>[i("常用的数据结构")]),_:1})])])])])]),_])}const B=d(s,[["render",f],["__file","A-经典算法概览.html.vue"]]);export{B as default};
