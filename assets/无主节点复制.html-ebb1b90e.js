import{_ as i,Q as l,S as a,a9 as e}from"./framework-d7e1aa10.js";const r={},h=e('<h1 id="无主节点复制" tabindex="-1"><a class="header-anchor" href="#无主节点复制" aria-hidden="true">#</a> 无主节点复制</h1><h1 id="写在前面" tabindex="-1"><a class="header-anchor" href="#写在前面" aria-hidden="true">#</a> 写在前面</h1><ul><li>主从复制和多主节点复制都是存在明确的主节点的，主节点需要将数据复制到从节点，而写入顺序也是由主节点控制的</li><li>还有一种思路就是让任何副本都能接收来自客户端的写请求，或设置一个协调者代表客户端进行写入操作，这个协调者不负责控制写入顺序</li></ul><br><h1 id="处理节点失效" tabindex="-1"><a class="header-anchor" href="#处理节点失效" aria-hidden="true">#</a> 处理节点失效</h1><ul><li>在主从模式中，如果主节点失效会发生节点切换，但是在无主模式下则并不存在这一步骤</li><li>当都一个节点服务不可用时，写请求可以直接请求其他的节点而不用理会当前节点；当这个节点恢复时会重新提供读写服务，此时客户端如果向该节点读取数据，就会请求到过期值</li><li>对于过期值，客户端不能简单地向一个节点请求数据，而是向多个节点请求，获取到不同的数据后通过类似版本号来区分数据的新旧</li><li>而数据落后的刚恢复的节点有两种思路同步数据： <ul><li>客户端读取时对副本做修复，即如果客户端读取到了过期值，可以将数据写入到旧副本中，以便追上新副本</li><li>反熵查询：副本节点启动后，后台就不断查找副本之间的差异，节点读取到后将差异写到自己的副本中，但是这个过程不保证写入顺序，可能会引起明显的复制滞后</li></ul></li></ul><br><h1 id="读写-quorum" tabindex="-1"><a class="header-anchor" href="#读写-quorum" aria-hidden="true">#</a> 读写 Quorum</h1><ul><li>无主模式中，要想保证读到的是新值，不能只向一个节点请求，核心点是让写入的副本和读取的副本有交集</li><li>需要实现上述的要求，每次并行写入的节点数（W）和每次同时读取的节点数（R）要大于副本总数（N），一般的配置是：W = R = （N + 1）/ 2，可以容忍的失效节点数是：（（N + 1）/ 2 ）- 1</li><li>实际实现中，数据一般会发送或读取所有节点，W 和 R 决定需要等待几个节点的写入或读取确认</li></ul><br><h1 id="quorum-的局限" tabindex="-1"><a class="header-anchor" href="#quorum-的局限" aria-hidden="true">#</a> Quorum 的局限</h1><ul><li>并不要求多数：重点是读写副本有重合的部分，可以按照读写的可用性调整配置</li><li>对于没有强一致性要求的系统，可以配置 W + R &lt;= N，这样可以等待更少的节点返回确认，并且可以提升系统的可用性</li><li>注意，即使符合了 W + R &gt; N，也会存在一些边界问题导致的一致性问题： <ul><li>使用的算法可能使得读写节点完全不相交，此时无法保证数据一定是新的</li><li>如果两个写操作同时发生，也存在冲突，如果合并时基于 LWW，还可能导致数据丢失</li><li>如果读写同时发生，不能保证读取到的一定是新值（复制滞后）</li><li>如果写入时某些节点写入失败，导致最后的确认数少于 W，那么写入成功的副本并不会回滚，即写入失败后还是可能读取到新值</li></ul></li><li>综上，这种方法最后可能只能达到最终一致性，并且还需要共识算法的加持</li></ul><br><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h1><ul><li>光有复制是不足以达到数据一致性的，因为还存在着很多不确定的因素和边界问题</li><li>后续还需要使用各种事务以及共识算法保证数据一致性</li></ul>',15),d=[h];function u(t,n){return l(),a("div",null,d)}const o=i(r,[["render",u],["__file","无主节点复制.html.vue"]]);export{o as default};
