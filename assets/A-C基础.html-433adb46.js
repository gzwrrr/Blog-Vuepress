import{_ as i,Q as c,S as u,U as n,W as a,X as e,a8 as s,a9 as o,H as p}from"./framework-d7e1aa10.js";const d={},r=n("h1",{id:"c-基础",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c-基础","aria-hidden":"true"},"#"),s(" C 基础")],-1),k={class:"table-of-contents"},v=o(`<h2 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h2><p>分类</p><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">基本类型</td><td style="text-align:left;">算术类型，包括两种类型：整数类型和浮点类型</td></tr><tr><td style="text-align:left;">枚举类型</td><td style="text-align:left;">算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量</td></tr><tr><td style="text-align:left;">void 类型</td><td style="text-align:left;">类型说明符 void 表明没有可用的值</td></tr><tr><td style="text-align:left;">派生类型</td><td style="text-align:left;">指针类型、数组类型、结构类型、共用体类型、函数类型</td></tr></tbody></table></div><p>注意：</p><ol><li>数组类型和结构类型统称为聚合类型</li><li>函数的类型指的是函数返回值的类型</li></ol><h3 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型" aria-hidden="true">#</a> 整数类型</h3><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">存储大小</th><th style="text-align:left;">值范围</th></tr></thead><tbody><tr><td style="text-align:left;">char</td><td style="text-align:left;">1 byte</td><td style="text-align:left;">-128 到 127 或 0 到 255</td></tr><tr><td style="text-align:left;">unsigned char</td><td style="text-align:left;">1 byte</td><td style="text-align:left;">0 到 255</td></tr><tr><td style="text-align:left;">signed char</td><td style="text-align:left;">1 byte</td><td style="text-align:left;">-128 到 127</td></tr><tr><td style="text-align:left;">int</td><td style="text-align:left;">2 或 4 bytes</td><td style="text-align:left;">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td style="text-align:left;">unsigned int</td><td style="text-align:left;">2 或 4 bytes</td><td style="text-align:left;">0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td style="text-align:left;">short</td><td style="text-align:left;">2 bytes</td><td style="text-align:left;">-32,768 到 32,767</td></tr><tr><td style="text-align:left;">unsigned short</td><td style="text-align:left;">2 bytes</td><td style="text-align:left;">0 到 65,535</td></tr><tr><td style="text-align:left;">long</td><td style="text-align:left;">4 bytes</td><td style="text-align:left;">-2,147,483,648 到 2,147,483,647</td></tr><tr><td style="text-align:left;">unsigned long</td><td style="text-align:left;">4 bytes</td><td style="text-align:left;">0 到 4,294,967,295</td></tr></tbody></table></div><h3 id="浮点类型" tabindex="-1"><a class="header-anchor" href="#浮点类型" aria-hidden="true">#</a> 浮点类型</h3><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">存储大小</th><th style="text-align:left;">值范围</th><th style="text-align:left;">精度</th></tr></thead><tbody><tr><td style="text-align:left;">float</td><td style="text-align:left;">4 byte</td><td style="text-align:left;">1.2E-38 到 3.4E+38</td><td style="text-align:left;">6 位小数</td></tr><tr><td style="text-align:left;">double</td><td style="text-align:left;">8 byte</td><td style="text-align:left;">2.3E-308 到 1.7E+308</td><td style="text-align:left;">15 位小数</td></tr><tr><td style="text-align:left;">long double</td><td style="text-align:left;">10 byte</td><td style="text-align:left;">3.4E-4932 到 1.1E+4932</td><td style="text-align:left;">19 位小数</td></tr></tbody></table></div><h3 id="void-类型" tabindex="-1"><a class="header-anchor" href="#void-类型" aria-hidden="true">#</a> void 类型</h3><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">函数返回空</td><td style="text-align:left;"><strong>函数返回为空</strong> C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 <strong>void exit (int status);</strong></td></tr><tr><td style="text-align:left;">函数参数为空</td><td style="text-align:left;"><strong>函数参数为空</strong> C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 <strong>int rand(void);</strong></td></tr><tr><td style="text-align:left;">指针指向空</td><td style="text-align:left;"><strong>指针指向 void</strong> 类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 <strong>void *malloc( size_t size );</strong> 返回指向 void 的指针，可以转换为任何数据类型。</td></tr></tbody></table></div><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h3><p>变量声明：</p><ol><li><p>变量声明向编译器保证变量以给定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明</p></li><li><p>可以使用 <strong>extern</strong> 关键字在任何地方声明一个变量。虽然可以在程序中多次声明一个变量，但变量只能在某个文件、函数或代码块中被定义一次</p></li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token comment">// 变量声明</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">float</span> f<span class="token punctuation">;</span>

<span class="token comment">// 函数声明</span>
<span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* 变量定义 */</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
    <span class="token keyword">int</span> c<span class="token punctuation">;</span>
    <span class="token keyword">float</span> f<span class="token punctuation">;</span>

    <span class="token comment">/* 实际初始化 */</span>
    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

    c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;value of c : %d \\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

    f <span class="token operator">=</span> <span class="token number">70.0</span> <span class="token operator">/</span> <span class="token number">3.0</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;value of f : %f \\n&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 函数调用</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i: %d \\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 函数定义</span>
<span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常量" tabindex="-1"><a class="header-anchor" href="#常量" aria-hidden="true">#</a> 常量</h3><blockquote><p>常量是固定值，在程序执行期间不会改变。这些固定的值，又叫做字面量</p><p>常量可以是任何的基本数据类型，比如整数常量、浮点常量、字符常量，或字符串字面值，也有枚举常量</p><p>常量就像是常规的变量，只不过常量的值在定义后不能进行修改</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">85</span>         <span class="token comment">/* 十进制 */</span>
<span class="token number">0213</span>       <span class="token comment">/* 八进制 */</span>
<span class="token number">0x4b</span>       <span class="token comment">/* 十六进制 */</span>
<span class="token number">30</span>         <span class="token comment">/* 整数 */</span>
<span class="token number">30u</span>        <span class="token comment">/* 无符号整数 */</span>
<span class="token number">30l</span>        <span class="token comment">/* 长整数 */</span>
<span class="token number">30ul</span>       <span class="token comment">/* 无符号长整数 */</span>
<span class="token number">3.14159</span>       <span class="token comment">/* 合法的 */</span>
<span class="token number">314159E-5L</span>    <span class="token comment">/* 合法的 */</span>
<span class="token number">510</span>E          <span class="token comment">/* 非法的：不完整的指数 */</span>
<span class="token number">210f</span>          <span class="token comment">/* 非法的：没有小数或指数 */</span>
<span class="token punctuation">.</span>e55          <span class="token comment">/* 非法的：缺少整数或分数 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C 中，有两种简单的定义常量的方式：</p><ol><li>使用 <code>#define</code> 预处理器</li><li>使用 <code>const</code> 关键字</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LENGTH</span> <span class="token expression"><span class="token number">10</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIDTH</span> <span class="token expression"><span class="token number">5</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NEWLINE</span> <span class="token char">&#39;\\n&#39;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> area<span class="token punctuation">;</span>
    area <span class="token operator">=</span> LENGTH <span class="token operator">*</span> WIDTH<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;value of area : %d&quot;</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> NEWLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token keyword">int</span> LENGTH1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> WIDTH1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> NEWLINE1 <span class="token operator">=</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> area1<span class="token punctuation">;</span>
    area1 <span class="token operator">=</span> LENGTH1 <span class="token operator">*</span> WIDTH1<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;value of area : %d&quot;</span><span class="token punctuation">,</span> area1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> NEWLINE1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：当局部变量被定义时，系统不会对其初始化，您必须自行对其初始化。定义全局变量时，系统会自动对其初始化</p><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">数据类型</th><th style="text-align:left;">初始化默认值</th></tr></thead><tbody><tr><td style="text-align:left;">int</td><td style="text-align:left;">0</td></tr><tr><td style="text-align:left;">char</td><td style="text-align:left;">&#39;&#39;</td></tr><tr><td style="text-align:left;">float</td><td style="text-align:left;">0</td></tr><tr><td style="text-align:left;">double</td><td style="text-align:left;">0</td></tr><tr><td style="text-align:left;">pointer</td><td style="text-align:left;">NULL</td></tr></tbody></table></div><h3 id="存储类" tabindex="-1"><a class="header-anchor" href="#存储类" aria-hidden="true">#</a> 存储类</h3><p>存储类定义 C 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C 程序中可用的存储类：</p><ul><li>auto：auto 只能用在函数内，即 auto 只能修饰局部变量，auto 只能用在函数内，即 auto 只能修饰局部变量</li><li>register：register 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个字节），且不能对它应用一元的 &#39;&amp;&#39; 运算符（因为它没有内存位置）；寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 &#39;register&#39; 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制</li><li>static：static 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值</li><li>extern： <ul><li>extern 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当使用 &#39;extern&#39; 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置</li><li>当有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，<em>extern</em> 是用来在另一个文件中声明一个全局变量或函数</li></ul></li></ul><h2 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制" aria-hidden="true">#</a> 流程控制</h2><ol><li>判断： <ol><li>if-else</li><li>三元运算符</li></ol></li><li>循环： <ol><li>for</li><li>while</li><li>do-while</li></ol></li><li>循环控制语句： <ol><li>break</li><li>continue</li><li>goto</li></ol></li></ol><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><blockquote><p>C 标准库提供了大量的程序可以调用的内置函数。例如，函数 <strong>strcat()</strong> 用来连接两个字符串，函数 <strong>memcpy()</strong> 用来复制内存到另一个位置</p></blockquote><p>包含：</p><ol><li>函数声明：告诉编译器函数的名称、返回类型和参数</li><li>函数定义：提供了函数的实际主体</li><li>函数参数： <ol><li>传值调用： 该方法把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数不会影响实际参数</li><li>引用调用：该方法把参数的地址复制给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数</li></ol></li></ol><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><blockquote><p>C 语言支持数组数据结构，它可以存储一个固定大小的相同类型元素的顺序集合。数组是用来存储一系列数据，但它往往被认为是一系列相同类型的变量</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 初始化数组，其中 5 可以忽略</span>
    <span class="token keyword">double</span> balance<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1000.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">7.0</span><span class="token punctuation">,</span> <span class="token number">50.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> n<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* n 是一个包含 10 个整数的数组 */</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>

    <span class="token comment">/* 初始化数组元素 */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        n<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">/* 设置元素 i 为 i + 100 */</span>
    <span class="token punctuation">}</span>                   <span class="token comment">/* 输出数组中每个元素的值 */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Element[%d] = %d\\n&quot;</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),m={class:"table-wrapper"},b=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"概念"),n("th",{style:{"text-align":"left"}},"描述")])],-1),f={style:{"text-align":"left"}},g={href:"https://www.w3cschool.cn/c/c-multi-dimensional-arrays.html",target:"_blank",rel:"noopener noreferrer"},h=n("td",{style:{"text-align":"left"}},"C 支持多维数组。多维数组最简单的形式是二维数组。",-1),y={style:{"text-align":"left"}},x={href:"https://www.w3cschool.cn/c/c-passing-arrays-to-functions.html",target:"_blank",rel:"noopener noreferrer"},w=n("td",{style:{"text-align":"left"}},"您可以通过指定不带索引的数组名称来给函数传递一个指向数组的指针。",-1),_={style:{"text-align":"left"}},q={href:"https://www.w3cschool.cn/c/c-return-arrays-from-function.html",target:"_blank",rel:"noopener noreferrer"},B=n("td",{style:{"text-align":"left"}},"C 允许从函数返回数组。",-1),C={style:{"text-align":"left"}},E={href:"https://www.w3cschool.cn/c/c-pointer-to-an-array.html",target:"_blank",rel:"noopener noreferrer"},N=n("td",{style:{"text-align":"left"}},"您可以通过指定不带索引的数组名称来生成一个指向数组中第一个元素的指针。",-1),L=o(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 多维数组声明</span>
type name<span class="token punctuation">[</span>size1<span class="token punctuation">]</span><span class="token punctuation">[</span>size2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span>sizeN<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 传递数组给函数</span>
<span class="token comment">// 使用指针传递</span>
<span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>param<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token comment">// 形参确定大小</span>
<span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token keyword">int</span> param<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token comment">// 形参未知大小</span>
<span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token keyword">int</span> param<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

<span class="token comment">// 函数返回数组</span>
<span class="token comment">// 注意：C 语言不允许返回一个完整的数组作为函数的参数。但是，您可以通过指定不带索引的数组名来返回一个指向数组的指针</span>
<span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

<span class="token comment">// 指向数组的指针</span>
<span class="token keyword">double</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
<span class="token keyword">double</span> balance<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
p <span class="token operator">=</span> balance<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指针" tabindex="-1"><a class="header-anchor" href="#指针" aria-hidden="true">#</a> 指针</h2><blockquote><p>通过指针，可以简化一些 C 编程任务的执行，还有一些任务，如动态内存分配，没有指针是无法执行的</p></blockquote><p>每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号（&amp;）运算符访问的地址，它表示了在内存中的一个地址</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// &amp; 取地址</span>
    <span class="token keyword">int</span> var1<span class="token punctuation">;</span>
    <span class="token keyword">char</span> var2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;var1 变量的地址： %x\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;var2 变量的地址： %x\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 指针</span>
    <span class="token keyword">int</span> var <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">/* 实际变量的声明 */</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>ip<span class="token punctuation">;</span>      <span class="token comment">/* 指针变量的声明 */</span>
    ip <span class="token operator">=</span> <span class="token operator">&amp;</span>var<span class="token punctuation">;</span>    <span class="token comment">/* 在指针变量中存储 var 的地址 */</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Address of var variable: %x\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>var<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 在指针变量中存储的地址 */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Address stored in ip variable: %x\\n&quot;</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 使用指针访问值 */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Value of *ip variable: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>	
   <span class="token keyword">int</span>  <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ptr 的值是 %x\\n&quot;</span><span class="token punctuation">,</span> ptr  <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一些指针相关的内容</p>`,8),j={class:"table-wrapper"},T=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"概念"),n("th",{style:{"text-align":"left"}},"描述")])],-1),I={style:{"text-align":"left"}},A={href:"https://www.w3cschool.cn/c/c-pointer-arithmetic.html",target:"_blank",rel:"noopener noreferrer"},H=n("td",{style:{"text-align":"left"}},"可以对指针进行四种算术运算：++、--、+、-",-1),z={style:{"text-align":"left"}},W={href:"https://www.w3cschool.cn/c/c-array-of-pointers.html",target:"_blank",rel:"noopener noreferrer"},D=n("td",{style:{"text-align":"left"}},"可以定义用来存储指针的数组。",-1),F={style:{"text-align":"left"}},M={href:"https://www.w3cschool.cn/c/c-pointer-to-pointer.html",target:"_blank",rel:"noopener noreferrer"},S=n("td",{style:{"text-align":"left"}},"C 允许指向指针的指针。",-1),P={style:{"text-align":"left"}},U={href:"https://www.w3cschool.cn/c/c-passing-pointers-to-functions.html",target:"_blank",rel:"noopener noreferrer"},V=n("td",{style:{"text-align":"left"}},"通过引用或地址传递参数，使传递的参数在调用函数中被改变。",-1),G={style:{"text-align":"left"}},Y={href:"https://www.w3cschool.cn/c/c-return-pointer-from-functions.html",target:"_blank",rel:"noopener noreferrer"},X=n("td",{style:{"text-align":"left"}},"C 允许函数返回指针到局部变量、静态变量和动态内存分配。",-1),O=o(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 指针数组指：数组中的每一个元素都是指针</span>
<span class="token comment">// 指针数组声明</span>
<span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 指向指针的指针</span>
<span class="token keyword">int</span>  <span class="token operator">*</span><span class="token operator">*</span>pptr<span class="token punctuation">;</span>

<span class="token comment">// 传递指针给函数</span>
<span class="token keyword">void</span> <span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>par<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><blockquote><p>在 C 语言中，字符串实际上是使用 <strong>null</strong> 字符 &#39;&#39; 终止的一维字符数组。因此，一个以 null 结尾的字符串，包含了组成字符串的字符‘</p></blockquote><p>操作字符串的函数</p><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>strcpy(s1, s2);</strong></td><td style="text-align:left;">复制字符串 s2 到字符串 s1。</td></tr><tr><td style="text-align:left;"><strong>strcat(s1, s2);</strong></td><td style="text-align:left;">连接字符串 s2 到字符串 s1 的末尾。</td></tr><tr><td style="text-align:left;"><strong>strlen(s1);</strong></td><td style="text-align:left;">返回字符串 s1 的长度。</td></tr><tr><td style="text-align:left;"><strong>strcmp(s1, s2);</strong></td><td style="text-align:left;">如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回小于 0；如果 s1&gt;s2 则返回大于 0。</td></tr><tr><td style="text-align:left;"><strong>strchr(s1, ch);</strong></td><td style="text-align:left;">返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td></tr><tr><td style="text-align:left;"><strong>strstr(s1, s2);</strong></td><td style="text-align:left;">返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td></tr></tbody></table></div><h2 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体" aria-hidden="true">#</a> 结构体</h2><blockquote><p>C 数组允许定义可存储相同类型数据项的变量，结构体是 C 编程中另一种用户自定义的可用的数据类型，它允许存储不同类型的数据项</p></blockquote><p>结构体的定义</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// structure tag 是可选的</span>
<span class="token keyword">struct</span> <span class="token punctuation">[</span>structure tag<span class="token punctuation">]</span>
<span class="token punctuation">{</span>
   <span class="token comment">// 每个 member definition 是标准的变量定义</span>
   <span class="token comment">// 比如 int i; 或者 float f; 或者其他有效的变量定义</span>
   member definition<span class="token punctuation">;</span>
   member definition<span class="token punctuation">;</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   member definition<span class="token punctuation">;</span>
   <span class="token comment">// 在结构定义的末尾，最后一个分号之前，您可以指定一个或多个结构变量，这是可选的</span>
<span class="token punctuation">}</span> <span class="token punctuation">[</span>one or more structure variables<span class="token punctuation">]</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了访问结构的成员，使用成员访问运算符 <code>.</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">Books</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> author<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> subject<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> book_id<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/* 函数声明 */</span>
<span class="token keyword">void</span> <span class="token function">printBook</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Books</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">Books</span> Book1<span class="token punctuation">;</span> <span class="token comment">/* 声明 Book1，类型为 Book */</span>
    <span class="token keyword">struct</span> <span class="token class-name">Books</span> Book2<span class="token punctuation">;</span> <span class="token comment">/* 声明 Book2，类型为 Book */</span>

    <span class="token comment">/* Book1 详述 */</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>Book1<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">&quot;C Programming&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>Book1<span class="token punctuation">.</span>author<span class="token punctuation">,</span> <span class="token string">&quot;Nuha Ali&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>Book1<span class="token punctuation">.</span>subject<span class="token punctuation">,</span> <span class="token string">&quot;C Programming Tutorial&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Book1<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">6495407</span><span class="token punctuation">;</span>

    <span class="token comment">/* Book2 详述 */</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>Book2<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">&quot;Telecom Billing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>Book2<span class="token punctuation">.</span>author<span class="token punctuation">,</span> <span class="token string">&quot;Zara Ali&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>Book2<span class="token punctuation">.</span>subject<span class="token punctuation">,</span> <span class="token string">&quot;Telecom Billing Tutorial&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Book2<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">6495700</span><span class="token punctuation">;</span>

    <span class="token comment">/* 输出 Book1 信息 */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Book 1 title : %s\\n&quot;</span><span class="token punctuation">,</span> Book1<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Book 1 author : %s\\n&quot;</span><span class="token punctuation">,</span> Book1<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Book 1 subject : %s\\n&quot;</span><span class="token punctuation">,</span> Book1<span class="token punctuation">.</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Book 1 book_id : %d\\n&quot;</span><span class="token punctuation">,</span> Book1<span class="token punctuation">.</span>book_id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 输出 Book2 信息 */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Book 2 title : %s\\n&quot;</span><span class="token punctuation">,</span> Book2<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Book 2 author : %s\\n&quot;</span><span class="token punctuation">,</span> Book2<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Book 2 subject : %s\\n&quot;</span><span class="token punctuation">,</span> Book2<span class="token punctuation">.</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Book 2 book_id : %d\\n&quot;</span><span class="token punctuation">,</span> Book2<span class="token punctuation">.</span>book_id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printBook</span><span class="token punctuation">(</span>Book1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printBook</span><span class="token punctuation">(</span>Book2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">printBook</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Books</span> book<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Book title : %s\\n&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Book author : %s\\n&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Book subject : %s\\n&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Book book_id : %d\\n&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>book_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以定义指向结构的指针，方式与定义指向其他类型变量的指针相似，为了使用指向该结构的指针访问结构的成员，必须使用 <code>-&gt;</code> 运算符</p><div class="language-c# line-numbers-mode" data-ext="c#"><pre class="language-c#"><code>// 指向结构体的指针
struct Books *struct_pointer;

// 函数声明
void printBook2(struct Books *book);

// 函数定义，使用 -&gt; 访问
void printBook2(struct Books *book)
{
    printf(&quot;Book title : %s\\n&quot;, book-&gt;title);
    printf(&quot;Book author : %s\\n&quot;, book-&gt;author);
    printf(&quot;Book subject : %s\\n&quot;, book-&gt;subject);
    printf(&quot;Book book_id : %d\\n&quot;, book-&gt;book_id);
}

int main()
{
    /* 通过传 Book1 的地址来输出 Book1 信息 */
    printBook( &amp;Book1 );

    /* 通过传 Book2 的地址来输出 Book2 信息 */
    printBook( &amp;Book2 );
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="共用体" tabindex="-1"><a class="header-anchor" href="#共用体" aria-hidden="true">#</a> 共用体</h2><blockquote><p>共用体是一种特殊的数据类型，允许您在相同的内存位置存储不同的数据类型。您可以定义一个带有多成员的共用体，但是任何时候只能有一个成员带有值。共用体提供了一种使用相同的内存位置的有效方式</p></blockquote><p>共用体定义方式与定义结构类似，成员访问规则也类似</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">union</span> <span class="token punctuation">[</span><span class="token keyword">union</span> tag<span class="token punctuation">]</span>
<span class="token punctuation">{</span>
   member definition<span class="token punctuation">;</span>
   member definition<span class="token punctuation">;</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   member definition<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">[</span>one or more <span class="token keyword">union</span> variables<span class="token punctuation">]</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typedef" tabindex="-1"><a class="header-anchor" href="#typedef" aria-hidden="true">#</a> Typedef</h2><blockquote><p>C 语言提供了 <strong>typedef</strong> 关键字，您可以使用它来为类型取一个新的名字</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
 
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Books</span>
<span class="token punctuation">{</span>
   <span class="token keyword">char</span>  title<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span>  author<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span>  subject<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span>   book_id<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Book<span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   Book book<span class="token punctuation">;</span>
 
   <span class="token function">strcpy</span><span class="token punctuation">(</span> book<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">&quot;C Programming&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">strcpy</span><span class="token punctuation">(</span> book<span class="token punctuation">.</span>author<span class="token punctuation">,</span> <span class="token string">&quot;Nuha Ali&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
   <span class="token function">strcpy</span><span class="token punctuation">(</span> book<span class="token punctuation">.</span>subject<span class="token punctuation">,</span> <span class="token string">&quot;C Programming Tutorial&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   book<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">6495407</span><span class="token punctuation">;</span>
 
   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Book title : %s\\n&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Book author : %s\\n&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Book subject : %s\\n&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Book book_id : %d\\n&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>book_id<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>#define</strong> 是 C 指令，用于为各种数据类型定义别名，与 <strong>typedef</strong> 类似，但是它们有以下几点不同：</p><ul><li><strong>typedef</strong> 仅限于为类型定义符号名称，<strong>#define</strong> 不仅可以为类型定义别名，也能为数值定义别名，比如您可以定义 1 为 ONE。</li><li><strong>typedef</strong> 是由编译器执行解释的，<strong>#define</strong> 语句是由预编译器进行处理的。</li></ul><h2 id="文件读取" tabindex="-1"><a class="header-anchor" href="#文件读取" aria-hidden="true">#</a> 文件读取</h2><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>#include &lt;stdio.h&gt;
int main()
{
    FILE *fp;
    // 写操作
    fp = fopen(&quot;./file/file.txt&quot;, &quot;w+&quot;);
    fprintf(fp, &quot;This is testing for fprintf...\\n&quot;);
    fputs(&quot;This is testing for fputs...\\n&quot;, fp);
    fclose(fp);
    // 读操作
    char buff[255];
    fp = fopen(&quot;./file/file.txt&quot;, &quot;r&quot;);
    fscanf(fp, &quot;%s&quot;, buff); // 写入的时候和平常没有区别，还是只有字符串变量前不加‘&amp;’，其他int、double等类型前都要加‘&amp;’符号
    printf(&quot;1: %s\\n&quot;, buff);
    fgets(buff, 255, (FILE *)fp); // scanf遇到空格就会断开，gets会读取空格，遇到换行就结束
    printf(&quot;2: %s\\n&quot;, buff);      // 255是限制最大读取内容长度
    fgets(buff, 255, (FILE *)fp);
    printf(&quot;3: %s\\n&quot;, buff);
    fclose(fp);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="预处理器" tabindex="-1"><a class="header-anchor" href="#预处理器" aria-hidden="true">#</a> 预处理器</h2><blockquote><p><strong>C 预处理器</strong>不是编译器的组成部分，但是它是编译过程中一个单独的步骤。简言之，C 预处理器只不过是一个文本替换工具而已，它们会指示编译器在实际编译之前完成所需的预处理。我们将把 C 预处理器（C Preprocessor）简写为 CPP</p></blockquote><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">宏指令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">#define</td><td style="text-align:left;">定义宏</td></tr><tr><td style="text-align:left;">#include</td><td style="text-align:left;">包含一个源代码文件</td></tr><tr><td style="text-align:left;">#undef</td><td style="text-align:left;">取消已定义的宏</td></tr><tr><td style="text-align:left;">#ifdef</td><td style="text-align:left;">如果宏已经定义，则返回真</td></tr><tr><td style="text-align:left;">#ifndef</td><td style="text-align:left;">如果宏没有定义，则返回真</td></tr><tr><td style="text-align:left;">#if</td><td style="text-align:left;">如果给定条件为真，则编译下面代码</td></tr><tr><td style="text-align:left;">#else</td><td style="text-align:left;">#if 的替代方案</td></tr><tr><td style="text-align:left;">#elif</td><td style="text-align:left;">如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码</td></tr><tr><td style="text-align:left;">#endif</td><td style="text-align:left;">结束一个 #if……#else 条件编译块</td></tr><tr><td style="text-align:left;">#error</td><td style="text-align:left;">当遇到标准错误时，输出错误消息</td></tr><tr><td style="text-align:left;">#pragma</td><td style="text-align:left;">使用标准化方法，向编译器发布特殊的命令到编译器中</td></tr></tbody></table></div><p>ANSI C 定义了许多宏。在编程中可以使用这些宏，但是不能直接修改这些预定义的宏</p><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">宏</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>DATE</strong></td><td style="text-align:left;">当前日期，一个以 &quot;MMM DD YYYY&quot; 格式表示的字符常量。</td></tr><tr><td style="text-align:left;"><strong>TIME</strong></td><td style="text-align:left;">当前时间，一个以 &quot;HH:MM:SS&quot; 格式表示的字符常量。</td></tr><tr><td style="text-align:left;"><strong>FILE</strong></td><td style="text-align:left;">这会包含当前文件名，一个字符串常量。</td></tr><tr><td style="text-align:left;"><strong>LINE</strong></td><td style="text-align:left;">这会包含当前行号，一个十进制常量。</td></tr><tr><td style="text-align:left;"><strong>STDC</strong></td><td style="text-align:left;">当编译器以 ANSI 标准编译时，则定义为 1。</td></tr></tbody></table></div><h2 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理" aria-hidden="true">#</a> 错误处理</h2><blockquote><p>C 语言不提供对错误处理的直接支持，但是作为一种系统编程语言，它以返回值的形式允许您访问底层数据。在发生错误时，大多数的 C 或 UNIX 函数调用返回 1 或 NULL，同时会设置一个错误代码 errno，该错误代码是全局变量，表示在函数调用期间发生了错误。您可以在 &lt;error.h&gt; 头文件中找到各种各样的错误代码。</p><p>所以，C 程序员可以通过检查返回值，然后根据返回值决定采取哪种适当的动作。开发人员应该在程序初始化时，把 errno 设置为 0，这是一种良好的编程习惯。0 值表示程序中没有错误。</p></blockquote><p>C 语言提供了 <strong>perror()</strong> 和 <strong>strerror()</strong> 函数来显示与 <strong>errno</strong> 相关的文本消息。</p><ul><li><strong>perror()</strong> 函数显示您传给它的字符串，后跟一个冒号、一个空格和当前 errno 值的文本表示形式。</li><li><strong>strerror()</strong> 函数，返回一个指针，指针指向当前 errno 值的文本表示形式。</li></ul><h2 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理" aria-hidden="true">#</a> 内存管理</h2><blockquote><p>C 语言为内存的分配和管理提供了几个函数。这些函数可以在 <strong>&lt;stdlib.h&gt;</strong> 头文件中找到</p></blockquote><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>void *calloc(int num, int size);</strong></td><td style="text-align:left;">该函数分配一个带有 function allocates an array of <strong>num</strong> 个元素的数组，每个元素的大小为 <strong>size</strong> 字节。</td></tr><tr><td style="text-align:left;"><strong>void free(void *address);</strong></td><td style="text-align:left;">该函数释放 address 所指向的h内存块</td></tr><tr><td style="text-align:left;"><strong>void *malloc(int num);</strong></td><td style="text-align:left;">该函数分配一个 <strong>num</strong> 字节的数组，并把它们进行初始化</td></tr><tr><td style="text-align:left;"><strong>void *realloc(void *address, int newsize);</strong></td><td style="text-align:left;">该函数重新分配内存，把内存扩展到 <strong>newsize</strong></td></tr></tbody></table></div><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><h3 id="作用域规则" tabindex="-1"><a class="header-anchor" href="#作用域规则" aria-hidden="true">#</a> 作用域规则</h3><p>任何一种编程中，作用域是程序中定义的变量所存在的区域，超过该区域变量就不能被访问。C 语言中有三个地方可以声明变量：</p><ol><li>在函数或块内部的局部变量</li><li>在所有函数外部的全局变量</li><li>在形式参数的函数参数定义中</li></ol><h3 id="位域" tabindex="-1"><a class="header-anchor" href="#位域" aria-hidden="true">#</a> 位域</h3><p>有些信息在存储时，并不需要占用一个完整的字节，而只需占几个或一个二进制位。例如在存放一个开关量时，只有 0 和 1 两种状态，用 1 位二进位即可。为了节省存储空间，并使处理简便，C 语言又提供了一种数据结构，称为&quot;位域&quot;或&quot;位段&quot;</p><p>所谓&quot;位域&quot;是把一个字节中的二进位划分为几个不同的区域，并说明每个区域的位数。每个域有一个域名，允许在程序中按域名进行操作。这样就可以把几个不同的对象用一个字节的二进制位域来表示</p><p>典型的实例：</p><ul><li>用 1 位二进位存放一个开关量时，只有 0 和 1 两种状态。</li><li>读取外部文件格式——可以读取非标准的文件格式。例如：9 位的整数。</li></ul><p>位域与结构体相仿</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">bs</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c<span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意点：</p><ol><li>一个位域必须存储在同一个字节中，不能跨两个字节。如一个字节所剩空间不够存放另一位域时，应从下一单元起存放该位域。也可以有意使某位域从下一单元开始</li><li>由于位域不允许跨两个字节，因此位域的长度不能大于一个字节的长度，也就是说不能超过8位二进位。如果最大长度大于计算机的整数字长，一些编译器可能会允许域的内存重叠，另外一些编译器可能会把大于一个域的部分存储在下一个字中</li><li>位域可以是无名位域，这时它只用来作填充或调整位置。无名的位域是不能使用的</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">bs</span><span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> a<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span>  <span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">/* 空域 */</span>
    <span class="token keyword">unsigned</span> b<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">/* 从下一单元开始存放 */</span>
    <span class="token keyword">unsigned</span> c<span class="token operator">:</span><span class="token number">4</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量" aria-hidden="true">#</a> 局部变量</h3><p>C 不支持在函数外返回局部变量的地址，除非定义局部变量为 <strong>static</strong> 变量</p><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h3><blockquote><p>略</p></blockquote><h3 id="其他-1" tabindex="-1"><a class="header-anchor" href="#其他-1" aria-hidden="true">#</a> 其他</h3><ol><li>头文件</li><li>强制类型转换</li><li>可变参数</li><li>命令行参数</li></ol>`,56);function Q(R,Z){const t=p("router-link"),l=p("ExternalLinkIcon");return c(),u("div",null,[r,n("nav",k,[n("ul",null,[n("li",null,[a(t,{to:"#c-基础"},{default:e(()=>[s("C 基础")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#类型"},{default:e(()=>[s("类型")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#整数类型"},{default:e(()=>[s("整数类型")]),_:1})]),n("li",null,[a(t,{to:"#浮点类型"},{default:e(()=>[s("浮点类型")]),_:1})]),n("li",null,[a(t,{to:"#void-类型"},{default:e(()=>[s("void 类型")]),_:1})]),n("li",null,[a(t,{to:"#变量"},{default:e(()=>[s("变量")]),_:1})]),n("li",null,[a(t,{to:"#常量"},{default:e(()=>[s("常量")]),_:1})]),n("li",null,[a(t,{to:"#存储类"},{default:e(()=>[s("存储类")]),_:1})])])]),n("li",null,[a(t,{to:"#流程控制"},{default:e(()=>[s("流程控制")]),_:1})]),n("li",null,[a(t,{to:"#函数"},{default:e(()=>[s("函数")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#数组"},{default:e(()=>[s("数组")]),_:1})])])]),n("li",null,[a(t,{to:"#指针"},{default:e(()=>[s("指针")]),_:1})]),n("li",null,[a(t,{to:"#字符串"},{default:e(()=>[s("字符串")]),_:1})]),n("li",null,[a(t,{to:"#结构体"},{default:e(()=>[s("结构体")]),_:1})]),n("li",null,[a(t,{to:"#共用体"},{default:e(()=>[s("共用体")]),_:1})]),n("li",null,[a(t,{to:"#typedef"},{default:e(()=>[s("Typedef")]),_:1})]),n("li",null,[a(t,{to:"#文件读取"},{default:e(()=>[s("文件读取")]),_:1})]),n("li",null,[a(t,{to:"#预处理器"},{default:e(()=>[s("预处理器")]),_:1})]),n("li",null,[a(t,{to:"#错误处理"},{default:e(()=>[s("错误处理")]),_:1})]),n("li",null,[a(t,{to:"#内存管理"},{default:e(()=>[s("内存管理")]),_:1})]),n("li",null,[a(t,{to:"#其他"},{default:e(()=>[s("其他")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#作用域规则"},{default:e(()=>[s("作用域规则")]),_:1})]),n("li",null,[a(t,{to:"#位域"},{default:e(()=>[s("位域")]),_:1})]),n("li",null,[a(t,{to:"#局部变量"},{default:e(()=>[s("局部变量")]),_:1})]),n("li",null,[a(t,{to:"#运算符"},{default:e(()=>[s("运算符")]),_:1})]),n("li",null,[a(t,{to:"#其他-1"},{default:e(()=>[s("其他")]),_:1})])])])])])])]),v,n("div",m,[n("table",null,[b,n("tbody",null,[n("tr",null,[n("td",f,[n("a",g,[s("多维数组"),a(l)])]),h]),n("tr",null,[n("td",y,[n("a",x,[s("传递数组给函数"),a(l)])]),w]),n("tr",null,[n("td",_,[n("a",q,[s("从函数返回数组"),a(l)])]),B]),n("tr",null,[n("td",C,[n("a",E,[s("指向数组的指针"),a(l)])]),N])])])]),L,n("div",j,[n("table",null,[T,n("tbody",null,[n("tr",null,[n("td",I,[n("a",A,[s("指针的算术运算"),a(l)])]),H]),n("tr",null,[n("td",z,[n("a",W,[s("指针数组"),a(l)])]),D]),n("tr",null,[n("td",F,[n("a",M,[s("指向指针的指针"),a(l)])]),S]),n("tr",null,[n("td",P,[n("a",U,[s("传递指针给函数"),a(l)])]),V]),n("tr",null,[n("td",G,[n("a",Y,[s("从函数返回指针"),a(l)])]),X])])])]),O])}const K=i(d,[["render",Q],["__file","A-C基础.html.vue"]]);export{K as default};
