import{_ as i,Q as t,S as l,U as e,a8 as n,W as s,a9 as o,H as r}from"./framework-d7e1aa10.js";const p={},c=e("h1",{id:"kafaka",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#kafaka","aria-hidden":"true"},"#"),n(" Kafaka")],-1),d=e("blockquote",null,[e("p",null,"使用 Scala 编写")],-1),m={class:"hint-container info"},u=e("p",{class:"hint-container-title"},"相关资源",-1),k={href:"https://kafka.apache.org/documentation/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.bilibili.com/video/BV1h94y1Q7Xg?p=7&spm_id_from=pageDriver&vd_source=e356fec025b50061af78324a814f8da0",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.bilibili.com/video/BV1vr4y1677k?p=11&vd_source=e356fec025b50061af78324a814f8da0",target:"_blank",rel:"noopener noreferrer"},h=o(`<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//kafaka/20230731/kafaka架构.png" alt="image-20230731192719833" tabindex="0" loading="lazy"><figcaption>image-20230731192719833</figcaption></figure><p><strong>相关概念：</strong></p><ol><li>Producer：生产者即数据的发布者，该角色将消息发布到 Kafka 的 topic 中。broker 接收到生产者发送的消息后，broker将该消息追加到当前用于追加数据的 segment 文件中。生产者发送的消息，存储到一个 partition 中，生产者也可以指定数据存储的 partition</li><li>Consumer：消费者可以从broker中读取数据，消费者可以消费多个topic中的数据</li><li>Topic：在Kafka中，使用一个类别属性来划分数据的所属类，划分数据的这个类称为 topic。如果把 Kafka 看做为一个数据库，topic可以理解为数据库中的一张表，topic 的名字即为表名</li><li>Partition：topic 中的数据分割为一个或多个 partition。每个 topic 至少有一个 partition。每个 partition 中的数据使用多个 segment 文件存储。partition中的数据是有序的，partition 间的数据丢失了数据的顺序。如果 topic 有多个 partition，消费数据时就不能保证数据的顺序。在需要严格保证消息的消费顺序的场景下，需要将 partition 数目设为 1</li><li>Partition offset：每条消息都有一个当前 Partition 下唯一的 64 字节的 offset，它指明了这条消息的起始位置</li><li>Replicas of partition：副本是一个分区的备份。副本不会被消费者消费，副本只用于防止数据丢失，即消费者不从为 follower 的 partition 中消费数据，而是从为 leader 的 partition 中读取数据。副本之间是一主多从的关系</li><li>Leader：每个 partition 有多个副本，其中有且仅有一个作为 Leader，Leader 是当前负责数据的读写的 partition</li><li>Follower：Follower 跟随 Leader，所有写请求都通过 Leader 路由，数据变更会广播给所有 Follower，Follower 与 Leader 保持数据同步。如果Leader失效，则从 Follower 中选举出一个新的 Leader，当 Follower 与 Leader 挂掉、卡住或者同步太慢，leader 会把这个 follower，从 &quot;in sync replicas&quot; （ISR）列表中则除，重新创建一个Follower</li><li>Zookeeper：Zookeeper 负责维护和协调 broker。当 Kafka 系统中新增了 broker 或者某个 broker 发生故障失效时，由 ZooKeeper 通知生产者和消费者。生产者和消费者依据 Zookeeper 的 broker 状态信息与 broker 协调数据的发布和订阅任务。</li><li>AR（Assigned Replicas）：分区中的所有的副本</li><li>ISR（In-Sync Replicas）：所有与 Leader 部分保持一定程度的副本组成 ISR（包括 Leader 副本在内）</li><li>OSR（Out-of-Sync-Replicas）：与 Leader 副本同步滞后过多的副本</li><li>HW（High Watermark）：高水位，标识了一个特定的 offset，消费者只能拉取到这个 offset 之前的消息</li><li>LEO（Log End Offset）：即日志未端位移（log end offset），记录了该副本底层日志中下一条消息的位移值，注意是下一条消息！也就是 说，如果 LEO = 10，那么表示该副本保存了 10 条消息，位移值范围是 [0,9]</li></ol><p><strong>Kafaka 特点：</strong></p><ol><li>多副本提交日志</li><li>分布式</li><li>分区</li><li>流式处理平台</li><li>发布订阅</li></ol><p><strong>优势：</strong></p><ol><li>吞吐量高</li><li>伸缩性好</li><li>容错性和可靠性高</li><li>与大数据生态紧密结合，可以无缝对接 hadoop、strom、spark 等</li></ol><p><strong>发行版本：</strong></p><ol><li>Confluent Platform</li><li>Cloudera Kafaka</li><li>Hortonworks Kafaka</li></ol><p><strong>相关的消息模型/协议：</strong></p><ol><li>JMS 规范（限于 Java）</li><li>AMQP 协议（例如 RabbitMQ）</li><li>MQTT</li></ol><h2 id="主题" tabindex="-1"><a class="header-anchor" href="#主题" aria-hidden="true">#</a> 主题</h2><p><strong>主题 Topic：</strong></p><p>数据存储在 Topic 中，Topic 类似数据库中的表</p><p>通常将同一类型的数据存储到同一个 Topic 中</p><p>Topic 半结构化</p><h2 id="分区" tabindex="-1"><a class="header-anchor" href="#分区" aria-hidden="true">#</a> 分区</h2><p>Topic 中可以包含多个分区 Partition</p><p>不同的分区在不同的服务器上</p><p>分区是一个线性增长的不可变的提交日志，数据存储到分区后就不可变更</p><p>分区中每一条数据都有一个对应的 offset，kafaka 可以通过 offet 提取出数据，但是无法对消息的内容进行检索或者查询</p><p>同一分区中偏移量不可重复且是递增的，不同分区之间偏移量可以重复</p><p>可以通过 <code>replication-factor</code> 来设置分区副本的数量</p><p>分区集群有一个 leader 和若干个 follower</p><p>所有数据的读写都是由 leader 进行，follower 只负责复制，保证数据的一致性</p><p><code>ISR</code> 列表中保存同步的节点，当节点数据落后到一定程度就会从该队列中剔除，直到该节点追赶上其他节点，此时再重新加入</p><h2 id="记录" tabindex="-1"><a class="header-anchor" href="#记录" aria-hidden="true">#</a> 记录</h2><p>消息记录 Record 以键值对形式存储，不指定 key 时为空</p><p>当 key 为空时发送消息，kafaka 会以轮询的方式将消息发送到不同的分区中</p><p>如果 key 存在，那么相同 key 的消息会被写到同一个分区中</p><h2 id="消息代理" tabindex="-1"><a class="header-anchor" href="#消息代理" aria-hidden="true">#</a> 消息代理</h2><p>Kafaka 集群由多个消息代理 Broker 组成</p><p>Broker 负责消息的读写请求，并将数据写入到磁盘中</p><h2 id="集群搭建" tabindex="-1"><a class="header-anchor" href="#集群搭建" aria-hidden="true">#</a> 集群搭建</h2><p>Kafaka 目录包括：bin config libs LICENSE licenses NOTICE site-docs</p><p>Kafaka 依赖 Zookeeper，执行下面的命令进行配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在 kafaka 根目录执行</span>
<span class="token function">mkdir</span> etc
<span class="token function">cp</span> config/zookeeper.properties etc/
<span class="token builtin class-name">cd</span> etc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Zookeeper 配置如下：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span>
<span class="token comment"># contributor license agreements.  See the NOTICE file distributed with</span>
<span class="token comment"># this work for additional information regarding copyright ownership.</span>
<span class="token comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span>
<span class="token comment"># (the &quot;License&quot;); you may not use this file except in compliance with</span>
<span class="token comment"># the License.  You may obtain a copy of the License at</span>
<span class="token comment"># </span>
<span class="token comment">#    http://www.apache.org/licenses/LICENSE-2.0</span>
<span class="token comment"># </span>
<span class="token comment"># Unless required by applicable law or agreed to in writing, software</span>
<span class="token comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
<span class="token comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<span class="token comment"># See the License for the specific language governing permissions and</span>
<span class="token comment"># limitations under the License.</span>
<span class="token comment"># the directory where the snapshot is stored.</span>
<span class="token key attr-name">dataDir</span><span class="token punctuation">=</span><span class="token value attr-value">/tmp/zookeeper</span>
<span class="token comment"># the port at which the clients will connect</span>
<span class="token key attr-name">clientPort</span><span class="token punctuation">=</span><span class="token value attr-value">2181</span>
<span class="token comment"># disable the per-ip limit on the number of connections since this is a non-production config</span>
<span class="token key attr-name">maxClientCnxns</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>
<span class="token comment"># Disable the adminserver by default to avoid port conflicts.</span>
<span class="token comment"># Set the port to something non-conflicting if choosing to enable this</span>
<span class="token key attr-name">admin.enableServer</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
<span class="token comment"># admin.serverPort=8080</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面搭建三个节点的伪分布式集群：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在 kafaka 根目录执行</span>
<span class="token comment"># 复制 Broker 配置文件，需要复制三份</span>
<span class="token function">cp</span> config/server.properties etc/server-0.properties
<span class="token function">cp</span> config/server.properties etc/server-1.properties
<span class="token function">cp</span> config/server.properties etc/server-2.properties
<span class="token builtin class-name">cd</span> etc

<span class="token comment"># 更改 server.properties 配置，主要修改下面几个参数：</span>
<span class="token assign-left variable">broker.id</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token assign-left variable">listeners</span><span class="token operator">=</span>PLAINTEXT://:9092
<span class="token assign-left variable">log.dirs</span><span class="token operator">=</span>/tmp/kafka-logs

<span class="token comment"># 修改完成后就可以启动，首先启动 Zookeeper</span>
<span class="token comment"># 启动脚本全部放在 bin 目录下</span>
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/bin
<span class="token function">nohup</span> ./zookeeper-server-start.sh <span class="token punctuation">..</span>/etc/zookeeper.properties <span class="token operator">&amp;</span>

<span class="token comment"># 启动 kafaka 实例</span>
<span class="token function">nohup</span> ./kafka-server-start.sh <span class="token punctuation">..</span>/etc/server-0.properties <span class="token operator">&amp;</span>
<span class="token function">nohup</span> ./kafka-server-start.sh <span class="token punctuation">..</span>/etc/server-1.properties <span class="token operator">&amp;</span>
<span class="token function">nohup</span> ./kafka-server-start.sh <span class="token punctuation">..</span>/etc/server-2.properties <span class="token operator">&amp;</span>

<span class="token comment"># 查看主题启动参数</span>
./kafka-topics.sh
<span class="token comment"># 创建主题，主题名称 test，分区数 3，副本数 2</span>
./kafka-topics.sh <span class="token parameter variable">--zookeeper</span> localhost:2181 <span class="token parameter variable">--create</span> <span class="token parameter variable">--topic</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">--partitions</span> <span class="token number">3</span> --replication-factor <span class="token number">2</span>

<span class="token comment"># 查看分区状态</span>
./kafka-topics.sh <span class="token parameter variable">--zookeeper</span> localhost:2181 <span class="token parameter variable">--describe</span> <span class="token parameter variable">--topic</span> <span class="token builtin class-name">test</span>
Topic: <span class="token builtin class-name">test</span>	TopicId: AT0BOovLTkyBHJ0B1LkGCQ	PartitionCount: <span class="token number">3</span>	ReplicationFactor: <span class="token number">2</span>	Configs: 
	Topic: <span class="token builtin class-name">test</span>	Partition: <span class="token number">0</span>	Leader: <span class="token number">0</span>	Replicas: <span class="token number">0,2</span>	Isr: <span class="token number">0,2</span>
	Topic: <span class="token builtin class-name">test</span>	Partition: <span class="token number">1</span>	Leader: <span class="token number">1</span>	Replicas: <span class="token number">1,0</span>	Isr: <span class="token number">1,0</span>
	Topic: <span class="token builtin class-name">test</span>	Partition: <span class="token number">2</span>	Leader: <span class="token number">2</span>	Replicas: <span class="token number">2,1</span>	Isr: <span class="token number">2,1</span>
	
<span class="token comment"># 生产者消费者测试</span>
<span class="token comment"># 启动消费者</span>
./kafka-console-consumer.sh --bootstrap-server localhost:9092,localhost:9093,localhost:9094 <span class="token parameter variable">--topic</span> <span class="token builtin class-name">test</span>
<span class="token comment"># 启动生产者</span>
./kafka-console-producer.sh --broker-list localhost:9092,localhost:9093,localhost:9094 <span class="token parameter variable">--topic</span> <span class="token builtin class-name">test</span>
<span class="token comment"># 启动成功后就可以进行消息的发送和接收</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="监听器" tabindex="-1"><a class="header-anchor" href="#监听器" aria-hidden="true">#</a> 监听器</h2><p>listeners：指定 broker 启动时本机的监听名称和端口，给服务端使用</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 有四种指定方式</span>
<span class="token key attr-name">listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://:9092</span>
<span class="token key attr-name">listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://hostname:9092</span>
<span class="token key attr-name">listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://0.0.0.0:9092</span>
<span class="token key attr-name">listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://192.168.1.10:9092</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>advertised.listeners 对外发布的访问 IP 和端口，注册到 Zookeeper 中，给客户端使用s</p><h2 id="消息模型" tabindex="-1"><a class="header-anchor" href="#消息模型" aria-hidden="true">#</a> 消息模型</h2><ol><li>点对点</li><li>发布订阅</li><li>分区与消息顺序</li><li>消息传递语义（需要生产者和消费者共同保证）： <ol><li>至少一次：消息可能会丢失，永远不会重复发送</li><li>最多一次：消息不会丢失，但是可能会重复</li><li>精确一次：保证消息被传递到的服务端且服务端不重复</li></ol></li></ol><p>分区是最小的并行单位</p><p>一个消费者可以消费多个分区</p><p>一个分区可以被多个消费者组中的消费者消费，但是不能同时被同一个消费者组中的多个消费者消费</p><p>发布订阅模式中</p><p>每个消费者都属于同一个消费者组中</p><p>点对点模式中</p><p>全部消费者放在同一个组中</p><p>分区与消息顺序</p><ol><li>同一个生产者发送到同一个分区的消息，先发送的 offet 比后发送的 offset 小</li><li>同一个生产者发送到不同分区的消息，消息顺序是无法保证的</li></ol><p>分区与消费顺序</p><ol><li>消费者按照消息在分区中存放的顺序进行消费</li><li>Kafaka 只保证分区内的消息顺序，不能保证分区间的消息顺序</li></ol><p>如果想要保证所有消息都有顺序，那么可以设置一个分区，但是这样就失去了扩展性和性能</p><p>通过设置消息的 key，相同的 key 的消息会发送到同一个分区，这样也可以保证同一个类型的消息的顺序</p><h2 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化" aria-hidden="true">#</a> 序列化</h2><p>序列化可以使用：</p><ol><li>Avro：Hadoop、Hive 支持好，一般自定义序列化也使用 Avro</li><li>Protobuf</li></ol>`,63);function f(g,L){const a=r("ExternalLinkIcon");return t(),l("div",null,[c,d,e("div",m,[u,e("p",null,[e("a",k,[n("Kafaka 官网"),s(a)])]),e("p",null,[e("a",v,[n("kafka一小时入门精讲课程（高清重制无废话版）"),s(a)])]),e("p",null,[e("a",b,[n("Kafka3.x教程（从入门到调优，深入全面）"),s(a)])])]),h])}const T=i(p,[["render",f],["__file","index.html.vue"]]);export{T as default};
