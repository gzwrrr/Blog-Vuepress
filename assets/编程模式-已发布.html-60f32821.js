import{_ as r,Q as n,S as d,U as e,W as i,X as t,a8 as l,a9 as h,H as o}from"./framework-d7e1aa10.js";const s={},u=e("h1",{id:"编程模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#编程模式","aria-hidden":"true"},"#"),l(" 编程模式")],-1),c={class:"table-of-contents"},_=h('<h1 id="写在前面" tabindex="-1"><a class="header-anchor" href="#写在前面" aria-hidden="true">#</a> 写在前面</h1><ul><li>无论哪种编程模式，都有其使用的场景，不存在优劣之分，也没有哪一种是银弹</li><li>在不同场景下选用不同的模式可以为所编写的代码带来更好的可读性或降低出错的概率</li><li>编程模式大致分为四种：命令式、声明式、过程式、函数式</li></ul><br><h1 id="命令式" tabindex="-1"><a class="header-anchor" href="#命令式" aria-hidden="true">#</a> 命令式</h1><ul><li>关注/强调实现的细节，即关注 How 而不是 What</li><li>可以理解为面向过程编程</li></ul><br><h1 id="声明式" tabindex="-1"><a class="header-anchor" href="#声明式" aria-hidden="true">#</a> 声明式</h1><ul><li>关注/强调结果而不是细节，即关注 What 而不是 How</li><li>SQL 语句就是典型的声明式编程</li></ul><br><h1 id="过程式" tabindex="-1"><a class="header-anchor" href="#过程式" aria-hidden="true">#</a> 过程式</h1><ul><li>用一系列的流程完成任务</li><li>无返回值，但是会产生副作用（副作用可以理解为：改变入参的内部状态）</li></ul><br><h1 id="函数式" tabindex="-1"><a class="header-anchor" href="#函数式" aria-hidden="true">#</a> 函数式</h1><ul><li>用一系列的函数完成任务</li><li>有返回值，但是没有副作用，即入参决定出参，无论调用多少次，只要入参相同，出参也一定相同</li><li>函数式编程中，函数还可以作为入参</li></ul><br><br>',16);function f(b,x){const a=o("router-link");return n(),d("div",null,[u,e("nav",c,[e("ul",null,[e("li",null,[i(a,{to:"#编程模式"},{default:t(()=>[l("编程模式")]),_:1})]),e("li",null,[i(a,{to:"#写在前面"},{default:t(()=>[l("写在前面")]),_:1})]),e("li",null,[i(a,{to:"#命令式"},{default:t(()=>[l("命令式")]),_:1})]),e("li",null,[i(a,{to:"#声明式"},{default:t(()=>[l("声明式")]),_:1})]),e("li",null,[i(a,{to:"#过程式"},{default:t(()=>[l("过程式")]),_:1})]),e("li",null,[i(a,{to:"#函数式"},{default:t(()=>[l("函数式")]),_:1})])])]),_])}const p=r(s,[["render",f],["__file","编程模式-已发布.html.vue"]]);export{p as default};
