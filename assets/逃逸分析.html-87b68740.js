import{_ as t,Q as p,S as e,U as n,W as c,X as l,a8 as s,a9 as o,H as i}from"./framework-d7e1aa10.js";const u={},k=n("h1",{id:"逃逸分析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#逃逸分析","aria-hidden":"true"},"#"),s(" 逃逸分析")],-1),r={class:"table-of-contents"},d=o(`<p>变量的作用域：</p><ul><li>全局变量：会发生逃逸</li><li>局部变量：不一定会逃逸</li></ul><p>逃逸分析是为了做优化：</p><ul><li>栈上分配</li><li>标量替换</li><li>锁消除</li></ul><p>因某些不可抗力...需要提高项目某些接口的响应速度</p><p>接口方法是使用 Java 本地调用 Python 编写的 HTTP 服务，由于算法跟图有关，所以比较耗时</p><p>因为原本不是我写的，而且我也比较菜，不知道如何进行适当的修改与验证，所以来请教各位大佬</p><p>疑问大致如下（先抛出问题...代码在下面）：</p><ul><li><p>可以直接去掉锁吗？（线程安全吗？）</p><ul><li>如果能，意味着第二次检查缓存也会去掉，而又因为方法最后的请求很耗时，去掉后会比加锁前更慢吗？</li><li>如果能，JIT 会直接锁消除吗？除了逃逸分析还有什么直观的方式查看锁消除？</li><li>如果不能，该如何减小锁的粒度？或者能改用其他锁吗？</li></ul></li><li><p>还有什么优化方向？目前能想到的有：</p><ul><li>SQL / 索引优化</li><li>耗时的请求从 HTTP 改为 RPC（不知道是否能提高）</li><li>数据压缩传输（尚具体无方案）</li></ul></li></ul><p>原本的业务代码逻辑大致如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Map</span> <span class="token function">methodOne</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// ... 此处执行某些线程安全的操作，局部变量不会逃逸</span>

            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> resMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// ... 此处执行某些线程安全的操作，局部变量不会逃逸</span>

            <span class="token comment">// 发送一个耗时的 HTTP 请求并将结果放入 resMap 中</span>
            
           	redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>resMap<span class="token punctuation">)</span><span class="token punctuation">)</span>
           	
            <span class="token comment">// 只有 resMap 逃逸了，但是返回后不会被修改，只会被读取</span>
            <span class="token keyword">return</span> resMap<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function v(m,b){const a=i("router-link");return p(),e("div",null,[k,n("nav",r,[n("ul",null,[n("li",null,[c(a,{to:"#逃逸分析"},{default:l(()=>[s("逃逸分析")]),_:1})])])]),d])}const f=t(u,[["render",v],["__file","逃逸分析.html.vue"]]);export{f as default};
