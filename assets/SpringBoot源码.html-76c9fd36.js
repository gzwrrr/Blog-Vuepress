import{_ as n,Q as s,S as a,a9 as t}from"./framework-d7e1aa10.js";const p={},o=t(`<h1 id="spring-boot-源码" tabindex="-1"><a class="header-anchor" href="#spring-boot-源码" aria-hidden="true">#</a> Spring Boot 源码</h1><p><strong>spring-boot-project 包含模块：</strong></p><ol><li>spring-boot（核心）：核心实现，大概 4 万行代码</li><li>spring-boot-autoconfigure（核心）：可以根据类路径内容自动配置大部分常用的程序，大概 4 万行代码</li><li>spring-boot-actuator：监控和管理生产环境的模块，暴露自身应用信息，大概 2 W 行代码</li><li>spring-boot-actuator-autoconfigure：spring-boot-actuator 的自动配置功能，可以不看</li><li>spring-boot-starters：启动模块，只包含 Pom.xml 文件，可以不看</li><li>spring-boot-cli：提供命令行功能，可以运行 Groovy 脚本，可以不看</li><li>spring-boot-dependencies：依赖管理，可以不看</li><li>spring-boot-devtools：热部署，可以不看</li><li>spring-boot-test：提供测试方面的支持，可以不看</li><li>spring-boot-test-autoconfigure：spring-boot-test 的自动配置功能，可以不看</li><li>spring-boot-parent：其他项目的 parent，该模块的父模块是 spring-boot-dependencies，可以不看</li><li>spring-boot-tools：略</li><li>spring-boot-docs：略</li><li>spring-boot-properties-migrator：略</li></ol><h2 id="jar-启动原理" tabindex="-1"><a class="header-anchor" href="#jar-启动原理" aria-hidden="true">#</a> jar 启动原理</h2><p>jar 包中包含四大模块：</p><ol><li>META-INF：<code>MANIFEST.MF</code> 文件提供了 <code>jar</code> 包的元数据，其中声明了 jar 包的启动类</li><li>org：spring-boot-loader 模块，是 Spring Boot 启动的关键，解决了 jar 包嵌套的问题</li><li>BOOT-INF/lib：项目中引入的依赖</li><li>BOOT-INF/classes：项目源文件（.class 文件、配置文件）</li></ol><h3 id="manifest-mf" tabindex="-1"><a class="header-anchor" href="#manifest-mf" aria-hidden="true">#</a> MANIFEST.MF</h3><blockquote><p>下面是 Halo 项目的 jar 包中 MANIFEST.MF 的内容</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 版本</span>
Manifest-Version: <span class="token number">1.0</span>
<span class="token comment"># 引用名称</span>
Implementation-Title: Halo Application
Implementation-Version: <span class="token number">1.5</span>.4
<span class="token comment"># 加载类，由 spring-boot-maven-plugin 插件写入该信息</span>
Main-Class: org.springframework.boot.loader.JarLauncher
<span class="token comment"># 项目启动类</span>
Start-Class: run.halo.app.Application
Spring-Boot-Version: <span class="token number">2.5</span>.12
<span class="token comment"># 项目源文件（.class 和配置文件）</span>
Spring-Boot-Classes: BOOT-INF/classes/
<span class="token comment"># 项目依赖</span>
Spring-Boot-Lib: BOOT-INF/lib/
<span class="token comment"># 项目依赖索引</span>
Spring-Boot-Classpath-Index: BOOT-INF/classpath.idx
<span class="token comment"># 项目层次结构索引</span>
Spring-Boot-Layers-Index: BOOT-INF/layers.idx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 三大核心如下</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">launch</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 注册 URL 协议的处理器</span>
    <span class="token comment">// 处理器的作用：处理 jar: 协议的 URL 的资源读取，后续读取每个 Archive 里的内容</span>
    <span class="token class-name">JarFile</span><span class="token punctuation">.</span><span class="token function">registerUrlProtocolHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 类加载器：LaunchedURLClassLoader</span>
    <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token function">createClassLoader</span><span class="token punctuation">(</span><span class="token function">getClassPathArchives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行 Start-Class 指定的启动类</span>
    <span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token function">getMainClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 上面类加载部分的 createClassLoader 方法如下</span>
<span class="token comment">// Archive 对象是项目档案的抽象</span>
<span class="token comment">// BOOT-INF/classes/ 目录被归类为「一个」 Archive 对象</span>
<span class="token comment">// BOOT-INF/lib/ 目录下的「每个」内嵌 jar 包都对应一个 Archive 对象</span>
<span class="token comment">// 也就是将所有需要的文件「平铺开来」</span>
<span class="token keyword">protected</span> <span class="token class-name">ClassLoader</span> <span class="token function">createClassLoader</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Archive</span><span class="token punctuation">&gt;</span></span> archives<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">&gt;</span></span> urls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>archives<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Archive</span> archive <span class="token operator">:</span> archives<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        urls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>archive<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 返回 LaunchedURLClassLoader，用于后续加载 BOOT-INF/classes/ 和 BOOT-INF/lib/</span>
    <span class="token keyword">return</span> <span class="token function">createClassLoader</span><span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 找到 Start-Class 指定的启动类</span>
<span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">getMainClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">Manifest</span> manifest <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>archive<span class="token punctuation">.</span><span class="token function">getManifest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> mainClass <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>manifest <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mainClass <span class="token operator">=</span> manifest<span class="token punctuation">.</span><span class="token function">getMainAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&quot;Start-Class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mainClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;No &#39;Start-Class&#39; manifest entry specified in &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> mainClass<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 运行指定的启动类</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">launch</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">String</span> mainClass<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContextClassLoader</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
   	<span class="token comment">// 这里是通过反射运行 Start-Class 指定的类的 main 方法</span>
    <span class="token function">createMainMethodRunner</span><span class="token punctuation">(</span>mainClass<span class="token punctuation">,</span> args<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><ol><li>处理器：处理 jar: 协议的 URL 的资源读取，后续读取每个 Archive 里的内容</li><li>Archive：jar 包中的 class 和所有依赖中嵌套的 jar 都被转换为 Archive 对象</li><li>LaunchedURLClassLoader：加载所有类</li><li>launch：反射运行元数据中指定的启动类的 main 方法</li></ol><h2 id="自动配置" tabindex="-1"><a class="header-anchor" href="#自动配置" aria-hidden="true">#</a> 自动配置</h2><p>加上注解 <code>@EnableAutoConfiguration</code> 启动自动配置，注意，加上 <code>@SpringBootApplication</code> 就直接开启了自动配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token comment">// java 自带注解，子类会自动继承当前注解</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token comment">// 继承自 @Configuration，标注为一个配置</span>
<span class="token annotation punctuation">@SpringBootConfiguration</span>
<span class="token comment">// 开启自动配置</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token comment">// 扫描指定路径下的 Component</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">TypeExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">AutoConfigurationExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConfigurationPropertiesScan</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token comment">// 会主动获取主类的包路径，并将包路径下的所有 Component 注入 IoC 容器中</span>
<span class="token annotation punctuation">@AutoConfigurationPackage</span>
<span class="token comment">// 核心注解：@Import，核心类：AutoConfigurationImportSelector</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">{</span>
	<span class="token class-name">String</span> <span class="token constant">ENABLED_OVERRIDE_PROPERTY</span> <span class="token operator">=</span> <span class="token string">&quot;spring.boot.enableautoconfiguration&quot;</span><span class="token punctuation">;</span>
	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">excludeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AutoConfigurationImportSelector 类中的核心方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 注意这里实现了 DeferredImportSelector</span>
<span class="token keyword">class</span> <span class="token class-name">AutoConfigurationImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">DeferredImportSelector</span><span class="token punctuation">,</span> <span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">,</span>
		<span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">,</span> <span class="token class-name">EnvironmentAware</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>
    <span class="token comment">// 后面改方法会被该类下的另一个方法调用</span>
    <span class="token comment">// 简单来说就是获取候选的配置类，但是之后还需要做过滤</span>
    <span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token comment">// 加载所有带有 EnableAutoConfiguration 的类，这些类的全限定名在 META-INF/spring.factories 里中声明</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> configurations <span class="token operator">=</span> <span class="token class-name">SpringFactoriesLoader</span>
            <span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> 
                        <span class="token string">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span>
                        <span class="token operator">+</span> <span class="token string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> configurations<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取到需要自动装配的类后就需要解析，核心类为 ConfigurationClassParser：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ConfigurationClassParser</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DeferredImportSelectorGrouping</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DeferredImportSelector<span class="token punctuation">.</span>Group</span> group<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeferredImportSelectorHolder</span><span class="token punctuation">&gt;</span></span> deferredImports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DeferredImportSelectorGrouping</span><span class="token punctuation">(</span><span class="token class-name">DeferredImportSelector<span class="token punctuation">.</span>Group</span> group<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>group <span class="token operator">=</span> group<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">DeferredImportSelectorHolder</span> deferredImport<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>deferredImports<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>deferredImport<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 处理被 @Import 注解标注的类，返回需要导入的配置类</span>
        <span class="token comment">// 注意：DeferredImportSelector 的具体实现就是 AutoConfigurationImportSelector</span>
        <span class="token comment">// 这里的 Group 是 AutoConfigurationImportSelector 的内部类，具体实现在下面</span>
        <span class="token keyword">public</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeferredImportSelector<span class="token punctuation">.</span>Group<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&gt;</span></span> <span class="token function">getImports</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Iterator</span> var1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deferredImports<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			
            <span class="token keyword">while</span><span class="token punctuation">(</span>var1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">DeferredImportSelectorHolder</span> deferredImport <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DeferredImportSelectorHolder</span><span class="token punctuation">)</span>var1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 处理被 @Import 注解的注解</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>group<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>deferredImport<span class="token punctuation">.</span><span class="token function">getConfigurationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deferredImport<span class="token punctuation">.</span><span class="token function">getImportSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
			<span class="token comment">// 选择需要导入的配置类</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>group<span class="token punctuation">.</span><span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现 ConfigurationClassParser 依赖于 AutoConfigurationGroup 类，AutoConfigurationGroup 的核心方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 实现自 DeferredImportSelector 接口</span>
<span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Group</span><span class="token punctuation">&gt;</span></span> <span class="token function">getImportGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">AutoConfigurationGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 注意：AutoConfigurationGroup 是 AutoConfigurationImportSelector 的内部类</span>
<span class="token comment">// 实现 DeferredImportSelector.Group、BeanClassLoaderAware、BeanFactoryAware、ResourceLoaderAware 接口，自动配置的 Group 实现类</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfigurationGroup</span>
		<span class="token keyword">implements</span> <span class="token class-name">DeferredImportSelector<span class="token punctuation">.</span>Group</span><span class="token punctuation">,</span> <span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">,</span> <span class="token class-name">ResourceLoaderAware</span> <span class="token punctuation">{</span>
    
	<span class="token comment">// 元数据映射，key 为配置类的全限定类名，在 process 方法中赋值</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">AnnotationMetadata</span><span class="token punctuation">&gt;</span></span> entries <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    <span class="token comment">// AutoConfigurationEntry 的数组，AutoConfigurationEntry 是 AutoConfigurationImportSelector 的内部类</span>
    <span class="token comment">// AutoConfigurationEntry 包含了两个类型的全限定类名数组：配置类数组 和 「排除」的配置类数组</span>
    <span class="token comment">// 同样在 process 方法中赋值</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AutoConfigurationEntry</span><span class="token punctuation">&gt;</span></span> autoConfigurationEntries <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 自动配置的元数据，实现按条件加载</span>
    <span class="token keyword">private</span> <span class="token class-name">AutoConfigurationMetadata</span> autoConfigurationMetadata<span class="token punctuation">;</span>
    
    <span class="token comment">// 获取需要自动配置的配置类（注意不是候选配置类，而是已经过滤后的配置类）</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> annotationMetadata<span class="token punctuation">,</span> <span class="token class-name">DeferredImportSelector</span> deferredImportSelector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>deferredImportSelector <span class="token keyword">instanceof</span> <span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">,</span>
                     <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Only %s implementations are supported, got %s&quot;</span><span class="token punctuation">,</span>
                                         <span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                         deferredImportSelector<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获得 AutoConfigurationEntry 对象</span>
        <span class="token class-name">AutoConfigurationEntry</span> autoConfigurationEntry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">)</span> deferredImportSelector<span class="token punctuation">)</span>
            <span class="token comment">// 这个方法很重要，是在 AutoConfigurationImportSelector 中实现的，具体看下面</span>
            <span class="token punctuation">.</span><span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span><span class="token function">getAutoConfigurationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 添加到 autoConfigurationEntries 中</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurationEntries<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>autoConfigurationEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> importClassName <span class="token operator">:</span> autoConfigurationEntry<span class="token punctuation">.</span><span class="token function">getConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// entries 赋值</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>entries<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>importClassName<span class="token punctuation">,</span> annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// process 方法中调用的 getAutoConfigurationMetadata 方法，返回 PropertiesAutoConfigurationMetadata</span>
    <span class="token comment">// 这个方法会根据「条件」加载配置类，这里涉及到 @ConditionalOnClass 注解</span>
    <span class="token comment">// 比如 A.class 上标注了 @ConditionalOnClass({ B.class, C.class, D.class })，那么只有 classpath 下有 B、C、D 三个类，A 才会生效</span>
    <span class="token comment">// 简单来说，AutoConfigurationMetadata 用途就是制定配置类（Configuration）的生效条件</span>
    <span class="token keyword">private</span> <span class="token class-name">AutoConfigurationMetadata</span> <span class="token function">getAutoConfigurationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurationMetadata <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurationMetadata <span class="token operator">=</span> <span class="token class-name">AutoConfigurationMetadataLoader</span><span class="token punctuation">.</span><span class="token function">loadMetadata</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurationMetadata<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 在 process 过滤后，再次排除一些类，获得要自动配置的配置类</span>
    <span class="token comment">// 然后该方法被上面提到的 ConfigurationClassParser 解析类获取并解析</span>
    <span class="token keyword">public</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurationEntries<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 获得 allExclusions</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> allExclusions <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurationEntries<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationEntry</span><span class="token operator">::</span><span class="token function">getExclusions</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 从 processedConfigurations 中，移除排除的</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> processedConfigurations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurationEntries<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationEntry</span><span class="token operator">::</span><span class="token function">getConfigurations</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token class-name">LinkedHashSet</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        processedConfigurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>allExclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
        <span class="token comment">// sortAutoConfigurations 进行了排序，涉及到 @Order 注解</span>
        <span class="token keyword">return</span> <span class="token function">sortAutoConfigurations</span><span class="token punctuation">(</span>processedConfigurations<span class="token punctuation">,</span> <span class="token function">getAutoConfigurationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>importClassName<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>entries<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>importClassName<span class="token punctuation">)</span><span class="token punctuation">,</span> importClassName<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 该方法调用了最初说到的 getCandidateConfigurations 方法，然后进行了一系列过滤，获得最终需要自动配置的配置类</span>
<span class="token comment">// 然后该方法被上面的 AutoConfigurationGroup 内部类中的 process 方法调用</span>
<span class="token keyword">protected</span> <span class="token class-name">AutoConfigurationEntry</span> <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationMetadata</span> autoConfigurationMetadata<span class="token punctuation">,</span>
                                                           <span class="token class-name">AnnotationMetadata</span> annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断是否开启自动装配，没有就返回空</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">EMPTY_ENTRY</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 返回 exclude 和 excludeName 属性</span>
    <span class="token comment">// 例子：@SpringBootApplication(exclude = {SpringApplicationAdminJmxAutoConfiguration.class}, scanBasePackages = &quot;cn.iocoder&quot;)</span>
    <span class="token class-name">AnnotationAttributes</span> attributes <span class="token operator">=</span> <span class="token function">getAttributes</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取候选配置列列表，就是一开始解释的方法</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
   	<span class="token comment">// 移除重复的配置类</span>
    configurations <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获得需要排除的配置类</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> exclusions <span class="token operator">=</span> <span class="token function">getExclusions</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 校验排除的配置类是否合法</span>
    <span class="token function">checkExcludedClasses</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 移除需要排除的配置类</span>
    configurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 根据条件（Condition），过滤掉不符合条件的配置类</span>
    configurations <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> autoConfigurationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 触发自动配置类引入完成的事件</span>
    <span class="token function">fireAutoConfigurationImportEvents</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建 AutoConfigurationEntry 对象</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoConfigurationEntry</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><ol><li>自动装配与两个注解高度相关：<code>@EnableAutoConfiguration </code> 和 <code>@Import(AutoConfigurationImportSelector.class)</code></li><li>实现类中与两个类高度相关： AutoConfigurationImportSelector 和 ConfigurationClassParser，前者用于过滤获取需要自动装配的类，后者用于解析</li><li>AutoConfigurationImportSelector 是一切的核心，其中的方法作用为： <ol><li>getCandidateConfigurations 方法：获取候选配置类</li><li>getAutoConfigurationEntry 方法：过滤候选配置类</li><li>内部类 AutoConfigurationGroup#process 方法：设置内部类各个列表</li><li>内部类 AutoConfigurationGroup#selectImports 方法：获取最终需要自动配置的配置类</li></ol></li></ol><h2 id="condition" tabindex="-1"><a class="header-anchor" href="#condition" aria-hidden="true">#</a> Condition</h2><blockquote><p>Spring 和 Spring Boot 中都有注解 @Conditional 和 Condition 接口</p><p>Spring 中 Condition 的实现较少，Spring Boot 中增加了大量实现</p><p>Spring 中核心的是 ProfileContion，Spring Boot 中核心的是 SpringBootCondition 抽象类</p><p>Spring Boot 中实现按条件加载是通过各种 OnXXXCondition 实现类，然后为最终注解加上 @Conditional(OnXXXCondition.class) 实现按条件加载</p></blockquote><p>SpringBootCondition 的继承关系：</p><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//springboot源码/20230516/SpringBootCondition继承关系.png" alt="image-20230516161456196" tabindex="0" loading="lazy"><figcaption>image-20230516161456196</figcaption></figure><p>SpringBootCondition 的主要方法如下，关键要看其子类如何实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>
	<span class="token comment">// 打印符合条件的类</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断注解在类上还是方法上</span>
        <span class="token class-name">String</span> classOrMethodName <span class="token operator">=</span> <span class="token function">getClassOrMethodName</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token comment">// 交给子类判断并返回匹配结果</span>
            <span class="token class-name">ConditionOutcome</span> outcome <span class="token operator">=</span> <span class="token function">getMatchOutcome</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 打印日志</span>
            <span class="token function">logOutcome</span><span class="token punctuation">(</span>classOrMethodName<span class="token punctuation">,</span> outcome<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 记录到 ConditionEvaluationReport </span>
            <span class="token function">recordEvaluation</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> classOrMethodName<span class="token punctuation">,</span> outcome<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 返回是否匹配</span>
            <span class="token keyword">return</span> outcome<span class="token punctuation">.</span><span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoClassDefFoundError</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Could not evaluate condition on &quot;</span> <span class="token operator">+</span> classOrMethodName <span class="token operator">+</span> <span class="token string">&quot; due to &quot;</span>
                                            <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; not found. Make sure your own configuration does not rely on &quot;</span>
                                            <span class="token operator">+</span> <span class="token string">&quot;that class. This can also happen if you are &quot;</span>
                                            <span class="token operator">+</span> <span class="token string">&quot;@ComponentScanning a springframework package (e.g. if you &quot;</span>
                                            <span class="token operator">+</span> <span class="token string">&quot;put a @ComponentScan in the default package by mistake)&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Error processing condition on &quot;</span> <span class="token operator">+</span> <span class="token function">getName</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 遍历条件，有一个匹配就返回 true</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">anyMatches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">,</span>
			<span class="token class-name">Condition</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> conditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Condition</span> condition <span class="token operator">:</span> conditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 具体的匹配方法交给子类实现</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matches</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> metadata<span class="token punctuation">,</span> condition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="onpropertycondition" tabindex="-1"><a class="header-anchor" href="#onpropertycondition" aria-hidden="true">#</a> OnPropertyCondition</h3><p>SpringBootCondition 的一个具体实现 OnPropertyCondition 如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">OnPropertyCondition</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBootCondition</span> <span class="token punctuation">{</span>
   	<span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ConditionOutcome</span> <span class="token function">getMatchOutcome</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取 @ConditionalOnProperty 注解的属性</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnnotationAttributes</span><span class="token punctuation">&gt;</span></span> allAnnotationAttributes <span class="token operator">=</span> <span class="token function">annotationAttributesFromMultiValueMap</span><span class="token punctuation">(</span>
            metadata<span class="token punctuation">.</span><span class="token function">getAllAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">ConditionalOnProperty</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConditionMessage</span><span class="token punctuation">&gt;</span></span> noMatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConditionMessage</span><span class="token punctuation">&gt;</span></span> match <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 逐个判断是否匹配</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> annotationAttributes <span class="token operator">:</span> allAnnotationAttributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 传入条件以及配置文件中配置的属性得到匹配结果</span>
            <span class="token class-name">ConditionOutcome</span> outcome <span class="token operator">=</span> <span class="token function">determineOutcome</span><span class="token punctuation">(</span>annotationAttributes<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">(</span>outcome<span class="token punctuation">.</span><span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> match <span class="token operator">:</span> noMatch<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>outcome<span class="token punctuation">.</span><span class="token function">getConditionMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 有不匹配的就返回不匹配的条件</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>noMatch<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">ConditionOutcome</span><span class="token punctuation">.</span><span class="token function">noMatch</span><span class="token punctuation">(</span><span class="token class-name">ConditionMessage</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>noMatch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">ConditionOutcome</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token class-name">ConditionMessage</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> <span class="token class-name">ConditionOutcome</span> <span class="token function">determineOutcome</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> annotationAttributes<span class="token punctuation">,</span> <span class="token class-name">PropertyResolver</span> resolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 解析成 Spec 对象，是内部类，实现较为简单，就是处理属性</span>
        <span class="token class-name">Spec</span> spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Spec</span><span class="token punctuation">(</span>annotationAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> missingProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nonMatchingProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 收集不匹配的信息</span>
		spec<span class="token punctuation">.</span><span class="token function">collectProperties</span><span class="token punctuation">(</span>resolver<span class="token punctuation">,</span> missingProperties<span class="token punctuation">,</span> nonMatchingProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果属性缺失就返回不匹配</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>missingProperties<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token class-name">ConditionOutcome</span><span class="token punctuation">.</span><span class="token function">noMatch</span><span class="token punctuation">(</span><span class="token class-name">ConditionMessage</span><span class="token punctuation">.</span><span class="token function">forCondition</span><span class="token punctuation">(</span><span class="token class-name">ConditionalOnProperty</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> spec<span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">didNotFind</span><span class="token punctuation">(</span><span class="token string">&quot;property&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">.</span><span class="token constant">QUOTE</span><span class="token punctuation">,</span> missingProperties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
        <span class="token comment">// 如果有属性不匹配就返回不匹配的</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nonMatchingProperties<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token class-name">ConditionOutcome</span><span class="token punctuation">.</span><span class="token function">noMatch</span><span class="token punctuation">(</span><span class="token class-name">ConditionMessage</span><span class="token punctuation">.</span><span class="token function">forCondition</span><span class="token punctuation">(</span><span class="token class-name">ConditionalOnProperty</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> spec<span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">found</span><span class="token punctuation">(</span><span class="token string">&quot;different value in property&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;different value in properties&quot;</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">.</span><span class="token constant">QUOTE</span><span class="token punctuation">,</span> nonMatchingProperties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token class-name">ConditionOutcome</span>
				<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token class-name">ConditionMessage</span><span class="token punctuation">.</span><span class="token function">forCondition</span><span class="token punctuation">(</span><span class="token class-name">ConditionalOnProperty</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> spec<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">because</span><span class="token punctuation">(</span><span class="token string">&quot;matched&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="autoconfigurationimportfilter" tabindex="-1"><a class="header-anchor" href="#autoconfigurationimportfilter" aria-hidden="true">#</a> AutoConfigurationImportFilter</h3><p>还有一个非常关键的函数式接口：AutoConfigurationImportFilter，这是在自动配置是用于排除不用的配置类的</p><blockquote><p>其中包含的方法为：boolean[] match(String[] autoConfigurationClasses, AutoConfigurationMetadata autoConfigurationMetadata);</p><p>将传入的 <code>autoConfigurationClasses</code> 配置类根据 <code>autoConfigurationMetadata</code> 的元数据进行匹配，判断是否需要引入，然后返回 <code>boolean[]</code> 结果</p><p><code>boolean[]</code> 结果和 <code>autoConfigurationClasses</code> 配置类是一一对应的关系。假设 <code>autoConfigurationClasses[0]</code> 对应的 <code>boolean[0]</code> 为 <code>false</code> ，表示无需引入，反之则需要引入</p></blockquote><p>AutoConfigurationImportFilter 的实现类是 FilteringSpringBootCondition，是一个抽象类，继承了 SpringBootCondition，其子类有：</p><ol><li>OnClassCondition：在 @ConditionalOnClass、@ConditionalOnMissingClass 中使用</li><li>OnWebApplicationCondition：在 @ConditionalOnWebApplication 和 @ConditionalOnNotWebApplication 中使用</li><li>OnBeanCondition：在 @ConditionalOnBean、@ConditionalOnMissingBean、@ConditionalOnSingleCandidate 中使用</li></ol><p>FilteringSpringBootCondition 的核心实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">FilteringSpringBootCondition</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBootCondition</span>
      <span class="token keyword">implements</span> <span class="token class-name">AutoConfigurationImportFilter</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">,</span> <span class="token class-name">BeanClassLoaderAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">BeanFactory</span> beanFactory<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">ClassLoader</span> beanClassLoader<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> autoConfigurationClasses<span class="token punctuation">,</span> <span class="token class-name">AutoConfigurationMetadata</span> autoConfigurationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConditionEvaluationReport</span> report <span class="token operator">=</span> <span class="token class-name">ConditionEvaluationReport</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
       	<span class="token comment">// 根据类名和元数据批量返回匹配的结果</span>
        <span class="token class-name">ConditionOutcome</span><span class="token punctuation">[</span><span class="token punctuation">]</span> outcomes <span class="token operator">=</span> <span class="token function">getOutcomes</span><span class="token punctuation">(</span>autoConfigurationClasses<span class="token punctuation">,</span> autoConfigurationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> match <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>outcomes<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> outcomes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            match<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>outcomes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> outcomes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 不匹配则输出日志</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> outcomes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">logOutcome</span><span class="token punctuation">(</span>autoConfigurationClasses<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> outcomes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>report <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    report<span class="token punctuation">.</span><span class="token function">recordConditionEvaluation</span><span class="token punctuation">(</span>autoConfigurationClasses<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> outcomes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> match<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 提供给子类使用，过滤除符合的类的数组</span>
    <span class="token comment">// 在自动配置是有使用到，即在 AutoConfigurationImportSelector 中使用，具体实现看下面</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> classNames<span class="token punctuation">,</span> <span class="token class-name">ClassNameFilter</span> classNameFilter<span class="token punctuation">,</span>
                                        <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>classNames<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> matches <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>classNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> candidate <span class="token operator">:</span> classNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// classNameFilter 是内部类，用于判断类是否存在，比较简单</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>classNameFilter<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                matches<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> matches<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自动配置类 AutoConfigurationImportSelector 中的过滤实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfigurationImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">DeferredImportSelector</span><span class="token punctuation">,</span> <span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">,</span>
	<span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">,</span> <span class="token class-name">EnvironmentAware</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> configurations<span class="token punctuation">,</span> <span class="token class-name">AutoConfigurationMetadata</span> autoConfigurationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> skip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>candidates<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> skipped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment">// 遍历 AutoConfigurationImportFilter 数组逐个匹配</span>
        <span class="token comment">// getAutoConfigurationImportFilters 方法会找到 META-INF/spring.factories 中指定的类</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AutoConfigurationImportFilter</span> filter <span class="token operator">:</span> <span class="token function">getAutoConfigurationImportFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> match <span class="token operator">=</span> filter<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> autoConfigurationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> match<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    skip<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    skipped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 没有需要忽略的就直接忽略</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>skipped<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> configurations<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 排除需要忽略的配置类</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>candidates<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>skip<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> numberFiltered <span class="token operator">=</span> configurations<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Filtered &quot;</span> <span class="token operator">+</span> numberFiltered <span class="token operator">+</span> <span class="token string">&quot; auto configuration class in &quot;</span>
                         <span class="token operator">+</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43),e=[o];function c(i,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","SpringBoot源码.html.vue"]]);export{k as default};
