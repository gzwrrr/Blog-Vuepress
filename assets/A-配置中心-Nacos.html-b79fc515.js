import{_ as s,Q as a,S as n,a9 as e}from"./framework-d7e1aa10.js";const t={},l=e(`<h1 id="配置中心-nacos" tabindex="-1"><a class="header-anchor" href="#配置中心-nacos" aria-hidden="true">#</a> 配置中心-Nacos</h1><blockquote><p>相当于 Eureka + Config + Bus，Nacos 支持 AP、CP 的切换</p></blockquote><h2 id="nacos-配置中心" tabindex="-1"><a class="header-anchor" href="#nacos-配置中心" aria-hidden="true">#</a> Nacos 配置中心</h2><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//分布式组件/20230210/nacos配置中心.png" alt="Nacos命名空间" tabindex="0" loading="lazy"><figcaption>Nacos命名空间</figcaption></figure><ul><li>配置中心使用 Namespace 命名空间隔离不同的配置，内部使用 Group 和 DataID 从逻辑上区分多个目标对象；默认的为：Namespace=public，Group=DEFAULT_GROUP，默认的集群是 DEFAULT</li><li>读取不同的配置有三种方式： <ul><li>通过 DataID 区分</li><li>通过 Group 区分</li><li>通过 Namespace 区分</li></ul></li></ul><h2 id="持久化配置" tabindex="-1"><a class="header-anchor" href="#持久化配置" aria-hidden="true">#</a> 持久化配置</h2><ul><li>Nacos 默认使用的是嵌入式数据（derby）库实现数据的存储</li><li>集群模式下如果还使用默认持久化配置会存在数据一致性问题</li><li>集群模式下应该使用集中式存储的方式，目前只支持 MySQL</li></ul><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 持久化配置</span>
<span class="token key attr-name">spring.datasource.platform</span><span class="token punctuation">=</span><span class="token value attr-value">mysql</span>
<span class="token comment">### Count of DB:</span>
<span class="token key attr-name">db.num</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token comment">### Connect URL of DB:</span>
<span class="token key attr-name">db.url.0</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span>
<span class="token key attr-name">db.user.0</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">db.password.0</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="linux-集群搭建" tabindex="-1"><a class="header-anchor" href="#linux-集群搭建" aria-hidden="true">#</a> Linux 集群搭建</h2><ol><li>修改 <code>Nacos</code> 的 <code>conf</code> 文件夹下的 <code>cluster.conf</code> 为集群的 <code>ip:port</code>，注意 其中的 ip 必须为 <code>hostname -i</code> 或 <code>ip addr ens33</code> 中的：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">192.168</span>.30.100:3333
<span class="token number">192.168</span>.30.100:4444
<span class="token number">192.168</span>.30.100:5555
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>修改 <code>nacos/bin/startup.sh</code>：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">while</span> <span class="token builtin class-name">getopts</span> <span class="token string">&quot;:m:f:s:c:p:i:&quot;</span> opt
<span class="token keyword">do</span>
    <span class="token keyword">case</span> <span class="token variable">$opt</span> <span class="token keyword">in</span>
        m<span class="token punctuation">)</span>
            <span class="token assign-left variable">MODE</span><span class="token operator">=</span><span class="token variable">$OPTARG</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        f<span class="token punctuation">)</span>
            <span class="token assign-left variable">FUNCTION_MODE</span><span class="token operator">=</span><span class="token variable">$OPTARG</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        s<span class="token punctuation">)</span>
            <span class="token assign-left variable">SERVER</span><span class="token operator">=</span><span class="token variable">$OPTARG</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        c<span class="token punctuation">)</span>
            <span class="token assign-left variable">MEMBER_LIST</span><span class="token operator">=</span><span class="token variable">$OPTARG</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        p<span class="token punctuation">)</span>
            <span class="token assign-left variable">EMBEDDED_STORAGE</span><span class="token operator">=</span><span class="token variable">$OPTARG</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        i<span class="token punctuation">)</span>
        	<span class="token comment"># 主要是加上 i: 和下面这一行，就是配置不同的端口启动</span>
            <span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token variable">$OPTARG</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        ?<span class="token punctuation">)</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;Unknown parameter&quot;</span>
        <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">esac</span>
<span class="token keyword">done</span>
<span class="token comment"># start</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$JAVA</span> <span class="token variable">\${JAVA_OPT}</span>&quot;</span> <span class="token operator">&gt;</span> <span class="token variable">\${BASE_DIR}</span>/logs/start.out <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
<span class="token comment"># 加上 -Dserver.port=\${PORT}</span>
<span class="token function">nohup</span> <span class="token variable">$JAVA</span> <span class="token parameter variable">-Dserver.port</span><span class="token operator">=</span><span class="token variable">\${PORT}</span>  <span class="token variable">\${JAVA_OPT}</span> nacos.nacos <span class="token operator">&gt;&gt;</span> <span class="token variable">\${BASE_DIR}</span>/logs/start.out <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;nacos is starting，you can check the <span class="token variable">\${BASE_DIR}</span>/logs/start.out&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>如果无法启动可能是内存分配过小，同样是修改 <code>nacos/bin/startup.sh</code>：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">\${MODE}</span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;standalone&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token comment"># 下面一行修改大一点，例如：</span>
	<span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${JAVA_OPT}</span> -Xms2g -Xmx2g -Xmn1g&quot;</span>
    <span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${JAVA_OPT}</span> -Dnacos.standalone=true&quot;</span>
<span class="token keyword">else</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">\${EMBEDDED_STORAGE}</span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;embedded&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${JAVA_OPT}</span> -DembeddedStorage=true&quot;</span>
    <span class="token keyword">fi</span>
    <span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${JAVA_OPT}</span> -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span>
    <span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${JAVA_OPT}</span> -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=<span class="token variable">\${BASE_DIR}</span>/logs/java_heapdump.hprof&quot;</span>
    <span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${JAVA_OPT}</span> -XX:-UseLargePages&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>启动集群：</li></ol><p>注意：较高版本的 Nacos 可能无法在同一台机器的同一个目录下启动集群，此时只需要复制配置好的 Nacos 的整个目录即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 如果是复制了三份，就分别进入 bin 目录，然后分别运行对应的启动命令</span>
./startup.sh <span class="token parameter variable">-i</span> <span class="token number">3333</span>
./startup.sh <span class="token parameter variable">-i</span> <span class="token number">4444</span>
./startup.sh <span class="token parameter variable">-i</span> <span class="token number">5555</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//分布式组件/20230210/nacos集群.png" alt="image-20221022172459669" tabindex="0" loading="lazy"><figcaption>image-20221022172459669</figcaption></figure><ol start="5"><li>修改 <code>nginx</code> 配置文件后，进入 <code>nginx/sbin</code> 执行：<code>./nginx -c /usr/local/nginx/conf/nginx.conf</code></li></ol><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">upstream</span> <span class="token value attr-value">nacosCluster {</span>
<span class="token key attr-name">    server</span> <span class="token value attr-value">localhost:3333;</span>
<span class="token key attr-name">    server</span> <span class="token value attr-value">localhost:4444;</span>
<span class="token key attr-name">    server</span> <span class="token value attr-value">localhost:5555;</span>
}

<span class="token key attr-name">server</span> <span class="token value attr-value">{</span>
<span class="token key attr-name">    listen</span> <span class="token value attr-value">         1111;</span>
<span class="token key attr-name">    server_name</span> <span class="token value attr-value">    localhost;</span>

<span class="token key attr-name">    location</span> <span class="token value attr-value">/ {</span>
<span class="token key attr-name">    	proxy_pass</span> <span class="token value attr-value">http://nacosCluster/;</span>
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),p=[l];function o(i,c){return a(),n("div",null,p)}const u=s(t,[["render",o],["__file","A-配置中心-Nacos.html.vue"]]);export{u as default};
