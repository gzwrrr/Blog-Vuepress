import{_ as e,Q as o,S as c,U as n,W as p,X as t,a8 as s,a9 as l,H as i}from"./framework-d7e1aa10.js";const u={},k=n("h1",{id:"贪心算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#贪心算法","aria-hidden":"true"},"#"),s(" 贪心算法")],-1),r={class:"table-of-contents"},d=l(`<div class="hint-container info"><p class="hint-container-title">说明</p><p>在某一个标准下，优先考虑最满足标准的样本，最后考虑最不满足标准的样本，最终得到一个答案</p><p>也就是不从整体上寻找最优解，而是做出某种意义上的局部最优解</p><p>有时可由局部最优得到整体最优</p><p>**注意：**贪心策略都是需要证明的，但是一般数学证明会非常难，所以在时间不允许的情况下使用对数器暴力验证是否正确</p><p>**最常用的做法：**堆和排序</p></div><h2 id="n-皇后问题" tabindex="-1"><a class="header-anchor" href="#n-皇后问题" aria-hidden="true">#</a> N 皇后问题</h2><ol><li><p>在 N * N 的棋盘上要摆 N 个皇后，要求任意两个皇后不同行、不同列、不在任何一条斜线上</p></li><li><p>给定一个 N，返回 N 皇后的摆法一共有多少种</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">NQueen</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// N 代表棋盘是 N * N 的</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 创建一个一维数组，数组下标就是行，value 就是第几列，这样就避免了创建二维数组浪费空间</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// i 代表第 i 行，record 是棋盘，N 表示有几行</span>
    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> record<span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 这是一个递归方法，有点抽象，可以画图理解</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> recrord<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这个是终止的条件，即一旦越界即完成了一次摆放，即当前的这种方法可行，返回发现了 1 种解决方案，此时开始“归”</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 函数内的操作一直都是维持在 i 行的，需要做的就是判断每一列是否能放下皇后</span>
    <span class="token comment">// 创建一个变量来记录一共有多少种解法</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 依次检查每一列</span>
    <span class="token comment">// 在第 0 行时，会检查 0 ... j-1 列，而每检查一列就会进行依次深度优先遍历</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> record<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 在这一列合法就放下皇后</span>
            record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
            <span class="token comment">// 此处开始深度优先遍历，比较抽象，多加思考</span>
            result <span class="token operator">+=</span> <span class="token function">process</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> record<span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 因为只有 0 ... i-1 行有数据，所以只用检查这些行就可以</span>
    <span class="token comment">// i 是当前判断是否合法的元素所在的行</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token comment">// 合不合法的条件</span>
        <span class="token comment">// 1.不能同一行，天然符合，因为用的是递归且是深度优先遍历，不会有在同一行的情况，此处一定要多加理解</span>
        <span class="token comment">// 2.不能同一列：j == record[k]</span>
        <span class="token comment">// 3.不能共斜线，即“行与行”相减不能和“列与列”相减相同：</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> record<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>	
    	<span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：常数优化后的方案在一定范围内时间会少很多，实现方法是改用位运算</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 不要超过 32 位皇后</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">NQueen</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token class-name">N</span> <span class="token operator">&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 此时的 limit 是 N 位 1 </span>
   	<span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">==</span> <span class="token number">32</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token comment">// 后三个 0 分别表示列限制、左对角线限制、右对角线限制</span>
    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>limit<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
	
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token keyword">int</span> colLim<span class="token punctuation">,</span> <span class="token keyword">int</span> leftDiaLim<span class="token punctuation">,</span> <span class="token keyword">int</span> rightDiaLim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果列限制满了，说明找到了一种解决方法，开始“归”</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>colLim <span class="token operator">==</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 最右的 1</span>
    <span class="token keyword">int</span> mostRightOne <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 可以放下皇后的所有位置，位运算有点抽象，画图理解</span>
    <span class="token keyword">int</span> pos <span class="token operator">=</span> limit <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>colLim <span class="token operator">|</span> leftDiaLim <span class="token operator">|</span> rightDiaLim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建一个变量存放结果数量</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
   	<span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mostRightOne <span class="token operator">=</span> pos <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 相当于把皇后放下了</span>
        pos <span class="token operator">=</span> pos <span class="token operator">-</span> mostRightOne<span class="token punctuation">;</span>
        <span class="token comment">// 下面参数位置分别把三个限制都更新了</span>
        <span class="token comment">// colLim | mostRightOne 皇后放下后的列限制</span>
        <span class="token comment">// leftDiaLim &lt;&lt; 1 左对角线限制左移就是下一行的限制</span>
        <span class="token comment">// rightDiaLim &gt;&gt;&gt; 1 右对角线限制右移就是下一行的限制</span>
        res <span class="token operator">+=</span> <span class="token function">process</span><span class="token punctuation">(</span>limit<span class="token punctuation">,</span> colLim <span class="token operator">|</span> mostRightOne<span class="token punctuation">,</span> <span class="token punctuation">(</span>leftDiaLim <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>rightDiaLim <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="开会排序" tabindex="-1"><a class="header-anchor" href="#开会排序" aria-hidden="true">#</a> 开会排序</h2><blockquote><p>以结束时间排序能得到最优解</p></blockquote><h2 id="拼接字符串字典序最小" tabindex="-1"><a class="header-anchor" href="#拼接字符串字典序最小" aria-hidden="true">#</a> 拼接字符串字典序最小</h2><blockquote><p>以 a · b &lt;= b · a 比较能得到最优解</p></blockquote><h2 id="切分金条最小代价" tabindex="-1"><a class="header-anchor" href="#切分金条最小代价" aria-hidden="true">#</a> 切分金条最小代价</h2><p>切分金条得到最小代价（哈夫曼编码问题，由局部最小得到整体最小）</p><blockquote><p>利用小根堆排序累加能得到最优解</p></blockquote><h3 id="做最多的项目" tabindex="-1"><a class="header-anchor" href="#做最多的项目" aria-hidden="true">#</a> 做最多的项目</h3><blockquote><p>利用大小根堆配合，按花费排序的小根堆，按利用排序的大根堆</p></blockquote>`,15);function m(v,b){const a=i("router-link");return o(),c("div",null,[k,n("nav",r,[n("ul",null,[n("li",null,[p(a,{to:"#贪心算法"},{default:t(()=>[s("贪心算法")]),_:1}),n("ul",null,[n("li",null,[p(a,{to:"#n-皇后问题"},{default:t(()=>[s("N 皇后问题")]),_:1})]),n("li",null,[p(a,{to:"#开会排序"},{default:t(()=>[s("开会排序")]),_:1})]),n("li",null,[p(a,{to:"#拼接字符串字典序最小"},{default:t(()=>[s("拼接字符串字典序最小")]),_:1})]),n("li",null,[p(a,{to:"#切分金条最小代价"},{default:t(()=>[s("切分金条最小代价")]),_:1}),n("ul",null,[n("li",null,[p(a,{to:"#做最多的项目"},{default:t(()=>[s("做最多的项目")]),_:1})])])])])])])]),d])}const h=e(u,[["render",m],["__file","I-贪心算法.html.vue"]]);export{h as default};
