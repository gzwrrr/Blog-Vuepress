import{_ as l,Q as i,S as a,a9 as e}from"./framework-d7e1aa10.js";const r={},t=e('<h1 id="服务降级-hystrix" tabindex="-1"><a class="header-anchor" href="#服务降级-hystrix" aria-hidden="true">#</a> 服务降级-Hystrix</h1><blockquote><p>需要手动搭建监控平台，没有一套 Web 界面能让我们进行更加细粒度的配置</p></blockquote><ul><li>一个用于处理分布式系统的<strong>延迟</strong>和<strong>容错</strong>的开源库</li><li>保证在一个依赖出问题的情况下，不会导致整体服务失败，避免了级联故障，提高了分布式系统的弹性</li><li>断路器本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常</li><li>保障了服务调用方的线程不会被长时间且不必要地占用，从而避免了故障在分布式系统中的蔓延乃至雪崩</li></ul><h2 id="服务降级-fallback" tabindex="-1"><a class="header-anchor" href="#服务降级-fallback" aria-hidden="true">#</a> 服务降级（Fallback）</h2><ul><li>向调用方返回一个符合预期的、可处理的备选响应（FallBack）</li><li>发生服务降级的情况： <ul><li>程序运行异常</li><li>超时</li><li>服务熔断触发服务降级</li><li>线程池/信号量打满</li></ul></li></ul><h2 id="服务熔断-break" tabindex="-1"><a class="header-anchor" href="#服务熔断-break" aria-hidden="true">#</a> 服务熔断（Break）</h2><ul><li>达到最大访问量后，直接拒绝访问，然后调用服务降级方法返回提示</li><li>熔断机制是应对<strong>雪崩效应</strong>的一种微服务链路保护机制</li><li>当扇出链路的某个微服务出错不可用或者响应时间太长就会进行服务降级，进而熔断该节点的微服务的调用，快速返回错误的响应信息</li><li>当检测到该节点微服务调用响应正常后，恢复调用链路</li><li>在 Spring Cloud 中，Hystrix 会监控微服务间的调用状况，以此实现熔断机制</li><li>当失败的调用到达一定的阈值后（默认是 5 秒内 20 次调用失败），就会启动熔断机制</li><li>熔断状态： <ul><li>打开：请求不再调用当前服务，内部设置始终一般为 MTTR（平均故障处理时间），当打开时长达到所设时钟则进入半熔断状态</li><li>关闭：不会对服务进行熔断</li><li>半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</li></ul></li><li>断路器的三个重要参数： <ul><li>快照时间窗口：断路器确定是否打开需要统计一些请求和错误数据，统计的时间范围就是快照时间窗口，默认为最近的 10 秒</li><li>请求总数阈值：在快照时间窗口内，必须满足请求总数阈值才有资格熔断。默认为 20，意味着在 10 秒内，如果该 Hystrix 命令的调用次数不足 20 次，即使所有的请求都超时或者因为其他的原因而失败，断路器也不会打开</li><li>错误百分比阈值：当请求总数在快照时间窗口内超过了阈值，比如发生了 30 次调用，如果在这 30 次调用中，有 15 次发生了超时异常，也就是超过了 50% 的错误百分比，那么在默认设定的 50% 阈值的情况下，断路器就会打开</li></ul></li><li>Hystrix 的自动恢复功能： <ul><li>当断路器打开时，会对主逻辑进行熔断，之后会启动一个休眠时间窗口，在这个时间窗口内，降级逻辑临时成为逻辑</li><li>当休眠窗口期到期，断路器会进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将关闭，主逻辑恢复</li><li>如果这次请求依然有问题，那么还是保持打开的状态，休眠时间窗口重新计时</li></ul></li></ul><h2 id="服务限流-flowlimit" tabindex="-1"><a class="header-anchor" href="#服务限流-flowlimit" aria-hidden="true">#</a> 服务限流（Flowlimit）</h2><ul><li>在类似秒杀的高并发场景下，严禁流量瞬间涌入，此时请求需要排队有序进入</li></ul>',9),s=[t];function o(n,c){return i(),a("div",null,s)}const d=l(r,[["render",o],["__file","A-服务降级-Hystrix.html.vue"]]);export{d as default};
