import{_ as n,Q as t,S as p,U as l,W as a,X as o,a8 as i,a9 as s,H as r}from"./framework-d7e1aa10.js";const d={},c=l("h1",{id:"聚类模型",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#聚类模型","aria-hidden":"true"},"#"),i(" 聚类模型")],-1),h={class:"table-of-contents"},_=s('<p>将样本划分为由类的对象组成的多个类的过程</p><p>聚类后可以更加准确的在每个类中单独使用统计模型进行估计、分析或者预测，也可以探究不同类之间的相关性和主要差异</p><p>分类和聚类的分别：分类是已知类别，聚类是未知类别</p><h2 id="k-means-聚类算法" tabindex="-1"><a class="header-anchor" href="#k-means-聚类算法" aria-hidden="true">#</a> K-means 聚类算法</h2><ol><li>确定类的个数 K，选定中心</li><li>更新迭代中心直到不再变化</li></ol><p>优点：</p><ol><li>算法简单、快速</li><li>对处理大数据集效率高</li></ol><p>缺点：</p><ol><li>要求实现给定生成的类型数 K</li><li>对初值敏感</li><li>对孤立点数据敏感</li></ol><p>K-means++ 可以解决上述 2、3 个缺点</p><h2 id="系统-层次-聚类" tabindex="-1"><a class="header-anchor" href="#系统-层次-聚类" aria-hidden="true">#</a> 系统（层次）聚类</h2><p>聚类一般是对样本聚类，很少对指标聚类</p><p>需要确定样本之间的常用距离</p><ul><li>绝对值距离</li><li>欧氏距离</li><li>Minkowski 距离</li><li>Chebyshev 距离</li><li>马氏距离</li></ul><p>确定不同类的距离：</p><ul><li><p>重心法求解距离</p></li><li><p>最短距离法</p></li><li><p>组内连接平均法</p></li></ul><p>步骤：</p><ol><li>将每个对象看作一类，计算两两之间的最小距离</li><li>将距离最小的两个类合并成一个新类</li><li>重新计算心累与所有类之间的距离</li><li>重复 2、3 步骤，直到所有类最终合并成一类</li></ol><p>聚类分析需要注意的问题：</p><ol><li>要根据分类的目的选取指标，指标的选取不同，分类的结果一般也不一样</li><li>样本间距离定义的方式以及聚类的方法不同，聚类的结果一般也不一样</li><li>要注意指标的量纲，量纲差别太大会导致聚类结果不合理</li><li>聚类分析的结果可能不令人满意，需要对结果找到一个合理的解释</li></ol><p>聚类数量的估计：</p><ol><li>肘部法则：通过图形大致估计出聚类数量</li></ol><h2 id="dbscan-算法" tabindex="-1"><a class="header-anchor" href="#dbscan-算法" aria-hidden="true">#</a> DBSCAN 算法</h2><p>基于密度的聚类算法，不需要预先指定聚类的个数，要求一定区域的对象不小于某一个阈值</p><p>该方法能在具有噪声的数据空间数据库中发现任意形状的簇</p><p>基本概念：</p><p>该算法将数据分为三类：</p><ol><li>核心点：在半径内含有不少于阈值数目的点</li><li>边界点：在半径内点的数量小于阈值，但是罗战核心点的邻阈内</li><li>噪声点：既不是核心点，也不是边界点</li></ol><p>优点：</p><ol><li>基于密度定义，能够处理任意形状和大小的簇</li><li>可在聚类的同时发现异常点</li><li>与 K-means 算法比较起来，不需要输入要划分的聚类的个数</li></ol><p>缺点：</p><ol><li>对输入的参数和阈值比较敏感，确定参数困难</li><li>由于该算法的参数和阈值是全局唯一的，当聚类的密度不均匀时，聚类距离相差很大时，计算密度单元的计算复杂度大</li><li>当数据量大时，计算密度单元的计算复杂度大</li></ol><p>建议：</p><ol><li>只有两个，且在散点图做出来后看起来有一定的形状时，可以使用该算法进行聚类</li><li>其他情况下一般都使用系统聚类</li></ol>',34);function u(f,m){const e=r("router-link");return t(),p("div",null,[c,l("nav",h,[l("ul",null,[l("li",null,[a(e,{to:"#聚类模型"},{default:o(()=>[i("聚类模型")]),_:1}),l("ul",null,[l("li",null,[a(e,{to:"#k-means-聚类算法"},{default:o(()=>[i("K-means 聚类算法")]),_:1})]),l("li",null,[a(e,{to:"#系统-层次-聚类"},{default:o(()=>[i("系统（层次）聚类")]),_:1})]),l("li",null,[a(e,{to:"#dbscan-算法"},{default:o(()=>[i("DBSCAN 算法")]),_:1})])])])])]),_])}const k=n(d,[["render",u],["__file","聚类模型.html.vue"]]);export{k as default};
