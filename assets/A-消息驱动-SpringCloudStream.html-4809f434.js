import{_ as e,Q as r,S as i,a9 as l}from"./framework-d7e1aa10.js";const t={},n=l('<h1 id="消息驱动-springcloudstream" tabindex="-1"><a class="header-anchor" href="#消息驱动-springcloudstream" aria-hidden="true">#</a> 消息驱动-SpringCloudStream</h1><blockquote><p>Spring Cloud Stream，Binder 对象是关键</p></blockquote><ul><li>构建消息驱动微服务的框架，屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型</li><li>应用程序通过 inputs 或者 outputs 来与 Spring Cloud Strem 中的 binder 对象交互</li><li>binder 对象负责与消息中间件交互，我们只需要配置绑定即可，即只需要搞清楚如何与 Stream 交互就可以方便使用消息驱动的方式</li><li>通过 Spring Integration 来连接消息代理中间件以实现消息事件驱动</li><li>Stream 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布-订阅、消费组、分区的三个核心概念</li></ul><p><strong>引入了 Stream 之后：</strong></p><ul><li>Stream 完成了大一统的任务（虽然现在只能选择 RabbitMQ 或者 Kafaka）</li><li>绑定器作为中间层能够完美实现应用程序与消息中间件之间细节的隔离，通过向应用程序暴露统一的 Channel，使得应用程序之间不需要再考虑各种不同的消息中间件的实现</li></ul><p><strong>Stream 标准流程：</strong></p><ul><li>Binder：方便连接中间件，可以屏蔽差异</li><li>Channel：对 Queue 的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过 Channel 对队列进行配置</li><li>Source 和 Sink：可以理解为参照对象是 Stream 自身，从 Stream 发布消息就是输出，接收消息就是输入</li></ul>',7),a=[n];function o(u,s){return r(),i("div",null,a)}const d=e(t,[["render",o],["__file","A-消息驱动-SpringCloudStream.html.vue"]]);export{d as default};
