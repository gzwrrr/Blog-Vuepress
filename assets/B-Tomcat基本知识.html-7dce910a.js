import{_ as c,Q as p,S as o,U as n,W as e,X as t,a8 as a,a9 as l,H as i}from"./framework-d7e1aa10.js";const u={},d=n("h1",{id:"tomcat-基本知识",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tomcat-基本知识","aria-hidden":"true"},"#"),a(" Tomcat 基本知识")],-1),r={class:"table-of-contents"},k=l(`<h2 id="tomcat-类加载机制" tabindex="-1"><a class="header-anchor" href="#tomcat-类加载机制" aria-hidden="true">#</a> Tomcat 类加载机制</h2><p><strong>类加载器：</strong></p><ol><li>CommonClassloader：加载 Tomcat 专用的类以及 Web 应用的类</li><li>CataLinaLoader：加载 Tomcat 专用的类</li><li>SharedLoader：加载 Web 应用的类（还有两个子类：WebAppLoader 和 JasperLoader）</li></ol><p>注：CommonClassloader 是后两个的父加载器</p><h3 id="catalina" tabindex="-1"><a class="header-anchor" href="#catalina" aria-hidden="true">#</a> Catalina</h3><div class="hint-container info"><p class="hint-container-title">说明</p><p>Catalina 类承接了 Bootstrap 类的 load 和 start 方法，然后根据配置初始化了 Tomcat 的组件，并调用了 Server 类的 init 和 start 方法来启动 Tomcat。</p></div><p><strong>加载：</strong></p><ol><li><code>initDirs()</code></li><li><code>initNaming()</code></li><li>解析 Server.xml</li><li><code>initStreams()</code></li></ol><p>**启动：**调用 <code>getServer().start()</code></p><p>**关闭：**调用 <code>((ClassLoaderLogManager) logManager).shutdown()</code></p><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><blockquote><p>LifecycleBase是使用了 <strong>状态机</strong> + <strong>模板模式</strong> 来实现的</p></blockquote><figure><img src="https://www.pdai.tech/images/tomcat/tomcat-x-lifecycle-4.jpeg" alt="生命周期状态转换" tabindex="0" loading="lazy"><figcaption>生命周期状态转换</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">LifecycleState</span> <span class="token punctuation">{</span>
    <span class="token function">NEW</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">INITIALIZING</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">.</span><span class="token constant">BEFORE_INIT_EVENT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">INITIALIZED</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">.</span><span class="token constant">AFTER_INIT_EVENT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">STARTING_PREP</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">.</span><span class="token constant">BEFORE_START_EVENT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">STARTING</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">.</span><span class="token constant">START_EVENT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">STARTED</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">.</span><span class="token constant">AFTER_START_EVENT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">STOPPING_PREP</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">.</span><span class="token constant">BEFORE_STOP_EVENT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">STOPPING</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">.</span><span class="token constant">STOP_EVENT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">STOPPED</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">.</span><span class="token constant">AFTER_STOP_EVENT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">DESTROYING</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">.</span><span class="token constant">BEFORE_DESTROY_EVENT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">DESTROYED</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">.</span><span class="token constant">AFTER_DESTROY_EVENT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">FAILED</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> available<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> lifecycleEvent<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">LifecycleState</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> available<span class="token punctuation">,</span> <span class="token class-name">String</span> lifecycleEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>available <span class="token operator">=</span> available<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lifecycleEvent <span class="token operator">=</span> lifecycleEvent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lifecycle</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** 第1类：针对监听器 **/</span>
    <span class="token comment">// 添加监听器</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLifecycleListener</span><span class="token punctuation">(</span><span class="token class-name">LifecycleListener</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取所以监听器</span>
    <span class="token keyword">public</span> <span class="token class-name">LifecycleListener</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findLifecycleListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 移除某个监听器</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeLifecycleListener</span><span class="token punctuation">(</span><span class="token class-name">LifecycleListener</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token doc-comment comment">/** 第2类：针对控制流程 **/</span>
    <span class="token comment">// 初始化方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">LifecycleException</span><span class="token punctuation">;</span>
    <span class="token comment">// 启动方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">LifecycleException</span><span class="token punctuation">;</span>
    <span class="token comment">// 停止方法，和start对应</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">LifecycleException</span><span class="token punctuation">;</span>
    <span class="token comment">// 销毁方法，和init对应</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">LifecycleException</span><span class="token punctuation">;</span>
    
    <span class="token doc-comment comment">/** 第3类：针对状态 **/</span>
    <span class="token comment">// 获取生命周期状态</span>
    <span class="token keyword">public</span> <span class="token class-name">LifecycleState</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取字符串类型的生命周期状态</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStateName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：Tomcat 中的监听器使用了观察者模式。观察者模式(observer pattern): 在对象之间定义一对多的依赖, 这样一来, 当一个对象改变状态, 依赖它的对象都会收到通知, 并自动更新</p><h2 id="jmx-与-mbean" tabindex="-1"><a class="header-anchor" href="#jmx-与-mbean" aria-hidden="true">#</a> JMX 与 MBean</h2><blockquote><p>Tomcat 使用 JMX 实现组件的管理</p><p>其中两个核心的实现为：StardardServer 和 StardardService</p></blockquote><figure><img src="https://www.pdai.tech/images/tomcat/tomcat-x-jmx-1.jpg" alt="Tomcat组件管理" tabindex="0" loading="lazy"><figcaption>Tomcat组件管理</figcaption></figure><p>JMX（Java Management Extensions）是Java平台提供的一种管理和监控Java应用程序的方式。它通过MBean（Managed Bean）来管理Java应用程序，使得Java应用程序可以被监控和管理。</p><p>MBean是一种特殊的Java对象，它提供了一组操作和属性，这些操作和属性可以被JMX代理所调用和监控。MBean是JMX的基本构建单元，可以使用JMX来管理和监控Java应用程序的各种方面，比如应用程序的状态、性能、资源使用情况等。</p><p>在JMX中，MBean分为两种类型：标准MBean和动态MBean。标准MBean是一种Java类，它实现了一个MBean接口，MBean接口定义了一组操作和属性。动态MBean是一种在运行时动态创建的MBean，它允许应用程序动态地创建和注册MBean。</p><p>JMX提供了一种标准的API，用于访问和管理MBean。JMX的核心是由三个部分组成：MBeanServer、MBean和JMX代理。</p><ul><li>MBeanServer：是一个管理和监控MBean的容器。它提供了MBean的注册、注销和查询等管理和监控操作。每个Java应用程序可以有一个或多个MBeanServer。</li><li>MBean：是一种特殊的Java对象，它提供了一组操作和属性，这些操作和属性可以被JMX代理所调用和监控。</li><li>JMX代理：是一种可以代理和访问MBeanServer上的MBean的客户端。</li></ul><p>JMX的应用场景比较广泛，例如Java应用程序的监控、管理、诊断等方面。在Web应用程序中，JMX可以被用来监控和管理Tomcat、Jetty等Web容器的运行状态、线程池、数据库连接池等资源的使用情况。</p><p>总之，JMX提供了一种方便的方式，用于管理和监控Java应用程序，它是Java平台中的一项重要技术。</p><p>使用JMX的好处如下：</p><ol><li>监控和管理：JMX提供了一种标准的方式来监控和管理应用程序和服务，包括监控运行状况、收集性能数据、配置参数和管理资源等。</li><li>可扩展性：JMX提供了一种可扩展的架构，使得开发人员可以通过实现自定义MBean来增强应用程序的管理和监控功能。</li><li>标准化：JMX是Java平台的一部分，因此具有良好的跨平台性和兼容性，可以与各种不同的Java应用程序和服务集成。</li><li>可插拔性：JMX提供了一个标准的插件机制，可以通过插件来扩展和增强JMX的功能。</li><li>简单易用：JMX提供了一个统一的编程接口，使得开发人员可以轻松地编写和管理MBean，并且可以使用各种不同的JMX工具来管理和监控应用程序。</li></ol><h2 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池" aria-hidden="true">#</a> 线程池</h2><blockquote><p>Tomcat 中的 Executor 接口也纳入了 Tomcat 的 Lifecycle 中管理</p></blockquote><ol><li><p>继承了 Java 中的 <code>ThreadPoolExecutor</code>，并且加入了超时机制，超过指定时间之后会调用拒绝策略并抛出异常</p></li><li><p>StandardThreadExecutor 是 Executor 的一个具体实现，此外还实现了 ResizeableExecutor 接口，可以动态调整线程池的大小</p></li><li><p>Tomcat 自己加一层是为了让线程池更容易使用（最少知道原则，体现了外观模式），并且对 <code>ThreadPoolExecutor</code> 进行一定的加强</p></li></ol><h2 id="容器" tabindex="-1"><a class="header-anchor" href="#容器" aria-hidden="true">#</a> 容器</h2><blockquote><p>Tomcat 的容器顶层也是基于 Tomcat 的 Lifecycle 组件设计的</p></blockquote><p>主要的容器的具体实现有四个：</p><ol><li><code>StandarEngine</code>：表示 Tomcat 的 Servlet 引擎，包含多个容器（Context 容器或者 Host 容器）</li><li><code>StandarHost</code>：包含多个 Context 容器</li><li><code>StandarContext</code>：表示一个 ServletContext 或者 WebApp，通常包含多个 Wrapper</li><li><code>StandarWapper</code>：表示一个由 Servlet 定义的 WebApp</li></ol><p>除了上述四个主要的容器外，含包含：</p><ol><li>Realm</li><li>Cluster</li><li>Listeners</li><li>Pipleline</li><li>Loader</li><li>Management</li><li>Logger</li></ol><h2 id="管道" tabindex="-1"><a class="header-anchor" href="#管道" aria-hidden="true">#</a> 管道</h2><div class="hint-container info"><p class="hint-container-title">说明</p><p>管道就是采用了职责链模式</p><p>在一个比较复杂的大型系统中，如果一个对象或数据流需要进行繁杂的逻辑处理，我们可以选择在一个大的组件中直接处理这些繁杂的业务逻辑， 这个方式虽然达到目的，但扩展性和可重用性较差， 因为可能牵一发而动全身。更好的解决方案是采用管道机制，<strong>用一条管道把多个对象(阀门部件)连接起来，整体看起来就像若干个阀门嵌套在管道中一样，而处理逻辑放在阀门上</strong>。</p></div><figure><img src="https://www.pdai.tech/images/tomcat/tomcat-x-pipline-7.jpg" alt="Tomcat管道" tabindex="0" loading="lazy"><figcaption>Tomcat管道</figcaption></figure><p>与过滤器的比较：</p><div class="table-wrapper"><table><thead><tr><th>管道/阀门</th><th>过滤器链/过滤器</th></tr></thead><tbody><tr><td>管道（Pipeline）</td><td>过滤器链（FilterChain）</td></tr><tr><td>阀门（Valve）</td><td>过滤器（Filter）</td></tr><tr><td>底层实现为具有头（first）、尾（basic）指针的单向链表</td><td>底层实现为数组</td></tr><tr><td>Valve的核心方法invoke(request,response)</td><td>Filter核心方法doFilter(request,response,chain)</td></tr><tr><td>pipeline.getFirst().invoke(request,response)</td><td>filterchain.doFilter(request,response)</td></tr></tbody></table></div>`,41);function m(v,b){const s=i("router-link");return p(),o("div",null,[d,n("nav",r,[n("ul",null,[n("li",null,[e(s,{to:"#tomcat-基本知识"},{default:t(()=>[a("Tomcat 基本知识")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#tomcat-类加载机制"},{default:t(()=>[a("Tomcat 类加载机制")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#catalina"},{default:t(()=>[a("Catalina")]),_:1})])])]),n("li",null,[e(s,{to:"#生命周期"},{default:t(()=>[a("生命周期")]),_:1})]),n("li",null,[e(s,{to:"#jmx-与-mbean"},{default:t(()=>[a("JMX 与 MBean")]),_:1})]),n("li",null,[e(s,{to:"#线程池"},{default:t(()=>[a("线程池")]),_:1})]),n("li",null,[e(s,{to:"#容器"},{default:t(()=>[a("容器")]),_:1})]),n("li",null,[e(s,{to:"#管道"},{default:t(()=>[a("管道")]),_:1})])])])])]),k])}const h=c(u,[["render",m],["__file","B-Tomcat基本知识.html.vue"]]);export{h as default};
