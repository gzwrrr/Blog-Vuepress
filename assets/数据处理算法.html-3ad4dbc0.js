import{_ as n,Q as o,S as r,U as l,W as i,X as t,a8 as e,a9 as s,H as c}from"./framework-d7e1aa10.js";const _={},d=l("h1",{id:"数据处理算法",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#数据处理算法","aria-hidden":"true"},"#"),e(" 数据处理算法")],-1),p={class:"table-of-contents"},u=s('<h2 id="插值算法" tabindex="-1"><a class="header-anchor" href="#插值算法" aria-hidden="true">#</a> 插值算法</h2><p>比赛中的数据常常缺少某些值，需要模拟补全缺少的值</p><p>插值分类：</p><ol><li>分段插值（最常用）（可以避免龙格现象，分段低次插值：线性插值、二次插值）</li><li>插值多项式（拉格朗日插值法，有可能出现龙格现象）</li><li>三角插值（主要使用到傅里叶变换）</li></ol><p>具体的插值法：</p><ul><li>牛顿插值法</li><li>埃尔米特插值法（常用）（导数也相似，需要分段，往往使用分段三次插值：PCHIP）</li><li>三次样条插值（常用）</li><li>一维插值和 N 维插值</li></ul><h2 id="拟合算法" tabindex="-1"><a class="header-anchor" href="#拟合算法" aria-hidden="true">#</a> 拟合算法</h2><p>最终曲线不用经过每一个点，只需要非常接近即可，这样曲线的函数会简单（插值法生成的曲线往往都会有很复杂的函数）</p><p>具体的拟合算法：</p><ul><li>最小二乘法</li></ul><p>评价拟合的好坏：拟合优度：R^2</p><ul><li>总体平方和：SST</li><li>误差平方和：SSE</li><li>回归平方和：SSR</li></ul><p>SST = SSE + SSR</p><p>R^2 = SRR / SST = 1 - SSE / SST，R^2 越接近 1，说明误差平方和越接近 0，误差越小说明拟合越好</p><p>但是注意：R^2 只能用于的拟合函数是「线性函数」（线性是指参数线性）</p><p>MATLAB 自带了曲线拟合工具箱</p><p>注意：插值或者拟合都可以用于「预测」</p>',17);function h(S,f){const a=c("router-link");return o(),r("div",null,[d,l("nav",p,[l("ul",null,[l("li",null,[i(a,{to:"#数据处理算法"},{default:t(()=>[e("数据处理算法")]),_:1}),l("ul",null,[l("li",null,[i(a,{to:"#插值算法"},{default:t(()=>[e("插值算法")]),_:1})]),l("li",null,[i(a,{to:"#拟合算法"},{default:t(()=>[e("拟合算法")]),_:1})])])])])]),u])}const x=n(_,[["render",h],["__file","数据处理算法.html.vue"]]);export{x as default};
