import{_ as c,Q as l,S as u,U as n,W as a,X as o,a8 as s,a9 as i,H as p}from"./framework-d7e1aa10.js";const d={},r=n("h1",{id:"redis-客户端",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#redis-客户端","aria-hidden":"true"},"#"),s(" Redis 客户端")],-1),k={class:"table-of-contents"},g={class:"hint-container info"},v=n("p",{class:"hint-container-title"},"Info",-1),m=n("p",null,"相关文档：",-1),h={href:"https://springdoc.cn/spring-data-redis/#redis",target:"_blank",rel:"noopener noreferrer"},b=i(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>Spring Boot 提供了多种方式来使用 Redis，以便在应用程序中进行缓存、存储和数据处理。以下是一些常见的 Spring Boot 使用 Redis 的方式：</p><ol><li><strong>Spring Data Redis：</strong> Spring Boot 集成了 Spring Data Redis，它简化了与 Redis 数据库的交互。通过定义 Repositories，您可以使用类似于 JPA 的方式来访问和操作 Redis 数据。Spring Data Redis 支持多种数据结构，如字符串、哈希、列表、集合和有序集合。</li><li><strong>RedisTemplate：</strong> Spring Boot 通过 <code>RedisTemplate</code> 提供了一种编程式的方式来与 Redis 进行交互。它提供了一组方法来执行常见的 Redis 操作，如获取、设置、删除等。您可以通过 <code>RedisTemplate</code> 直接操作 Redis 数据结构。</li><li><strong>Spring Cache：</strong> Spring Boot 提供了缓存抽象，允许您通过在方法上添加注解来轻松地将方法调用的结果缓存到 Redis 中。您可以使用 <code>@Cacheable</code>、<code>@CachePut</code> 和 <code>@CacheEvict</code> 等注解来控制缓存的行为。</li><li><strong>Message Queue 和 Pub/Sub：</strong> Spring Boot 可以将 Redis 用作消息队列，实现异步消息传递。您可以使用 Spring 的 <code>RedisMessageListenerContainer</code> 来订阅和处理 Redis 发布/订阅消息。</li><li><strong>Spring Session：</strong> Spring Session 是一个用于管理用户会话的项目，它可以将会话数据存储在 Redis 中。这使得应用程序可以在多个实例之间共享会话数据，从而实现更好的可伸缩性。</li><li><strong>Spring Integration with Redis：</strong> Spring Boot 通过 Spring Integration 提供了集成 Redis 的能力，以实现企业集成模式。您可以使用 Spring Integration 来构建复杂的消息处理流程，将数据从一个系统传输到另一个系统。</li><li><strong>Spring Data Redis Reactive：</strong> 如果您的应用程序采用了响应式编程模型，Spring Boot 也提供了与 Redis 进行响应式交互的能力。您可以使用 Spring Data Redis 的响应式 API 来实现异步和非阻塞的操作。</li></ol><p>客户端包括：</p><ol><li><strong>Lettuce：</strong> Lettuce 是一个高性能、可扩展的 Redis 客户端库，支持异步和同步操作。它基于 Netty 构建，提供了可靠的连接池、集群支持以及响应式编程模型。在 Spring Boot 中，Lettuce 是默认的 Redis 客户端。</li><li><strong>Jedis：</strong> Jedis 是一个流行的 Redis 客户端库，它提供了简单的 API 用于与 Redis 进行交互。Jedis 在多个版本的 Spring Boot 中都得到了支持，但在较新的版本中，Lettuce 更为推荐，因为它更加现代化且性能更好。</li><li><strong>Redisson：</strong> Redisson 是一个基于 Redis 的分布式和高级 Java 数据结构库。它提供了许多高级特性，如分布式锁、分布式集合、分布式地图等。虽然 Redisson 可以用作 Redis 客户端，但它的重点更多地放在了分布式数据结构和功能之上。</li></ol><h2 id="jedis" tabindex="-1"><a class="header-anchor" href="#jedis" aria-hidden="true">#</a> Jedis</h2><p>最简单的引入</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">说明</p><p>Jedis是Redis的Java客户端，在SpringBoot 1.x版本中也是默认的客户端。在SpringBoot 2.x版本中默认客户端是Lettuce。</p></div><p>注意：现在不建议使用 Jedis，Jedis 性能差并且不能与 Spring Boot 2.3 以上的版本进行很好的整合，直接使用 lettuce 即可，即直接引入 spring-boot-starter-data-redis。如果需要使用 Jedis 必须找到支持的版本</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> test
    <span class="token key atrule">jedis</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>
        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>
        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span>
        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>1ms
    <span class="token key atrule">connect-timeout</span><span class="token punctuation">:</span> 30000ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> template<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整合 Jedis 与 Spring Boot 之后，可以配置 RedisTemplate 模板，同时需要注意：</p><ol><li>需要缓存到 Redis 中的实体类必须序列化</li><li>Spring Boot 启动类中要添加 @EnableCaching 注解</li><li>查询方法上要添加 @Cacheable 注解</li><li>对数据进行写操作的方法上需要添加 @CacheEvict 注解</li><li>对于需要手工操作 Redis 的方法，需要通过 RedisTemplate 来获取操作对象</li></ol><h2 id="redission" tabindex="-1"><a class="header-anchor" href="#redission" aria-hidden="true">#</a> Redission</h2>`,16),E={href:"https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95",target:"_blank",rel:"noopener noreferrer"},_=i(`<div class="hint-container note"><p class="hint-container-title">官方说明</p><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务。其中包括(<code>BitSet</code>, <code>Set</code>, <code>Multimap</code>, <code>SortedSet</code>, <code>Map</code>, <code>List</code>, <code>Queue</code>, <code>BlockingQueue</code>, <code>Deque</code>, <code>BlockingDeque</code>, <code>Semaphore</code>, <code>Lock</code>, <code>AtomicLong</code>, <code>CountDownLatch</code>, <code>Publish / Subscribe</code>, <code>Bloom filter</code>, <code>Remote service</code>, <code>Spring cache</code>, <code>Executor service</code>, <code>Live Object service</code>, <code>Scheduler service</code>) Redisson提供了使用Redis的最简单和最便捷的方法。Redisson的宗旨是促进使用者对Redis的关注分离（Separation of Concern），从而让使用者能够将精力更集中地放在处理业务逻辑上。</p></div><p>依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.21.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例：</p>`,4),R=n("code",null,"同步",-1),f=n("code",null,"异步",-1),S=n("code",null,"RedissonClient",-1),B={href:"http://reactive-streams.org/",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"异步流处理标准",-1),y=n("code",null,"RedissonReactiveClient",-1),x=n("code",null,"RxJava2",-1),A=n("code",null,"RedissonRxClient",-1),I=n("ol",null,[n("li",null,"RedissonClient"),n("li",null,"RedissonReactiveClient"),n("li",null,"RedissonRxClient")],-1),w=n("h3",{id:"分布式锁",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#分布式锁","aria-hidden":"true"},"#"),s(" 分布式锁")],-1),F={href:"https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#81-%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81reentrant-lock",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#82-%E5%85%AC%E5%B9%B3%E9%94%81fair-lock",target:"_blank",rel:"noopener noreferrer"},J={href:"https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#83-%E8%81%94%E9%94%81multilock",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#84-%E7%BA%A2%E9%94%81redlock",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#85-%E8%AF%BB%E5%86%99%E9%94%81readwritelock",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#86-%E4%BF%A1%E5%8F%B7%E9%87%8Fsemaphore",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#87-%E5%8F%AF%E8%BF%87%E6%9C%9F%E6%80%A7%E4%BF%A1%E5%8F%B7%E9%87%8Fpermitexpirablesemaphore",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#88-%E9%97%AD%E9%94%81countdownlatch",target:"_blank",rel:"noopener noreferrer"};function M(V,N){const e=p("router-link"),t=p("ExternalLinkIcon");return l(),u("div",null,[r,n("nav",k,[n("ul",null,[n("li",null,[a(e,{to:"#redis-客户端"},{default:o(()=>[s("Redis 客户端")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#概述"},{default:o(()=>[s("概述")]),_:1})]),n("li",null,[a(e,{to:"#jedis"},{default:o(()=>[s("Jedis")]),_:1})]),n("li",null,[a(e,{to:"#redission"},{default:o(()=>[s("Redission")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#分布式锁"},{default:o(()=>[s("分布式锁")]),_:1})])])])])])])]),n("div",g,[v,m,n("ol",null,[n("li",null,[n("a",h,[s("https://springdoc.cn/spring-data-redis/#redis"),a(t)])])])]),b,n("blockquote",null,[n("p",null,[s("中文文档："),n("a",E,[s("https://github.com/redisson/redisson/wiki/目录"),a(t)])])]),_,n("blockquote",null,[n("p",null,[s("Redisson框架提供的几乎所有对象都包含了"),R,s("和"),f,s("相互匹配的方法。这些对象都可以通过"),S,s("接口获取。同时还为大部分Redisson对象提供了满足"),n("a",B,[C,a(t)]),s("的程序接口"),y,s("。除此外还提供了"),x,s("规范的"),A,s("程序接口。这些对象实例均是线程安全的")])]),I,w,n("ol",null,[n("li",null,[n("a",F,[s("可重入锁（Reentrant Lock）"),a(t)]),s("：加锁对象可重入访问共享资源")]),n("li",null,[n("a",D,[s("公平锁（Fair Lock）"),a(t)]),s("：默认是非公平锁，可以设置成公平锁，所有想要过的锁的线程进入队列")]),n("li",null,[n("a",J,[s("联锁（MultiLock）"),a(t)]),s("：同时处理多个共享资源时可以使用联锁，即一次性申请多个锁（原子性操作），同时锁住多个共享资源，同时还能够预防死锁")]),n("li",null,[n("a",L,[s("红锁（RedLock）"),a(t)]),s("：只有所有锁中的大部分申请成功才能加锁，一般用于解决 Redis 主从集群丢失锁的问题")]),n("li",null,[n("a",j,[s("读写锁（ReadWriteLock）"),a(t)]),s("：一个共享资源在没有写锁的情况下，可以添加多个读锁，一旦添加了写锁，就不能添加写锁或者读锁")]),n("li",null,[n("a",T,[s("信号量（Semaphore）"),a(t)]),s("：无论谁添加的锁，其他线程都可以解锁；当一个线程需要一次性申请多个资源时，也可以使用信号量机制")]),n("li",null,[n("a",z,[s("可过期性信号量（PermitExpirableSemaphore）"),a(t)]),s("：一次只能申请一个，每个信号量都有过期时间，且每个信号量可以通过独立的 ID 来识别和释放")]),n("li",null,[n("a",P,[s("闭锁（CountDownLatch）"),a(t)]),s("：一个线程或者多个线程，必须在其他某些任务执行完毕后执行，此时可以使用闭锁，比如说分布式计算，计算结果依赖于各个计算步骤的结果")])])])}const K=c(d,[["render",M],["__file","K-Redis客户端.html.vue"]]);export{K as default};
