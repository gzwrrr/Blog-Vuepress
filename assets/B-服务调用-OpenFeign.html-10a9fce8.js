import{_ as e,Q as i,S as n,a9 as l}from"./framework-d7e1aa10.js";const a={},t=l('<h1 id="服务调用-openfeign" tabindex="-1"><a class="header-anchor" href="#服务调用-openfeign" aria-hidden="true">#</a> 服务调用-OpenFeign</h1><ul><li>一个声明式 WebServeice 客户端，使用 Feign 编写可以让客户端更加简单</li><li>使用方法式定义一个服务接口然后再上面添加注解</li><li>Feign 支持可插拔式的编码器和解码器</li><li>Spring Cloud 对 Feign 进行了封装，即 OpenFeign，使得其支持了 Spring MVC 标准注解和 HttpMessageConverters</li><li>OpenFiegn 可以与 Eureka 和 Ribbon 组合使用以支持负载均衡</li></ul><br><h2 id="feign-的作用" tabindex="-1"><a class="header-anchor" href="#feign-的作用" aria-hidden="true">#</a> Feign 的作用</h2><ul><li>使用 Ribbon 时要和 RestTemplate 一起使用，即使用 RestTemplate 对 http 请求进行封装，形成一套模板化的调用方法</li><li>但是在实际开发中，对服务依赖的调用可能不止一处，往往是一个接口会被多出调用，所以通常会对每个微服务自行封装一些客户端类来包装这些依赖服务的调用</li><li>Feign 在上述基础上做了进一步封装，由它来定义和实现依赖服务接口的定义</li><li>在 Feign 的是线下，我们只需要创建一个接口并使用注解的方式来配置它；以前是在 Mapper 接口上标注 Mapper 接口，现在是在一个微服务接口上标注一个 Feign 注解即可完成对服务提供方的接口绑定，即简化了 Ribbon 的使用</li><li>Feign 已经集成了 Ribbon，自带负载均衡</li></ul>',5),r=[t];function o(s,c){return i(),n("div",null,r)}const _=e(a,[["render",o],["__file","B-服务调用-OpenFeign.html.vue"]]);export{_ as default};
