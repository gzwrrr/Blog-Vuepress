import{_ as e,Q as l,S as o,U as n,W as t,X as p,a8 as s,a9 as c,H as i}from"./framework-d7e1aa10.js";const u={},r=n("h1",{id:"进程与线程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#进程与线程","aria-hidden":"true"},"#"),s(" 进程与线程")],-1),k={class:"table-of-contents"},d=c(`<h2 id="_1-进程" tabindex="-1"><a class="header-anchor" href="#_1-进程" aria-hidden="true">#</a> 1.进程</h2><ul><li>加载指令、管理内存、管理 IO</li><li>当程序代码从磁盘加载到内存便开启了一个进程</li><li>进程是一个程序的实例，大多数程序可以同时运行多个进程</li><li>进程拥有共享的资源：内存、空间等，共其内部的线程共享</li><li>进程间的通信较为复杂，同一台计算机的进程通信成为 IPC；不同计算机之间的进程通信需要通过网络并遵守共同的协议（如：HTTP）</li></ul><h2 id="_2-线程" tabindex="-1"><a class="header-anchor" href="#_2-线程" aria-hidden="true">#</a> 2.线程</h2><ul><li><p>一个进程内可以分为多个线程</p></li><li><p>一个线程就是一个指令流，线程会将这个指令流中的命令一条条地交给 CPU 执行</p></li><li><p>Java 中，线程作为最小的调度单位，进程作为资源分配的最小单位</p></li><li><p>在 Windows 中，进程是不活动的，只是作为线程的容器</p></li><li><p>多个线程可以访问同一个共享变量</p></li><li><p>线程的上下文切换的成本一般比进程的上下文切换低</p></li></ul><h2 id="_3-多线程" tabindex="-1"><a class="header-anchor" href="#_3-多线程" aria-hidden="true">#</a> 3.多线程</h2><p><strong>1.值得注意的是：</strong></p><ul><li>IO 操作是不占用 CPU 的，只是我们拷贝文件使用的是阻塞 IO，这时即使不占用 CPU 也还是要等待 IO 结束，没有充分利用到线程</li><li>这种情况下可以使用非阻塞 IO 或异步 IO 解决</li></ul><p><strong>2.优势：</strong></p><ul><li>可以实现异步操作，避免阻塞</li><li>在 CPU 是多核的情况下可以提高程序的效率</li><li>单核 CPU 下多线程一般会比单线程慢，因为多线程还要切换不同线程，这也是一个耗时的操作。但是这不意味着单核下多线程没有用，因为轮流切换线程可以任务使不同任务得以进行，不至于让单个程序一直占用 CPU</li></ul><h2 id="_4-创建线程" tabindex="-1"><a class="header-anchor" href="#_4-创建线程" aria-hidden="true">#</a> 4.创建线程</h2><p><strong>三种方式创建线程：</strong></p><ol><li><p>继承Thread 类</p></li><li><p>实现 Runnable 接口</p></li><li><p>实现 <code>Callable&lt;T&gt;</code> 接口，配合 <code>FutureTask&lt;V&gt;</code> 类</p><ul><li>FutureTask 实现了 RunnableFuture 接口，而 RunnableFuture 继承了 <code>Runnable</code> 接口和 <code>Future&lt;V&gt;</code> 接口（<mark>接口可以多继承，类不行</mark>），这可以返回一个任务的执行结果（Runnable 没有返回值），多线程操作间更加方便</li><li>FutureTask 可以接收 Callable 类型的参数（Callable 与 Runnable 类似，前者比后者多了返回值并且可以抛出异常），以此来处理有返回值的情况</li><li>Callable 接口中只有一个 call 方法，并且使用了 @FunctionalInterface 注解</li></ul><p><strong>【注意】手动创建线程时，一般更推荐使用 Runnable 接口的创建方式，，因为这让 Runnable 任务脱离了 Thread 的继承体系，即：使得任务和线程创建分开（意味着更灵活），并且常常使用 lambda 表达式简化。此外，使用 Runnable 还更容易与线程池等高级 API 结合</strong></p></li><li><p>使用 <strong>线程池</strong> 创建线程，这也是实际生产中的一般选择</p></li></ol><h3 id="_4-1-thread" tabindex="-1"><a class="header-anchor" href="#_4-1-thread" aria-hidden="true">#</a> 4.1 Thread</h3><p><strong>直接使用 Thread 创建线程：</strong></p><p>缺点：Java 中只能单继承，不够灵活</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateByThread</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">CreateByThread</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;通过 thread 直接创建线程...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// 给线程命名</span>
        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;thread-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 启动线程</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;main方法...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-runnable" tabindex="-1"><a class="header-anchor" href="#_4-2-runnable" aria-hidden="true">#</a> 4.2 Runnable</h3><p><strong>1.使用 Runnable 接口创建线程：</strong></p><p>优点：使用接口的形式提高了灵活度</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateByRunnable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">CreateByRunnable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;通过 runnable 接口创建线程...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建线程，同时给线程命名</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">&quot;thread-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 启动线程</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;main方法...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.使用 lambda 表达式的条件</strong></p><ul><li>接口中只有一个方法</li><li>使用了 @FunctionalInterface 注解</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用 lambda 表达式创建</span>
<span class="token class-name">Runnable</span> runnable1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;通过 runnable 接口创建线程...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 当方法体只有一句话时可以去掉大括号</span>
<span class="token class-name">Runnable</span> runnable2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;通过 runnable 接口创建线程...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 最简化的线程创建方式，等价于：Thread thread1 = new Thread(runnable2, &quot;thread-1&quot;);</span>
<span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;通过 runnable 接口创建线程...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;thread-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-futuretask" tabindex="-1"><a class="header-anchor" href="#_4-3-futuretask" aria-hidden="true">#</a> 4.3 FutureTask</h3><p><strong>使用 FutureTask 方式创建：</strong></p><p>Callable 和 Runnable 的区别是：可以获取返回值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateByFutureTask</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">CreateByFutureTask</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建具有返回值的任务</span>
        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;创建任务...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;任务结束...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1000</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建线程</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&quot;thread-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 开启线程执行任务</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 下面的语句是等待线程结束并返回了结果才执行</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;执行时间：{} ms&quot;</span><span class="token punctuation">,</span> task<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-线程池创建线程" tabindex="-1"><a class="header-anchor" href="#_4-4-线程池创建线程" aria-hidden="true">#</a> 4.4 线程池创建线程</h3><p>Executors 中还包含了很多类型的线程池。一般实际生产中不会直接使用 Executors 来创建线程池，因为容易增大开销（这里不展开）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;thread run...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-线程运行原理" tabindex="-1"><a class="header-anchor" href="#_5-线程运行原理" aria-hidden="true">#</a> 5.线程运行原理</h2><h3 id="_5-1-栈与栈帧" tabindex="-1"><a class="header-anchor" href="#_5-1-栈与栈帧" aria-hidden="true">#</a> 5.1 栈与栈帧</h3><ul><li>JVM 由堆、栈、方法区组成，其中栈内存就是给线程用的，每启动一个线程，虚拟机就会为其分配一块栈内存</li><li>每个栈由多个栈帧（Frame）组成，对应着每次方法调用时所占的内存</li><li>每个线程只能有一个活动栈帧，对应着当前执行的方法</li><li>不同的线程间的栈内存是互不干扰的</li></ul><h3 id="_5-2-线程上下文切换" tabindex="-1"><a class="header-anchor" href="#_5-2-线程上下文切换" aria-hidden="true">#</a> 5.2 线程上下文切换</h3><p><strong>1.切换时机：</strong></p><ul><li>线程的 CPU 时间片用完</li><li>执行垃圾回收时</li><li>有更高优先级的线程需要运行</li><li>线程自己调用了 sleep、yield、wait、join、park、synchronized、lock等方法</li></ul><p><strong>2.切换发生时：</strong></p><ul><li>需要由操作系统保存当前线程的状态并恢复另一个线程的状态，Java 中对应的概念就是程序计数器，他的作用是记住下一条 jvm 指令的执行地址，这是线程私有的</li><li>状态包括程序计数器、虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址等</li><li>线程上下文频繁地切换会影响性能</li></ul><h2 id="_6-线程的主要方法" tabindex="-1"><a class="header-anchor" href="#_6-线程的主要方法" aria-hidden="true">#</a> 6.线程的主要方法</h2><h3 id="_6-1-run-与-start" tabindex="-1"><a class="header-anchor" href="#_6-1-run-与-start" aria-hidden="true">#</a> 6.1 run 与 start</h3><ul><li>创建线程后可以直接调用 run 方法，但是这样执行者就变成了 main 线程，没有提高性能，只有使用 start 方法才能由创建的线程执行该任务</li><li>start 方法是不能重复调用的</li></ul><h3 id="_6-2-sleep-与-yield" tabindex="-1"><a class="header-anchor" href="#_6-2-sleep-与-yield" aria-hidden="true">#</a> 6.2 sleep 与 yield</h3><ul><li>sleep 会让当前线程从 Runnable 进入 Time waiting 阻塞状态，其他线程可以使用 interrupt 方法打断正在睡眠的线程，这时 sleep 会抛出 InterruptException</li><li>睡眠结束后的线程未必会立刻得到执行；建议使用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性</li><li>yield 会让当前线程从 Running 进入 Runnable 就绪状态，然后调度执行其他同优先级的线程，此时如果没有同优先级的线程，那么不能保证能让当前线程暂停的效果。yield 具体的实现依赖于操作系统的任务调度器</li><li>调度器只会把时间片分给 Runnable 状态的线程而不会分给 Time Waiting 状态的线程</li><li>sleep 会有一个真正的休眠时间，yield 在没有其他线程的情况下还是会继续本线程</li><li>线程优先级会提示（hint）调度器优先调度优先级高的线程，但这仅仅是一个提示，调度器是可以忽略掉的。如果 CPU 比较忙，那么优先级高的线程会获得更加多的时间片，但 CPU 闲时，优先级几乎没作用</li></ul><h3 id="_6-3-join" tabindex="-1"><a class="header-anchor" href="#_6-3-join" aria-hidden="true">#</a> 6.3 join</h3><ul><li>等待调用 join 的线程执行完成后再继续执行当前线程的</li><li>join 是用来同步线程的</li><li>join 可以带参数，倘若参数设置的时长小于线程的总时常，那么就会提前打断线程；倘若设置的时常大于线程的总时常，那么在线程任务完成后会直接结束而不是继续等待，这也是带参数时和 sleep 方法的区别</li><li>join 方法使用了保护性暂停模式（详见第三大点）</li></ul><h3 id="_6-4-interrupt-与-park" tabindex="-1"><a class="header-anchor" href="#_6-4-interrupt-与-park" aria-hidden="true">#</a> 6.4 interrupt 与 park</h3><ul><li>interrupt 方法用于打断线程，见 1.7 所示</li><li>park 方法可以让线程停止，之后的代码不会执行，用 interrupt 可以打断这种状态</li><li>注意，在打断标记为 true 时，park 方法会失效，将打断标记置为真即可（使用interrupted，见 1.7 解释）</li></ul><h3 id="_6-5-stop、suspend-与-resume" tabindex="-1"><a class="header-anchor" href="#_6-5-stop、suspend-与-resume" aria-hidden="true">#</a> 6.5 stop、suspend 与 resume</h3><ul><li>三个方法都不建议使用，已经过时，容易破坏同步代码块，造成线程死锁。其都有对应的解决方法</li><li>stop 方法用于立即停止线程运行；suspend 方法用于挂起（暂停）线程运行；resume 方法用于恢复线程运行。</li></ul><h3 id="_6-6-wait-notify" tabindex="-1"><a class="header-anchor" href="#_6-6-wait-notify" aria-hidden="true">#</a> 6.6 wait / notify</h3><ul><li>Monitor 中的 Owner 线程发现条件不满足时，调用 wait 方法，即可让线程进入 WaitSet 变为 Waiting 状态</li><li>Blocked 和 Waiting 的线程都会处于阻塞状态，不占用 CPU 时间片</li><li>Blocked 线程会在 Owner 线程释放锁时唤醒</li><li>Waiting 线程会在 Owner 线程调用 notify 或 notifyAll 时唤醒，但是唤醒后并不意味着立即获得锁，仍需要进入 EntryList 中重新竞争</li><li>上述方法都是线程之间进行协作的手段，都是属于 object 对象的方法。必须要获取对象的锁才能调用这几个方法</li></ul><p><strong>1.相关 API</strong></p><ul><li>obj.wait：让进入 object monitor 的线程到 WaitSet 等待。不带参数或者参数为 0 的 wait 方法表示无限制等待下去，参数是用于设置超时时间的（timeout）。特别注意 wait 方法还有两个参数（另一个为 nanos）的重载，但是 nanos 参数并不能精确到纳秒，通过源码可以发现，当 nanos 大于 0 时会直接将 timeout 的值加一</li><li>obj.notify：在 object 上正在 WaitSet 等待的线程中挑一个唤醒</li><li>obj.notifyAll：让 object 上正在 WaitSet 等待的线程全部唤醒</li></ul><p><strong>2.基本用法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseUsage</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">BaseUsage</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;执行...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 进入 WaitSet 等待</span>
                    o<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 唤醒后才执行的操作</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;唤醒操作...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;t1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;执行...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 进入 WaitSet 等待</span>
                    o<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 唤醒后才执行的操作</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;唤醒操作...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;t2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 主线程休息 1 秒后随机唤醒一个线程</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;执行...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            o<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.sleep 和 wait 的区别</strong></p><ul><li>sleep 是 Thread 的方法，而 wait 是 Object 的方法</li><li>sleep 不需要强制和 synchronized 配合使用，但是 wait 需要和 synchronized 一起使用</li><li>sleep 在睡眠的同时不会释放对象锁，但是 wait 在等待时会释放对象锁</li></ul><h3 id="_6-7-locksupport-的-park-和-unpark" tabindex="-1"><a class="header-anchor" href="#_6-7-locksupport-的-park-和-unpark" aria-hidden="true">#</a> 6.7 LockSupport 的 park 和 unpark</h3><ul><li>LockSupport.park 用于暂停当前线程；LockSupport.unpark 用于恢复某个线程的运行</li><li>与 Object 的 wait 与 notify(All) 相比 <ul><li>wait，notify 和 notifyAll 必须配合 Object Monitor 一起使用，而 unpark 不需要</li><li>park 和 unpark 是以线程为单位来阻塞和唤醒线程，而 notify 只能随机唤醒一个等待线程，notifyAll 是唤醒所有的等待线程（不那么精确）</li><li>park 和 unpark 可以先 unpark，而 wait 和 notify 不能先 notify</li></ul></li></ul><p><strong>park 和 unpark 原理</strong></p><ul><li>每个线程都有自己的一个 Parker 对象（有 C 实现，在 Java 中不可见），有三部分组成：_ count、_ cond、_ mutex（互斥锁）</li><li>线程就像一个旅人，Parker 就像他随身携带的背包，条件变量（_ cond）就好比背包中的帐篷；_ count 就好比背包中的备用干粮（0 为耗尽，1 为充足）</li><li>调用 park 就是要看需不需要停下来休息 <ul><li>如果干粮耗尽，那么就钻进帐篷休息</li><li>如果备用干粮充足，那么不需要停留，继续前进</li></ul></li><li>调用 unpark 就好比令干粮充足 <ul><li>如果此时线程还在帐篷中，就唤醒让他继续前进</li><li>如果这时线程还在运行，那么下次他调用 park 时，仅是消耗掉备用干粮，不需要停留继续前进。因为背包空间有限，多次调用 unpark 仅会补充一份备用干粮</li></ul></li></ul><h2 id="_7-线程停止的方法" tabindex="-1"><a class="header-anchor" href="#_7-线程停止的方法" aria-hidden="true">#</a> 7.线程停止的方法</h2><p>【注意】</p><ul><li>抛出的异常被捕获处理后，之后的代码都可以正常执行，这就是为什么下面捕获异常后循环还在继续</li><li>但是如果将异常往上抛出，那么之后的代码就不可以继续执行</li></ul><p>【注意】</p><ul><li>下面使用的 isInterrupted 方法是用于判断线程是否被打断的，不会清除打断标记</li><li>而与之相像的另外一个方法 interrupted 也是判断线程是否被打断，但是会清除打断标记</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TwoPhaseTermination</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Termination</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Termination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Termination</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Termination</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Thread</span> monitor<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 启动线程
     * 在其中判断线程是否被打断
     * 打断则释放资源后再结束
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 获取当前线程</span>
                <span class="token class-name">Thread</span> cur <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;释放资源...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 结束线程</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 情况1：在该处被打断的话，interrupt 的状态会被重新置成 false，无法停止线程，类似的还有 wait、join</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 情况2：在该处被打断则 interrupt 状态为直接被置为 true</span>
                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;执行监控记录...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 因为情况1在抛出异常后 interrupt 状态是 false，所以此处还需要重新置为 true</span>
                    cur<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;t1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        monitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 不使用线程自带的 stop 方法
     * 因为停止后线程持有的资源可能释放不了
     * 应该使用 interrupt 方法代替
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        monitor<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-主线程与守护线程" tabindex="-1"><a class="header-anchor" href="#_8-主线程与守护线程" aria-hidden="true">#</a> 8.主线程与守护线程</h2><ul><li>默认情况下，Java 进程需要等待所有的线程都运行结束才会结束</li><li>有一种特殊的线程叫守护线程，只要其他非守护线程结束了，就会强制结束（即使守护线程的代码没有执行完也会强制结束）</li><li>使用 setDaemon 方法（参数为 true）可以将线程设置成守护线程</li><li>垃圾回收器线程就是一种守护线程。Tomcat 中的 Acceptor 和 Poller 线程都是守护线程，所以 Tomcat 在收到 shutdown 命令后，不会等待它们处理完当前请求</li></ul><h2 id="_9-线程的状态" tabindex="-1"><a class="header-anchor" href="#_9-线程的状态" aria-hidden="true">#</a> 9.线程的状态</h2><p><strong>1.从操作系统层面描述（五种状态）</strong></p><ul><li>初始状态：仅是在语言层面创建了线程对象，还未与操作系统线程关联</li><li>可运行状态（就绪状态）：指该线程已经被创建（与操作系统线程相关联），可以由 CPU 调度执行</li><li>运行状态：指获取了 CPU 时间片运行中的状态</li><li>阻塞状态： <ul><li>如调用了阻塞 API，如 BIO 读写文件，这时该线程实际上不会使用到 CPU，会导致线程上下文切换，进入阻塞状态</li><li>等待操作完毕后，会由操作系统唤醒阻塞的线程，转换至可运行状态。</li><li>阻塞与可运行状态的区别是，对阻塞的线程来说只要它们一直不被唤醒，那么调度器就一直不会考虑调度它们</li></ul></li><li>终止状态：表示线程已经执行完毕，生命周期已经结束，不会再转换为其他状态</li></ul><p><strong>2.从 Java API 层面描述（六种状态，按照 Thread.State 枚举分类）</strong></p><p>使用 getState 方法可以获取线程当前的状态</p><ul><li>NEW：线程刚被创建，但是还没有调用 start 方法</li><li>RUNNABLE：当调用了 start 方法之后便进入可运行状态，涵盖了操作系统的： <ul><li>可运行状态</li><li>运行状态（由于 BIO 导致的线程阻塞 Java 是无法区分的，仍然认为是可运行）</li><li>阻塞状态</li></ul></li><li>TERMINATED：线程代码运行结束</li><li>Java 中三种特殊的阻塞： <ul><li>BLOCKED（如：加锁）</li><li>WAITING（如：join，wait）</li><li>TIMED_WAITING（如：sleep）</li></ul></li></ul><p><strong>3.线程池的状态：</strong></p><ol><li>RUNNING：线程池正常运行，可以接受和处理任务</li><li>SHUTDOWN：当调用 <code>shutdown()</code> 方法时线程池就会进入该状态，表示线程池关闭，此时不会接受新的任务，但是会把队列中的任务处理完</li><li>STOP：当调用 <code>shutdownnow()</code> 方法时线程池就进入 STOP 状态，表示线程池处于停止状态，此状态下线程池不会接受新任务，也不会处理队列中的任务，并且正常运行的线程也会被中断</li><li>TIDYING：线程池中没有线程运行后，状态就会自动变成 TIDYING，并且会调用 <code>terminated()</code> 方法，该方法是空方法，需要自己实现</li><li>TERMINATED：<code>terminated()</code> 方法执行完后，线程池的状态就变成了 TERMINATED</li></ol>`,77);function v(m,b){const a=i("router-link");return l(),o("div",null,[r,n("nav",k,[n("ul",null,[n("li",null,[t(a,{to:"#进程与线程"},{default:p(()=>[s("进程与线程")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_1-进程"},{default:p(()=>[s("1.进程")]),_:1})]),n("li",null,[t(a,{to:"#_2-线程"},{default:p(()=>[s("2.线程")]),_:1})]),n("li",null,[t(a,{to:"#_3-多线程"},{default:p(()=>[s("3.多线程")]),_:1})]),n("li",null,[t(a,{to:"#_4-创建线程"},{default:p(()=>[s("4.创建线程")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_4-1-thread"},{default:p(()=>[s("4.1 Thread")]),_:1})]),n("li",null,[t(a,{to:"#_4-2-runnable"},{default:p(()=>[s("4.2 Runnable")]),_:1})]),n("li",null,[t(a,{to:"#_4-3-futuretask"},{default:p(()=>[s("4.3 FutureTask")]),_:1})]),n("li",null,[t(a,{to:"#_4-4-线程池创建线程"},{default:p(()=>[s("4.4 线程池创建线程")]),_:1})])])]),n("li",null,[t(a,{to:"#_5-线程运行原理"},{default:p(()=>[s("5.线程运行原理")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_5-1-栈与栈帧"},{default:p(()=>[s("5.1 栈与栈帧")]),_:1})]),n("li",null,[t(a,{to:"#_5-2-线程上下文切换"},{default:p(()=>[s("5.2 线程上下文切换")]),_:1})])])]),n("li",null,[t(a,{to:"#_6-线程的主要方法"},{default:p(()=>[s("6.线程的主要方法")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_6-1-run-与-start"},{default:p(()=>[s("6.1 run 与 start")]),_:1})]),n("li",null,[t(a,{to:"#_6-2-sleep-与-yield"},{default:p(()=>[s("6.2 sleep 与 yield")]),_:1})]),n("li",null,[t(a,{to:"#_6-3-join"},{default:p(()=>[s("6.3 join")]),_:1})]),n("li",null,[t(a,{to:"#_6-4-interrupt-与-park"},{default:p(()=>[s("6.4 interrupt 与 park")]),_:1})]),n("li",null,[t(a,{to:"#_6-5-stop、suspend-与-resume"},{default:p(()=>[s("6.5 stop、suspend 与 resume")]),_:1})]),n("li",null,[t(a,{to:"#_6-6-wait-notify"},{default:p(()=>[s("6.6 wait / notify")]),_:1})]),n("li",null,[t(a,{to:"#_6-7-locksupport-的-park-和-unpark"},{default:p(()=>[s("6.7 LockSupport 的 park 和 unpark")]),_:1})])])]),n("li",null,[t(a,{to:"#_7-线程停止的方法"},{default:p(()=>[s("7.线程停止的方法")]),_:1})]),n("li",null,[t(a,{to:"#_8-主线程与守护线程"},{default:p(()=>[s("8.主线程与守护线程")]),_:1})]),n("li",null,[t(a,{to:"#_9-线程的状态"},{default:p(()=>[s("9.线程的状态")]),_:1})])])])])]),d])}const h=e(u,[["render",v],["__file","B-进程与线程.html.vue"]]);export{h as default};
