import{_ as r,Q as a,S as i,a9 as l}from"./framework-d7e1aa10.js";const n={},t=l('<h1 id="主从复制" tabindex="-1"><a class="header-anchor" href="#主从复制" aria-hidden="true">#</a> 主从复制</h1><p>—— 需要在 <strong>可用性</strong> 与 <strong>一致性</strong> 之间的做出权衡</p><h2 id="简述" tabindex="-1"><a class="header-anchor" href="#简述" aria-hidden="true">#</a> 简述</h2><ul><li>赋予副本不同角色，其中存在一个主副本</li><li>主副本将数据存储子啊本地后，将数据更改作为 <strong>日志</strong> 或者以 <strong>更改流</strong> 的方式发送到各个副本（结点）</li><li>写请求全部打到主副本上，读请求主从副本均可处理（做到了负载均衡，但是存在 <strong>一致性</strong> 问题）</li></ul><br><h2 id="复制方式" tabindex="-1"><a class="header-anchor" href="#复制方式" aria-hidden="true">#</a> 复制方式</h2><p>分为 <strong>异步复制</strong> 和 <strong>同步复制</strong></p><ul><li>异步复制：主副本保存完成后立即向客户端返回成功消息（此时不同副本的 <strong>读请求</strong> 可能出现数据不一致）</li><li>同步复制：主副本等待数据传送到从副本，并且得到确认之后向客户端返回成功消息</li></ul><br><h2 id="一致性问题" tabindex="-1"><a class="header-anchor" href="#一致性问题" aria-hidden="true">#</a> 一致性问题</h2><p>两种角度：</p><ul><li>客户端只从主副本读取数据（如 Kafaka）</li><li>采用同步复制（单纯的同步复制会有问题，如一个副本故障会阻塞），这样会非常影响吞吐量；如果只使用异步复制并由主副本承担读请求，当主副本发生故障切换结点时也会发生数据不一致的问题</li></ul><br><h2 id="抛出问题" tabindex="-1"><a class="header-anchor" href="#抛出问题" aria-hidden="true">#</a> 抛出问题</h2><p>让用户决策是使用同步还是异步，使用不同语义决定：</p><ul><li>客户端使用 acks 参数确认</li><li>ISR 机制</li></ul><br><h2 id="主从复制需要的能力" tabindex="-1"><a class="header-anchor" href="#主从复制需要的能力" aria-hidden="true">#</a> 主从复制需要的能力</h2><ul><li>新增（从）副本（Kafuka 中新增副本会 <strong>追赶</strong> 主副本的数据，数据库中使用 <strong>快照</strong> + <strong>增量</strong>） <ul><li>过程：某时间点产生一个一致性的快照，将快照拷贝到从节点，从节点连接到主节点并请求所有快照点后发生的日志改变</li><li>追赶：获取到日志后，应用到自己的副本中（上述过程可能发生多次）</li></ul></li><li>处理结点失效 <ul><li>主节点失效：使用 <strong>节点切换</strong>，三个步骤：确认主节点失效（例如无心跳响应）、选举新的主节点（新节点与旧节点差距要小）、重配系统使新节点生效</li><li>从节点失效：使用 **追赶式恢复 **（从节点获取崩溃前执行的最后一个事务，使用上述的 <strong>追赶</strong> 恢复）</li></ul></li></ul><p>注：主节点失效情况下，如果是使用 <strong>异步复制</strong> 还可能导致数据不一致的问题，可能是主节点在角色转变后还没意识到从而对数据造成破坏；此外主节点超时时间设置也是个问题：太长会导致服务不可用，太短可能导致节点频繁切换</p><br><h2 id="复制滞后" tabindex="-1"><a class="header-anchor" href="#复制滞后" aria-hidden="true">#</a> 复制滞后</h2><ul><li>同步复制可能会影响到吞吐量和可用性，但是使用异步复制又可能会造成数据不一致，此处需要做出权衡</li><li><strong>最终一致性</strong>：客户端读取不同的副本的数据可能不一致，即复制滞后的现象，存在这种问题的复制行为所形成的数据一致性统称为最终一致性</li></ul>',23),e=[t];function s(o,h){return a(),i("div",null,e)}const c=r(n,[["render",s],["__file","主从复制.html.vue"]]);export{c as default};
