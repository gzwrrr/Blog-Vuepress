import{_ as e,Q as o,S as c,U as n,W as t,X as p,a8 as s,a9 as l,H as i}from"./framework-d7e1aa10.js";const u={},k=n("h1",{id:"java-并发共享模型-重点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#java-并发共享模型-重点","aria-hidden":"true"},"#"),s(" Java 并发共享模型（重点）")],-1),r={class:"table-of-contents"},d=l(`<h2 id="_1-管程" tabindex="-1"><a class="header-anchor" href="#_1-管程" aria-hidden="true">#</a> 1.管程</h2><h3 id="_1-1-共享带来的问题" tabindex="-1"><a class="header-anchor" href="#_1-1-共享带来的问题" aria-hidden="true">#</a> 1.1 共享带来的问题</h3><ul><li>一个程序运行多个线程本身是没有问题的，问题在于多个线程访问共享资源，但这是对多个线程对共享资源读写操作时发生指令交错情况而言的</li><li>临界区：一段代码块内如果存在对共享资源的多线程读写操作，那么称这段代码块为临界区</li><li>竞态条件：多个线程在临界区内执行，由于代码的执行序列不同而导致结果无法预测，那么就称发生了竞态条件</li></ul><h2 id="_2-synchronized" tabindex="-1"><a class="header-anchor" href="#_2-synchronized" aria-hidden="true">#</a> 2.Synchronized</h2><h3 id="_2-1-基本用法" tabindex="-1"><a class="header-anchor" href="#_2-1-基本用法" aria-hidden="true">#</a> 2.1 基本用法</h3><ul><li>为了避免临界区的竞态条件发生，可以采用： <ul><li>阻塞式方案：synchronized（对象锁，使用互斥的方法使同一时刻之多只有一个线程能够持有对象锁），lock</li><li>非阻塞式方案：原子变量</li></ul></li></ul><p><strong>【注意】Java 中互斥和同步都可以采用 synchronized 关键字来完成，但是还是由区别的：</strong></p><ul><li>互斥是保证临界区的竞态条件发生，同一时刻只能有一个线程执行临界区代码</li><li>同步是由于线程执行的先后顺序不同，需要一个线程等待其他线程运行到某个点</li></ul><p><strong>【注意】加对象锁的原理大致可以理解成：</strong></p><ul><li>一个线程在执行非原子性操作时，加锁会让这个操作变成原子性操作</li><li>这就意味着，当执行的线程在得到的时间片内没有完成整个操作，锁就不会解开，也即其他线程即使得到了时间片也无法对这个对象进行操作</li><li>只有等到未完成操作的线程再次得到自己加锁的对象并完成了整个操作，即使得非原子性操作在逻辑上变成原子性操作时，锁才会解开，其他线程才能访问这个对象，否则就得一直出现上述第二点的情况，这也会导致性能下降（还有线程上下文切换的开销）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedSolution</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedSolution</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 由于自增和自减操作不是原子性操作（因为编译得到的字节码中，自增自减各自都有四条语句），所以下面的代码不同步的话结果会出错
     * <span class="token keyword">@param</span> <span class="token parameter">args</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>

        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 加锁需要额外传递一个 Object，因为 count 不是一个对象，而且不能将其改为 Integer，因为装箱和拆箱时会改变引用的对象导致锁失效</span>
            <span class="token comment">// 即锁必须要对同一个对象才能生效</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    count1<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;t1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 也可以在这行加锁，即在非原子性操作处加锁即可</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    count1<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;t2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 一定要等待两个线程都结束才能读取 count 的值，否则可能没结束就读取了错误的值</span>
        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;count：{} -- time：{}ns&quot;</span><span class="token punctuation">,</span> count1<span class="token punctuation">,</span> end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>


        start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count2<span class="token operator">++</span><span class="token punctuation">;</span>
            count2<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;count：{} -- time：{}ns&quot;</span><span class="token punctuation">,</span> count2<span class="token punctuation">,</span> end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-方法上的-synchronized" tabindex="-1"><a class="header-anchor" href="#_2-2-方法上的-synchronized" aria-hidden="true">#</a> 2.2 方法上的 synchronized</h3><p><strong>1.以上述代码为例子，将其中的 count 封装成对象：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Room</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// this 是指锁住当前实例化的对象</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> count<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.上述代码等价于下面的，即加在方法上的 synchronized 并不是锁方法（没有锁方法这个操作），而是锁住当前实例化的对象：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Room</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.加在静态方法上的话是锁住类对象的，如下：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 等价于下面的</span>
<span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       	<span class="token comment">// 不是锁 this</span>
        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-变量的线程安全分析" tabindex="-1"><a class="header-anchor" href="#_3-变量的线程安全分析" aria-hidden="true">#</a> 3.变量的线程安全分析</h2><h3 id="_3-1-成员变量和静态变量" tabindex="-1"><a class="header-anchor" href="#_3-1-成员变量和静态变量" aria-hidden="true">#</a> 3.1 成员变量和静态变量</h3><ul><li>如果它们没有共享，则是线程安全的</li><li>如果它们共享，那么要根据它们的状态是否能够被改变来判断 <ul><li>如果只有读操作，则是线程安全的</li><li>如果有读写操作，则这段代码是临界区，需要考虑线程安全</li></ul></li></ul><h3 id="_3-2-局部变量" tabindex="-1"><a class="header-anchor" href="#_3-2-局部变量" aria-hidden="true">#</a> 3.2 局部变量</h3><ul><li>局部变量是线程安全的</li><li>但是局部变量引用的对象未必是线程安全的 <ul><li>如果该对象没有逃离方法的作用范围，则是线程安全的</li><li>如果该对象逃离了方法的作用范围，则需要考虑线程安全</li></ul></li><li>父类的局部变量要是暴露引用，其子类使用时可能会有线程安全问题（子类覆盖了父类的方法，并且在其中创建了新线程并使用了某个变量的引用），此时应该将父类方法从 public 改成 private 防止父类方法被覆盖。此外还可以考虑在方法上加上 final 关键字防止子类覆盖</li></ul><h3 id="_3-3-线程安全类" tabindex="-1"><a class="header-anchor" href="#_3-3-线程安全类" aria-hidden="true">#</a> 3.3 线程安全类</h3><ul><li>线程安全类中的方法大多数时线程安全的。不可变类（如：String、Integer）时线程安全的，因为其内部的状态（属性）是不可变的</li><li>但是这些线程安全的方法组合在一起时可能出现线程安全问题</li><li>例如 Hashtable 的 get 和 put 方法都是线程安全的，但是先判断 get 的 key 是否为空再 put 的话，此时倘若有两个线程，一个先 get，另一个 get 后未等到 先前的线程 put 就先把自己的结果 put，就会导致之后第一个 put 后会把第二个先 put 的覆 盖掉，从而导致线程安全问题</li></ul><h2 id="_4-对象头" tabindex="-1"><a class="header-anchor" href="#_4-对象头" aria-hidden="true">#</a> 4.对象头</h2><h3 id="_4-1-普通对象头" tabindex="-1"><a class="header-anchor" href="#_4-1-普通对象头" aria-hidden="true">#</a> 4.1 普通对象头</h3><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java并发/20230209/普通对象头.png" alt="image-20220701093956420" tabindex="0" loading="lazy"><figcaption>image-20220701093956420</figcaption></figure><h3 id="_4-2-数组对象头" tabindex="-1"><a class="header-anchor" href="#_4-2-数组对象头" aria-hidden="true">#</a> 4.2 数组对象头</h3><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java并发/20230209/数组对象头.png" alt="image-20220701094022990" tabindex="0" loading="lazy"><figcaption>image-20220701094022990</figcaption></figure><h3 id="_4-3-mark-word" tabindex="-1"><a class="header-anchor" href="#_4-3-mark-word" aria-hidden="true">#</a> 4.3 Mark Word</h3><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java并发/20230209/MarkWord.png" alt="image-20220701094445330" tabindex="0" loading="lazy"><figcaption>image-20220701094445330</figcaption></figure><h2 id="_5-monitor-轻量级锁-偏向锁" tabindex="-1"><a class="header-anchor" href="#_5-monitor-轻量级锁-偏向锁" aria-hidden="true">#</a> 5.Monitor/轻量级锁/偏向锁</h2><h3 id="_5-1-monitor-重量级锁" tabindex="-1"><a class="header-anchor" href="#_5-1-monitor-重量级锁" aria-hidden="true">#</a> 5.1 Monitor（重量级锁）</h3><ul><li>Monitor 操作系统层面实现的锁，称为监视器或管程</li><li>Java 中的 synchronized 在上锁时会关联 Monitor，成为 Monitor 的 owner</li><li>其他线程想要获取共享资源时就会访问 Monitor，查看其是否有 owner，如果有则进入 blocked 状态，进入阻塞队列</li><li>锁释放掉后阻塞队列中的线程才能成为 Monitor 的 owner</li></ul><h3 id="_5-2-轻量级锁" tabindex="-1"><a class="header-anchor" href="#_5-2-轻量级锁" aria-hidden="true">#</a> 5.2 轻量级锁</h3><ul><li>轻量级锁对使用者是透明的，语法仍然是 synchronized</li><li>轻量级锁的使用场景：如果一个对象有对线程访问，但是多线程访问的时间是错开的（没有竞争），那么可以使用轻量级锁优化</li><li>轻量级锁的创建与解锁： <ul><li>创建锁记录 Lock Record 对象，每个线程的栈帧都会包含一个锁记录结构，内部可以存储锁定对象的 Mark Word</li><li>让锁记录中的 Object reference 指向锁对象，并尝试用 cas 替换 Object 的 Mark Word，将 Mark Word 的值存入锁记录（即进行了数据交换）</li><li>如果 cas 替换成功，对象头中就会存储锁记录地址和状态 00，表示由该线程给对象加锁（cas 是一个原子性的交换操作）</li><li>如果 cas 替换失败，则有两种情况：如果是其他线程已经持有了该 Object 的轻量级锁，这时就表明有竞争，进入锁膨胀过程；如果是自己执行了 synchronized 锁重入，那么就再添加一条 Lock Record 作为重入的计数（值为 null）</li><li>当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录（去除重入的锁记录），表示重入计数减一</li><li>当退出 synchronized 代码块（解锁时）锁记录不为null，这时使用 cas 将 Mark Word 的值恢复给对象头。如果恢复成功，说明解锁成功；如果失败，说明轻量级锁进行了锁膨胀或已经升级成了重量级锁，进入重量级锁的解锁流程</li></ul></li><li>锁膨胀过程 <ul><li>如果在尝试加轻量级锁的过程中，cas 操作无法成功，这时一种情况就是有其他线程为此对象上了轻量级锁（即有竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁</li><li>流程：在线程发现 Object 已经有轻量级锁时，该线程会为 Object 对象申请 Monitor 锁，让 Object 指向重量级锁地址，然后该线程会让自己进入 Monitor 的阻塞队列中（EntryList Blocked）解锁时，退出的线程会使用 cas 将 Mark Word 的值恢复给对象头，这时会进入重量级解锁流程，按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒阻塞队列中的线程</li></ul></li><li>自旋优化 <ul><li>重量级锁竞争的时候，还可以使用自旋进行优化，如果当前线程自旋成功（即多次循环测试出当前持锁线程已经退出了同步块，释放了锁）这时当前线程就可以避免阻塞</li><li>自旋会占用 CPU 时间，在单核 CPU 的情况下进行自旋就是浪费时间，只有多核 CPU 自旋才能发挥优势</li><li>在 Java 6 之后自旋锁都是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会较高，这样就会多自旋几次，反之就会少自旋几次。Java 7 之后不能控制是否开启自旋功能</li></ul></li></ul><h3 id="_5-3-偏向锁" tabindex="-1"><a class="header-anchor" href="#_5-3-偏向锁" aria-hidden="true">#</a> 5.3 偏向锁</h3><ul><li><p>轻量级锁在没有竞争时（只有自己一个单独的线程）每次重入仍然需要执行 cas 操作</p></li><li><p>Java 6 中引入了偏向锁来进一步优化：只有第一次使用 cas 将线程 is 设置到对象的 Mark Word 中，之后发现这个线程 id 是自己就表示没有竞争，不用重新 cas，以后只要不发生竞争，这个对象就归该线程所有</p></li><li><p>当一个对象创建时：</p><ul><li>如果开启了偏向锁（默认开启），那么对象创建后，Mark Word 的值为 0x05 即后三位为 101，这时它的对象头中的 thread、epoch、age 都为 0</li><li>偏向锁默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加入 VM 蚕食 -XX:BiasedLockingStartupDelay=0 来禁用延迟</li><li>如果没有开启偏向锁，那么对象创建之后，Mark Word 值为 0x01 即最后三位为 001，这时它的对象头中的 hashcode、age 都为 0，第一次用到 hashcode 时才会赋值</li><li>当创建对象后调用 hashcode 方法，会直接禁用掉偏向锁，因为偏向锁中没有存储 hashcode 的字段，只好使用轻量级锁，因此会禁用掉偏向锁</li></ul></li><li><p>锁的撤销：使用 wait / notify 会撤销偏向锁或轻量级锁，因为只有重量级锁才可以调用这些方法</p></li><li><p>批量重偏向：如果对象被多个线程访问，但是没有竞争，这时偏向锁线程 t1 的对象仍然有机会重新偏向 t2，重偏向会重置对象恶的 Thread ID。当撤销偏向锁的阈值超过 20 次时，jvm 会认为偏向错误了，会在给这些对象加锁时重新偏向至当前加锁的线程</p></li><li><p>批量撤销：当撤销偏向锁阈值超过 40 次后，jvm 会认为确实偏向错误了（不应该偏向），于是整个类的所有对象都会变为不可偏向，新建的对象也是不可偏向的</p></li></ul><h3 id="_5-4-锁消除" tabindex="-1"><a class="header-anchor" href="#_5-4-锁消除" aria-hidden="true">#</a> 5.4 锁消除</h3><ul><li>JIT 即时编译器会优化字节码中不需要加的锁，即去除加锁的操作。</li><li>JIT 是默认开启的，禁用可以加入 VM 参数：-XX:-EliminateLocks</li></ul><h2 id="_6-java-内存模型" tabindex="-1"><a class="header-anchor" href="#_6-java-内存模型" aria-hidden="true">#</a> 6.Java 内存模型</h2><ul><li>JMM 定义了主存、工作内存等的抽象概念，底层对应着 CPU、寄存器、缓存、硬件内存、CPU 指令优化等</li><li>JMM 体现在以下几个方面： <ul><li>可见性：保证指令不会受 CPU 缓存的影响</li><li>原子性：保证指令不会受到线程上下文切换的影响</li><li>有序性：保证指令不会受 CPU 指令并行优化的影响</li></ul></li></ul><h3 id="_6-1-可见性" tabindex="-1"><a class="header-anchor" href="#_6-1-可见性" aria-hidden="true">#</a> 6.1 可见性</h3><ul><li>主存与工作内存之间还有缓存，JIT 会将主存中的变量优化，即存入缓存中提高效率，额外开辟的线程都将从缓存中读取数据</li><li>但是这样一来，即使修改了主存中的变量值，额外开辟的线程还是会读取缓存中的数据，即读取到的都是旧值</li></ul><p><strong>1.使用 volatile 解决：</strong></p><ul><li>在共享的变量上加上 volatile 关键字，使得变量不存如缓存</li><li>volatile 可以用来修饰成员变量和静态成员变量，可以避免线程从自己的工作缓存中查找变量的值，即线程操作 volatile 变量都是直接操作内存的</li></ul><p><strong>2.使用 synchronized 解决：</strong></p><ul><li>在共享变量外使用 synchronized 可以使得变量对线程都是可见的</li><li>但是 synchronized 需要创建 Monitor，是个重量级的操作，开销比较大</li></ul><p><strong>3.volatile 原理：</strong></p><ul><li>volatile 的底层实现原理是内存屏障 <ul><li>对 volatile 变量的写指令后会加入写屏障，保证在该屏障之前的对共享变量的改动都能同步到主存中。写屏障会确保指令重排时不会将写屏障之前的代码排在写屏障之后</li><li>对 volatile 变量的读指令后会加入读屏障，保证在该屏障之后的对共享变量的读取都是加载主存中的最新数据。读屏障会确保指令重排时不会将读屏障之后的代码排在读屏障之前</li></ul></li></ul><h3 id="_6-2-原子性" tabindex="-1"><a class="header-anchor" href="#_6-2-原子性" aria-hidden="true">#</a> 6.2 原子性</h3><ul><li>volatile 只能保证可见性但是不能保证没有指令交错，即在多个线程同时修改一个变量时，还是有可能读到未修改前的值</li><li>volatile 适用于一个线程修改变量而多个线程读取的情况</li><li>synchronized 可以同时保证原子性和可见性</li></ul><h3 id="_6-3-有序性" tabindex="-1"><a class="header-anchor" href="#_6-3-有序性" aria-hidden="true">#</a> 6.3 有序性</h3><ul><li>JVM 会在不影响正确性的前提下，调整语句的执行顺序，这也称为指令重排</li><li>多线程下的指令重排会影响正确性</li><li>使用 volatile 修饰变量可以避免这个变量之前的指令重排序</li><li>synchronized 只有在完全保护一个变量的情况下才能保证逻辑上的有序性（即实际上还是重排了，但是被同步块保护了，从最终结果来说还是有序的），如果一个变量在同步代码块之外被修改了，还是有可能出现指令重排的情况</li></ul><h3 id="_6-4-double-checked-locking" tabindex="-1"><a class="header-anchor" href="#_6-4-double-checked-locking" aria-hidden="true">#</a> 6.4 double-checked locking</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DoubleCheckLocking</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">DoubleCheckLocking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// 饿汉式单例，使用 dcl 时必须加上 volatile 才能保证不会发生指令重排而导致返回 null 的错误</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">DoubleCheckLocking</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DoubleCheckLocking</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此处 INSTANCE 不被 synchronized 保护，在没有使用 volatile 时可以直接被其他线程插入导致错误</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">INSTANCE</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 首次访问会同步，之后访问就没有了 synchronized</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">DoubleCheckLocking</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">INSTANCE</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 此处可能会发生指令重排，即先赋值再调用构造方法。不使用 volatile 可能发生指令交错导致错误</span>
                    <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleCheckLocking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-5-happens-before" tabindex="-1"><a class="header-anchor" href="#_6-5-happens-before" aria-hidden="true">#</a> 6.5 happens-before</h3><ul><li>happens-before 规定了对共享变量的写操作对其他线程的读操作可见，它是可加性与有序性的一套规则总结。抛开此规则时，JMM 不能保证一个线程对共享变量的写对于其他线程对该共享变量的读可见</li><li>线程解锁之前对变量的写，对于接下来加锁的线程对该变量的读可见</li><li>线程对 volatile 变量的写，对于接下来其他线程对该变量的读可见</li><li>线程 start 前对变量的写，对该线程开始之后对该变量的读可见</li><li>线程结束前对变量的写，对于其他线程得知它结束后的读可见（比如其他线程调用 t1.Alive() 或 t1.join() 等待他结束）</li><li>线程 t1 打断 t2（interrupt）前对变量的写，对于其他线程得知 t2 被打断后对该变量的读可见</li><li>对变量的默认值（0，false，null）的写，对于其他线程对该变量的读可见</li></ul><h2 id="_7-无锁并发" tabindex="-1"><a class="header-anchor" href="#_7-无锁并发" aria-hidden="true">#</a> 7.无锁并发</h2><h3 id="_7-1-cas-与-volatile" tabindex="-1"><a class="header-anchor" href="#_7-1-cas-与-volatile" aria-hidden="true">#</a> 7.1 cas 与 volatile</h3><ul><li>cas 即 compare and set，这必须是原子性的操作，cas 必须借助 volatile 才能读取到共享变量的最新值来实现比较-交换的效果</li><li>cas 的底层是 lock cmpxchg 指令（x86 架构），在单核 CPU 和多核 CPU 下都能保证比较-交换的原子性。在多核状态下，某个核执行到带 lock 的指令时，CPU 会让总线锁住，当这个核把此指令执行完毕再开启总线，这个过程中不会被线程的调度机制所打断，保证了多个线程对内存操作的准确性（原子性）</li><li>cas 是基于乐观锁的思想，即用最乐观的估计，不怕其他线程修改共享变量，即使修改了也是重试；synchronized 是基于悲观锁的思想，即用最悲观的估计，防范这其他线程修改共享变量，只有解开了锁才能有机会修改</li><li>cas 体现的是无锁并发、无阻塞并发。因为没有使用 synchronized，所以先成功不会陷入阻塞，这是提高效率的因素之一。但是如果竞争激烈，重试必要频繁发生，这时反而会影响效率</li></ul><p><strong>为什么无锁（乐观锁）效率高一些？</strong></p><ul><li>无锁情况下，即使重试失败，线程始终再高速运行，而 synchronized 会让线程在没有获得锁时发生上下文切换进入阻塞</li><li>但是无锁情况下，因为要保持线程运行，需要 CPU 的额外支持，虽然没有阻塞，但是会因为没有分到时间片而进入可运行状态，最终还是会导致线程上下文切换。故线程数少于核心数时使用 cas 是合适的，但是当线程多起来后效率就低了</li></ul><h3 id="_7-2-原子类" tabindex="-1"><a class="header-anchor" href="#_7-2-原子类" aria-hidden="true">#</a> 7.2 原子类</h3><p><strong>1.原子整数</strong></p><ul><li>AtomicBoolean</li><li>AtomicInteger</li><li>AtomicLong</li></ul><p><strong>2.原子引用</strong></p><ul><li>AtomicReference</li><li>AtomicMarkableReference（布尔值标记）</li><li>AtomicStampedReference（版本号标记）</li></ul><p><strong>3.原子数组</strong></p><ul><li>AtomicIntegerArray</li><li>AtomicLongArray</li><li>AtomicReferenceArray</li></ul><p><strong>4.字段更新器</strong></p><ul><li>AtomicReferenceFieldUpdater</li><li>AtomicIntegerFieldUpdater</li><li>AtomicLongFieldUpdater</li></ul><p><strong>5.原子累加器</strong></p><ul><li>IntegerAdder</li><li>LongAdder</li></ul><h3 id="_7-3-unsafe" tabindex="-1"><a class="header-anchor" href="#_7-3-unsafe" aria-hidden="true">#</a> 7.3 Unsafe</h3><ul><li>只能通过反射获取</li><li>由于能够直接操作内存，所以有可能出现不安全的操作，故称为 Unsafe</li><li>Unsafe 是原子类中大量使用到的类</li></ul><h2 id="_8-不可变" tabindex="-1"><a class="header-anchor" href="#_8-不可变" aria-hidden="true">#</a> 8.不可变</h2><h3 id="_8-1-享元模式" tabindex="-1"><a class="header-anchor" href="#_8-1-享元模式" aria-hidden="true">#</a> 8.1 享元模式</h3><ul><li>当需要重用数量有限的同一类对象时使用</li><li>包装类提供了 valueOf 方法，在某个范围内会重用对象，超过了这个范围才会创建新的对象</li><li>创建连接池可以降低开销减小服务的压力</li></ul><p><strong>简单连接池实现：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PoolTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Pool</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">Connection</span> connection <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                pool<span class="token punctuation">.</span><span class="token function">free</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;t-%d&quot;</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Pool</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Pool</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 连接池的大小</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> poolSize<span class="token punctuation">;</span>

    <span class="token comment">// 连接数组对象</span>
    <span class="token keyword">private</span> <span class="token class-name">Connection</span><span class="token punctuation">[</span><span class="token punctuation">]</span> connections<span class="token punctuation">;</span>

    <span class="token comment">// 连接数组状态，0 表示空闲；1 表示 繁忙</span>
    <span class="token keyword">private</span> <span class="token class-name">AtomicIntegerArray</span> states<span class="token punctuation">;</span>


    <span class="token class-name">Pool</span><span class="token punctuation">(</span><span class="token keyword">int</span> poolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>poolSize <span class="token operator">=</span> poolSize<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>connections <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connection</span><span class="token punctuation">[</span>poolSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>states <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicIntegerArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>poolSize<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> poolSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// MockConnection 实现了 Connection 接口</span>
            connections<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MockConnection</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;连接-%d&quot;</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 借连接</span>
    <span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> poolSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>states<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>states<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;获取连接：{}&quot;</span><span class="token punctuation">,</span> connections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span> connections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 如果没有空闲连接</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;没有空闲连接...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 还连接</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> poolSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>connections<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;归还连接：{}&quot;</span><span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
                states<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;有空闲连接了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-线程池" tabindex="-1"><a class="header-anchor" href="#_9-线程池" aria-hidden="true">#</a> 9.线程池</h2><h3 id="_9-1-自定义线程池" tabindex="-1"><a class="header-anchor" href="#_9-1-自定义线程池" aria-hidden="true">#</a> 9.1 自定义线程池</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadPool</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>queue<span class="token punctuation">,</span> task<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 死等</span>
            <span class="token comment">// queue.put(task);</span>
            <span class="token comment">// 带超时的等待</span>
            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 抛出异常</span>
            <span class="token comment">// throw new RuntimeException(&quot;任务执行失败：&quot; + task);</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> id <span class="token operator">=</span> i<span class="token punctuation">;</span>
            pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;t-{}&quot;</span><span class="token punctuation">,</span> id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">interface</span> <span class="token class-name">RejectPolicy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queue<span class="token punctuation">,</span> <span class="token class-name">T</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ThreadPool</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 任务队列</span>
    <span class="token keyword">private</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> taskQueue<span class="token punctuation">;</span>

    <span class="token comment">// 线程集合</span>
    <span class="token keyword">private</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Worker</span><span class="token punctuation">&gt;</span></span> workers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 核心线程数</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> coreSize<span class="token punctuation">;</span>

    <span class="token comment">// 获取任务的超时时间</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> timeout<span class="token punctuation">;</span>

    <span class="token comment">// 时间单位</span>
    <span class="token keyword">private</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">;</span>

    <span class="token comment">// 拒绝策略</span>
    <span class="token keyword">private</span> <span class="token class-name">RejectPolicy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> rejectPolicy<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> coreSize<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token class-name">RejectPolicy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> rejectPolicy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>taskQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>coreSize <span class="token operator">=</span> coreSize<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>timeout <span class="token operator">=</span> timeout<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>timeUnit <span class="token operator">=</span> timeUnit<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectPolicy <span class="token operator">=</span> rejectPolicy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 执行任务</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>workers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 当任务数没有超过核心，直接交给 worker 执行；如果超过则加入队列暂存</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> coreSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Worker</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;新增 worker：{}&quot;</span><span class="token punctuation">,</span> worker<span class="token punctuation">)</span><span class="token punctuation">;</span>
                workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>
                worker<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// taskQueue.put(task);</span>
                <span class="token comment">// 队列满后</span>
                taskQueue<span class="token punctuation">.</span><span class="token function">tryPut</span><span class="token punctuation">(</span>rejectPolicy<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">Runnable</span> task<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>task <span class="token operator">=</span> task<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 执行任务</span>
            <span class="token comment">// 当 task 不为空则执行任务；当 task 执行完毕在从任务队列获取任务并执行</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> taskQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> timeUnit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;正在执行任务：{}&quot;</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    task <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>workers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;worker：{} 被移除...&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                workers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;Worker{&quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;task=&quot;</span> <span class="token operator">+</span> task <span class="token operator">+</span>
                    <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;ThreadPool{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;workers=&quot;</span> <span class="token operator">+</span> workers <span class="token operator">+</span>
                <span class="token string">&quot;, coreSize=&quot;</span> <span class="token operator">+</span> coreSize <span class="token operator">+</span>
                <span class="token string">&quot;, timeout=&quot;</span> <span class="token operator">+</span> timeout <span class="token operator">+</span>
                <span class="token string">&quot;, timeUnit=&quot;</span> <span class="token operator">+</span> timeUnit <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 任务队列</span>
    <span class="token keyword">private</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 容量</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>

    <span class="token comment">// 锁</span>
    <span class="token keyword">private</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 生产者条件变量</span>
    <span class="token keyword">private</span> <span class="token class-name">Condition</span> fullWaitSet <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 消费者条件变量</span>
    <span class="token keyword">private</span> <span class="token class-name">Condition</span> emptyWaitSet <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">BlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取大小</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 带超时的阻塞获取</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 统一转换成纳秒</span>
            <span class="token keyword">long</span> nanos <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 返回的是剩余时间</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    nanos <span class="token operator">=</span> emptyWaitSet<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">T</span> t <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fullWaitSet<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 阻塞获取</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    emptyWaitSet<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">T</span> t <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fullWaitSet<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 阻塞添加</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">T</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;等待加入任务队列：{}&quot;</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    fullWaitSet<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            queue<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;加入任务队列：{}&quot;</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
            emptyWaitSet<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 带超时时间阻塞添加</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">T</span> element<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> nanos <span class="token operator">=</span> timeUnit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;等待加入任务队列：{}&quot;</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    nanos <span class="token operator">=</span> fullWaitSet<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            queue<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;加入任务队列：{}&quot;</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
            emptyWaitSet<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tryPut</span><span class="token punctuation">(</span><span class="token class-name">RejectPolicy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> rejectPolicy<span class="token punctuation">,</span> <span class="token class-name">T</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 判断队列是否已满</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                rejectPolicy<span class="token punctuation">.</span><span class="token function">rject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                queue<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;加入任务队列：{}&quot;</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
                emptyWaitSet<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-2-threadpoolexecutor" tabindex="-1"><a class="header-anchor" href="#_9-2-threadpoolexecutor" aria-hidden="true">#</a> 9.2 ThreadPoolExecutor</h3><div class="hint-container info"><p class="hint-container-title">说明</p><p>原理简单来说就是一个 <strong>线程集合 WorkerSet</strong> 和一个 <strong>阻塞队列 WorkQueue</strong> 相互配合</p><p>线程会将 <strong>任务</strong> 放到 WorkQueue 中，WorkerSet 中的线程会不断地从队列中获取任务并执行</p></div><h4>1.线程池状态</h4><p>ThreadPoolExecutor 使用 int 的高 3 位来表示线程池的状态，低 29 位表示线程数量。这样做的目的是将线程池状态与线程个数合二为一，这样就可以用一次 cas 原子操作进行赋值</p><div class="table-wrapper"><table><thead><tr><th style="text-align:center;">状态名</th><th style="text-align:center;">高 3 位</th><th style="text-align:center;">接受任务</th><th style="text-align:center;">处理阻塞队列任务</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">RUNNING</td><td style="text-align:center;">111</td><td style="text-align:center;">Y</td><td style="text-align:center;">Y</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">SHUTDOWN</td><td style="text-align:center;">000</td><td style="text-align:center;">N</td><td style="text-align:center;">Y</td><td style="text-align:center;">不会接受新的i任务，但是会处理阻塞队列中的剩余任务</td></tr><tr><td style="text-align:center;">STOP</td><td style="text-align:center;">001</td><td style="text-align:center;">N</td><td style="text-align:center;">N</td><td style="text-align:center;">会中断正在执行的任务，并抛弃阻塞队列中的任务</td></tr><tr><td style="text-align:center;">TIDYING</td><td style="text-align:center;">010</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">任务全部执行完毕，活动线程为 0 即将进入终结</td></tr><tr><td style="text-align:center;">TERMINATED</td><td style="text-align:center;">011</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">终结状态</td></tr></tbody></table></div><h4>2.构造方法</h4><div class="table-wrapper"><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">参数</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">int</td><td style="text-align:center;">corePoolSize</td><td style="text-align:center;">核心线程数目（最多保留的线程数）</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">maximumPoolSize</td><td style="text-align:center;">最大线程数</td></tr><tr><td style="text-align:center;">long</td><td style="text-align:center;">keepAliveTime</td><td style="text-align:center;">生存时间（针对急救线程）</td></tr><tr><td style="text-align:center;">TimeUnit</td><td style="text-align:center;">unit</td><td style="text-align:center;">时间单位（针对急救线程）</td></tr><tr><td style="text-align:center;"><code>BlockingQueue&lt;Runnable&gt;</code></td><td style="text-align:center;">workQueue</td><td style="text-align:center;">阻塞队列</td></tr><tr><td style="text-align:center;">ThreadFactory</td><td style="text-align:center;">threadFactory</td><td style="text-align:center;">线程工厂（可以为线程创建时起名字）</td></tr><tr><td style="text-align:center;">RejectedExecutionHandler</td><td style="text-align:center;">handler</td><td style="text-align:center;">拒绝策略</td></tr></tbody></table></div><h4>3.常用工厂方法</h4><p><strong>三种类型：</strong></p><ol><li><p>newFixedThreadPool</p><ul><li>核心线程数等于最大线程数，即没有救急线程，因此也无需超时时间</li><li>阻塞队列时无界的，可以放任意数量的任务。适用于任务量已知但相对耗时的任务</li></ul></li><li><p>newCachedThreadPool</p><ul><li>核心线程数为 0，最大线程数为 Integer.MAX_VALUE，救急线程的空闲生存时间是 60s。这意味着全部都是救急线程且 60s 后回收，救急线程可以无限创建</li><li>队列采用了 synchronousQueue 实现，特点是没有容量，没有线程来取是放不进去的（一手交钱，一首交货）</li><li>整个线程池表现为线程数会根据任务量不断增长没有上限，当任务执行完毕并空闲 1 分钟后释放线程。适合任务数比较密集但是每个任务执行时间较短的情况</li></ul></li><li><p>newSingleThreadExecutor</p><ul><li>希望多个任务排队执行，线程数固定为 1，任务数多于 1 时，会放入无界队列排队。任务执行完毕时这个唯一的线程也不会被释放</li><li>如果任务执行失败抛出异常且没有补救措施时，会创建一个新的线程保证池的正常工作</li><li>newSingleThreadExecutor 的线程个数始终为 1 不可修改，因为 FinalizableDelegateExecutorService 应用的是装饰器模式，对外只暴露了 ExecutorService 接口，因此不能调用 ThreadPoolExecutor 中特有的方法；newFixedThreadPool(1) 初始为 1之后还可以修改，因为对外暴露的是 ThreadPoolExecutor 对象，可以强转后调用 setCorePoolSize 等方法进行修改</li></ul></li></ol><h4>4.提交方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 执行任务</span>
<span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 提交任务 task，用返回值 Future 获得任务执行结果</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 提交 task 中所有任务</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>

<span class="token comment">// 提交 task 中所有任务，带有超时时间</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>

<span class="token comment">// 提交 task 中所有任务，哪个任务先执行完毕就先返回此任务的执行结果，其他任务取消</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">;</span>

<span class="token comment">// 提交 task 中所有任务，哪个任务先执行完毕就先返回此任务的执行结果，其他任务取消，带超时时间</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>5.关闭线程池</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 保存未执行完的任务</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> <span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 不在 RUNNING 状态的线程池，此方法会返回 true</span>
<span class="token keyword">boolean</span> <span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 线程池状态是否是 TERMINATED</span>
<span class="token keyword">boolean</span> <span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用 shutdown 后，由于调用线程并不会等待所有任务运行结束，因此如果它想在线程池 TERMINATED 后做些事情，可以使用此方法等待</span>
<span class="token keyword">boolean</span> <span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>6.小结</h4><div class="hint-container warning"><p class="hint-container-title">注意</p><p>不推荐使用 Executors 直接创建线程，因为内部的 BlockingQueue 默认实现可能会导致 OOM</p></div><p><strong>推荐创建线程池的方式：</strong></p><ol><li>直接使用 ThreadPoolExecutor 自定义线程池，注意要规避无限创建线程或者频繁创建与销毁线程的问题</li><li>使用工具库，比如： <ol><li>commons-lang3</li><li>guava</li><li>Spring 配置线程池</li></ol></li></ol><p><strong>配置线程池时注意：</strong></p><ol><li>CPU密集型: 尽可能少的线程，Ncpu+1</li><li>IO密集型: 尽可能多的线程, Ncpu*2，比如数据库连接池</li><li>混合型: CPU密集型的任务与IO密集型任务的执行时间差别较小，拆分为两个线程池；否则没有必要拆分。</li></ol><h3 id="_9-3-tomcat-线程池" tabindex="-1"><a class="header-anchor" href="#_9-3-tomcat-线程池" aria-hidden="true">#</a> 9.3 Tomcat 线程池</h3><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java并发/20230209/tomcat线程池.png" alt="image-20220705154941172" tabindex="0" loading="lazy"><figcaption>image-20220705154941172</figcaption></figure><ul><li>Tomcat 使用 LimitLatch 来限流，可以控制最大连接个数，类似 JUC 中的 Semaphore。</li><li>Tomcat 线程池扩展了 ThreadPoolExecutor，行为稍有不同</li><li>Acceptor 只负责接收新的 socket 连接</li><li>Poller 只负责监听 socket channel 是否有可读的 I/O 事件，一旦可读则封装一个任务对象（socketProcessor）提交给 Executor 线程池处理</li><li>Executor 线程池中的工作线程最终负责处理请求</li></ul><h4>1.Connector 配置</h4><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java并发/20230209/tomcatConnector配置.png" alt="image-20220705160156893" tabindex="0" loading="lazy"><figcaption>image-20220705160156893</figcaption></figure><h4>2.Executor 线程配置</h4><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java并发/20230209/tomcatExecutor线程配置.png" alt="image-20220705160323855" tabindex="0" loading="lazy"><figcaption>image-20220705160323855</figcaption></figure><h3 id="_9-4-fork-join-线程池" tabindex="-1"><a class="header-anchor" href="#_9-4-fork-join-线程池" aria-hidden="true">#</a> 9.4 Fork/Join 线程池</h3><ul><li>Fork/Join 是 JDK 1.7 加入的新的线程池实现，体现了分治思想，适用于能够进行任务拆分的 CPU 密集型运算</li><li>所谓的任务拆分就是将一个大任务拆分成算法上相同的小任务，直至不能拆分而可以直接求解</li><li>Fork/Join 在分治的基础上加入了多线程，可以把每个任务的分解和合并交给不同的线程来完成，进一步提升运算效率</li><li>Fork/Join 默认会创建与 CPU 核心数大小相同的线程池</li><li>提交给 Fork/Join 线程池的任务需要继承 RecursiveTask（有返回值）或 RecursiveAction（无返回值）</li></ul><p><strong>简单使用:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForkTest1</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ForkTest1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ForkJoinPool</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> pool<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Integer</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Task</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 让一个线程去执行任务</span>
        task<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取任务结果</span>
        <span class="token keyword">return</span> n <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,116);function v(m,b){const a=i("router-link");return o(),c("div",null,[k,n("nav",r,[n("ul",null,[n("li",null,[t(a,{to:"#java-并发共享模型-重点"},{default:p(()=>[s("Java 并发共享模型（重点）")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_1-管程"},{default:p(()=>[s("1.管程")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_1-1-共享带来的问题"},{default:p(()=>[s("1.1 共享带来的问题")]),_:1})])])]),n("li",null,[t(a,{to:"#_2-synchronized"},{default:p(()=>[s("2.Synchronized")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_2-1-基本用法"},{default:p(()=>[s("2.1 基本用法")]),_:1})]),n("li",null,[t(a,{to:"#_2-2-方法上的-synchronized"},{default:p(()=>[s("2.2 方法上的 synchronized")]),_:1})])])]),n("li",null,[t(a,{to:"#_3-变量的线程安全分析"},{default:p(()=>[s("3.变量的线程安全分析")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_3-1-成员变量和静态变量"},{default:p(()=>[s("3.1 成员变量和静态变量")]),_:1})]),n("li",null,[t(a,{to:"#_3-2-局部变量"},{default:p(()=>[s("3.2 局部变量")]),_:1})]),n("li",null,[t(a,{to:"#_3-3-线程安全类"},{default:p(()=>[s("3.3 线程安全类")]),_:1})])])]),n("li",null,[t(a,{to:"#_4-对象头"},{default:p(()=>[s("4.对象头")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_4-1-普通对象头"},{default:p(()=>[s("4.1 普通对象头")]),_:1})]),n("li",null,[t(a,{to:"#_4-2-数组对象头"},{default:p(()=>[s("4.2 数组对象头")]),_:1})]),n("li",null,[t(a,{to:"#_4-3-mark-word"},{default:p(()=>[s("4.3 Mark Word")]),_:1})])])]),n("li",null,[t(a,{to:"#_5-monitor-轻量级锁-偏向锁"},{default:p(()=>[s("5.Monitor/轻量级锁/偏向锁")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_5-1-monitor-重量级锁"},{default:p(()=>[s("5.1 Monitor（重量级锁）")]),_:1})]),n("li",null,[t(a,{to:"#_5-2-轻量级锁"},{default:p(()=>[s("5.2 轻量级锁")]),_:1})]),n("li",null,[t(a,{to:"#_5-3-偏向锁"},{default:p(()=>[s("5.3 偏向锁")]),_:1})]),n("li",null,[t(a,{to:"#_5-4-锁消除"},{default:p(()=>[s("5.4 锁消除")]),_:1})])])]),n("li",null,[t(a,{to:"#_6-java-内存模型"},{default:p(()=>[s("6.Java 内存模型")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_6-1-可见性"},{default:p(()=>[s("6.1 可见性")]),_:1})]),n("li",null,[t(a,{to:"#_6-2-原子性"},{default:p(()=>[s("6.2 原子性")]),_:1})]),n("li",null,[t(a,{to:"#_6-3-有序性"},{default:p(()=>[s("6.3 有序性")]),_:1})]),n("li",null,[t(a,{to:"#_6-4-double-checked-locking"},{default:p(()=>[s("6.4 double-checked locking")]),_:1})]),n("li",null,[t(a,{to:"#_6-5-happens-before"},{default:p(()=>[s("6.5 happens-before")]),_:1})])])]),n("li",null,[t(a,{to:"#_7-无锁并发"},{default:p(()=>[s("7.无锁并发")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_7-1-cas-与-volatile"},{default:p(()=>[s("7.1 cas 与 volatile")]),_:1})]),n("li",null,[t(a,{to:"#_7-2-原子类"},{default:p(()=>[s("7.2 原子类")]),_:1})]),n("li",null,[t(a,{to:"#_7-3-unsafe"},{default:p(()=>[s("7.3 Unsafe")]),_:1})])])]),n("li",null,[t(a,{to:"#_8-不可变"},{default:p(()=>[s("8.不可变")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_8-1-享元模式"},{default:p(()=>[s("8.1 享元模式")]),_:1})])])]),n("li",null,[t(a,{to:"#_9-线程池"},{default:p(()=>[s("9.线程池")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_9-1-自定义线程池"},{default:p(()=>[s("9.1 自定义线程池")]),_:1})]),n("li",null,[t(a,{to:"#_9-2-threadpoolexecutor"},{default:p(()=>[s("9.2 ThreadPoolExecutor")]),_:1})]),n("li",null,[t(a,{to:"#_9-3-tomcat-线程池"},{default:p(()=>[s("9.3 Tomcat 线程池")]),_:1})]),n("li",null,[t(a,{to:"#_9-4-fork-join-线程池"},{default:p(()=>[s("9.4 Fork/Join 线程池")]),_:1})])])])])])])]),d])}const g=e(u,[["render",v],["__file","D-Java 并发共享模型（重点）.html.vue"]]);export{g as default};
