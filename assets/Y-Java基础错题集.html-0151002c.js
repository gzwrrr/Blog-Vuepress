import{_ as l,Q as i,S as p,U as n,W as e,X as t,a8 as s,a9 as o,H as c}from"./framework-d7e1aa10.js";const u={},r=n("h1",{id:"java基础错题集",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#java基础错题集","aria-hidden":"true"},"#"),s(" Java基础错题集")],-1),d={class:"table-of-contents"},k=o(`<h1 id="day-1" tabindex="-1"><a class="header-anchor" href="#day-1" aria-hidden="true">#</a> Day 1</h1><ol><li><p>【重载】对于同一类中的两个方法 , 在判断它们是不是重载方法时 , 肯定不考虑：返回值类型</p></li><li><p>【运算符】<code>&gt;&gt;</code> 算术右移，高位补符号位，<code>&gt;&gt;&gt;</code> 逻辑右移，高位补 0</p></li><li><p>【switch】switch 穿透：没有break，发生case穿透现象，程序会继续向下执行，直到遇到break或者结束switch语句的大括号为止</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            result <span class="token operator">=</span> result <span class="token operator">+</span> i<span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            result <span class="token operator">=</span> result <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
            result <span class="token operator">=</span> result <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 当输入 2 时，结果为 10</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>【Servlet】Servlet的生命周期可以分为初始化阶段，运行阶段和销毁阶段三个阶段，以下过程属于初始化阶段是:</p><ol><li>加载Servlet类及.class对应的数据</li><li>创建 ServletConfig 对象</li><li>创建 Servlet 对象</li></ol><p>解释：Servlet的生命周期一般可以用三个方法来表示：</p><ul><li>init()：仅执行一次，负责在装载Servlet时初始化Servlet对象</li><li>service() ：核心方法，一般HttpServlet中会有get,post两种处理方式。在调用doGet和doPost方法时会构造servletRequest和servletResponse请求和响应对象作为参数。</li><li>destory()：在停止并且卸载Servlet时执行，负责释放资源 初始化阶段：Servlet启动，会读取配置文件中的信息，构造指定的Servlet对象，创建ServletConfig对象，将ServletConfig作为参数来调用init()方法</li></ul></li><li><p>【finally】如无必要，不要在 finally 语句块中写 <code>return</code> 或 <code>throws</code>，因为这样会让 try 或 catch 语句块中的 <code>return</code> 或 <code>throws</code> 失效</p></li><li><p>【JVM 垃圾回收】以下哪些 JVM 的垃圾回收方式采用的是复制算法回收：</p><ol><li>新生代串行收集器</li><li>新生代并行回收收集器</li></ol><p>解释：两个最基本的 Java 回收算法：复制算法和标记清理算法：</p><ul><li>复制算法：两个区域A和B，初始对象在A，继续存活的对象被转移到B。此为新生代最常用的算法</li><li>标记清理：一块区域，标记可达对象（可达性分析），然后回收不可达对象，会出现碎片，那么引出</li><li>标记-整理算法：多了碎片整理，整理出更大的内存放更大的对象</li></ul><p>额外内容：</p><ul><li>Serial New 收集器是针对新生代的收集器，采用的是复制算法</li><li>Serial Old（串行）收集器，新生代采用复制，老年代采用标记整理</li><li>Parallel New（并行）收集器，新生代采用复制算法，老年代采用标记整理</li><li>Parallel Scavenge（并行）收集器，针对新生代，采用复制收集算法</li><li>Parallel Old（并行）收集器，针对老年代，标记整理</li><li>CMS 收集器，基于标记清理</li><li>G1 收集器：整体上是基于标记 整理 ，局部采用复制</li></ul></li><li><p>【for 循环】for(条件1;条件2;条件3) { //语句 } 执行顺序是条件1-&gt;条件2-&gt;语句-&gt;条件3-&gt;条件2-&gt;语句-&gt;条件3-&gt;条件2........ 如果条件2为true，则一直执行。如果条件2位false，则for循环结束</p></li><li><p>服务器简介：</p><ul><li>LVS是Linux Virtual Server的简写，意即Linux虚拟服务器，是一个虚拟的服务器集群系统。</li><li>Nginx (&quot;engine x&quot;) 是一个高性能的 HTTP 和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。</li><li>Lighttpd 是一个德国人领导的开源Web服务器软件，其根本的目的是提供一个专门针对高性能网站，安全、快速、兼容性好并且灵活的web server环境。具有非常低的内存开销、cpu占用率低、效能好以及丰富的模块等特点。</li><li>Apache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。</li></ul></li><li><p>【Java 容器】容器的继承关系：</p><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java错题集/20230209/java容器继承关系-1.png" alt="Java容器继承关系-1" tabindex="0" loading="lazy"><figcaption>Java容器继承关系-1</figcaption></figure></li></ol><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//java错题集/20230209/java容器继承关系-2.png" alt="Java容器继承关系-2" tabindex="0" loading="lazy"><figcaption>Java容器继承关系-2</figcaption></figure><ol start="10"><li><p>【初始化】初始化顺序：静态变量和静态初始化块谁先声明谁先初始化。原因穷根究底，<strong>是因为在类加载机制中，初始化阶段产生<code>&lt;clinit&gt;</code>()的时候，编译器收集的顺序是由语句在源文件中出现的顺序决定的。</strong></p><p>初始化顺序解释（从上到下初始化）：</p><ul><li>父类静态成员和静态初始化块，按在代码中出现的顺序依次执行。</li><li>子类静态成员和静态初始化块，按在代码中出现的顺序依次执行。</li><li>父类实例成员和实例初始化块，按在代码中出现的顺序依次执行。</li><li>执行父类构造方法。</li><li>子类实例成员和实例初始化块，按在代码中出现的顺序依次执行。</li><li>执行子类构造方法。</li></ul></li><li><p>枚举类中有几个成员变量，其构造方法就执行几次：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">AccountType</span>
<span class="token punctuation">{</span>
  <span class="token constant">SAVING</span><span class="token punctuation">,</span> <span class="token constant">FIXED</span><span class="token punctuation">,</span> <span class="token constant">CURRENT</span><span class="token punctuation">;</span>
  <span class="token comment">// 下面的输出语句会执行 3 次</span>
  <span class="token keyword">private</span> <span class="token class-name">AccountType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;It is a account type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">EnumOne</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">AccountType</span><span class="token punctuation">.</span><span class="token constant">FIXED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,4);function v(m,g){const a=c("router-link");return i(),p("div",null,[r,n("nav",d,[n("ul",null,[n("li",null,[e(a,{to:"#java基础错题集"},{default:t(()=>[s("Java基础错题集")]),_:1})]),n("li",null,[e(a,{to:"#day-1"},{default:t(()=>[s("Day 1")]),_:1})])])]),k])}const h=l(u,[["render",v],["__file","Y-Java基础错题集.html.vue"]]);export{h as default};
