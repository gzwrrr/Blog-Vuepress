import{_ as l,Q as i,S as a,a9 as e}from"./framework-d7e1aa10.js";const r={},t=e('<h1 id="分布式系统特有的故障" tabindex="-1"><a class="header-anchor" href="#分布式系统特有的故障" aria-hidden="true">#</a> 分布式系统特有的故障</h1><h1 id="写在前面" tabindex="-1"><a class="header-anchor" href="#写在前面" aria-hidden="true">#</a> 写在前面</h1><ul><li>分布式架构中存在着许多不确定的因素，产生的原因各有不同，但是最终都会影响到数据密集型服务的数据一致性，严重的还可能导致服务不可用</li><li>我们在搭建时就必须明确各种问题产生的原因及其应对方案，但是选型往往不是固定的，而是需要根据实际情况做出权衡</li></ul><br><h1 id="不可靠网络" tabindex="-1"><a class="header-anchor" href="#不可靠网络" aria-hidden="true">#</a> 不可靠网络</h1><h2 id="可能的问题" tabindex="-1"><a class="header-anchor" href="#可能的问题" aria-hidden="true">#</a> 可能的问题</h2><ul><li>对于一个纯分布式，它的架构大多数为 Share Nothing 架构（Nothing but Network），即网络是不同节点间共享信息的唯一途径，数据的创数主要是通过以太网进行传输的</li><li>这是一种异步的网络，网络本身并不保证发出去的数据包一定能被接收到或者是何时被收到</li><li>不可靠网络传输可能出现的情况有： <ul><li>请求丢失</li><li>请求在某个队列中等待</li><li>远程节点失效</li><li>远程节点无法响应</li><li>远程节点已经处理完请求，但是 ACK 确认的时候丢包</li><li>远程节点已经处理完请求，但是回复处理很慢</li></ul></li><li>造成网络不可靠的原因可能还有应用本身会时常抛出异常，这也是其中的一个诱因</li><li>这里的网络大多数情况下都是使用 TCP 协议的，应用层的错误可能会导致网络包排队得不到处理或者无法响应，例如： <ul><li>应用程序 GC</li><li>处理节点在进行较重的磁盘 I/O 操作，CPU 无法从中断中恢复而导致无法处理网络请求</li><li>由于内存分页导致的颠簸延迟</li></ul></li><li>上述问题会跟网络本身的不稳定性相叠加，使得在外界看来网络更加不可靠；这种不可靠加重复制滞后并最终导致一致性问题</li></ul><br><h2 id="如何应对" tabindex="-1"><a class="header-anchor" href="#如何应对" aria-hidden="true">#</a> 如何应对</h2><ul><li>网络异常时返回的状态是不能确定的，我们需要把这种不确定变为一种更加确定的形式，这里可以利用超时机制</li><li>使用超时机制需要考虑的许多问题。短的超时时间便于更快地发现故障，但是增加了误判的风险；长的超时时间可能会导致服务不可用等问题。这是个需要根据具体业务做出权衡的问题</li><li>如果我们知道了失效是可以检测到的，还可以进行下面的操作： <ul><li>依靠服务发现模块中的健康检查功能，负载均衡时需要避免往失效节点上发送数据</li><li>如果是在主从复制模式中，倘若主节点失效则需要触发选举机制</li><li>如果是服务进程崩溃，但是操作系统正常，那么还可以使用脚本通知其他节点来代替掉线的节点</li><li>如果路由器已经确认目标节点不可访问，直接返回 ICMP 不可达</li></ul></li></ul><br><h1 id="不可靠的时钟" tabindex="-1"><a class="header-anchor" href="#不可靠的时钟" aria-hidden="true">#</a> 不可靠的时钟</h1><p><strong>时钟主要的作用：</strong></p><ul><li>描述当前的绝对时间</li><li>描述某件事的持续时间</li></ul><p><strong>可能的问题：</strong></p><ul><li>当一个节点 A 上的时钟比另外一个节点 B 上的时钟快时，当两个节点处理完了本地的请求准备写入另外的节点时就可能产生问题</li><li>因为节点 B 上的写入可能原本比节点 A 的写入早，但是由于节点 A 的时钟快了，时间错更大，进而导致放弃了节点 B 的写入</li><li>应对时钟不准确需要引入置信区间的概念（这里不展开），需要以此确定处理时间是在什么范围内的并将这个范围返回，实现这一点可以做到类似快照隔离的操作</li></ul><br><h1 id="系统模型设计" tabindex="-1"><a class="header-anchor" href="#系统模型设计" aria-hidden="true">#</a> 系统模型设计</h1><blockquote><p>网络以及时钟的不可靠会造成不同程度的延迟和节点的失效，针对这些需要有不同的模型应对</p></blockquote><p><strong>针对延迟的模型：</strong></p><ol><li><p>同步模型：</p><ul><li>假设网络延迟是有界的，并且我们能获取到延迟的上下界</li><li>在任何情况下延迟都不会超出这个上下界</li></ul></li><li><p>半同步模型（普遍使用）：</p><ul><li>认为大部分情况下延迟都是正常的</li><li>如果出现了违背的情况，就认为偏差非常大</li></ul></li><li><p>异步模型：</p><ul><li>对延迟不做任何假设</li><li>不使用任何超时机制</li></ul></li></ol><p><strong>针对失效的模型：</strong></p><ol><li>崩溃-终止模型： <ul><li>假设一个节点只能以崩溃的方式故障</li><li>这种情况下它可能在任意时刻停止响应，此后无法恢复</li></ul></li><li>崩溃-恢复模型： <ul><li>节点可能在任何时刻发生崩溃</li><li>但是这种崩溃可能在一段时间后恢复并再次响应</li><li>这种情况下已经持久化的数据得以保存，但是内存中的数据丢失</li></ul></li></ol><p><strong>注：大多数解决这些问题的算法都是基于半同步模型 + 崩溃-恢复模型来设计的</strong></p><p>注：在分布式算法设计中，安全性（safety，指发生意外无法撤回，但是我们一定知道发生的时间节点）和灵活性（liveness，指预期的事在未来某个时间点一定会发生）非常重要，其中安全性是必须满足的，而灵活性是需要具备一定的前提的</p><p><br><br></p>',26),h=[t];function n(o,d){return i(),a("div",null,h)}const u=l(r,[["render",n],["__file","分布式系统特有的故障.html.vue"]]);export{u as default};
