import{_ as a,Q as i,S as d,U as t,W as l,X as s,a8 as e,a9 as r,H as o}from"./framework-d7e1aa10.js";const g={},p=t("h1",{id:"servlet",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#servlet","aria-hidden":"true"},"#"),e(" Servlet")],-1),c=t("div",{class:"hint-container info"},[t("p",{class:"hint-container-title"},"说明"),t("p",null,"Servlet（Server Applet），全称Java Servlet，未有中文译文。是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。"),t("p",null,"Servlet运行于支持Java的应用服务器中。从原理上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。")],-1),f={class:"table-of-contents"},u=r(`<h2 id="servlet-常见容器" tabindex="-1"><a class="header-anchor" href="#servlet-常见容器" aria-hidden="true">#</a> Servlet 常见容器</h2><p>Tomcat, Jetty, resin, Oracle Application server, WebLogic Server, Glassfish, Websphere, JBoss 等等。（提供了 Servlet 功能的服务器，叫做 Servlet 容器。对 web 程序来说，Servlet 容器的作用就相当于桌面程序里操作系统的作用，都是提供一些编程基础设施）</p><h2 id="servlet-生命周期" tabindex="-1"><a class="header-anchor" href="#servlet-生命周期" aria-hidden="true">#</a> Servlet 生命周期</h2><p>Servlet 生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：</p><ul><li>Servlet 通过调用 <strong>init ()</strong> 方法进行初始化。第一次创建时调用一次，后续请求发来也不再调用</li><li>Servlet 调用 <strong>service()</strong> 方法来处理客户端的请求。每次服务器接收到一个 Servlet 请求时，服务器会产生一个 <strong>新的线程</strong> 并调用服务。会检查HTTP 请求类型（GET、POST、PUT、DELETE 等），并在适当的时候调用 doGet、doPost、doPut，doDelete 等方法。</li><li>Servlet 通过调用 <strong>destroy()</strong> 方法终止（结束）。</li><li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li></ul><h2 id="客户端-服务端信息" tabindex="-1"><a class="header-anchor" href="#客户端-服务端信息" aria-hidden="true">#</a> 客户端/服务端信息</h2><h3 id="状态码" tabindex="-1"><a class="header-anchor" href="#状态码" aria-hidden="true">#</a> 状态码</h3><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">代码</th><th style="text-align:left;">消息</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">100</td><td style="text-align:left;">Continue</td><td style="text-align:left;">只有请求的一部分已经被服务器接收，但只要它没有被拒绝，客户端应继续该请求。</td></tr><tr><td style="text-align:left;">101</td><td style="text-align:left;">Switching Protocols</td><td style="text-align:left;">服务器切换协议。</td></tr><tr><td style="text-align:left;">200</td><td style="text-align:left;">OK</td><td style="text-align:left;">请求成功。</td></tr><tr><td style="text-align:left;">201</td><td style="text-align:left;">Created</td><td style="text-align:left;">该请求是完整的，并创建一个新的资源。</td></tr><tr><td style="text-align:left;">202</td><td style="text-align:left;">Accepted</td><td style="text-align:left;">该请求被接受处理，但是该处理是不完整的。</td></tr><tr><td style="text-align:left;">203</td><td style="text-align:left;">Non-authoritative Information</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">204</td><td style="text-align:left;">No Content</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">205</td><td style="text-align:left;">Reset Content</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">206</td><td style="text-align:left;">Partial Content</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">300</td><td style="text-align:left;">Multiple Choices</td><td style="text-align:left;">链接列表。用户可以选择一个链接，进入到该位置。最多五个地址。</td></tr><tr><td style="text-align:left;">301</td><td style="text-align:left;">Moved Permanently</td><td style="text-align:left;">所请求的页面已经转移到一个新的 URL。</td></tr><tr><td style="text-align:left;">302</td><td style="text-align:left;">Found</td><td style="text-align:left;">所请求的页面已经临时转移到一个新的 URL。</td></tr><tr><td style="text-align:left;">303</td><td style="text-align:left;">See Other</td><td style="text-align:left;">所请求的页面可以在另一个不同的 URL 下被找到。</td></tr><tr><td style="text-align:left;">304</td><td style="text-align:left;">Not Modified</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">305</td><td style="text-align:left;">Use Proxy</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">306</td><td style="text-align:left;"><em>Unused</em></td><td style="text-align:left;">在以前的版本中使用该代码。现在已不再使用它，但代码仍被保留。</td></tr><tr><td style="text-align:left;">307</td><td style="text-align:left;">Temporary Redirect</td><td style="text-align:left;">所请求的页面已经临时转移到一个新的 URL。</td></tr><tr><td style="text-align:left;">400</td><td style="text-align:left;">Bad Request</td><td style="text-align:left;">服务器不理解请求。</td></tr><tr><td style="text-align:left;">401</td><td style="text-align:left;">Unauthorized</td><td style="text-align:left;">所请求的页面需要用户名和密码。</td></tr><tr><td style="text-align:left;">402</td><td style="text-align:left;">Payment Required</td><td style="text-align:left;"><em>您还不能使用该代码。</em></td></tr><tr><td style="text-align:left;">403</td><td style="text-align:left;">Forbidden</td><td style="text-align:left;">禁止访问所请求的页面。</td></tr><tr><td style="text-align:left;">404</td><td style="text-align:left;">Not Found</td><td style="text-align:left;">服务器无法找到所请求的页面。.</td></tr><tr><td style="text-align:left;">405</td><td style="text-align:left;">Method Not Allowed</td><td style="text-align:left;">在请求中指定的方法是不允许的。</td></tr><tr><td style="text-align:left;">406</td><td style="text-align:left;">Not Acceptable</td><td style="text-align:left;">服务器只生成一个不被客户端接受的响应。</td></tr><tr><td style="text-align:left;">407</td><td style="text-align:left;">Proxy Authentication Required</td><td style="text-align:left;">在请求送达之前，您必须使用代理服务器的验证。</td></tr><tr><td style="text-align:left;">408</td><td style="text-align:left;">Request Timeout</td><td style="text-align:left;">请求需要的时间比服务器能够等待的时间长，超时。</td></tr><tr><td style="text-align:left;">409</td><td style="text-align:left;">Conflict</td><td style="text-align:left;">请求因为冲突无法完成。</td></tr><tr><td style="text-align:left;">410</td><td style="text-align:left;">Gone</td><td style="text-align:left;">所请求的页面不再可用。</td></tr><tr><td style="text-align:left;">411</td><td style="text-align:left;">Length Required</td><td style="text-align:left;">&quot;Content-Length&quot; 未定义。服务器无法处理客户端发送的不带 Content-Length 的请求信息。</td></tr><tr><td style="text-align:left;">412</td><td style="text-align:left;">Precondition Failed</td><td style="text-align:left;">请求中给出的先决条件被服务器评估为 false。</td></tr><tr><td style="text-align:left;">413</td><td style="text-align:left;">Request Entity Too Large</td><td style="text-align:left;">服务器不接受该请求，因为请求实体过大。</td></tr><tr><td style="text-align:left;">414</td><td style="text-align:left;">Request-url Too Long</td><td style="text-align:left;">服务器不接受该请求，因为 URL 太长。当您转换一个 &quot;post&quot; 请求为一个带有长的查询信息的 &quot;get&quot; 请求时发生。</td></tr><tr><td style="text-align:left;">415</td><td style="text-align:left;">Unsupported Media Type</td><td style="text-align:left;">服务器不接受该请求，因为媒体类型不被支持。</td></tr><tr><td style="text-align:left;">417</td><td style="text-align:left;">Expectation Failed</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">500</td><td style="text-align:left;">Internal Server Error</td><td style="text-align:left;">未完成的请求。服务器遇到了一个意外的情况。</td></tr><tr><td style="text-align:left;">501</td><td style="text-align:left;">Not Implemented</td><td style="text-align:left;">未完成的请求。服务器不支持所需的功能。</td></tr><tr><td style="text-align:left;">502</td><td style="text-align:left;">Bad Gateway</td><td style="text-align:left;">未完成的请求。服务器从上游服务器收到无效响应。</td></tr><tr><td style="text-align:left;">503</td><td style="text-align:left;">Service Unavailable</td><td style="text-align:left;">未完成的请求。服务器暂时超载或死机。</td></tr><tr><td style="text-align:left;">504</td><td style="text-align:left;">Gateway Timeout</td><td style="text-align:left;">网关超时。</td></tr><tr><td style="text-align:left;">505</td><td style="text-align:left;">HTTP Version Not Supported</td><td style="text-align:left;">服务器不支持&quot;HTTP协议&quot;版本。</td></tr></tbody></table></div><h3 id="浏览器头部信息" tabindex="-1"><a class="header-anchor" href="#浏览器头部信息" aria-hidden="true">#</a> 浏览器头部信息</h3><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">头信息</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">Accept</td><td style="text-align:left;">这个头信息指定浏览器或其他客户端可以处理的 MIME 类型。值 <strong>image/png</strong> 或 <strong>image/jpeg</strong> 是最常见的两种可能值。</td></tr><tr><td style="text-align:left;">Accept-Charset</td><td style="text-align:left;">这个头信息指定浏览器可以用来显示信息的字符集。例如 ISO-8859-1。</td></tr><tr><td style="text-align:left;">Accept-Encoding</td><td style="text-align:left;">这个头信息指定浏览器知道如何处理的编码类型。值 <strong>gzip</strong> 或 <strong>compress</strong> 是最常见的两种可能值。</td></tr><tr><td style="text-align:left;">Accept-Language</td><td style="text-align:left;">这个头信息指定客户端的首选语言，在这种情况下，Servlet 会产生多种语言的结果。例如，en、en-us、ru 等。</td></tr><tr><td style="text-align:left;">Authorization</td><td style="text-align:left;">这个头信息用于客户端在访问受密码保护的网页时识别自己的身份。</td></tr><tr><td style="text-align:left;">Connection</td><td style="text-align:left;">这个头信息指示客户端是否可以处理持久 HTTP 连接。持久连接允许客户端或其他浏览器通过单个请求来检索多个文件。值 <strong>Keep-Alive</strong> 意味着使用了持续连接。</td></tr><tr><td style="text-align:left;">Content-Length</td><td style="text-align:left;">这个头信息只适用于 POST 请求，并给出 POST 数据的大小（以字节为单位）。</td></tr><tr><td style="text-align:left;">Cookie</td><td style="text-align:left;">这个头信息把之前发送到浏览器的 cookies 返回到服务器。</td></tr><tr><td style="text-align:left;">Host</td><td style="text-align:left;">这个头信息指定原始的 URL 中的主机和端口。</td></tr><tr><td style="text-align:left;">If-Modified-Since</td><td style="text-align:left;">这个头信息表示只有当页面在指定的日期后已更改时，客户端想要的页面。如果没有新的结果可以使用，服务器会发送一个 304 代码，表示 <strong>Not Modified</strong> 头信息。</td></tr><tr><td style="text-align:left;">If-Unmodified-Since</td><td style="text-align:left;">这个头信息是 If-Modified-Since 的对立面，它指定只有当文档早于指定日期时，操作才会成功。</td></tr><tr><td style="text-align:left;">Referer</td><td style="text-align:left;">这个头信息指示所指向的 Web 页的 URL。例如，如果您在网页 1，点击一个链接到网页 2，当浏览器请求网页 2 时，网页 1 的 URL 就会包含在 Referer 头信息中。</td></tr><tr><td style="text-align:left;">User-Agent</td><td style="text-align:left;">这个头信息识别发出请求的浏览器或其他客户端，并可以向不同类型的浏览器返回不同的内容。</td></tr></tbody></table></div><h3 id="http-请求头部信息" tabindex="-1"><a class="header-anchor" href="#http-请求头部信息" aria-hidden="true">#</a> HTTP 请求头部信息</h3><p>通过 <code>HttpServletRequest</code> 对象获取</p><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法 &amp; 描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><strong>Cookie[] getCookies()</strong> 返回一个数组，包含客户端发送该请求的所有的 Cookie 对象。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><strong>Enumeration getAttributeNames()</strong> 返回一个枚举，包含提供给该请求可用的属性名称。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><strong>Enumeration getHeaderNames()</strong> 返回一个枚举，包含在该请求中包含的所有的头名。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"><strong>Enumeration getParameterNames()</strong> 返回一个 String 对象的枚举，包含在该请求中包含的参数的名称。</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;"><strong>HttpSession getSession()</strong> 返回与该请求关联的当前 session 会话，或者如果请求没有 session 会话，则创建一个。</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;"><strong>HttpSession getSession(boolean create)</strong> 返回与该请求关联的当前 HttpSession，或者如果没有当前会话，且创建是真的，则返回一个新的 session 会话。</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;"><strong>Locale getLocale()</strong> 基于 Accept-Language 头，返回客户端接受内容的首选的区域设置。</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;"><strong>Object getAttribute(String name)</strong> 以对象形式返回已命名属性的值，如果没有给定名称的属性存在，则返回 null。</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;"><strong>ServletInputStream getInputStream()</strong> 使用 ServletInputStream，以二进制数据形式检索请求的主体。</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;"><strong>String getAuthType()</strong> 返回用于保护 Servlet 的身份验证方案的名称，例如，&quot;BASIC&quot; 或 &quot;SSL&quot;，如果JSP没有受到保护则返回 null。</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;"><strong>String getCharacterEncoding()</strong> 返回请求主体中使用的字符编码的名称。</td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;"><strong>String getContentType()</strong> 返回请求主体的 MIME 类型，如果不知道类型则返回 null。</td></tr><tr><td style="text-align:left;">13</td><td style="text-align:left;"><strong>String getContextPath()</strong> 返回指示请求上下文的请求 URI 部分。</td></tr><tr><td style="text-align:left;">14</td><td style="text-align:left;"><strong>String getHeader(String name)</strong> 以字符串形式返回指定的请求头的值。</td></tr><tr><td style="text-align:left;">15</td><td style="text-align:left;"><strong>String getMethod()</strong> 返回请求的 HTTP 方法的名称，例如，GET、POST 或 PUT。</td></tr><tr><td style="text-align:left;">16</td><td style="text-align:left;"><strong>String getParameter(String name)</strong> 以字符串形式返回请求参数的值，或者如果参数不存在则返回 null。</td></tr><tr><td style="text-align:left;">17</td><td style="text-align:left;"><strong>String getPathInfo()</strong> 当请求发出时，返回与客户端发送的 URL 相关的任何额外的路径信息。</td></tr><tr><td style="text-align:left;">18</td><td style="text-align:left;"><strong>String getProtocol()</strong> 返回请求协议的名称和版本。</td></tr><tr><td style="text-align:left;">19</td><td style="text-align:left;"><strong>String getQueryString()</strong> 返回包含在路径后的请求 URL 中的查询字符串。</td></tr><tr><td style="text-align:left;">20</td><td style="text-align:left;"><strong>String getRemoteAddr()</strong> 返回发送请求的客户端的互联网协议（IP）地址。</td></tr><tr><td style="text-align:left;">21</td><td style="text-align:left;"><strong>String getRemoteHost()</strong> 返回发送请求的客户端的完全限定名称。</td></tr><tr><td style="text-align:left;">22</td><td style="text-align:left;"><strong>String getRemoteUser()</strong> 如果用户已通过身份验证，则返回发出请求的登录用户，或者如果用户未通过身份验证，则返回 null。</td></tr><tr><td style="text-align:left;">23</td><td style="text-align:left;"><strong>String getRequestURI()</strong> 从协议名称直到 HTTP 请求的第一行的查询字符串中，返回该请求的 URL 的一部分。</td></tr><tr><td style="text-align:left;">24</td><td style="text-align:left;"><strong>String getRequestedSessionId()</strong> 返回由客户端指定的 session 会话 ID。</td></tr><tr><td style="text-align:left;">25</td><td style="text-align:left;"><strong>String getServletPath()</strong> 返回调用 JSP 的请求的 URL 的一部分。</td></tr><tr><td style="text-align:left;">26</td><td style="text-align:left;"><strong>String[] getParameterValues(String name)</strong> 返回一个字符串对象的数组，包含所有给定的请求参数的值，如果参数不存在则返回 null。</td></tr><tr><td style="text-align:left;">27</td><td style="text-align:left;"><strong>boolean isSecure()</strong> 返回一个布尔值，指示请求是否使用安全通道，如 HTTPS。</td></tr><tr><td style="text-align:left;">28</td><td style="text-align:left;"><strong>int getContentLength()</strong> 以字节为单位返回请求主体的长度，并提供输入流，或者如果长度未知则返回 -1。</td></tr><tr><td style="text-align:left;">29</td><td style="text-align:left;"><strong>int getIntHeader(String name)</strong> 返回指定的请求头的值为一个 int 值。</td></tr><tr><td style="text-align:left;">30</td><td style="text-align:left;"><strong>int getServerPort()</strong> 返回接收到这个请求的端口号。</td></tr></tbody></table></div><h3 id="服务端头部信息" tabindex="-1"><a class="header-anchor" href="#服务端头部信息" aria-hidden="true">#</a> 服务端头部信息</h3><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">头信息</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">Allow</td><td style="text-align:left;">这个头信息指定服务器支持的请求方法（GET、POST 等）。</td></tr><tr><td style="text-align:left;">Cache-Control</td><td style="text-align:left;">这个头信息指定响应文档在何种情况下可以安全地缓存。可能的值有：<strong>public、private</strong> 或 <strong>no-cache</strong> 等。Public 意味着文档是可缓存，Private 意味着文档是单个用户私用文档，且只能存储在私有（非共享）缓存中，no-cache 意味着文档不应被缓存。</td></tr><tr><td style="text-align:left;">Connection</td><td style="text-align:left;">这个头信息指示浏览器是否使用持久 HTTP 连接。值 <strong>close</strong> 指示浏览器不使用持久 HTTP 连接，值 <strong>keep-alive</strong> 意味着使用持久连接。</td></tr><tr><td style="text-align:left;">Content-Disposition</td><td style="text-align:left;">这个头信息可以让您请求浏览器要求用户以给定名称的文件把响应保存到磁盘。</td></tr><tr><td style="text-align:left;">Content-Encoding</td><td style="text-align:left;">在传输过程中，这个头信息指定页面的编码方式。</td></tr><tr><td style="text-align:left;">Content-Language</td><td style="text-align:left;">这个头信息表示文档编写所使用的语言。例如，en、en-us、ru 等。</td></tr><tr><td style="text-align:left;">Content-Length</td><td style="text-align:left;">这个头信息指示响应中的字节数。只有当浏览器使用持久（keep-alive）HTTP 连接时才需要这些信息。</td></tr><tr><td style="text-align:left;">Content-Type</td><td style="text-align:left;">这个头信息提供了响应文档的 MIME（Multipurpose Internet Mail Extension）类型。</td></tr><tr><td style="text-align:left;">Expires</td><td style="text-align:left;">这个头信息指定内容过期的时间，在这之后内容不再被缓存。</td></tr><tr><td style="text-align:left;">Last-Modified</td><td style="text-align:left;">这个头信息指示文档的最后修改时间。然后，客户端可以缓存文件，并在以后的请求中通过 <strong>If-Modified-Since</strong> 请求头信息提供一个日期。</td></tr><tr><td style="text-align:left;">Location</td><td style="text-align:left;">这个头信息应被包含在所有的带有状态码的响应中。在 300s 内，这会通知浏览器文档的地址。浏览器会自动重新连接到这个位置，并获取新的文档。</td></tr><tr><td style="text-align:left;">Refresh</td><td style="text-align:left;">这个头信息指定浏览器应该如何尽快请求更新的页面。您可以指定页面刷新的秒数。</td></tr><tr><td style="text-align:left;">Retry-After</td><td style="text-align:left;">这个头信息可以与 503（Service Unavailable 服务不可用）响应配合使用，这会告诉客户端多久就可以重复它的请求。</td></tr><tr><td style="text-align:left;">Set-Cookie</td><td style="text-align:left;">这个头信息指定一个与页面关联的 cookie。</td></tr></tbody></table></div><h3 id="http-响应头部信息" tabindex="-1"><a class="header-anchor" href="#http-响应头部信息" aria-hidden="true">#</a> HTTP 响应头部信息</h3><p>通过 <code>HttpServletResponse</code> 对象获取</p><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法 &amp; 描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><strong>String encodeRedirectURL(String url)</strong> 为 sendRedirect 方法中使用的指定的 URL 进行编码，或者如果编码不是必需的，则返回 URL 未改变。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><strong>String encodeURL(String url)</strong> 对包含 session 会话 ID 的指定 URL 进行编码，或者如果编码不是必需的，则返回 URL 未改变。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><strong>boolean containsHeader(String name)</strong> 返回一个布尔值，指示是否已经设置已命名的响应报头。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"><strong>boolean isCommitted()</strong> 返回一个布尔值，指示响应是否已经提交。</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;"><strong>void addCookie(Cookie cookie)</strong> 把指定的 cookie 添加到响应。</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;"><strong>void addDateHeader(String name, long date)</strong> 添加一个带有给定的名称和日期值的响应报头。</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;"><strong>void addHeader(String name, String value)</strong> 添加一个带有给定的名称和值的响应报头。</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;"><strong>void addIntHeader(String name, int value)</strong> 添加一个带有给定的名称和整数值的响应报头。</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;"><strong>void flushBuffer()</strong> 强制任何在缓冲区中的内容被写入到客户端。</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;"><strong>void reset()</strong> 清除缓冲区中存在的任何数据，包括状态码和头。</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;"><strong>void resetBuffer()</strong> 清除响应中基础缓冲区的内容，不清除状态码和头。</td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;"><strong>void sendError(int sc)</strong> 使用指定的状态码发送错误响应到客户端，并清除缓冲区。</td></tr><tr><td style="text-align:left;">13</td><td style="text-align:left;"><strong>void sendError(int sc, String msg)</strong> 使用指定的状态发送错误响应到客户端。</td></tr><tr><td style="text-align:left;">14</td><td style="text-align:left;"><strong>void sendRedirect(String location)</strong> 使用指定的重定向位置 URL 发送临时重定向响应到客户端。</td></tr><tr><td style="text-align:left;">15</td><td style="text-align:left;"><strong>void setBufferSize(int size)</strong> 为响应主体设置首选的缓冲区大小。</td></tr><tr><td style="text-align:left;">16</td><td style="text-align:left;"><strong>void setCharacterEncoding(String charset)</strong> 设置被发送到客户端的响应的字符编码（MIME 字符集）例如，UTF-8。</td></tr><tr><td style="text-align:left;">17</td><td style="text-align:left;"><strong>void setContentLength(int len)</strong> 设置在 HTTP Servlet 响应中的内容主体的长度，该方法设置 HTTP Content-Length 头。</td></tr><tr><td style="text-align:left;">18</td><td style="text-align:left;"><strong>void setContentType(String type)</strong> 如果响应还未被提交，设置被发送到客户端的响应的内容类型。</td></tr><tr><td style="text-align:left;">19</td><td style="text-align:left;"><strong>void setDateHeader(String name, long date)</strong> 设置一个带有给定的名称和日期值的响应报头。</td></tr><tr><td style="text-align:left;">20</td><td style="text-align:left;"><strong>void setHeader(String name, String value)</strong> 设置一个带有给定的名称和值的响应报头。</td></tr><tr><td style="text-align:left;">21</td><td style="text-align:left;"><strong>void setIntHeader(String name, int value)</strong> 设置一个带有给定的名称和整数值的响应报头。</td></tr><tr><td style="text-align:left;">22</td><td style="text-align:left;"><strong>void setLocale(Locale loc)</strong> 如果响应还未被提交，设置响应的区域。</td></tr><tr><td style="text-align:left;">23</td><td style="text-align:left;"><strong>void setStatus(int sc)</strong> 为该响应设置状态码。</td></tr></tbody></table></div><h2 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器" aria-hidden="true">#</a> 过滤器</h2><p>用于请求完成前后对请求或响应做出一定处理</p><p>根据规范建议的各种类型的过滤器：</p><ul><li>身份验证过滤器（Authentication Filters）。</li><li>数据压缩过滤器（Data compression Filters）。</li><li>加密过滤器（Encryption Filters）。</li><li>触发资源访问事件过滤器。</li><li>图像转换过滤器（Image Conversion Filters）。</li><li>日志记录和审核过滤器（Logging and Auditing Filters）。</li><li>MIME-TYPE 链过滤器（MIME-TYPE Chain Filters）。</li><li>标记化过滤器（Tokenizing Filters）。</li><li>XSL/T 过滤器（XSL/T Filters），转换 XML 内容。</li></ul><p>Servlet 中 <code>Filter</code> 类接口的三个方法：</p><div class="table-wrapper"><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法 &amp; 描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><strong>public void doFilter (ServletRequest, ServletResponse, FilterChain)</strong> 该方法在每次一个请求/响应对因客户端在链的末端请求资源而通过链传递时由容器调用。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><strong>public void init(FilterConfig filterConfig)</strong> 该方法由 Web 容器调用，指示一个过滤器被放入服务。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><strong>public void destroy()</strong> 该方法由 Web 容器调用，指示一个过滤器被取出服务。</td></tr></tbody></table></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 导入必需的 java 库</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token comment">// 实现 Filter 类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span>  <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> config<span class="token punctuation">)</span> 
                         <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">{</span>
      <span class="token comment">// 获取初始化参数</span>
      <span class="token class-name">String</span> testParam <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;test-param&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

      <span class="token comment">// 输出初始化参数</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Test Param: &quot;</span> <span class="token operator">+</span> testParam<span class="token punctuation">)</span><span class="token punctuation">;</span> 
   <span class="token punctuation">}</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> 
                 <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span>
                 <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> 
                 <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

      <span class="token comment">// 获取客户机的 IP 地址   </span>
      <span class="token class-name">String</span> ipAddress <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 记录 IP 地址和当前时间戳</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;IP &quot;</span><span class="token operator">+</span> ipAddress <span class="token operator">+</span> <span class="token string">&quot;, Time &quot;</span>
                                       <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 把请求传回过滤链</span>
      chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">/* 在 Filter 实例被 Web 容器从服务移除之前调用 */</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要实现 <code>Filter</code> 接口就进入过滤链中，<code>chain.doFilter(request,response)</code> 是处理完成后放行，此后可能还会有其他过滤器。</p><p>所以这里会涉及到不同过滤器过滤的范围以及顺序等问题，这里不过多描述</p><h2 id="servletcontext-对象" tabindex="-1"><a class="header-anchor" href="#servletcontext-对象" aria-hidden="true">#</a> ServletContext 对象</h2><div class="hint-container info"><p class="hint-container-title">说明</p><p>上下文对象</p><p>ServletContext是一个全局的储存信息的空间，服务器开始就存在，服务器关闭才释放。</p></div><ol><li><p>WEB容器在启动时，它会为每个Web应用程序都创建一个对应的ServletContext，它代表当前Web应用，并且它被 <strong>所有客户端共享</strong>。</p></li><li><p>由于一个WEB应用中的所有Servlet共享同一个ServletContext对象，因此Servlet对象之间可以通过ServletContext对象来实现 <strong>通讯</strong>。</p></li><li><p>当web应用关闭、Tomcat关闭或者Web应用reload的时候，ServletContext对象会被销毁</p></li><li><p>ServletContext中的属性的生命周期从创建开始，到服务器关闭结束。</p></li></ol><p><strong>获取方式：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>包含的方法：</strong></p><ol><li>添加属性：setAttribute(String name, Object obj);</li><li>得到值：getAttribute(String name)，这个方法返回Object</li><li>删除属性：removeAttribute(String name)</li></ol><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><p>Servlet 中还涉及到：</p><ol><li>异常处理</li><li>Cookies 与 Session 的处理</li></ol>`,37);function y(x,v){const n=o("router-link");return i(),d("div",null,[p,c,t("nav",f,[t("ul",null,[t("li",null,[l(n,{to:"#servlet"},{default:s(()=>[e("Servlet")]),_:1}),t("ul",null,[t("li",null,[l(n,{to:"#servlet-常见容器"},{default:s(()=>[e("Servlet 常见容器")]),_:1})]),t("li",null,[l(n,{to:"#servlet-生命周期"},{default:s(()=>[e("Servlet 生命周期")]),_:1})]),t("li",null,[l(n,{to:"#客户端-服务端信息"},{default:s(()=>[e("客户端/服务端信息")]),_:1}),t("ul",null,[t("li",null,[l(n,{to:"#状态码"},{default:s(()=>[e("状态码")]),_:1})]),t("li",null,[l(n,{to:"#浏览器头部信息"},{default:s(()=>[e("浏览器头部信息")]),_:1})]),t("li",null,[l(n,{to:"#http-请求头部信息"},{default:s(()=>[e("HTTP 请求头部信息")]),_:1})]),t("li",null,[l(n,{to:"#服务端头部信息"},{default:s(()=>[e("服务端头部信息")]),_:1})]),t("li",null,[l(n,{to:"#http-响应头部信息"},{default:s(()=>[e("HTTP 响应头部信息")]),_:1})])])]),t("li",null,[l(n,{to:"#过滤器"},{default:s(()=>[e("过滤器")]),_:1})]),t("li",null,[l(n,{to:"#servletcontext-对象"},{default:s(()=>[e("ServletContext 对象")]),_:1})]),t("li",null,[l(n,{to:"#其他"},{default:s(()=>[e("其他")]),_:1})])])])])]),u])}const h=a(g,[["render",y],["__file","A-Servlet.html.vue"]]);export{h as default};
