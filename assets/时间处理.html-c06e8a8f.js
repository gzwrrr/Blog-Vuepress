import{_ as t,Q as a,S as n,U as e,a8 as i,W as o,a9 as c,H as s}from"./framework-d7e1aa10.js";const r={},d=e("h1",{id:"时间处理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#时间处理","aria-hidden":"true"},"#"),i(" 时间处理")],-1),p=e("h2",{id:"时区",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#时区","aria-hidden":"true"},"#"),i(" 时区")],-1),_={class:"hint-container info"},T=e("p",{class:"hint-container-title"},"相关文章",-1),h={href:"https://zhuanlan.zhihu.com/p/135951778",target:"_blank",rel:"noopener noreferrer"},m={href:"https://blog.csdn.net/lilongsy/article/details/130130776",target:"_blank",rel:"noopener noreferrer"},u=c("<p>相关问题：</p><ol><li><p>时区</p></li><li><p>标准时间</p></li><li><p>时间戳及其格式</p></li><li><p>24小时制：以0到23之间的数字表示小时，例如13:45表示下午1点45分。</p></li><li><p>12小时制：以1到12之间的数字表示小时，结合上午（AM）和下午（PM）来区分上午和下午，例如1:45 PM表示下午1点45分。</p></li><li><p>小数形式：使用小数表示时间的一部分，例如3.5表示3小时30分钟。</p></li><li><p>UTC时间：以协调世界时（UTC）为基准，使用一个24小时制的数字表示时间，例如14:30表示协调世界时下午2点30分。</p></li><li><p>ISO 8601格式：这是一种国际标准化的日期和时间表示格式，例如&quot;2023-06-12T09:30:00+00:00&quot;表示2023年6月12日上午9点30分（协调世界时）。</p></li><li><p>AM/PM形式：使用上午（AM）和下午（PM）来表示时间，例如9:30 AM表示上午9点30分。</p></li><li><p>时间戳（Timestamp）：表示从某个固定的时间点（通常是协调世界时的1970年1月1日午夜）开始经过的毫秒数或秒数。时间戳是一种与时区无关的时间表示形式。</p></li></ol><p>Java中用于处理时区和时间的类有以下几个：</p><ol><li><code>java.util.TimeZone</code>：这个类提供了对时区的支持，可以获取和设置时区信息。</li><li><code>java.time.ZoneId</code>：这个类表示一个特定的时区，它可以用来创建<code>java.time.ZonedDateTime</code>对象，或者用于其他需要时区信息的操作。</li><li><code>java.time.ZonedDateTime</code>：这个类表示带时区的日期和时间，可以进行各种日期和时间操作，并且考虑了时区的影响。</li><li><code>java.time.OffsetDateTime</code>：这个类表示带偏移量的日期和时间，偏移量是相对于UTC（协调世界时）的时间差。</li><li><code>java.time.LocalDateTime</code>：这个类表示不带时区信息的日期和时间，它不考虑时区的影响。</li><li><code>java.time.Instant</code>：这个类表示一个瞬时点的时间，通常与UTC一起使用。</li></ol><p>除了这些类之外，还有一些与时区和时间相关的概念：</p><ol><li>UTC（协调世界时）：它是世界上使用最广泛的时间标准，它不考虑夏令时和时区的影响，被认为是一个参考时间。</li><li>夏令时（Daylight Saving Time，DST）：在一些地区，为了充分利用夏季长时间的日照，将时间提前一个小时，以增加日光活动时间。</li><li>偏移量（Offset）：偏移量表示相对于UTC的时间差，可以是正数或负数。例如，+02:00表示比UTC快两个小时，-05:00表示比UTC慢五个小时。</li></ol><p>在数据库中，常见的时间表示形式包括以下几种：</p><ol><li>DATE：这是表示日期的数据类型，通常以年-月-日的形式存储，例如&quot;2023-06-12&quot;。它只包含日期部分，没有时间信息。</li><li>TIME：这是表示时间的数据类型，通常以小时:分钟:秒的形式存储，例如&quot;09:30:00&quot;。它只包含时间部分，没有日期信息。</li><li>DATETIME/TIMESTAMP：这是同时表示日期和时间的数据类型。DATETIME以年-月-日 小时:分钟:秒的形式存储，例如&quot;2023-06-12 09:30:00&quot;。TIMESTAMP也表示日期和时间，但它通常以特定的格式存储，如UTC时间戳或特定时区的时间戳。</li><li>YEAR：这是表示年份的数据类型，通常存储为四位数的年份，例如&quot;2023&quot;。它只包含年份部分，没有具体的月份或日期信息。</li><li>INTERVAL：这是一种用于表示时间间隔的数据类型。它可以表示一段时间，如几天、几小时、几分钟等，以方便进行日期和时间的计算。</li></ol><p>这些时间表示形式在不同的数据库管理系统中可能会有些差异，具体使用哪种形式取决于数据库的选择、应用需求和数据模型设计。需要根据具体情况选择合适的数据类型来存储和处理时间信息。</p>",9);function f(M,E){const l=s("ExternalLinkIcon");return a(),n("div",null,[d,p,e("div",_,[T,e("p",null,[e("a",h,[i("彻底弄懂GMT、UTC、时区和夏令时"),o(l)])]),e("p",null,[e("a",m,[i("日期时间表示格式大全： ISO 8601、RFC、时间戳、Excel..."),o(l)])])]),u])}const C=t(r,[["render",f],["__file","时间处理.html.vue"]]);export{C as default};
