import{_ as d,Q as c,S as s,U as e,W as t,X as i,a8 as a,a9 as o,H as n}from"./framework-d7e1aa10.js";const h={},p=e("h2",{id:"android-数据存储",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#android-数据存储","aria-hidden":"true"},"#"),a(" Android 数据存储")],-1),_={class:"table-of-contents"},u=o('<div class="hint-container note"><p class="hint-container-title">数据格式</p><ol><li>关系型数据</li><li>文本文件</li></ol></div><h3 id="sharepreference" tabindex="-1"><a class="header-anchor" href="#sharepreference" aria-hidden="true">#</a> SharePreference</h3><blockquote><p>轻量级的存储工具，键值对形式</p></blockquote><p>适用于：</p><ol><li>简单且孤立的数据</li><li>文本格式的数据</li><li>需要持久化存储的数据</li></ol><p><strong>Context</strong>类中的**getSharedPreferences()**方法：</p><ol><li>第一个参数用于指定SharedPreferences文件的名称，如果指定的文件不存在则会创建一个，SharedPreferences文件都是存放在<code>/data/data/&lt;packagename&gt;/shared_prefs/</code>目录下的；</li><li>第二个参数用于指定操作模式，目前只有默认的MODE_PRIVATE这一种模式可选，它和直接传入0的效果是相同的，表示只有当前的应用程序才可以对这个SharedPreferences文件进行读写。</li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><p>其他几种操作模式均已被废弃，MODE_WORLD_READABLE和MODE_WORLD_WRITEABLE这两种模式是在Android 4.2版本中被废弃的，MODE_MULTI_PROCESS模式是在Android 6.0版本中被废弃的s<strong>Activity</strong>类中的**getPreferences()**方法</p></div><h3 id="livedata" tabindex="-1"><a class="header-anchor" href="#livedata" aria-hidden="true">#</a> LiveData</h3>',9),f={href:"https://developer.android.google.cn/reference/androidx/lifecycle/LiveData?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},D=e("code",null,"LiveData",-1),v=o('<h3 id="sqlite" tabindex="-1"><a class="header-anchor" href="#sqlite" aria-hidden="true">#</a> SQLite</h3><blockquote><p>TODO SQLiteDatabase、SQLiteOpenHelper</p></blockquote><h3 id="jetpack-room" tabindex="-1"><a class="header-anchor" href="#jetpack-room" aria-hidden="true">#</a> Jetpack Room</h3><blockquote><p>TODO 基于注解简化 SQLite</p></blockquote><p>可能需要亲自写一些解析代码去从Sqlite读取数据对象，或者进行相反的操作。如果可以序列化数据对象，例如通过Gson，只持久化存储最终是字符串。通过这种方式虽然会降低性能，但是从另一个角度来讲，你不需要为每一个数据结构声明表结构。</p><p>使用ORM我们通常不推荐使用对象关系映射第三方库除非你有非常复杂的数据结构，并且你确定你真的需要它。他们通常比较复杂，并且需要时间去学习。如果你决定了在你的应用中使用ORM，你应该注意它是否是线程安全的，而对于目前大多数ORM解决方案都是非线程安全的。</p><p>使用StethoStetho 是一个Facebook 开源的Android调试工具，它是Chrome Developer Tools的扩展。通过它可以检测应用的网络情况。它也允许你可以检测应用的数据库，shared preferences。但是，你应该确保Stetho只有在Debug状态下得以开启，而不是在正式发布版本中。</p><p>使用LeakCanaryLeakCanary 是可以在应用运行中检测，定位内存泄露的Java库。使用它应是你开发应用过程中的一部分。更多详细的配置和使用情况请参照wiki。你只需要记得它在你的正式版本中你是不需要配置的。</p><h3 id="内外存储" tabindex="-1"><a class="header-anchor" href="#内外存储" aria-hidden="true">#</a> 内外存储</h3><p>内部存储（内存）</p><p>外部存储分为：公共控件和私有空间</p><h3 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作" aria-hidden="true">#</a> 文件操作</h3><p>Context类中提供了一个openFileOutput()方法，可以用于将数据存储到指定的文件中。这个方法接收两个参数：</p><ol><li>第一个参数是文件名，在文件创建的时候使用，注意这里指定的文件名不可以包含路径，因为所有的文件都默认存储到<code>/data/data/&lt;package name&gt;/files/</code>目录下；</li><li>第二个参数是文件的操作模式，主要有MODE_PRIVATE和MODE_APPEND两种模式可选，默认是MODE_PRIVATE，表示当指定相同文件名的时候，所写入的内容将会覆盖原文件中的内容，而MODE_APPEND则表示如果该文件已存在，就往文件里面追加内容，不存在就创建新文件。</li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><p>其实文件的操作模式本来还有另外两种：MODE_WORLD_READABLE和MODE_WORLD_WRITEABLE。这两种模式表示允许其他应用程序对我们程序中的文件进行读写操作，不过由于这两种模式过于危险，很容易引起应用的安全漏洞，已在Android 4.2版本中被废弃。</p></div><h3 id="其他存储方式" tabindex="-1"><a class="header-anchor" href="#其他存储方式" aria-hidden="true">#</a> 其他存储方式</h3><ol><li><p>可以通过 Application 对象存储数据。</p></li><li><p>如果SharedPreferences不足以满足你的需求，那么你可以使用平台标准的ContentProviders，它不仅快速，并且线程安全。使用ContentProviders的唯一问题是建立他们需要大量的模板代码，并且少有高质量的教程。如果可以，我们可以通过使用第三方库Schematic，极大降低了冗余操作，去生ContentProviders。</p></li></ol>',17);function E(k,L){const r=n("router-link"),l=n("ExternalLinkIcon");return c(),s("div",null,[p,e("nav",_,[e("ul",null,[e("li",null,[t(r,{to:"#android-数据存储"},{default:i(()=>[a("Android 数据存储")]),_:1}),e("ul",null,[e("li",null,[t(r,{to:"#sharepreference"},{default:i(()=>[a("SharePreference")]),_:1})]),e("li",null,[t(r,{to:"#livedata"},{default:i(()=>[a("LiveData")]),_:1})]),e("li",null,[t(r,{to:"#sqlite"},{default:i(()=>[a("SQLite")]),_:1})]),e("li",null,[t(r,{to:"#jetpack-room"},{default:i(()=>[a("Jetpack Room")]),_:1})]),e("li",null,[t(r,{to:"#内外存储"},{default:i(()=>[a("内外存储")]),_:1})]),e("li",null,[t(r,{to:"#文件操作"},{default:i(()=>[a("文件操作")]),_:1})]),e("li",null,[t(r,{to:"#其他存储方式"},{default:i(()=>[a("其他存储方式")]),_:1})])])])])]),u,e("p",null,[e("a",f,[D,t(l)]),a(" 是一种可观察的数据存储器类。与常规的可观察类不同，LiveData 具有生命周期感知能力，意指它遵循其他应用组件（如 activity、fragment 或 service）的生命周期。这种感知能力可确保 LiveData 仅更新处于活跃生命周期状态的应用组件观察者。")]),v])}const A=d(h,[["render",E],["__file","H-Android数据存储.html.vue"]]);export{A as default};
