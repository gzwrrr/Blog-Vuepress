import{_ as u,Q as s,S as h,U as l,W as i,X as n,a8 as e,a9 as r,H as a}from"./framework-d7e1aa10.js";const _={},c=l("h1",{id:"前后端开源框架-脚手架",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#前后端开源框架-脚手架","aria-hidden":"true"},"#"),e(" 前后端开源框架/脚手架")],-1),d={class:"table-of-contents"},p={href:"https://gitee.com/gvp",target:"_blank",rel:"noopener noreferrer"},g=r('<h2 id="写在前面" tabindex="-1"><a class="header-anchor" href="#写在前面" aria-hidden="true">#</a> 写在前面</h2><p>一、页面渲染可分为「客户端渲染」和「服务端渲染」，下面基于「前后端分离」中常用框架进行讨论：</p><ol><li>客户端渲染：可以简要概括为，后端提供数据给前端渲染，即前端专注于视图，后端专注于逻辑开发，常见「框架」有： <ul><li>Vue</li><li>React</li><li>Angular</li></ul></li><li>服务端渲染：服务器端即在后端直接将页面拼接完整后返回，常见的「脚手架」有： <ul><li>Nuxt ( 与 Vue 紧密相关 )</li><li>Next ( 与 React 紧密相关 )</li><li>Nest ( 与 Angular 紧密相关 )</li></ul></li></ol><p>二、以下的主要内容旨在：</p><ol><li>介绍开发中可直接使用的主流开源「框架/脚手架」</li><li>较浅地讨论它们之间的「关系」、「优势/劣势」和「使用场景」</li></ol><h2 id="前台开发" tabindex="-1"><a class="header-anchor" href="#前台开发" aria-hidden="true">#</a> 前台开发</h2><h3 id="_1-客户端渲染" tabindex="-1"><a class="header-anchor" href="#_1-客户端渲染" aria-hidden="true">#</a> 1.客户端渲染</h3>',7),b=l("p",null,"客户端渲染的好处：",-1),f=l("li",null,"页面可以逐步动态地展现（不用一次性全部渲染），优化好后比较丝滑，用户体验先对较好",-1),m={href:"https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/3132",target:"_blank",rel:"noopener noreferrer"},k=l("li",null,"前后端耦合程度较低，维护性较好",-1),x=l("h4",null,"1.1 Vue.js",-1),E={href:"https://github.com/vuejs/vue",target:"_blank",rel:"noopener noreferrer"},j={start:"2"},S=l("li",null,[l("p",null,"优势："),l("ul",null,[l("li",null,[l("p",null,"灵活性较高，不太限制代码组织结构")]),l("li",null,[l("p",null,"较为轻量（相较于 React 和 Angular），体积小，适合开发小型应用（当然大型应用也适合）")]),l("li",null,[l("p",null,"学习成本较低，有三大件 ( HTML/CSS/JavaScript ) 基础可以很快上手")])])],-1),R=l("p",null,"劣势：",-1),q=l("li",null,"生态相较于 React 和 Angular 较差",-1),N={href:"http://doc.weex.io/zh/guide/introduction.html",target:"_blank",rel:"noopener noreferrer"},H=l("h4",null,"1.2 React.js",-1),G={href:"https://github.com/facebook/react",target:"_blank",rel:"noopener noreferrer"},w={start:"2"},C=l("li",null,[l("p",null,"优势："),l("ul",null,[l("li",null,"灵活性较高，可以与现存的库较好地结合"),l("li",null,"有跨平台优势，React Native 有本地渲染能力（依靠 Virtual DOM），支持跨平台开发"),l("li",null,"生态环境好")])],-1),A=l("p",null,"劣势：",-1),v={href:"https://zh-hans.reactjs.org/docs/introducing-jsx.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://www.w3cschool.cn/escript6/",target:"_blank",rel:"noopener noreferrer"},Y=l("h4",null,"1.3 Angular.js",-1),y={href:"https://github.com/angular/angular",target:"_blank",rel:"noopener noreferrer"},z=r('<ol><li>优势： <ul><li>项目结构良好，构建相对容易，可以不依赖其他库，适用于做大型项目</li><li>生态环境好</li><li>有跨平台优势</li></ul></li><li>劣势： <ul><li>体积较大，相应速度较慢</li><li>学习成本较高，开发使用 TypeScript ( JavaScript 的超集 )，并且附带许多基础概念和复杂的 API</li></ul></li></ol><h4>1.4 小结</h4><ol><li>Vue 学习成本低，适合快速构建小型应用，国内使用较多</li><li>React 学习成本中等，适合构建跨平台应用</li><li>Angular 学习成本大，适合构建大型项目</li></ol><h3 id="_2-node-框架" tabindex="-1"><a class="header-anchor" href="#_2-node-框架" aria-hidden="true">#</a> 2.Node 框架</h3><blockquote><ol><li>Node.js 允许开发人员在应用程序的「客户端」和「服务端」使用相同的语言：JavaScript</li><li>可以快速构件低成本的小型应用，前端使用：Vue/React/Angular，后端使用：Express/Koa/Hapi</li></ol></blockquote><h4>2.1 Express</h4>',6),B={href:"https://github.com/expressjs/express",target:"_blank",rel:"noopener noreferrer"},I=r("<ol><li>优势： <ul><li>符合 Node.js Web 中间件标准</li><li>简单易扩展，可以快速开发应用。模板和渲染集成等开箱即用</li><li>性能较好</li></ul></li><li>劣势： <ul><li>代码量起来后维护或重构比较困难</li><li>难以简化重复的开发步骤</li><li>Node 的漏洞会直接影响 Express</li></ul></li></ol><h4>2.2 Koa</h4>",2),J={href:"https://github.com/koajs/koa",target:"_blank",rel:"noopener noreferrer"},P=l("ol",null,[l("li",null,[e("优势： "),l("ul",null,[l("li",null,"极度轻量，核心代码约为 2K"),l("li",null,"操作性、健壮性较好"),l("li",null,"异步控制，可以集成大量的 Web API"),l("li",null,"性能很好")])]),l("li",null,[e("劣势： "),l("ul",null,[l("li",null,"生态较差")])])],-1),T=l("h4",null,"2.3 Hapi",-1),O={href:"https://github.com/hapijs/hapi",target:"_blank",rel:"noopener noreferrer"},W=l("p",null,"优势：",-1),U=l("li",null,[l("p",null,"基础功能较多，利于开发人员专注于业务")],-1),K={href:"https://github.com/hapijs/hapi",target:"_blank",rel:"noopener noreferrer"},L=l("li",null,[l("p",null,"创建 REST API 的最佳选择，提供了路由、输入、输出验证和缓存")],-1),M=l("li",null,[l("p",null,"性能较差")],-1),X=l("li",null,[l("p",null,"劣势："),l("ul",null,[l("li",null,"结构较为复杂，插件也有可能不兼容"),l("li",null,"难以简化重复的开发步骤")])],-1),D=l("h4",null,"2.4 小结",-1),F=l("ol",null,[l("li",null,"Express 在三者中最为流行，适用于快速开发小型应用"),l("li",null,"Koa 性能相对较好，项目的可维护性较好"),l("li",null,"Hapi 相对来说适合构建大型项目")],-1),Q=l("h3",{id:"_3-服务端渲染",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_3-服务端渲染","aria-hidden":"true"},"#"),e(" 3.服务端渲染")],-1),Z=l("p",null,"服务端渲染的好处：",-1),$=l("li",null,"页面可以一次性展示全部内容，但这也意味着，网速差则可能出现长时间加载不出的情况",-1),ll={href:"https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/3132",target:"_blank",rel:"noopener noreferrer"},el=l("li",null,"前后端耦合程度相对较高，维护性较差。开发效率也可能较低（取决于团队分工",-1),il=l("h4",null,"3.1 Nuxt",-1),tl={href:"https://github.com/nuxt/nuxt.js",target:"_blank",rel:"noopener noreferrer"},ol=r('<ol start="2"><li>优势： <ul><li>静态渲染</li><li>服务、模板皆可配置，项目结构清</li><li>默认支持 ES6/ES7</li><li>可以获取路由级别的异步数据</li><li>支持静态文件服务</li><li>样式支持：Sass，Less，Stylus 等</li></ul></li><li>劣势： <ul><li>自定义配置较为麻烦，相关资源少</li><li>性能相对较差</li></ul></li></ol><h4>3.2 Next</h4>',2),nl={href:"https://github.com/vercel/next.js",target:"_blank",rel:"noopener noreferrer"},rl=r("<ol><li>优势： <ul><li>默认情况组件均为服务端渲染，有利于 SEO</li><li>自动代码拆分，加快页面加载速度</li><li>不加载不必要的代码</li><li>基于 Webpack 的开发环境，支持模块热更新（HMR）</li><li>数据获取简单</li><li>支持任何 Node HTTP 服务器实现，如 Express</li><li>支持 Babel 和 Webpack 自定义</li><li>能够部署在任何能运行 Node 的平台</li></ul></li><li>劣势： <ul><li>不适合构架小型项目</li><li>数据会在「客户端」与「服务端重复加载」，造成资源浪费</li></ul></li></ol><h4>3.3 Nest</h4>",2),al={href:"https://github.com/nestjs/nest",target:"_blank",rel:"noopener noreferrer"},ul=r('<ol><li>优势： <ul><li>基于 TypeScript的 Web 框架，相对易于维护</li><li>可以自动生成 Swagger 文档</li><li>Nest 中的文件夹结构主要基于 Angular</li><li>项目结构清晰,只需要关注业务</li></ul></li><li>劣势： <ul><li>生态较差</li><li>不适合构架小型项目</li></ul></li></ol><h2 id="后台开发" tabindex="-1"><a class="header-anchor" href="#后台开发" aria-hidden="true">#</a> 后台开发</h2><h3 id="_1-ruoyi-推荐" tabindex="-1"><a class="header-anchor" href="#_1-ruoyi-推荐" aria-hidden="true">#</a> 1.RuoYi（推荐）</h3>',3),sl={href:"https://github.com/yangzongzhuan/RuoYi",target:"_blank",rel:"noopener noreferrer"},hl={href:"https://gitee.com/y_project/RuoYi?_from=gitee_search",target:"_blank",rel:"noopener noreferrer"},_l={href:"http://www.twom.top/",target:"_blank",rel:"noopener noreferrer"},cl=r('<ol><li>优势： <ul><li>社区活跃，生态环境完整庞大</li><li>拥有单应用版本、多模块版本、前后端分离版本、微服务版本</li><li>扩展插件丰富</li><li>内置功能完整强大，可直接用于企业级开发，开发人员可以更专注于业务逻辑</li><li>项目完全开源免费，有相应的文档支持（仅教学视频收费），对后台开发极其友好</li></ul></li><li>劣势： <ul><li>内置功能太多不适合小型项目（但是可以自行做减法，单应用版本做减法后也可以用于小型项目开发）</li><li>多模块部署时相对复杂，对服务器要求较高</li></ul></li></ol><figure><img src="http://gitee.com/gzwrrr/typora-img/raw/master/images/image-20220314202147647.png" alt="image-20220314202147647" tabindex="0" loading="lazy"><figcaption>image-20220314202147647</figcaption></figure><p>注：以下项目与 RuoYi 属于同个类型，优势/劣势与实现的功能都差不多，主要看自己的开发需求与习惯</p><h3 id="_2-pig" tabindex="-1"><a class="header-anchor" href="#_2-pig" aria-hidden="true">#</a> 2.Pig</h3>',4),dl={href:"https://github.com/pig-mesh/pig",target:"_blank",rel:"noopener noreferrer"},pl={href:"https://gitee.com/log4j/pig?_from=gitee_search",target:"_blank",rel:"noopener noreferrer"},gl=l("figure",null,[l("img",{src:"http://gitee.com/gzwrrr/typora-img/raw/master/images/image-20220314201900979.png",alt:"image-20220314201900979",tabindex:"0",loading:"lazy"}),l("figcaption",null,"image-20220314201900979")],-1),bl=l("h3",{id:"_3-jeesite",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_3-jeesite","aria-hidden":"true"},"#"),e(" 3.JeeSite")],-1),fl={href:"https://github.com/thinkgem/jeesite4",target:"_blank",rel:"noopener noreferrer"},ml={href:"https://gitee.com/thinkgem/jeesite4?_from=gitee_search",target:"_blank",rel:"noopener noreferrer"},kl={href:"https://jeesite.com/",target:"_blank",rel:"noopener noreferrer"},xl=r('<h2 id="推荐" tabindex="-1"><a class="header-anchor" href="#推荐" aria-hidden="true">#</a> 推荐</h2><h3 id="_1-后台单体应用" tabindex="-1"><a class="header-anchor" href="#_1-后台单体应用" aria-hidden="true">#</a> 1.后台单体应用</h3><p>推荐：<strong>RuoYi-Fast</strong></p><blockquote><ul><li><p>可以直接使用 RuoYi 的 RuoYi-fast 版本，适用于敏捷开发，可以满足绝大多数后台小型应用的需求</p></li><li><p>搭建开发环境时可以保留权限管理和监控等必要功能，项目中自带的演示案例和代码生成部分可以去除，这样打出来的 jar 包能控制在 300 M 以下</p></li></ul></blockquote><h3 id="_2-微服务应用" tabindex="-1"><a class="header-anchor" href="#_2-微服务应用" aria-hidden="true">#</a> 2.微服务应用</h3><p>推荐：<strong>RuoYi-Cloud + Vue + Nuxt + ElementUI + Uniapp</strong></p><blockquote><ol><li>前台：<strong>RuoYi-Cloud + Nuxt</strong></li><li>后台：**RuoYi-Cloud + Vue-element-admin ( Vue + ElementUI 的脚手架 ) **</li><li>小程序：<strong>RuoYi-Cloud + Uniapp ( 基于 vue )</strong></li></ol><p>即：后台统一使用 RuoYi-Cloud，前台则选用不同的脚手架。</p></blockquote><p>注：以上是本人体验下来较为舒适的一套方案，上手难度较小过渡较为容易</p>',8);function El(jl,Sl){const o=a("router-link"),t=a("ExternalLinkIcon");return s(),h("div",null,[c,l("nav",d,[l("ul",null,[l("li",null,[i(o,{to:"#前后端开源框架-脚手架"},{default:n(()=>[e("前后端开源框架/脚手架")]),_:1}),l("ul",null,[l("li",null,[i(o,{to:"#写在前面"},{default:n(()=>[e("写在前面")]),_:1})]),l("li",null,[i(o,{to:"#前台开发"},{default:n(()=>[e("前台开发")]),_:1}),l("ul",null,[l("li",null,[i(o,{to:"#_1-客户端渲染"},{default:n(()=>[e("1.客户端渲染")]),_:1})]),l("li",null,[i(o,{to:"#_2-node-框架"},{default:n(()=>[e("2.Node 框架")]),_:1})]),l("li",null,[i(o,{to:"#_3-服务端渲染"},{default:n(()=>[e("3.服务端渲染")]),_:1})])])]),l("li",null,[i(o,{to:"#后台开发"},{default:n(()=>[e("后台开发")]),_:1}),l("ul",null,[l("li",null,[i(o,{to:"#_1-ruoyi-推荐"},{default:n(()=>[e("1.RuoYi（推荐）")]),_:1})]),l("li",null,[i(o,{to:"#_2-pig"},{default:n(()=>[e("2.Pig")]),_:1})]),l("li",null,[i(o,{to:"#_3-jeesite"},{default:n(()=>[e("3.JeeSite")]),_:1})])])]),l("li",null,[i(o,{to:"#推荐"},{default:n(()=>[e("推荐")]),_:1}),l("ul",null,[l("li",null,[i(o,{to:"#_1-后台单体应用"},{default:n(()=>[e("1.后台单体应用")]),_:1})]),l("li",null,[i(o,{to:"#_2-微服务应用"},{default:n(()=>[e("2.微服务应用")]),_:1})])])])])])])]),l("blockquote",null,[l("p",null,[e("可以在 "),l("a",p,[e("Gitee 最有价值开源项目"),i(t)]),e(" 自行寻找更多便于开发的开源项目")])]),g,l("blockquote",null,[b,l("ol",null,[f,l("li",null,[e("不利于 "),l("a",m,[e("SEO"),i(t)]),e(" ( Search Engine Optimization )，大量使用ajax，多数浏览器不能抓取ajax数据。")]),k])]),x,l("blockquote",null,[l("p",null,[l("a",E,[e("GitHub 仓库地址"),i(t)])])]),l("ol",j,[S,l("li",null,[R,l("ul",null,[q,l("li",null,[e("跨平台能力较差（但是也有相应框架："),l("a",N,[e("weex"),i(t)]),e("）")])])])]),H,l("blockquote",null,[l("p",null,[l("a",G,[e("GitHub 仓库地址"),i(t)])])]),l("ol",w,[C,l("li",null,[A,l("ul",null,[l("li",null,[e("学习成本中等，有三大件基础后还需了解 "),l("a",v,[e("JSX"),i(t)]),e(" 和 "),l("a",V,[e("ES6"),i(t)])])])])]),Y,l("blockquote",null,[l("p",null,[l("a",y,[e("GitHub 仓库地址"),i(t)])])]),z,l("blockquote",null,[l("p",null,[l("a",B,[e("GitHub 仓库地址"),i(t)])])]),I,l("blockquote",null,[l("p",null,[l("a",J,[e("GitHub 仓库地址"),i(t)])])]),P,T,l("blockquote",null,[l("p",null,[l("a",O,[e("GitHub 仓库地址"),i(t)])])]),l("ol",null,[l("li",null,[W,l("ul",null,[U,l("li",null,[l("p",null,[l("a",K,[e("GitHub 仓库地址"),i(t)]),e("有较多的插件和可扩展的 API，提供基于插件的扩架构")])]),L,M])]),X]),D,F,Q,l("blockquote",null,[Z,l("ol",null,[$,l("li",null,[e("有利于 "),l("a",ll,[e("SEO"),i(t)]),e(" ( Search Engine Optimization )")]),el])]),il,l("blockquote",null,[l("p",null,[l("a",tl,[e("GitHub 仓库地址"),i(t)])])]),ol,l("blockquote",null,[l("p",null,[l("a",nl,[e("GitHub 仓库地址"),i(t)])])]),rl,l("blockquote",null,[l("p",null,[l("a",al,[e("GitHub 仓库地址"),i(t)])])]),ul,l("blockquote",null,[l("p",null,[l("a",sl,[e("GitHub 仓库地址"),i(t)])]),l("p",null,[l("a",hl,[e("Gitee 仓库地址"),i(t)])]),l("p",null,[l("a",_l,[e("若依官网"),i(t)])])]),cl,l("blockquote",null,[l("p",null,[l("a",dl,[e("GitHub 仓库地址"),i(t)])]),l("p",null,[l("a",pl,[e("Gitee 仓库地址"),i(t)])])]),gl,bl,l("blockquote",null,[l("p",null,[l("a",fl,[e("GitHub 仓库地址"),i(t)])]),l("p",null,[l("a",ml,[e("Gitee 仓库地址"),i(t)])]),l("p",null,[l("a",kl,[e("JeeSite 官网"),i(t)])])]),xl])}const ql=u(_,[["render",El],["__file","开源脚手架.html.vue"]]);export{ql as default};
