<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://gzwrrr.github.io/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US">
  <id>https://gzwrrr.github.io/</id>
  <title/>
  <icon>https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/Individual/logo.png</icon>
  <updated>2023-10-12T06:50:38.615Z</updated>
  <generator>vuepress-plugin-feed2</generator>
  <link rel="self" href="https://gzwrrr.github.io/atom.xml"/>
  <link rel="alternate" href="https://gzwrrr.github.io/"/>
  <category term="优化"/>
  <category term="文章推荐"/>
  <category term="Android"/>
  <category term="移动端"/>
  <category term="小程序"/>
  <category term="中间件"/>
  <category term="elasticsearch"/>
  <category term="消息队列"/>
  <category term="数据库"/>
  <category term="mysql"/>
  <category term="通信"/>
  <category term="rabbitmq"/>
  <category term="算法"/>
  <category term="运维"/>
  <category term="网络"/>
  <category term="小知识点"/>
  <category term="操作系统"/>
  <category term="c"/>
  <category term="编程"/>
  <category term="分布式"/>
  <category term="java"/>
  <category term="Java"/>
  <category term="通用"/>
  <category term="spring"/>
  <category term="JVM"/>
  <category term="虚拟机"/>
  <category term="链接"/>
  <category term="导航"/>
  <category term="注解与反射"/>
  <category term="并发"/>
  <category term="安全"/>
  <category term="图片"/>
  <category term="linux"/>
  <category term="lua"/>
  <category term="redis"/>
  <category term="缓存"/>
  <category term="K8S"/>
  <contributor>
    <name>gzw</name>
    <email>1627121193@qq.com</email>
  </contributor>
  <entry>
    <title type="text">前端工具</title>
    <id>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7.html</id>
    <link href="https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7.html"/>
    <updated>2023-10-12T06:47:33.000Z</updated>
    <summary type="html"><![CDATA[<h1> 前端工具</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> 前端工具</h1>
]]></content>
    <published>2023-10-12T06:47:33.000Z</published>
  </entry>
  <entry>
    <title type="text">后端工具</title>
    <id>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E5%90%8E%E7%AB%AF%E5%B7%A5%E5%85%B7.html</id>
    <link href="https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E5%90%8E%E7%AB%AF%E5%B7%A5%E5%85%B7.html"/>
    <updated>2023-10-12T06:47:33.000Z</updated>
    <summary type="html"><![CDATA[<h1> 后端工具</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> 后端工具</h1>
]]></content>
    <published>2023-10-12T06:47:33.000Z</published>
  </entry>
  <entry>
    <title type="text">论坛</title>
    <id>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E8%AE%BA%E5%9D%9B.html</id>
    <link href="https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E8%AE%BA%E5%9D%9B.html"/>
    <updated>2023-10-12T06:47:33.000Z</updated>
    <summary type="html"><![CDATA[<h1> 论坛</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> 论坛</h1>
]]></content>
    <published>2023-10-12T06:47:33.000Z</published>
  </entry>
  <entry>
    <title type="text">前端文章推荐</title>
    <id>https://gzwrrr.github.io/article/other/E-%E5%89%8D%E7%AB%AF/%E5%85%B6%E4%BB%96/%E5%89%8D%E7%AB%AF%E6%96%87%E7%AB%A0%E6%8E%A8%E8%8D%90.html</id>
    <link href="https://gzwrrr.github.io/article/other/E-%E5%89%8D%E7%AB%AF/%E5%85%B6%E4%BB%96/%E5%89%8D%E7%AB%AF%E6%96%87%E7%AB%A0%E6%8E%A8%E8%8D%90.html"/>
    <updated>2023-10-12T06:47:33.000Z</updated>
    <summary type="html"><![CDATA[<h1> 前端文章推荐</h1>

<h2> 版本管理</h2>
<ul>
<li><a href="https://blog.csdn.net/HuangsTing/article/details/113857145" target="_blank" rel="noopener noreferrer">window下安装并使用nvm（含卸载node、卸载nvm、全局安装npm）</a></li>
</ul>
]]></summary>
    <content type="html"><![CDATA[<h1> 前端文章推荐</h1>

<h2> 版本管理</h2>
<ul>
<li><a href="https://blog.csdn.net/HuangsTing/article/details/113857145" target="_blank" rel="noopener noreferrer">window下安装并使用nvm（含卸载node、卸载nvm、全局安装npm）</a></li>
</ul>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="优化"/>
    <category term="文章推荐"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-02-03T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">AI工具</title>
    <id>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/AI%E5%B7%A5%E5%85%B7.html</id>
    <link href="https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/AI%E5%B7%A5%E5%85%B7.html"/>
    <updated>2023-10-07T07:31:13.000Z</updated>
    <summary type="html"><![CDATA[<h1> AI工具</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> AI工具</h1>
]]></content>
    <published>2023-10-07T07:31:13.000Z</published>
  </entry>
  <entry>
    <title type="text">PPT</title>
    <id>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/PPT.html</id>
    <link href="https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/PPT.html"/>
    <updated>2023-10-07T07:31:13.000Z</updated>
    <summary type="html"><![CDATA[<h1> PPT</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> PPT</h1>
]]></content>
    <published>2023-10-07T07:31:13.000Z</published>
  </entry>
  <entry>
    <title type="text">PSD</title>
    <id>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/PSD.html</id>
    <link href="https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/PSD.html"/>
    <updated>2023-10-07T07:31:13.000Z</updated>
    <summary type="html"><![CDATA[<h1> PSD</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> PSD</h1>
]]></content>
    <published>2023-10-07T07:31:13.000Z</published>
  </entry>
  <entry>
    <title type="text">图片资源</title>
    <id>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90.html</id>
    <link href="https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90.html"/>
    <updated>2023-10-07T07:31:13.000Z</updated>
    <summary type="html"><![CDATA[<h1> 图片资源</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> 图片资源</h1>
]]></content>
    <published>2023-10-07T07:31:13.000Z</published>
  </entry>
  <entry>
    <title type="text">在线工具</title>
    <id>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7.html</id>
    <link href="https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7.html"/>
    <updated>2023-10-07T07:31:13.000Z</updated>
    <summary type="html"><![CDATA[<h1> 在线工具</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> 在线工具</h1>
]]></content>
    <published>2023-10-07T07:31:13.000Z</published>
  </entry>
  <entry>
    <title type="text">字体资源</title>
    <id>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E5%AD%97%E4%BD%93%E8%B5%84%E6%BA%90.html</id>
    <link href="https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E5%AD%97%E4%BD%93%E8%B5%84%E6%BA%90.html"/>
    <updated>2023-10-07T07:31:13.000Z</updated>
    <summary type="html"><![CDATA[<h1> 字体资源</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> 字体资源</h1>
]]></content>
    <published>2023-10-07T07:31:13.000Z</published>
  </entry>
  <entry>
    <title type="text">开发工具</title>
    <id>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7.html</id>
    <link href="https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7.html"/>
    <updated>2023-10-07T07:31:13.000Z</updated>
    <summary type="html"><![CDATA[<h1> 开发工具</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> 开发工具</h1>
]]></content>
    <published>2023-10-07T07:31:13.000Z</published>
  </entry>
  <entry>
    <title type="text">版本库</title>
    <id>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E7%89%88%E6%9C%AC%E5%BA%93.html</id>
    <link href="https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E7%89%88%E6%9C%AC%E5%BA%93.html"/>
    <updated>2023-10-07T07:31:13.000Z</updated>
    <summary type="html"><![CDATA[<h1> 版本库</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> 版本库</h1>
]]></content>
    <published>2023-10-07T07:31:13.000Z</published>
  </entry>
  <entry>
    <title type="text">视频资源</title>
    <id>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E8%A7%86%E9%A2%91%E8%B5%84%E6%BA%90.html</id>
    <link href="https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E8%A7%86%E9%A2%91%E8%B5%84%E6%BA%90.html"/>
    <updated>2023-10-07T07:31:13.000Z</updated>
    <summary type="html"><![CDATA[<h1> 视频资源</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> 视频资源</h1>
]]></content>
    <published>2023-10-07T07:31:13.000Z</published>
  </entry>
  <entry>
    <title type="text">配色方案</title>
    <id>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E9%85%8D%E8%89%B2%E6%96%B9%E6%A1%88.html</id>
    <link href="https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E9%85%8D%E8%89%B2%E6%96%B9%E6%A1%88.html"/>
    <updated>2023-10-07T07:31:13.000Z</updated>
    <summary type="html"><![CDATA[<h1> 配色方案</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> 配色方案</h1>
]]></content>
    <published>2023-10-07T07:31:13.000Z</published>
  </entry>
  <entry>
    <title type="text">音频资源</title>
    <id>https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E9%9F%B3%E9%A2%91%E8%B5%84%E6%BA%90.html</id>
    <link href="https://gzwrrr.github.io/guide/%E5%B7%A5%E5%85%B7%E7%AE%B1/%E9%9F%B3%E9%A2%91%E8%B5%84%E6%BA%90.html"/>
    <updated>2023-10-07T07:31:13.000Z</updated>
    <summary type="html"><![CDATA[<h1> 音频资源</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> 音频资源</h1>
]]></content>
    <published>2023-10-07T07:31:13.000Z</published>
  </entry>
  <entry>
    <title type="text">刷题平台</title>
    <id>https://gzwrrr.github.io/guide/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E5%B9%B3%E5%8F%B0.html</id>
    <link href="https://gzwrrr.github.io/guide/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E5%B9%B3%E5%8F%B0.html"/>
    <updated>2023-10-07T07:31:13.000Z</updated>
    <summary type="html"><![CDATA[<h1> 刷题平台</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> 刷题平台</h1>
]]></content>
    <published>2023-10-07T07:31:13.000Z</published>
  </entry>
  <entry>
    <title type="text">Android 学习路线</title>
    <id>https://gzwrrr.github.io/article/android/A-Android%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html</id>
    <link href="https://gzwrrr.github.io/article/android/A-Android%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Android 学习路线</h1>

<h2> 前言</h2>
<blockquote>
<p>引用自徐公公众号文章</p>
</blockquote>
<ol>
<li>学习编程基础：作为一名安卓开发者，首先需要掌握编程基础知识，包括算法、数据结构和面向对象编程等。建议选择一种主流编程语言，如Java或Kotlin，并熟悉其语法和基本概念。</li>
<li>学习安卓开发基础：掌握安卓开发的基本知识和技能是至关重要的。
<ol>
<li>学习如何使用Android SDK和开发工具，如Android Studio，以及掌握调试技巧和应用发布过程。</li>
<li>学习安卓的核心组件，如Activity、Fragment、Intent、布局等，并了解它们之间的交互方式。</li>
</ol>
</li>
<li>掌握用户界面设计：学习如何创建具有吸引力和易用性的用户界面是安卓开发的重要组成部分。</li>
<li>了解安卓的UI组件库，如RecyclerView、ListView、Toolbar等，并学习如何使用XML和代码来创建布局和界面元素。</li>
<li>数据存储和管理：学习如何在安卓应用中有效地存储和管理数据是必不可少的。了解SQLite数据库和Shared Preferences等常用的数据存储方式，并学习如何使用它们来实现数据持久化和数据管理。</li>
<li>网络和后端集成：掌握与后端服务器进行通信的技术对于开发许多实用的安卓应用至关重要。学习如何使用HTTP请求、处理JSON数据和与RESTful API进行交互。熟悉常用的网络库，如OkHttp和Retrofit，并了解如何处理网络请求的异步操作。</li>
<li>增加功能和性能优化：学习如何添加各种功能到安卓应用中，如摄像头、地理位置、传感器等。同时，了解如何进行应用性能优化，包括内存管理、多线程处理和电池寿命优化等。</li>
<li>学习最新的安卓开发技术和趋势：安卓开发领域不断演变和更新，因此要保持学习的态度。了解最新的安卓开发技术和框架，如Jetpack、Kotlin Coroutines、Compose等，并学会如何在项目中应用它们。</li>
<li>实践项目和持续学习：最重要的是通过实践项目来巩固所学知识，并不断扩展自己的技能。参与开源项目、开发个人应用或尝试解决实际问题，同时阅读博客、文档和参与开发者社区，以保持与其他开发者的交流和学习。</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> Android 学习路线</h1>

<h2> 前言</h2>
<blockquote>
<p>引用自徐公公众号文章</p>
</blockquote>
<ol>
<li>学习编程基础：作为一名安卓开发者，首先需要掌握编程基础知识，包括算法、数据结构和面向对象编程等。建议选择一种主流编程语言，如Java或Kotlin，并熟悉其语法和基本概念。</li>
<li>学习安卓开发基础：掌握安卓开发的基本知识和技能是至关重要的。
<ol>
<li>学习如何使用Android SDK和开发工具，如Android Studio，以及掌握调试技巧和应用发布过程。</li>
<li>学习安卓的核心组件，如Activity、Fragment、Intent、布局等，并了解它们之间的交互方式。</li>
</ol>
</li>
<li>掌握用户界面设计：学习如何创建具有吸引力和易用性的用户界面是安卓开发的重要组成部分。</li>
<li>了解安卓的UI组件库，如RecyclerView、ListView、Toolbar等，并学习如何使用XML和代码来创建布局和界面元素。</li>
<li>数据存储和管理：学习如何在安卓应用中有效地存储和管理数据是必不可少的。了解SQLite数据库和Shared Preferences等常用的数据存储方式，并学习如何使用它们来实现数据持久化和数据管理。</li>
<li>网络和后端集成：掌握与后端服务器进行通信的技术对于开发许多实用的安卓应用至关重要。学习如何使用HTTP请求、处理JSON数据和与RESTful API进行交互。熟悉常用的网络库，如OkHttp和Retrofit，并了解如何处理网络请求的异步操作。</li>
<li>增加功能和性能优化：学习如何添加各种功能到安卓应用中，如摄像头、地理位置、传感器等。同时，了解如何进行应用性能优化，包括内存管理、多线程处理和电池寿命优化等。</li>
<li>学习最新的安卓开发技术和趋势：安卓开发领域不断演变和更新，因此要保持学习的态度。了解最新的安卓开发技术和框架，如Jetpack、Kotlin Coroutines、Compose等，并学会如何在项目中应用它们。</li>
<li>实践项目和持续学习：最重要的是通过实践项目来巩固所学知识，并不断扩展自己的技能。参与开源项目、开发个人应用或尝试解决实际问题，同时阅读博客、文档和参与开发者社区，以保持与其他开发者的交流和学习。</li>
</ol>
<h2> 个人思路</h2>
<blockquote>
<p>每日积累：算法、设计模式、Kotlin、Java 底层</p>
</blockquote>
<p>思路：自顶向下（自底向上时间方面代价太大，目前的目标是尽快投入生产）</p>
<ol>
<li>语言方面：Kotlin 以使用为主、Java 以底层原理为主</li>
<li>基础方面：快速过掉，搭建持续学习扩展的框架，不断积累（靠书籍/公众号/博客/视频/开源项目/常见考点）</li>
<li>熟悉开发框架、第三方依赖，从开源项目下手，在实践中学习，总结出现的核心技术点</li>
<li>后续发展/持续学习：
<ol>
<li>纵向：着重 Framework 及更下层（内核）、性能优化</li>
<li>横向：关注大前端（Flutter、H5、小程序、ReactNative、鸿蒙等）</li>
</ol>
</li>
</ol>
<p>短期计划（一个月，<strong>重在搭建持续学习的环境</strong>，构建好整个知识体系的框架）：</p>
<blockquote>
<p>已经掌握了大部分通用的技术，重新过一遍会比较快</p>
</blockquote>
<ol>
<li>基础 + 项目管理（7）</li>
<li>数据持久层（2）</li>
<li>权限管理（2）</li>
<li>自定义控件、项目实战进阶、发布分发（4）</li>
<li>常用开发库、开发框架（7）</li>
<li>底层原理、开源项目源码（3）</li>
<li>Framework、性能优化、内核（3）</li>
</ol>
<p>学习资源：</p>
<ol>
<li>书籍：疯狂Android讲义、深入理解Android、Android源码设计模式、Android框架揭秘、深入理解Android 系列</li>
<li>公众号（相关10+，其他领域40+）</li>
<li>博客（相关8，其他领域20+）、视频博主（1）、线上课程（1）</li>
<li>开发框架、开源项目（5）</li>
<li>交流群（3） + 常见问题（PDF 总结）</li>
</ol>
<h2> 时间安排</h2>
<blockquote>
<p>重新巩固 + 搭建持续学习的环境</p>
<p>估计 1 个月过一遍，目的在于应用并搭建起持续学习的环境。后续再用若干月巩固深入</p>
</blockquote>
<ol>
<li>基础 + 项目管理（7）
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 开发环境（开发、测试、模拟生产）</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> Activity、Service、BroadcastReceiver、ContentProvider</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 布局：XML、View、Layout Manager</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 资源管理：图像、字符串、颜色、样式主题</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> Fragment</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> Intent</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-6" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-6"> UI 组件：RecyclerView、ListView、Toolbar、Compose…</label></li>
</ul>
</li>
<li>数据持久化（2）
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-7" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-7"> SQLite</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-8" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-8"> Shared Preferences</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-9" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-9"> 文件存储</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-10" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-10"> 网络数据交互</label></li>
</ul>
</li>
<li>权限管理（2）
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-11" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-11"> 权限申请</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-12" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-12"> 权限检查</label></li>
</ul>
</li>
<li>自定义控件、项目实战、发布分发（4）</li>
<li>常用开发库、开发框架、原理（7）
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-13" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-13"> OkHttp</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-14" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-14"> Retrofit</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-15" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-15"> Jetpack</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-16" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-16"> Kotlin Coroutines</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-17" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-17"> MVVM</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-18" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-18"> 依赖注入</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-19" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-19"> SDK</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-20" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-20"> 打包发布</label></li>
</ul>
</li>
<li>开源项目（3）</li>
<li>Framework、性能优化、内核（3）</li>
</ol>
<div class="hint-container note">
<p class="hint-container-title">说明（参考）</p>
<p>除了：开源项目、Framework、性能优化、内核</p>
<p>其余部分实际用时：一周</p>
<p>工作包括：视频（137集）+《第一行代码——Android（第3版）》+ 笔记</p>
</div>
<h2> Java 与 Kotlin</h2>
<ol>
<li>语法风格：Java是一种面向对象的编程语言，语法相对严格和冗长。而Kotlin是一种现代化的编程语言，旨在提供更简洁、易读和表达力强的语法。Kotlin的语法更加紧凑，减少了Java中一些冗余的代码，提供了更多的语法糖和便捷的特性。</li>
<li>空安全和类型推断：Kotlin在语言层面上支持空安全，即在类型系统中区分可为空和非空的引用类型，以减少空指针异常的风险。另外，Kotlin具有更强大的类型推断能力，可以自动推断变量和表达式的类型，减少类型声明的冗余。</li>
<li>扩展函数和属性：Kotlin引入了扩展函数和属性的概念，可以在不修改原始类的情况下，为已有的类添加新的函数和属性。这样可以使代码更加模块化和灵活，便于对现有类进行功能扩展。</li>
<li>空安全和异常处理：在Java中，空指针异常是一个常见的问题，需要开发者显式地检查和处理空引用。而Kotlin通过类型系统的空安全特性，在编译阶段就能检测到可能的空引用，并强制开发者采取相应的处理措施。此外，Kotlin还引入了更简洁的异常处理语法，使得异常处理更加简便。</li>
<li>互操作性：Kotlin是为了与Java无缝互操作而设计的。这意味着Kotlin可以与现有的Java代码进行互操作，可以直接调用Java类和方法，并且Java代码也可以调用Kotlin代码。这种互操作性使得在现有的Java项目中引入Kotlin变得相对容易。</li>
</ol>
<h2> 相关概念</h2>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>安卓开发中的常见概念，持续补充…</p>
</div>
<h3> 概览</h3>
<p>安卓开发包含了以下几个主要的部分：</p>
<ol>
<li>应用组件（Application Components）：安卓应用由多个独立的组件组成，每个组件具有特定的功能和生命周期。常见的应用组件包括：
<ul>
<li>Activity（活动）：用户界面的展示和交互的单个屏幕。</li>
<li>Service（服务）：在后台执行长时间运行的操作，而不提供用户界面。</li>
<li>BroadcastReceiver（广播接收器）：接收和响应系统或应用中的广播消息。</li>
<li>ContentProvider（内容提供器）：用于应用之间共享数据，提供数据访问接口。</li>
</ul>
</li>
<li>用户界面（User Interface）：安卓应用的用户界面由布局和控件组成。用户界面开发包括以下内容：
<ul>
<li>XML布局：使用XML定义应用界面的结构和外观。</li>
<li>视图（View）：安卓提供了各种预定义的视图（如按钮、文本框、图像视图等）用于构建用户界面。</li>
<li>布局管理器（Layout Manager）：用于在屏幕上定位和排列视图。</li>
</ul>
</li>
<li>资源管理（Resource Management）：安卓应用使用资源文件来存储非代码相关的内容，如图像、字符串、颜色等。资源管理包括以下方面：
<ul>
<li>图像资源：应用中使用的图像文件，可以是PNG、JPEG等格式。</li>
<li>字符串资源：应用中使用的文本字符串，用于支持国际化和本地化。</li>
<li>颜色和尺寸资源：定义应用中使用的颜色值和尺寸规格。</li>
<li>样式和主题资源：定义应用的样式和主题，包括字体、颜色、背景等。</li>
</ul>
</li>
<li>数据存储和管理（Data Storage and Management）：安卓应用需要存储和管理数据。常见的数据存储和管理方式包括：
<ul>
<li>SQLite数据库：用于在应用中创建、读取、更新和删除结构化数据。</li>
<li>文件存储：用于在设备上存储和读取文件。</li>
<li>SharedPreferences：用于存储简单的键值对数据。</li>
<li>网络数据交互：通过与服务器进行通信来获取和发送数据。</li>
</ul>
</li>
<li>权限管理（Permission Management）：安卓应用需要申请和管理权限以访问设备功能和用户数据。权限管理涉及以下方面：
<ul>
<li>权限申请：应用在运行时向用户请求权限。</li>
<li>权限检查：应用在使用敏感功能或访问用户数据之前检查是否获得了相应的权限。</li>
</ul>
</li>
<li>调试和测试（Debugging and Testing）：为确保应用质量和稳定性，安卓开发包括以下方面：
<ul>
<li>日志记录和调试：使用日志记录系统输出信息，以及使用调试器进行代码调试。</li>
<li>单元测试和集成测试：编写测试用例来验证应用的各个部分的功能和逻辑。</li>
</ul>
</li>
<li>发布和分发（Publishing and Distribution）：在应用开发完成后，需要发布和分发给用户。这包括以下内容：
<ul>
<li>应用签名：为应用生成数字签名，以确保应用的完整性和安全性。</li>
<li>应用商店：将应用提交到应用商店（如Google Play）以供用户下载和安装。</li>
<li>更新和版本管理：发布应用的更新版本，并进行版本管理和维护。</li>
</ul>
</li>
</ol>
<h3> 四大组件</h3>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<ol>
<li>应用组件是 Android 应用的基本构建块。每个组件都是一个入口点，系统或用户可通过该入口点进入您的应用。有些组件会依赖于其他组件。</li>
<li>每种类型都有不同的用途和生命周期（定义如何创建和销毁组件）</li>
<li>启动组件：在四种组件类型中，有三种（Activity、服务和广播接收器）均通过异步消息 Intent 进行启动。Intent 会在运行时对各个组件进行互相绑定。可以将 Intent 视为从其他组件（无论该组件是属于您的应用还是其他应用）请求操作的信使。</li>
</ol>
</div>
<p>共有四种不同的应用组件类型：</p>
<ul>
<li><code>Activity</code>：前台</li>
<li><code>Service</code>：后台</li>
<li><code>BroadcastReceiver</code>：广播接收器</li>
<li><code>ContentProvider</code>：内容提供程序</li>
</ul>
<h3> 数据存储和管理</h3>
<ol>
<li><code>Room Persistence Library</code>：Room是Android Jetpack组件之一，提供了一个更高级别的抽象层，用于在SQLite数据库上进行数据访问和管理。它简化了数据库操作的代码编写，并提供了更强大的查询功能。</li>
<li><code>Firebase Realtime Database</code>：Firebase是Google提供的一套云服务工具，其中包括实时数据库（Realtime Database）。它是一种基于NoSQL的云数据库，提供实时数据同步和实时更新的功能，使应用能够快速响应数据变化。</li>
<li><code>Firebase Firestore</code>：Firestore是Firebase提供的另一种云数据库，采用了文档模型（document-based model）。它具有实时更新、离线支持、强大的查询能力和可扩展性等特性，适用于构建实时和可扩展的应用。</li>
<li><code>Network-based Data Storage</code>：许多应用需要通过网络获取和存储数据，例如使用Web API进行数据交互。安卓应用可以使用网络库（如OkHttp和Retrofit）来处理网络请求和数据解析，以便与服务器进行数据交互。</li>
<li><code>External Storage</code>：安卓应用可以使用设备的外部存储（如SD卡）来存储和读取文件。这对于需要在应用之间共享数据或处理大量媒体文件的应用非常有用。</li>
<li><code>ContentProvider</code>：ContentProvider是安卓的一个组件，用于提供应用之间共享数据的机制。它可以将应用的数据暴露给其他应用，并提供数据的增删改查接口。</li>
<li><code>SharedPreferences</code>：除了之前提到的使用SharedPreferences存储简单的键值对数据外，还可以使用SharedPreferences来存储应用的偏好设置、用户首选项等。</li>
</ol>
<h3> Jetpack 全家桶</h3>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<ul>
<li>
<p><a href="https://developer.android.google.cn/jetpack?hl=zh-cn" target="_blank" rel="noopener noreferrer">Jetpack 官方文档</a></p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/334350927" target="_blank" rel="noopener noreferrer">Jetpack 是什么？</a></p>
</li>
</ul>
</div>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>组件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/activity?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>activity</code></a></td>
<td>访问基于 <code>activity </code>构建的可组合 API。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/appcompat?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>appcompat</code></a></td>
<td>允许在平台的旧版 API 上访问新 API（很多使用 <code>Material Design</code>）。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/appsearch?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>appsearch</code></a></td>
<td>为用户构建自定义应用内搜索功能。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/camera?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>camera</code></a></td>
<td>构建移动相机应用。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/compose?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>compose</code></a></td>
<td><code>Jetpack Compose</code>是一种声明式的UI框架，用于构建安卓应用的用户界面。它通过使用<code>Kotlin</code>语言来定义应用的界面结构和外观，取代了传统的XML布局和编程方式。<code>Compose</code>简化了UI开发过程，提供了更简洁、直观和灵活的方式来构建应用界面</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/databinding?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>databinding</code></a></td>
<td><code>Data Binding</code>是一种用于实现数据和界面绑定的库。它允许开发者在布局文件中直接绑定数据对象，使数据的变化能够自动反映在界面上，减少了手动更新界面的工作，即使用声明性格式将布局中的界面组件绑定到应用中的数据源。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/fragment?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>fragment</code></a></td>
<td>将您的应用细分为在一个 Activity 中托管的多个独立屏幕。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/hilt?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>hilt</code></a></td>
<td>扩展了 <code>Dagger Hilt </code>的功能，以实现 <code>androidx </code>库中某些类的依赖项注入。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/lifecycle?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>lifecycle</code></a></td>
<td>构建生命周期感知型组件，这些组件可以根据 <code>activity </code>或 <code>fragment</code> 的当前生命周期状态调整行为。</td>
</tr>
<tr>
<td><a href="https://material.io/develop/android" target="_blank" rel="noopener noreferrer"><code>Material Design 组件</code></a></td>
<td>适用于 <code>Android</code> 的模块化、可自定义 <code>Material Design</code> 界面组件。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/navigation?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>navigation</code></a></td>
<td>构建和组织应用内界面，处理深层链接以及在屏幕之间导航。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/paging?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>paging</code></a></td>
<td>在页面中加载数据，并在 <code>RecyclerView </code>中呈现。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/room?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>room</code></a></td>
<td>创建、存储和管理由 <code>SQLite </code>数据库支持的持久性数据。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/test?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>test</code></a></td>
<td>在 <code>Android </code>中进行测试。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/work?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>work</code></a></td>
<td>调度和执行可延期且基于约束条件的后台任务。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/ads?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>ads</code></a></td>
<td>获取广告 ID（无论是否通过 Play 服务）。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/annotation?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>annotation</code></a></td>
<td>公开元数据，帮助工具开发者和其他开发者了解您的应用代码。</td>
</tr>
<tr>
<td><code>ViewModel</code></td>
<td><code>ViewModel</code>是一种用于管理UI相关数据的架构组件。它可以存储和管理与界面相关的数据，并在配置变化（如旋转屏幕）时保持数据的一致性，以避免数据的丢失和重新加载</td>
</tr>
<tr>
<td><code>LiveData</code></td>
<td><code>LiveData</code>是一种可观察的数据持有者类，它可以感知生命周期并提供数据的更新和通知机制。<code>LiveData</code>可以与<code>ViewModel</code>一起使用，以实现数据的观察和响应</td>
</tr>
</tbody>
</table>
</div><h3> MVVM 架构</h3>
<p>在安卓开发中，MVVM的基本概念如下：</p>
<ul>
<li>Model（模型）：代表应用的数据模型和业务逻辑。它负责处理数据的获取、处理和存储。</li>
<li>View（视图）：负责展示用户界面，并与用户进行交互。它通常是Activity、Fragment或View的一部分。</li>
<li>ViewModel（视图模型）：连接Model和View的中间层。它负责将数据从Model转换为View可使用的形式，并暴露可供View绑定的可观察数据和命令。</li>
</ul>
<br>
<p>MVVM的关键概念是数据绑定（Data Binding），它通过观察ViewModel中的数据变化，自动更新与之绑定的视图。这种绑定使得数据的更新和界面的刷新更加自动化和简化，减少了手动的UI更新代码。</p>
<p>与前端的MVVM框架相比，安卓的MVVM在实现细节上有所不同。在安卓中，常用的MVVM实现方式是结合Jetpack库中的ViewModel和LiveData来管理数据和实现观察。ViewModel用于存储和管理与界面相关的数据，LiveData用于通知数据的变化并更新界面。</p>
<br>
<p>此外，安卓开发中的MVVM还可以进行一些扩展和改进，例如：</p>
<ul>
<li>使用第三方的数据绑定库，如Data Binding Library或Butter Knife，以简化数据绑定的实现。</li>
<li>结合使用RxJava或Kotlin Coroutines，使得异步任务的处理更加方便和优雅。</li>
<li>使用依赖注入（Dependency Injection）框架，如Dagger或Koin，以实现组件之间的解耦和依赖管理。</li>
</ul>
<h3> 其他概念</h3>
<ol>
<li>响应式UI开发：采用Jetpack Compose等现代化UI框架，通过声明式编程方式构建响应式的用户界面。使用观察者模式、数据绑定和状态管理等技术，实现数据驱动的界面更新和交互。</li>
<li>移动端架构：采用现代化的架构模式和框架，如MVVM（Model-View-ViewModel）、MVP（Model-View-Presenter）、Clean Architecture等，以实现可维护、可扩展和高效的应用架构。</li>
<li>数据持久化和管理：使用Room Persistence Library或Firebase等库，处理数据的持久化存储和管理。采用合适的数据库技术、数据缓存和远程数据同步等，以满足应用的数据存储和访问需求。</li>
<li>网络和后端集成：与后端服务器进行数据交互和集成，通过HTTP请求、RESTful API或GraphQL等技术实现数据的获取和发送。使用网络库（如OkHttp、Retrofit）和身份验证机制，确保网络通信的安全性和可靠性。</li>
<li>用户体验优化：关注用户体验，通过使用动画、过渡效果、触摸反馈、主题和样式等手段，提供出色的用户界面和交互体验。遵循安卓的设计准则和最佳实践，以确保应用的易用性和一致性。</li>
<li>测试和调试：编写单元测试、集成测试和UI测试，以确保应用的质量和稳定性。使用调试器、日志记录和性能分析工具等，辅助应用的调试和性能优化。</li>
<li>安全和隐私保护：保护应用和用户数据的安全性，实施适当的数据加密、用户认证、授权和权限管理。遵循隐私法规和最佳实践，保护用户的个人信息和隐私。</li>
<li>多平台开发：考虑在不同平台上进行应用开发，如安卓、iOS、Web等。使用跨平台框架（如Flutter、React Native）或共享代码库（如Kotlin Multiplatform）等，实现跨平台的应用开发和代码共享。</li>
<li>远程通知和推送：通过使用Firebase Cloud Messaging（FCM）或其他推送服务，实现应用的远程通知、消息推送和实时通信功能。</li>
<li>数据分析和应用性能监控：使用应用性能监控工具（如Firebase Performance Monitoring、Crashlytics）和数据分析工具（如Firebase Analytics、Google Analytics），收集应用使用数据、错误报告和性能指标，以优化应用性能和用户体验。</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Android 相关资源</title>
    <id>https://gzwrrr.github.io/article/android/B-Android%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90.html</id>
    <link href="https://gzwrrr.github.io/article/android/B-Android%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Android 相关资源</h1>

<h2> 官方资源</h2>
<ol>
<li>
<p><a href="https://developer.android.google.cn/about?hl=zh-cn" target="_blank" rel="noopener noreferrer">谷歌官方文档</a></p>
</li>
<li>
<p><a href="https://developer.android.google.cn/studio/archive?hl=zh-cn#android-studio-3-0?utm_source=androiddevtools&amp;utm_medium=website" target="_blank" rel="noopener noreferrer">Android Studio 下载文件归档（历史版本）</a></p>
</li>
<li>
<p><a href="https://opensource.google/projects" target="_blank" rel="noopener noreferrer">谷歌官方开源项目</a></p>
</li>
<li>
<p><a href="https://github.com/googlesamples" target="_blank" rel="noopener noreferrer">官方新特性 DEMO</a></p>
</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> Android 相关资源</h1>

<h2> 官方资源</h2>
<ol>
<li>
<p><a href="https://developer.android.google.cn/about?hl=zh-cn" target="_blank" rel="noopener noreferrer">谷歌官方文档</a></p>
</li>
<li>
<p><a href="https://developer.android.google.cn/studio/archive?hl=zh-cn#android-studio-3-0?utm_source=androiddevtools&amp;utm_medium=website" target="_blank" rel="noopener noreferrer">Android Studio 下载文件归档（历史版本）</a></p>
</li>
<li>
<p><a href="https://opensource.google/projects" target="_blank" rel="noopener noreferrer">谷歌官方开源项目</a></p>
</li>
<li>
<p><a href="https://github.com/googlesamples" target="_blank" rel="noopener noreferrer">官方新特性 DEMO</a></p>
</li>
</ol>
<h2> 版本问题</h2>
<ol>
<li><a href="https://baike.baidu.com/item/Android%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC/1578450" target="_blank" rel="noopener noreferrer">百度百科-历史版本</a></li>
<li><a href="https://blog.csdn.net/dongxin214/article/details/100726807" target="_blank" rel="noopener noreferrer">Android studio 和 gradle插件版本对应关系（最新 2023年）</a></li>
<li><a href="https://blog.csdn.net/j086924/article/details/122866386" target="_blank" rel="noopener noreferrer">Android各版本对应的SDK及JDK版本要求</a></li>
<li><a href="https://developer.android.google.cn/studio/releases/gradle-plugin?hl=zh-cn#groovy" target="_blank" rel="noopener noreferrer">官方版本相关解释</a></li>
<li>Gradle 历史版本：<a href="https://gradle.org/releases/" target="_blank" rel="noopener noreferrer">Gradle 下载文件归档（历史版本）</a></li>
<li>Kotlin 历史版本：<a href="https://kotlinlang.org/docs/releases.html#release-details" target="_blank" rel="noopener noreferrer">kotlin 版本</a></li>
<li>gradle plugin 与 gradle 的版本对应：<a href="https://blog.csdn.net/u011897062/article/details/109357551" target="_blank" rel="noopener noreferrer">gradle插件与gradle版本对应表</a></li>
</ol>
<p><strong>项目版本管理：</strong></p>
<ol>
<li>jdk 版本</li>
<li>项目构建版本</li>
<li>项目编译版本</li>
<li>安卓 SDK 版本</li>
<li>安卓 Plugin 版本</li>
</ol>
<details class="hint-container details"><summary>相关概念</summary>
<p>在安卓开发中，"compileSdkVersion"、"buildToolsVersion"、"sourceCompatibility" 和 "targetCompatibility" 都是与 Android 应用程序的构建和兼容性相关的重要配置参数。它们各自有不同的作用，不能完全统一管理，因为它们涉及到不同的方面和需求。</p>
<ol>
<li><strong>compileSdkVersion（编译 SDK 版本）</strong>：
<ul>
<li><code>compileSdkVersion</code> 是指定用于编译应用程序的 Android SDK 版本的参数。</li>
<li>这个版本应该是你的应用程序代码所使用的 Android API 的版本。它包括了 Android 平台的类和方法，以及用于构建应用程序的工具和资源。</li>
<li>应用程序编译时，会使用这个版本的 Android SDK 来检查和验证你的代码，确保它们与该版本的 API 兼容。</li>
</ul>
</li>
<li><strong>buildToolsVersion（构建工具版本）</strong>：
<ul>
<li><code>buildToolsVersion</code> 指定了用于编译和构建应用程序的构建工具的版本。</li>
<li>这个版本的构建工具包括了用于编译、打包、签名和生成 APK 文件等任务的工具。</li>
<li>不同版本的构建工具可能支持不同的功能或任务，因此你需要根据你的需求选择合适的构建工具版本。</li>
</ul>
</li>
<li><strong>sourceCompatibility（源代码兼容性）</strong>：
<ul>
<li><code>sourceCompatibility</code> 用于指定 Java 源代码的兼容性级别。</li>
<li>这个参数决定了你可以在你的代码中使用的 Java 语言特性的版本。</li>
<li>通常，它应该与你的代码中使用的语言特性相匹配，以确保编译器可以正确理解和处理你的代码。</li>
</ul>
</li>
<li><strong>targetCompatibility（目标兼容性）</strong>：
<ul>
<li><code>targetCompatibility</code> 用于指定生成的字节码文件的兼容性级别。</li>
<li>这个参数决定了你的应用程序生成的字节码应该与哪个版本的 Android 运行时兼容。</li>
<li>通常，它应该与 <code>compileSdkVersion</code> 一致，以确保你的应用程序可以在目标设备上正确运行。</li>
</ul>
</li>
</ol>
</details>
<h2> 学习路线</h2>
<ol>
<li><a href="https://www.zhihu.com/question/497900925" target="_blank" rel="noopener noreferrer">发展趋势</a></li>
<li><a href="https://www.zhihu.com/question/39706821" target="_blank" rel="noopener noreferrer">有哪些高质量的值得关注的关于Android开发的微信公众号？</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzUzODQxMzYxNQ==&amp;mid=2247485229&amp;idx=1&amp;sn=decb80fd2a5870764e954b2419f0e599&amp;chksm=fad9586dcdaed17b9ca091578f156c80cc84238c742cbfbef0a7d959528e72ff9286e1bee079#rd" target="_blank" rel="noopener noreferrer">安卓学习之路</a></li>
</ol>
<h2> 书籍</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<ol>
<li><a href="https://www.zhihu.com/tardis/zm/art/608516462?source_id=1005" target="_blank" rel="noopener noreferrer">10本Android开发入门学习书籍推荐</a></li>
<li><a href="https://www.zhihu.com/tardis/zm/art/25843565?source_id=1005" target="_blank" rel="noopener noreferrer">Android开发书籍推荐：从入门到精通系列学习路线书籍介绍</a></li>
</ol>
</div>
<p>入门：</p>
<ol>
<li><strong>第一行代码（郭霖）</strong></li>
<li>Android 开发艺术探索（任玉刚）</li>
<li><strong>疯狂Android讲义</strong></li>
<li>Android4高级编程</li>
<li>Android编程权威指南</li>
</ol>
<p>进阶：</p>
<ol>
<li>App研发录</li>
<li>Android群英传</li>
<li><strong>深入理解Android</strong></li>
<li><strong>Android开发艺术探索</strong></li>
<li>Android系统源代码情景分析</li>
</ol>
<p>底层：</p>
<ol>
<li>深入理解Android 系列书籍（邓凡平）</li>
<li><a href="https://link.zhihu.com/target=http%3A//item.jd.com/11793928.html" target="_blank" rel="noopener noreferrer">《Android源码设计模式》</a>（结合设计模式分析源码）</li>
<li><a href="https://link.zhihu.com/?target=http%3A//item.jd.com/10002153064.html" target="_blank" rel="noopener noreferrer">《Android框架揭秘》</a>（底层架构的一本好书）</li>
<li>Linux内核设计与实现</li>
<li>深入理解Linux内核</li>
</ol>
<p>积累/优化：</p>
<ol>
<li>HeadFirst设计模式</li>
<li>重构：改善既有代码的设计</li>
<li>Clean Code</li>
<li>Clean Coder</li>
</ol>
<h2> 公众号</h2>
<ol>
<li>玉刚说</li>
<li>终端研发部</li>
<li>徐公</li>
<li>鸿洋</li>
<li>郭霖</li>
<li>百度APP官方技术号</li>
<li>Android订阅、Android每日一讲、Android开发技术前线、Android技术干货铺</li>
<li>stormzhang</li>
</ol>
<h2> 博主</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://juejin.cn/post/6844904031698026504" target="_blank" rel="noopener noreferrer">Android 程序员不得不收藏的 90+ 个人博客(持续更新...)</a></p>
</div>
<h3> 博客</h3>
<p>优先：</p>
<ol>
<li><a href="https://www.zhihu.com/people/chi-meng-15-86/posts" target="_blank" rel="noopener noreferrer">徐公</a></li>
<li><a href="https://blog.csdn.net/guolin_blog?type=blog" target="_blank" rel="noopener noreferrer">郭霖</a></li>
<li><a href="https://blog.csdn.net/lmj623565791?type=blog" target="_blank" rel="noopener noreferrer">鸿洋</a></li>
<li><a href="https://kymjs.com/" target="_blank" rel="noopener noreferrer">开源实验室</a></li>
</ol>
<p>其次：</p>
<ol>
<li><a href="https://blog.csdn.net/bboyfeiyu?type=blog" target="_blank" rel="noopener noreferrer">MrSimp1e</a></li>
<li><a href="https://blog.csdn.net/ns_code?type=blog" target="_blank" rel="noopener noreferrer">兰亭风雨</a></li>
<li><a href="https://blog.csdn.net/innost?type=blog" target="_blank" rel="noopener noreferrer">阿拉神农</a></li>
<li><a href="https://blog.csdn.net/android_tutor?type=blog" target="_blank" rel="noopener noreferrer">android_tutor</a></li>
</ol>
<p>其他：</p>
<ol>
<li><a href="https://www.trinea.cn/" target="_blank" rel="noopener noreferrer">https://www.trinea.cn/</a></li>
<li><a href="https://kaedea.com/" target="_blank" rel="noopener noreferrer">https://kaedea.com/</a></li>
<li><a href="https://www.gcssloop.com/" target="_blank" rel="noopener noreferrer">https://www.gcssloop.com/</a></li>
<li><a href="http://gityuan.com/" target="_blank" rel="noopener noreferrer">http://gityuan.com/</a></li>
<li><a href="https://typeblog.net/" target="_blank" rel="noopener noreferrer">https://typeblog.net/</a></li>
<li><a href="https://mrfu.me/" target="_blank" rel="noopener noreferrer">https://mrfu.me/</a></li>
</ol>
<h3> 视频</h3>
<p><strong>B 站：</strong></p>
<ol>
<li><a href="https://space.bilibili.com/27559447?spm_id_from=333.337.0.0" target="_blank" rel="noopener noreferrer">扔物线</a></li>
<li><a href="https://space.bilibili.com/251013709?spm_id_from=333.337.0.0" target="_blank" rel="noopener noreferrer">晨钟酱Official</a></li>
</ol>
<p><strong>Youtube：</strong></p>
<ol>
<li><a href="https://www.youtube.com/@AndroidDevelopers" target="_blank" rel="noopener noreferrer">Android Developers</a></li>
</ol>
<p><strong>其他：</strong></p>
<ol>
<li><a href="http://boolan.com/gdg" target="_blank" rel="noopener noreferrer">谷歌开发者中文视频</a></li>
</ol>
<h2> 常用网站</h2>
<div class="hint-container warning">
<p class="hint-container-title">Note</p>
<p>部分网站需要科学上网</p>
</div>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<ol>
<li><a href="https://zhuanlan.zhihu.com/p/24365329" target="_blank" rel="noopener noreferrer">整理的常用的Android资源站</a></li>
<li><a href="https://juejin.cn/post/7090041676445515813" target="_blank" rel="noopener noreferrer">Android开发常用网站推荐</a></li>
</ol>
</div>
<h3> 文档</h3>
<ol>
<li><a href="https://link.zhihu.com/?target=http%3A//developer.android.google.cn/" target="_blank" rel="noopener noreferrer">Android官方开发指南中文站</a></li>
<li><a href="https://www.android-doc.com/androiddocs/" target="_blank" rel="noopener noreferrer">中文 API 文档</a></li>
<li><a href="http://rinvay.github.io/android/2015/03/26/Gradle-Plugin-User-Guide%28Translation%29/#102" target="_blank" rel="noopener noreferrer">Gradle 使用文档</a></li>
</ol>
<h3> 论坛/博客/社区/月刊</h3>
<ol>
<li><a href="https://www.oschina.net/android" target="_blank" rel="noopener noreferrer">开源中国Android专区</a></li>
<li><a href="https://gdg.community.dev/" target="_blank" rel="noopener noreferrer">ChinaGDG</a></li>
<li><a href="https://www.v2ex.com/go/android" target="_blank" rel="noopener noreferrer">V2EX Android 论坛</a></li>
<li><a href="https://androidweekly.net/" target="_blank" rel="noopener noreferrer">Android Weekly</a></li>
<li><a href="https://www.sdk.cn/new" target="_blank" rel="noopener noreferrer">SDK CN 社区</a></li>
<li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2F733gh%2Fxiongfan" target="_blank" rel="noopener noreferrer">Android-Notes 个人笔记</a></li>
</ol>
<h3> 工具/库</h3>
<ol>
<li><a href="https://www.androiddevtools.cn/" target="_blank" rel="noopener noreferrer">Android Dev Tools</a></li>
<li><a href="https://p.codekk.com/" target="_blank" rel="noopener noreferrer">Android开源项目源码解析站</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.apkbus.com/" target="_blank" rel="noopener noreferrer">APKBUS安卓巴士 – APK 下载</a></li>
<li><a href="https://www.juhe.cn/docs" target="_blank" rel="noopener noreferrer">API 接口</a></li>
<li><a href="https://apis.baidu.com/" target="_blank" rel="noopener noreferrer">百度智能云 API</a></li>
<li><a href="https://awesome-awesomeness.zeef.com/alexander.bayandin" target="_blank" rel="noopener noreferrer">Zeef 国外资源站</a></li>
<li><a href="https://www.heroku.com/home" target="_blank" rel="noopener noreferrer">Proguard文件生成</a></li>
<li><a href="https://explainshell.com/" target="_blank" rel="noopener noreferrer">Linux 命令</a></li>
<li><a href="https://www.tabnine.com/install/intellij" target="_blank" rel="noopener noreferrer">tabnine 代码补全</a></li>
<li><a href="http://androidxref.com/" target="_blank" rel="noopener noreferrer">Android 在线源码查看</a></li>
<li><a href="https://p.codekk.com/" target="_blank" rel="noopener noreferrer">codeKK – 开源项目收集</a></li>
<li><a href="https://sourceforge.net/" target="_blank" rel="noopener noreferrer">开源软件开发者进行开发管理的集中式场所</a></li>
<li><a href="https://github.com/skylot/jadx/" target="_blank" rel="noopener noreferrer">Jdax – APK反编译</a></li>
<li><a href="http://romannurik.github.io/AndroidAssetStudio/" target="_blank" rel="noopener noreferrer">生成应用图标</a></li>
</ol>
<h3> 代码片段</h3>
<ol>
<li><a href="http://www.javased.com/" target="_blank" rel="noopener noreferrer">Java 代码片段搜索</a></li>
<li><a href="https://android-arsenal.com/" target="_blank" rel="noopener noreferrer">android-arsenal – 国外搜集的Android实例站点</a></li>
<li><a href="https://dribbble.com/search/material-design-card" target="_blank" rel="noopener noreferrer">UI 设计片段</a></li>
</ol>
<h3> 教学</h3>
<ol start="4">
<li><a href="https://www.w3cschool.cn/groovy/groovy_overview.html" target="_blank" rel="noopener noreferrer">Groovy – W3C</a></li>
<li><a href="https://www.w3cschool.cn/gradle/3miy1htt.html" target="_blank" rel="noopener noreferrer">Gradle – W3C</a></li>
<li><a href="https://codelabs.developers.google.com/" target="_blank" rel="noopener noreferrer">Codelabs – 谷歌代码学习指南</a></li>
<li><a href="https://rxmarbles.com/#from" target="_blank" rel="noopener noreferrer">RxMarbles 更好的理解RxJava操作符</a></li>
<li><a href="https://www.androiddesignpatterns.com/archives/" target="_blank" rel="noopener noreferrer">Android 设计模式</a></li>
<li><a href="https://zhuanlan.zhihu.com/android-weekly" target="_blank" rel="noopener noreferrer">知乎专栏 Android Weekly 中文翻译版</a></li>
<li><a href="https://www.jikexueyuan.com/" target="_blank" rel="noopener noreferrer">极客学院</a></li>
<li><a href="https://www.tutorialspoint.com/android/index.htm" target="_blank" rel="noopener noreferrer">tutorialspoint Android 教学网站</a></li>
<li><a href="http://www.imooc.com/course/list?c=android" target="_blank" rel="noopener noreferrer">慕课网 – Android</a></li>
<li><a href="https://www.vogella.com/tutorials/android.html" target="_blank" rel="noopener noreferrer">国外Android开发者学习站</a></li>
<li><a href="https://www.kotlincn.net/docs/reference/" target="_blank" rel="noopener noreferrer">Kotlin 中文学习站</a></li>
</ol>
<h3> 组件库</h3>
<ol>
<li>
<p><a href="https://m2.material.io/design/introduction#principles" target="_blank" rel="noopener noreferrer">material-design</a></p>
</li>
<li>
<p><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="noopener noreferrer">Awesome-MaterialDesign</a></p>
</li>
<li>
<p><a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="noopener noreferrer">awesome-android-ui</a></p>
</li>
<li>
<p><a href="https://github.com/7heaven/bitmapMesh" target="_blank" rel="noopener noreferrer">拉窗帘效果</a></p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fksoichiro%2FAndroid-ObservableScrollView" target="_blank" rel="noopener noreferrer">ObservableScrollView</a>：在滚动的视图观测滚动事件的Android库 它易于与在Android 5.0 Lollipop中引入的工具条Toolbar相交互，并能够帮助实现Material Design apps的外观。</p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FJoanZapata%2Fandroid-iconify" target="_blank" rel="noopener noreferrer">iconify</a>：iconify 图片与文字同一行显示。</p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fdexafree%2FMaterialList" target="_blank" rel="noopener noreferrer">MaterialList</a>：MaterialList 。</p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Ffrogermcs%2FInstaMaterial" target="_blank" rel="noopener noreferrer">InstaMaterial</a>：InstalMaterial 项目(非常多的UI样式：ViewAnimator、RecyclerView、拍照)</p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fzirouan%2FNavigationDrawer-MaterialDesign" target="_blank" rel="noopener noreferrer">NavigationDrawer-MaterialDesign</a>：一个Material Design的抽屉模板库，分分钟搭起一个程序框架。</p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fkongnanlive%2FSearchMenuAnim" target="_blank" rel="noopener noreferrer">SearchMenuAnim</a>：一个很棒的带动画的搜索框。</p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FYalantis%2FContext-Menu.Android" target="_blank" rel="noopener noreferrer">Context-Menu.Android</a>：可以方便快速集成漂亮带有动画效果的上下文菜单。</p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fshehabic%2FDroppy" target="_blank" rel="noopener noreferrer">Droppy</a>：简洁好看的 Dropdown 菜单。</p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Flinroid%2FFilterMenu" target="_blank" rel="noopener noreferrer">FilterMenu</a>：这是一个自定义的圆形菜单，效果非常酷。</p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fdaimajia%2FAndroidSwipeLayout" target="_blank" rel="noopener noreferrer">AndroidSwipeLayout</a>：滑动Layout，支持单个View，ListView，GridView，demo-apk。</p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fnorbsoft%2Fandroid-typeface-helper" target="_blank" rel="noopener noreferrer">Android Typeface Helper</a>：可以帮你轻松实现自定义字体的库。</p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fzcweng%2FToggleButton" target="_blank" rel="noopener noreferrer">ToggleButton</a>：状态切换的 Button，类似 iOS，用 View 实现。</p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fchiemy%2FCardView" target="_blank" rel="noopener noreferrer">CardView </a>：3d卡片效果</p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FJungerr%2FGridPasswordView" target="_blank" rel="noopener noreferrer">GridPasswordView</a>：类似微信，支付宝支付时候的输入密码页面效果，带格子的密码输入框。</p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FNightonke%2FBlurLockView" target="_blank" rel="noopener noreferrer">BlurLockView</a>：毛玻璃效果的密码解锁界面, 支持简单定制。</p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcymcsg%2FUltimateRecyclerView" target="_blank" rel="noopener noreferrer">UltimateRecyclerView</a>：这是一个终极的 RecyclerView，有下拉刷新、滑动删除、拖拽、加载更多、丰富动画等功能。</p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Ftyzlmjj%2FPagerBottomTabStrip" target="_blank" rel="noopener noreferrer">PagerBottomTabStrip</a>：一个基本按谷歌Material Design规范完成的安卓底部导航栏控件。</p>
</li>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FRogero0o%2FMatchView" target="_blank" rel="noopener noreferrer">Android MatchView</a>：电影级TextView动画效果，绝对惊艳你的双眼！</p>
</li>
</ol>
<h2> 开源项目</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://mp.weixin.qq.com/s/RV8kj1ZnFd35ZmGBwdxAxw" target="_blank" rel="noopener noreferrer">干货来袭，推荐几款开源的Kotlin的Android项目</a></p>
</div>
<ol>
<li><a href="https://gitee.com/oschina/android-app/tree/v4.1.7/" target="_blank" rel="noopener noreferrer">开源中国 Android 客户端</a></li>
<li><a href="https://gitee.com/zftlive/zftlive" target="_blank" rel="noopener noreferrer">Android自定义控件</a></li>
<li><a href="https://github.com/CarGuo/GSYVideoPlayer" target="_blank" rel="noopener noreferrer">视频播放器</a></li>
<li><a href="https://github.com/sucese/android-open-source-project-analysis" target="_blank" rel="noopener noreferrer">Android open source project analysis</a></li>
<li><a href="https://github.com/JStumpp/awesome-android" target="_blank" rel="noopener noreferrer">awesome-android</a></li>
<li><a href="https://gitee.com/GitLqr/LQRWeChat" target="_blank" rel="noopener noreferrer">新版高仿微信</a></li>
</ol>
<h2> 开发框架/工具库</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<ol>
<li><a href="https://zhuanlan.zhihu.com/p/438958248" target="_blank" rel="noopener noreferrer">现在android开发都会用到那些快速开发框架或者第三库？</a></li>
<li><a href="https://www.zhihu.com/question/37160415" target="_blank" rel="noopener noreferrer">Android 开发一般都使用什么框架？</a></li>
</ol>
</div>
<ol>
<li>Android Jetpack Compose</li>
<li>Kotlin Multiplatform</li>
<li>MvRx</li>
<li>RxJava</li>
<li>依赖注入
<ol>
<li>dagger</li>
<li>hilt</li>
</ol>
</li>
<li>网络请求
<ol>
<li>OkHttp</li>
<li>Retrofit</li>
<li>Picasso</li>
<li><a href="http://stackoverflow.com/questions/24375043/how-to-implement-android-volley-with-okhttp-2-0/24951835#24951835" target="_blank" rel="noopener noreferrer">Volley</a></li>
</ol>
</li>
<li>图片加载
<ol>
<li>Glide</li>
</ol>
</li>
<li>其他：
<ol>
<li>Picasso</li>
<li>GSON、Jackson</li>
<li>ButterKnife</li>
<li>Retrolambda 是一个在Android和预JDK8平台上的使用Lambda表达式语法的Java类库。 它有助于保持你代码的紧凑性和可读性，特别当你使用如RxJava函数风格编程时。 使用它时先安装JDK8，在Android Studio工程结构对话框中把它设置成为SDK路径，同时设置<code>JAVA8_HOME</code>和<code>JAVA7_HOME</code>环境变量</li>
</ol>
</li>
</ol>
<h2> 常见问题</h2>
<ol>
<li>汇总1：<a href="https://zhuanlan.zhihu.com/p/143024974" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/143024974</a></li>
<li>汇总2：<a href="https://www.wanandroid.com/article/list/0?cid=73" target="_blank" rel="noopener noreferrer">https://www.wanandroid.com/article/list/0?cid=73</a></li>
<li>总结1：<a href="https://github.com/LRH1993/android_interview" target="_blank" rel="noopener noreferrer">https://github.com/LRH1993/android_interview</a></li>
<li>总结2：<a href="https://github.com/francistao/LearningNotes" target="_blank" rel="noopener noreferrer">https://github.com/francistao/LearningNotes</a></li>
<li>总结3：<a href="https://juejin.cn/post/6844903669998026766" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6844903669998026766</a></li>
<li>优化1：<a href="https://mp.weixin.qq.com/s/UQQdOcPOT8kS82Wh383nPA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/UQQdOcPOT8kS82Wh383nPA</a></li>
<li>优化2：<a href="https://juejin.cn/post/6844903565576634375" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6844903565576634375</a></li>
<li>总结4：<a href="https://juejin.cn/post/6844903432772386830" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6844903432772386830</a></li>
</ol>
<h2> 其他</h2>
<ol start="3">
<li><a href="https://www.jianshu.com/p/e3c9b2999eef" target="_blank" rel="noopener noreferrer">7个最佳的Android模拟器</a></li>
<li><a href="https://blog.csdn.net/singwhatiwanna" target="_blank" rel="noopener noreferrer">Android 开发艺术探索 – singwhatiwanna</a></li>
<li>HTTP Proxy：<a href="http://mirrors.neusoft.edu.cn:80" target="_blank" rel="noopener noreferrer">mirrors.neusoft.edu.cn:80</a>（建议能科学上网就尽量别用代理，代理虽然能快一点但是会有其他问题）</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Android</title>
    <id>https://gzwrrr.github.io/article/android/</id>
    <link href="https://gzwrrr.github.io/article/android/"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Android</h1>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>Android 学习笔记，持续增加...</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<h1> Android</h1>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>Android 学习笔记，持续增加...</p>
</div>
]]></content>
    <published>2023-10-05T12:34:55.000Z</published>
  </entry>
  <entry>
    <title type="text">导航</title>
    <id>https://gzwrrr.github.io/guide/%E6%90%9C%E7%B4%A2%E5%AF%BC%E8%88%AA/%E5%AF%BC%E8%88%AA.html</id>
    <link href="https://gzwrrr.github.io/guide/%E6%90%9C%E7%B4%A2%E5%AF%BC%E8%88%AA/%E5%AF%BC%E8%88%AA.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 导航</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> 导航</h1>
]]></content>
    <published>2023-10-05T12:34:55.000Z</published>
  </entry>
  <entry>
    <title type="text">搜索</title>
    <id>https://gzwrrr.github.io/guide/%E6%90%9C%E7%B4%A2%E5%AF%BC%E8%88%AA/%E6%90%9C%E7%B4%A2.html</id>
    <link href="https://gzwrrr.github.io/guide/%E6%90%9C%E7%B4%A2%E5%AF%BC%E8%88%AA/%E6%90%9C%E7%B4%A2.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 搜索</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> 搜索</h1>
]]></content>
    <published>2023-10-05T12:34:55.000Z</published>
  </entry>
  <entry>
    <title type="text">Android 架构</title>
    <id>https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/A-Android%E6%9E%B6%E6%9E%84.html</id>
    <link href="https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/A-Android%E6%9E%B6%E6%9E%84.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Android 架构</h1>

<h2> 前言</h2>
<p>Android系统架构分为五层：</p>
<ol>
<li>从上到下依次是应用层（System Apps）</li>
<li>应用框架层（Java API Framework）</li>
<li>系统运行库层（Native）</li>
<li>硬件抽象层(HAL)和Linux内核层。</li>
<li>AF就是其中的System <strong>Apps</strong>和Java API <strong>Framework</strong>，这两层都是使用Java语言开发的。</li>
</ol>
<h2> 架构设计原则</h2>]]></summary>
    <content type="html"><![CDATA[<h1> Android 架构</h1>

<h2> 前言</h2>
<p>Android系统架构分为五层：</p>
<ol>
<li>从上到下依次是应用层（System Apps）</li>
<li>应用框架层（Java API Framework）</li>
<li>系统运行库层（Native）</li>
<li>硬件抽象层(HAL)和Linux内核层。</li>
<li>AF就是其中的System <strong>Apps</strong>和Java API <strong>Framework</strong>，这两层都是使用Java语言开发的。</li>
</ol>
<h2> 架构设计原则</h2>
<p>三大原则：</p>
<ol>
<li>关注点分离</li>
<li>（持久）数据模型驱动界面</li>
<li>单一数据源（SSOT）与单向数据流（UDF）</li>
</ol>
<p>三层架构：</p>
<ol>
<li>UI，界面层由以下两部分组成：
<ul>
<li>在屏幕上呈现数据的界面元素。您可以使用 View 或 <a href="https://developer.android.google.cn/jetpack/compose?hl=zh-cn" target="_blank" rel="noopener noreferrer">Jetpack Compose</a> 函数构建这些元素。</li>
<li>用于存储数据、向界面提供数据以及处理逻辑的状态容器（如 <a href="https://developer.android.google.cn/topic/libraries/architecture/viewmodel?hl=zh-cn" target="_blank" rel="noopener noreferrer">ViewModel</a> 类）。</li>
</ul>
</li>
<li>领域层（网域）</li>
<li>数据层：
<ul>
<li>应用的数据层包含<em>业务逻辑</em>。业务逻辑决定应用的价值，它包含决定应用如何创建、存储和更改数据的规则。</li>
<li>数据层由多个仓库组成，其中每个仓库都可以包含零到多个数据源。您应该为应用中处理的每种不同类型的数据分别创建一个存储库类。例如，您可以为与电影相关的数据创建一个 <code>MoviesRepository</code> 类，或者为与付款相关的数据创建一个 <code>PaymentsRepository</code> 类。</li>
</ul>
</li>
</ol>
<p>此<em>现代应用架构</em>鼓励采用以下方法及其他一些方法：</p>
<ul>
<li>反应式分层架构。</li>
<li>应用的所有层中的单向数据流 (UDF)。</li>
<li>包含状态容器的界面层，用于管理界面的复杂性。</li>
<li>协程和数据流。</li>
<li>依赖项注入最佳实践。</li>
</ul>
<p>存储库类负责以下任务：</p>
<ul>
<li>向应用的其余部分公开数据。</li>
<li>集中处理数据变化。</li>
<li>解决多个数据源之间的冲突。</li>
<li>对应用其余部分的数据源进行抽象化处理。</li>
<li>包含业务逻辑。</li>
</ul>
<p>每个数据源类应仅负责处理一个数据源，数据源可以是文件、网络来源或本地数据库。数据源类是应用与数据操作系统之间的桥梁。</p>
<p>此层中的类通常称为“用例”或“交互方”。每个用例都应仅负责单个功能。例如，如果多个 ViewModel 依赖时区在屏幕上显示适当的消息，则您的应用可能具有 <code>GetTimeZoneUseCase</code> 类。</p>
<h3> 系统架构</h3>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//android/20231002/android系统结构.png" alt="image-20230922143831716" tabindex="0" loading="lazy"><figcaption>image-20230922143831716</figcaption></figure>
<p>分为四层：</p>
<ol>
<li>应用层：所有安装在手机上的应用程序都是属于这一层的，比如系统自带的联系人、短信等程序，或者是你从Google Play上下载的小游戏，当然还包括你自己开发的程序。</li>
<li>应用框架层：这一层主要提供了构建应用程序时可能用到的各种API，Android自带的一些核心应用就是使用这些API完成的，开发者可以使用这些API来构建自己的应用程序。</li>
<li>系统运行库层
<ol>
<li>这一层通过一些C/C++库为Android系统提供了主要的特性支持。如SQLite库提供了数据库的支持，OpenGL|ES库提供了3D绘图的支持，Webkit库提供了浏览器内核的支持等。</li>
<li>在这一层还有Android运行时库，它主要提供了一些核心库，允许开发者使用Java语言来编写Android应用。</li>
<li>另外，Android运行时库中还包含了Dalvik虚拟机（5.0系统之后改为ART运行环境），它使得每一个Android应用都能运行在独立的进程中，并且拥有一个自己的虚拟机实例。相较于Java虚拟机，Dalvik和ART都是专门为移动设备定制的，它针对手机内存、CPU性能有限等情况做了优化处理。</li>
</ol>
</li>
<li>Linux内核层：Android系统是基于Linux内核的，这一层为Android设备的各种硬件提供了底层的驱动，如：
<ol>
<li>显示驱动</li>
<li>音频驱动</li>
<li>照相机驱动</li>
<li>蓝牙驱动</li>
<li>Wi-Fi驱动</li>
<li>电源管理</li>
</ol>
</li>
</ol>
<h3> 设计模式</h3>
<p>应用中的类要依赖其他类才能正常工作。可以使用以下任一设计模式来收集特定类的依赖项：</p>
<ul>
<li><a href="https://developer.android.google.cn/training/dependency-injection?hl=zh-cn" target="_blank" rel="noopener noreferrer">依赖注入 (DI)</a>：依赖注入使类能够定义其依赖项而不构造它们。在运行时，另一个类负责提供这些依赖项。</li>
<li><a href="https://en.wikipedia.org/wiki/Service_locator_pattern" target="_blank" rel="noopener noreferrer">服务定位器</a>：服务定位器模式提供了一个注册表，类可以从中获取其依赖项而不构造它们。</li>
</ul>
<p>Android 中有两种主要的依赖项注入方式：</p>
<ul>
<li><strong>构造函数注入</strong>：这就是上面描述的方式。您将某个类的依赖项传入其构造函数。</li>
<li><strong>字段注入（或 setter 注入）</strong>：某些 Android 框架类（如 activity 和 fragment）由系统实例化，因此无法进行构造函数注入。使用字段注入时，依赖项将在创建类后实例化。</li>
</ul>
<div class="hint-container note">
<p class="hint-container-title">说明</p>
<p><a href="https://dagger.dev/" target="_blank" rel="noopener noreferrer">Dagger</a> 是适用于 Java、Kotlin 和 Android 的热门依赖项注入库，由 Google 进行维护。Dagger 为您创建和管理依赖关系图，从而便于您在应用中使用 DI。它提供了完全静态和编译时依赖项，解决了基于反射的解决方案（如 <a href="https://en.wikipedia.org/wiki/Google_Guice" target="_blank" rel="noopener noreferrer">Guice</a>）的诸多开发和性能问题。</p>
<p><a href="https://developer.android.google.cn/training/dependency-injection/hilt-android?hl=zh-cn" target="_blank" rel="noopener noreferrer">Hilt</a> 是推荐用于在 Android 中实现依赖项注入的 Jetpack 库。Hilt 通过为项目中的每个 Android 类提供容器并自动为您管理其生命周期，定义了一种在应用中执行 DI 的标准方法。</p>
<p>Hilt 在热门 DI 库 <a href="https://developer.android.google.cn/training/dependency-injection/dagger-basics?hl=zh-cn" target="_blank" rel="noopener noreferrer">Dagger</a> 的基础上构建而成，因而能够受益于 Dagger 提供的编译时正确性、运行时性能、可伸缩性和 Android Studio 支持。（[参考](<a href="https://developer.android.google.cn/training/dependency-injection/hilt-android?hl=zh-cn" target="_blank" rel="noopener noreferrer">使用 Hilt 实现依赖项注入</a>)）</p>
<p>**官方建议在 Android 应用中采用依赖项注入模式并使用 <a href="https://developer.android.google.cn/training/dependency-injection/hilt-android?hl=zh-cn" target="_blank" rel="noopener noreferrer">Hilt 库</a>。**Hilt 通过遍历依赖项树自动构造对象，为依赖项提供编译时保证，并为 Android 框架类创建依赖项容器。</p>
</div>
<h3> 最佳实践</h3>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p><a href="https://mp.weixin.qq.com/s/p811AN6BnYkYpHVuS0Adaw" target="_blank" rel="noopener noreferrer">Android 开发最佳实践，让你少走弯路</a></p>
</div>
<ol>
<li>不要将数据存储在应用组件中</li>
<li>减少对 Android 类的依赖</li>
<li>尽量少公开每个模块中的代码</li>
<li>专注于应用的独特核心，以使其从其他应用中脱颖而出</li>
<li>考虑如何使应用的每个部分可独立测试</li>
<li>保留尽可能多的相关数据和最新数据</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Android 工程结构</title>
    <id>https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/B-Android%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84.html</id>
    <link href="https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/B-Android%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Android 工程结构</h1>

<h2> 项目层次</h2>
<p>两个层次（一个项目中有多个模块）：项目、模块；项目结构如下：</p>
<p><strong>app：</strong></p>
<ol>
<li>manifests：AndroidManifest.xml</li>
<li>java：源码 + 单元测试</li>
<li>res：当前模块的资源文件
<ol>
<li>drawable：绘制的图像、可以适配</li>
<li>layout：项目布局</li>
<li>mipmap：存放 APP 图标（矢量图标）</li>
<li>values：颜色值、主题</li>
</ol>
</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> Android 工程结构</h1>

<h2> 项目层次</h2>
<p>两个层次（一个项目中有多个模块）：项目、模块；项目结构如下：</p>
<p><strong>app：</strong></p>
<ol>
<li>manifests：AndroidManifest.xml</li>
<li>java：源码 + 单元测试</li>
<li>res：当前模块的资源文件
<ol>
<li>drawable：绘制的图像、可以适配</li>
<li>layout：项目布局</li>
<li>mipmap：存放 APP 图标（矢量图标）</li>
<li>values：颜色值、主题</li>
</ol>
</li>
</ol>
<p><strong>gradle script：</strong></p>
<ol>
<li><code>build.gradle</code>：分为项目和模块，用于描述 APP 工程的编译规则</li>
<li><code>proguard-rules.pro</code>：混淆规则</li>
<li><code>gradle.properties</code>：环境变量</li>
<li><code>settings.gradle</code>：配置需要编译的模块，初始内容为 <code>include ':app'</code>，表示只编译 APP 模块</li>
<li><code>local.properties</code>：项目的本地配置文件，在项目编译时自动生成，描述了本地开发环境的配置信息</li>
</ol>
<h2> 编译打包</h2>
<p>注意点：编译工具版本需要和构建工具版本匹配</p>
<p>应用元数据（defaultConfig）</p>
<ol>
<li><code>applicationId</code>：APP 包名</li>
<li><code>minSdkVersion</code>：最小版本号</li>
<li><code>targetSdkVersion</code>：期望运行版本号</li>
<li><code>versionCode</code>：APP 应用的版本号</li>
<li><code>versionName</code>：APP 应用的版本名称</li>
</ol>
<h2> 模块化</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<ol>
<li>
<p><a href="https://github.com/LiushuiXiaoxia/AndroidModular/blob/master/README2.md#%E5%85%B3%E4%BA%8Eandroid%E6%A8%A1%E5%9D%97%E5%8C%96%E6%88%91%E6%9C%89%E4%B8%80%E4%BA%9B%E8%AF%9D%E4%B8%8D%E7%9F%A5%E5%BD%93%E8%AE%B2%E4%B8%8D%E5%BD%93%E8%AE%B2" target="_blank" rel="noopener noreferrer">关于Android模块化我有一些话不知当讲不当讲</a></p>
</li>
<li>
<p><a href="https://www.51cto.com/article/523490.html" target="_blank" rel="noopener noreferrer">天猫模块化</a></p>
</li>
</ol>
</div>
<ol>
<li>
<p>MVP模式、MVVM模式</p>
</li>
<li>
<p>模块化、插件化、独立发布</p>
</li>
<li>
<p>相关库：<a href="https://github.com/alibaba/BeeHive" target="_blank" rel="noopener noreferrer">Beehive</a>：Beehive是一个运行时框架，主要解决依赖耦合和工程耦合</p>
</li>
</ol>
<details class="hint-container details"><summary>Beehive</summary>
<p>Beehive的原理是，每一个对外提供服务的模块，需要注册一个抽象接口到Beehive提供的Interfaces(接口池)。注意，在这个池子里只有抽象接口。</p>
<p>开发阶段，调用方依赖接口池中响应的接口，并以接口为参数，通过Beehive提供的工厂方法获取一个服务实例，这个实例可以正常进行服务。</p>
<p>运行时阶段，Beehive工厂方法根据服务的注册配置，构造服务实例。若：当前的运行环境没有依赖提供服务的模块，则返回空;若：当前运行环境依赖关系完整，则开始构造服务，并返回。</p>
</details>
<h3> 拆分</h3>
<p><strong>整个模式升级基本上经历了这样几个阶段：</strong></p>
<ul>
<li>代码独立，先从形式上解耦</li>
<li>独立代码工程化，为独立运行打下基础</li>
<li>梳理依赖关系，独立工程可编译</li>
<li>放弃源码依赖，提速集成编译</li>
</ul>
<br>
<p><strong>把耦合分成三类：</strong></p>
<ol>
<li>界面耦合，就是用户操作流程里，从首页-到搜索-到详情-再进店，这些界面的跳转是硬编码的</li>
<li>依赖耦合，顾名思义，两个模块之间的有依赖，就是耦合</li>
<li>工程耦合，每个模块有自己的生命周期和运行时，每个模块在生产环境里又需要依赖主工程的运行时</li>
</ol>
<br>
<p><strong>有问题的依赖基本有这样几种：</strong></p>
<ol>
<li>模块循环依赖</li>
<li>层间反向依赖</li>
<li>非强功能依赖</li>
</ol>
<br>
<p><strong>统跳协议 &amp; Rewrite引擎：</strong></p>
<p>统调协议是一个基于URL的跳转方案，配合Rewrite引擎实现全App调用解耦（<a href="http://pingguohe.net/2015/11/24/Navigator-and-Rewrite.html" target="_blank" rel="noopener noreferrer">相关文章 – 苹果核</a>）</p>
<h3> Library Module 开发问题</h3>
<div class="hint-container note">
<p class="hint-container-title">说明</p>
<p>当把个模块分开以后，每个人就可以单独分组对应的模块就行了，不过会有资源冲突问题，建议是对各个模块的资源名字添加前缀，比如user模块中的登录界面布局为<code>activity_login.xml</code>，那么可以写成这样<code>us_activity_login.xml</code>。这样就可以避免资源冲突问题。同时Gradle也提供的一个字段<code>resourcePrefix</code>，确保各个资源名字正确，具体用法可以参考官方文档。</p>
</div>
<p>在把代码抽取到各个单独的Library Module中，会遇到各种问题，最常见的就是R文件问题，Android开发中，各个资源文件都是放在res目录中，在编译过程中，会生成R.java文件。R文件中包含有各个资源文件对应的id，这个id是静态常量，但是在Library Module中，这个id不是静态常量，那么在开发时候就要避开这样的问题。解决方案有下面几种：</p>
<ol>
<li>
<p>重新一个Gradle插件，生成一个R2.java文件，这个文件中各个id都是静态常量，这样就可以正常使用了。</p>
</li>
<li>
<p>使用Android系统提供的最原始的方式，直接用<code>findViewById</code>以及<code>setOnClickListener</code>方式。</p>
</li>
<li>
<p>设置项目支持Databinding，然后使用Binding中的对象，但是会增加不少方法数，同时Databinding也会有编译问题和学习成本，但是这些也是小问题，个人觉的问题不大。</p>
</li>
</ol>
<p>⚠️上面是主流的解决方法，推荐的使用优先级为 3 &gt; 2 &gt; 1。</p>
<h3> 依赖管理</h3>
<p>随着对代码的分割，主项目app的依赖变多了，如果修改了lib中的代码，那么编译时间是很恐怖的，如果原先在同一个模块的时候，编译时间大概需要2-3min，那么分开以后大概需要5-6min，这个是绝对无法忍受的。</p>
<p>可以这样解决：把各个子module分别使用单独的一个git仓库，这样每个人也只需要关注自己需要的git仓库即可，主仓库使用git submodule的方式，分别依赖各个子模块。</p>
<h3> 数据通信</h3>
<p>当一个大项目拆成若干小项目时候，数据通信大概有如下几种方式：</p>

<h3> 映射匹配</h3>
<p><strong>解决方案：</strong></p>
<ol>
<li>Map register：全局定义一个Map，各个模块在初始化的时候，分别在初始化的时候注册映射关系。</li>
<li>APT：使用注解的方式配置映射信息，然后生成一个类似Database一样的文件，然后Database文件中包含一个Map字段，Map中记录各个映射信息。</li>
<li>Gradle Transform：这是Android Gradle编译提供的一个接口，可以供开发自定义一些功能，而我们就可以根据这个功能生成映射匹配，这种方式和APT类似，APT是运行在代码编译时期，而且Transform是直接扫描class，然后再生成新的class，class中包含Map映射信息。修改class文件，使用的是javassist一个第三方库。</li>
</ol>
<p><strong>优点:</strong></p>
<ul>
<li>Map：简单明了，很容易入手，不会对编译时间产生任何影响，不会随着Gradle版本的升级而受影响，代码混淆时候不会有影响，无需配置混淆文件。</li>
<li>APT：使用简单，使用注解配置，代码优雅，原理是用代码生成的方式生成新的文件。</li>
<li>Transform：使用简单，使用注解配置，代码优雅，原理是用代码生成的方式生成新的文件，不过生成的文件的时期和APT不同，会编译时间产生少许影响。</li>
</ul>
<p><strong>缺点:</strong></p>
<ul>
<li>Map：在需要新添加映射的时候，需要手动添加，不然不会生效，代码不优雅。</li>
<li>APT：在编译时期生成文件，会编译时间产生少许影响，同时在不同的Gradle的版本中可能会产生错误或者兼容问题。需要配置混淆设置，不然会丢失文件。技术实现复杂，较难维护。</li>
<li>Transform：在编译时期生成文件，会编译时间产生少许影响，同时在不同的Gradle的版本中可能会产生错误或者兼容问题。需要配置混淆设置，不然会丢失文件。技术实现复杂，较难维护。</li>
</ul>
<div class="hint-container note">
<p class="hint-container-title">对比</p>
<p>从技术复杂性以及维护性来看，Map &gt; APT = Transform</p>
<p>从使用复杂性以及代码优雅性来看，Transform &gt; APT &gt; Map</p>
</div>
<h3> 容器设计</h3>
<p>可以做一个简单的类似主app模块一样的模块。比如我是负责某个模块的开发者，那么我只要调试我这个模块就行了，如果需要其他的模块，可以简单的做一个mock，不是把其他的模块直接依赖过来，这样可以起到调试作用。</p>
<p>另外，可能有时候还是需要单独的运行环境，Android中的编译方式有2中，一种是debug，一种是release。当打包成aar的时候，使用的是release方式，可以把需要调试的代码全部放到debug中，这样打包的时候就不会把调试的文件发布到aar中。不过这种实现方式，需要对Android项目的目录有较高的认识，才可以熟练使用。</p>
<h2> 相关文章</h2>
<ol>
<li>
<p><a href="http://mobile.51cto.com/app-show-523490.htm" target="_blank" rel="noopener noreferrer">天猫手机解耦之路</a></p>
</li>
<li>
<p><a href="https://github.com/alibaba/BeeHive" target="_blank" rel="noopener noreferrer">iOS 模块化BeeHive</a></p>
</li>
<li>
<p><a href="http://limboy.me/tech/2016/03/10/mgj-components.html" target="_blank" rel="noopener noreferrer">蘑菇街 App 的组件化之路</a></p>
</li>
<li>
<p><a href="http://limboy.me/tech/2016/03/14/mgj-components-continued.html" target="_blank" rel="noopener noreferrer">蘑菇街 App 的组件化之路·续</a></p>
</li>
<li>
<p><a href="https://casatwy.com/iOS-Modulization.html" target="_blank" rel="noopener noreferrer">iOS应用架构谈 组件化方案</a></p>
</li>
<li>
<p><a href="http://jboss-javassist.github.io/javassist/" target="_blank" rel="noopener noreferrer">javassist资料</a></p>
</li>
<li>
<p><a href="http://www.jianshu.com/p/34f23b694412" target="_blank" rel="noopener noreferrer">iOS组件化方案调研</a></p>
</li>
<li>
<p><a href="http://www.cnblogs.com/baronzhang/p/6442047.html" target="_blank" rel="noopener noreferrer">安居客Android项目架构演进</a></p>
</li>
<li>
<p><a href="https://github.com/LiushuiXiaoxia/AndroidModular/" target="_blank" rel="noopener noreferrer">关于Android模块化我有一些话不知当讲不当讲</a></p>
</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Android 应用资源</title>
    <id>https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/B-Android%E5%BA%94%E7%94%A8%E8%B5%84%E6%BA%90.html</id>
    <link href="https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/B-Android%E5%BA%94%E7%94%A8%E8%B5%84%E6%BA%90.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Android 应用资源</h1>

<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p><a href="https://developer.android.google.cn/guide/topics/resources/providing-resources?hl=zh-cn" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<p>切勿将资源文件直接保存在 <code>res/</code> 目录内，否则会导致编译器错误。</p>
<p>注意要做适配</p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> Android 应用资源</h1>

<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p><a href="https://developer.android.google.cn/guide/topics/resources/providing-resources?hl=zh-cn" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<p>切勿将资源文件直接保存在 <code>res/</code> 目录内，否则会导致编译器错误。</p>
<p>注意要做适配</p>
</div>
<p>资源是指代码使用的：</p>
<ol>
<li>附加文件</li>
<li>静态内容：位图、布局定义、界面字符串、动画说明等</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">目录</th>
<th style="text-align:left">资源类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>animator/</code></td>
<td style="text-align:left">用于定义<a href="https://developer.android.google.cn/guide/topics/graphics/prop-animation?hl=zh-cn" target="_blank" rel="noopener noreferrer">属性动画</a>的 XML 文件。</td>
</tr>
<tr>
<td style="text-align:left"><code>anim/</code></td>
<td style="text-align:left">用于定义<a href="https://developer.android.google.cn/guide/topics/graphics/view-animation?hl=zh-cn#tween-animation" target="_blank" rel="noopener noreferrer">补间动画</a>的 XML 文件。属性动画也可保存在此目录中，但为了区分这两种类型，属性动画首选 <code>animator/</code> 目录。</td>
</tr>
<tr>
<td style="text-align:left"><code>color/</code></td>
<td style="text-align:left">定义颜色状态列表的 XML 文件。如需了解详情，请参阅<a href="https://developer.android.google.cn/guide/topics/resources/color-list-resource?hl=zh-cn" target="_blank" rel="noopener noreferrer">颜色状态列表资源</a>。</td>
</tr>
<tr>
<td style="text-align:left"><code>drawable/</code></td>
<td style="text-align:left">位图文件（PNG、<code>.9.png</code>、JPG 或 GIF）或编译为以下可绘制资源子类型的 XML 文件：位图文件九宫图（可调整大小的位图）状态列表形状动画可绘制对象其他可绘制对象如需了解详情，请参阅<a href="https://developer.android.google.cn/guide/topics/resources/drawable-resource?hl=zh-cn" target="_blank" rel="noopener noreferrer">可绘制资源</a>。</td>
</tr>
<tr>
<td style="text-align:left"><code>mipmap/</code></td>
<td style="text-align:left">适用于不同启动器图标密度的可绘制对象文件。如需详细了解如何使用 <code>mipmap/</code> 文件夹管理启动器图标，请参阅<a href="https://developer.android.google.cn/training/multiscreen/screendensities?hl=zh-cn#mipmap" target="_blank" rel="noopener noreferrer">将应用图标放在 mipmap 目录中</a>。</td>
</tr>
<tr>
<td style="text-align:left"><code>layout/</code></td>
<td style="text-align:left">用于定义界面布局的 XML 文件。如需了解详情，请参阅<a href="https://developer.android.google.cn/guide/topics/resources/layout-resource?hl=zh-cn" target="_blank" rel="noopener noreferrer">布局资源</a>。</td>
</tr>
<tr>
<td style="text-align:left"><code>menu/</code></td>
<td style="text-align:left">用于定义应用菜单（例如选项菜单、上下文菜单或子菜单）的 XML 文件。如需了解详情，请参阅<a href="https://developer.android.google.cn/guide/topics/resources/menu-resource?hl=zh-cn" target="_blank" rel="noopener noreferrer">菜单资源</a>。</td>
</tr>
<tr>
<td style="text-align:left"><code>raw/</code></td>
<td style="text-align:left">需以原始形式保存的任意文件。如要使用原始 <code>InputStream</code> 打开这些资源，请使用资源 ID（即 <code>R.raw.*filename*</code>）调用 <code>Resources.openRawResource()</code>。但是，如需访问原始文件名和文件层次结构，请考虑将资源保存在 <code>assets/</code> 目录（而非 <code>res/raw/</code>）下。<code>assets/</code> 中的文件没有资源 ID，因此您只能使用 <code>AssetManager</code> 读取这些文件。</td>
</tr>
<tr>
<td style="text-align:left"><code>values/</code></td>
<td style="text-align:left">包含字符串、整数和颜色等简单值的 XML 文件。其他 <code>res/</code> 子目录中的 XML 资源文件会根据 XML 文件名定义单个资源，而 <code>values/</code> 目录中的文件可描述多个资源。对于此目录中的文件，<code>&lt;resources&gt;</code> 元素的每个子元素均会定义一个资源。例如，<code>&lt;string&gt;</code> 元素会创建 <code>R.string</code> 资源，<code>&lt;color&gt;</code> 元素会创建 <code>R.color</code> 资源。由于每个资源均使用自己的 XML 元素进行定义，因此您可以随意命名文件，并在某个文件中放入不同的资源类型。但是，您可能需要将独特的资源类型放在不同的文件中，使其一目了然。例如，对于可在此目录中创建的资源，下面给出了相应的文件名约定：<code>arrays.xml</code> 用于资源数组（<a href="https://developer.android.google.cn/guide/topics/resources/more-resources?hl=zh-cn#TypedArray" target="_blank" rel="noopener noreferrer">类型化数组</a>）<code>colors.xml</code> 用于<a href="https://developer.android.google.cn/guide/topics/resources/more-resources?hl=zh-cn#Color" target="_blank" rel="noopener noreferrer">颜色值</a><code>dimens.xml</code> 用于<a href="https://developer.android.google.cn/guide/topics/resources/more-resources?hl=zh-cn#Dimension" target="_blank" rel="noopener noreferrer">维度值</a><code>strings.xml</code> 用于<a href="https://developer.android.google.cn/guide/topics/resources/string-resource?hl=zh-cn" target="_blank" rel="noopener noreferrer">字符串值</a><code>styles.xml</code> 用于<a href="https://developer.android.google.cn/guide/topics/resources/style-resource?hl=zh-cn" target="_blank" rel="noopener noreferrer">样式</a>如需了解详情，请参阅<a href="https://developer.android.google.cn/guide/topics/resources/string-resource?hl=zh-cn" target="_blank" rel="noopener noreferrer">字符串资源</a>、<a href="https://developer.android.google.cn/guide/topics/resources/style-resource?hl=zh-cn" target="_blank" rel="noopener noreferrer">样式资源</a>和<a href="https://developer.android.google.cn/guide/topics/resources/more-resources?hl=zh-cn" target="_blank" rel="noopener noreferrer">更多资源类型</a>。</td>
</tr>
<tr>
<td style="text-align:left"><code>xml/</code></td>
<td style="text-align:left">可在运行时通过调用 <code>Resources.getXML()</code> 读取的任意 XML 文件。各种 XML 配置文件（例如<a href="https://developer.android.google.cn/guide/topics/search/searchable-config?hl=zh-cn" target="_blank" rel="noopener noreferrer">搜索配置</a>）都必须保存在此处。</td>
</tr>
<tr>
<td style="text-align:left"><code>font/</code></td>
<td style="text-align:left">带有扩展名的字体文件（例如 TTF、OTF 或 TTC），或包含 <code>&lt;font-family&gt;</code> 元素的 XML 文件。如需详细了解以资源形式使用的字体，请参阅<a href="https://developer.android.google.cn/guide/topics/ui/look-and-feel/fonts-in-xml?hl=zh-cn" target="_blank" rel="noopener noreferrer">将字体添加为 XML 资源</a>。</td>
</tr>
</tbody>
</table>
</div><blockquote>
<p>TODO 复杂 XML 资源</p>
</blockquote>
<h2> 可绘制图像</h2>
<ol>
<li>位图图形文件：PNG、WEBP、JPG 或 GIF， 可创建 <code>BitmapDrawable</code>。</li>
<li>9-patch 文件：具有可伸缩区域的 PNG 文件，支持根据内容调整图像大小 (<code>.9.png</code>)。可创建 <code>NinePatchDrawable</code>。</li>
<li>图层列表：管理其他可绘制对象数组的可绘制对象。这些可绘制对象按数组顺序绘制，因此索引最大的元素绘制于顶部。可创建 <code>LayerDrawable</code>。</li>
<li>状态列表：此 XML 文件用于为不同状态引用不同位图图形，例如，点按按钮时使用不同图像。可创建 <code>StateListDrawable</code>。</li>
<li>级别列表：此 XML 文件用于定义管理大量备选可绘制对象的可绘制对象，每个可绘制对象都配有最大备选数量。可创建 <code>LevelListDrawable</code>。</li>
<li>转换可绘制对象：此 XML 文件用于定义可在两种可绘制资源之间交错淡出的可绘制对象。可创建 <code>TransitionDrawable</code>。</li>
<li>插入可绘制对象：此 XML 文件用于定义以指定距离插入其他可绘制对象的可绘制对象。当视图需要小于视图实际边界的背景可绘制对象时，此类可绘制对象非常有用。</li>
<li>裁剪可绘制对象：此 XML 文件用于定义对其他可绘制对象进行裁剪（根据其当前级别值）的可绘制对象。可创建 <code>ClipDrawable</code>。</li>
<li>缩放可绘制对象：此 XML 文件用于定义更改其他可绘制对象大小（根据其当前级别值）的可绘制对象。可创建 <code>ScaleDrawable</code>。</li>
<li>形状可绘制对象：此 XML 文件用于定义几何图形形状（包括颜色和渐变）。可创建 <code>GradientDrawable</code>。</li>
</ol>
<h2> 资源文件 Resources</h2>
<ul>
<li>命名 遵循前缀表明类型的习惯，形如<code>type_foo_bar.xml</code>。例如：<code>fragment_contact_details.xml</code>，<code>view_primary_button.xml</code>，<code>activity_main.xml</code>.</li>
<li>组织布局文件 如果你不确定如何排版一个布局文件，遵循一下规则可能会有帮助。
<ul>
<li>每一个属性一行，缩进4个空格</li>
<li><code>android:id</code> 总是作为第一个属性</li>
<li><code>android:layout_****</code> 属性在上边</li>
<li><code>style</code> 属性在底部</li>
<li>关闭标签<code>/&gt;</code>单独起一行，有助于调整和添加新的属性</li>
</ul>
</li>
<li>考虑使用Designtime attributes 设计时布局属性，Android Studio已经提供支持，而不是硬编码<code>android:text</code>（<a href="http://stormzhang.com/devtools/2015/01/11/android-studio-tips1/" target="_blank" rel="noopener noreferrer">参考</a>）</li>
<li>作为一个经验法则,<code>android:layout_****</code>属性应该在 layout XML 中定义,同时其它属性<code>android:****</code> 应放在 styler XML中。此规则也有例外，不过大体工作 的很好。这个思想整体是保持layout属性(positioning, margin, sizing) 和content属性在布局文件中，同时将所有的外观细节属性（colors, padding, font）放 在style文件中。</li>
<li>尽量保持视图tree：学习如何使用RelativeLayout, 如何 optimize 你的布局 和如何使用 <code>&lt;merge&gt;</code> 标签.</li>
<li>小心关于WebViews的问题：如果必须显示一个web视图， 比如说对于一个新闻文章，避免做客户端处理HTML的工作， 最好让后端工程师协助，让他返回一个 「纯 HTML」。 当绑定WebViews到引用它的Activity,而不是绑定到ApplicationContext时。WebViews 也能导致内存泄露。 当使用简单的文字或按钮时，避免使用WebView，这时使用TextView或Buttons更好。</li>
</ul>
<h2> 限定符</h2>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>限定符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>small</code></td>
<td>提供给小屏幕设备的资源</td>
</tr>
<tr>
<td><code>normal</code></td>
<td>提供给中等屏幕设备的资源</td>
</tr>
<tr>
<td><code>large</code></td>
<td>提供给大屏幕设备的资源</td>
</tr>
<tr>
<td><code>xlarge</code></td>
<td>提供给超大屏幕设备的资源</td>
</tr>
<tr>
<td><code>ldpi</code></td>
<td>提供给低分辨率设备的资源（120 dpi以下）</td>
</tr>
<tr>
<td><code>mdpi</code></td>
<td>提供给中等分辨率设备的资源（120 dpi~160 dpi）</td>
</tr>
<tr>
<td><code>hdpi</code></td>
<td>提供给高分辨率设备的资源（160 dpi~240 dpi）</td>
</tr>
<tr>
<td><code>xhdpi</code></td>
<td>提供给超高分辨率设备的资源（240 dpi~320 dpi）</td>
</tr>
<tr>
<td><code>xxhdpi</code></td>
<td>提供给超超高分辨率设备的资源（320 dpi~480 dpi）</td>
</tr>
<tr>
<td><code>land</code></td>
<td>提供给横屏设备的资源</td>
</tr>
<tr>
<td><code>port</code></td>
<td>提供给竖屏设备的资源</td>
</tr>
</tbody>
</table>
</div><div class="hint-container note">
<p class="hint-container-title">说明</p>
<p>最小宽度限定符允许我们对屏幕的宽度指定一个最小值（以dp为单位），然后以这个最小值为临界点，屏幕宽度大于这个值的设备就加载一个布局，屏幕宽度小于这个值的设备就加载另一个布局。</p>
<p>例如：在res目录下新建layout-sw600dp文件夹</p>
</div>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Android 应用配置</title>
    <id>https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/B-Android%E5%BA%94%E7%94%A8%E9%85%8D%E7%BD%AE.html</id>
    <link href="https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/B-Android%E5%BA%94%E7%94%A8%E9%85%8D%E7%BD%AE.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Android 应用配置</h1>

<h2> 标签概览</h2>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p><a href="https://developer.android.google.cn/guide/topics/manifest/manifest-intro?hl=zh-cn" target="_blank" rel="noopener noreferrer">应用配置官方解释</a></p>
</div>
<p><code>AndroidManifest.xml</code> 包含以下几个部分：</p>]]></summary>
    <content type="html"><![CDATA[<h1> Android 应用配置</h1>

<h2> 标签概览</h2>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p><a href="https://developer.android.google.cn/guide/topics/manifest/manifest-intro?hl=zh-cn" target="_blank" rel="noopener noreferrer">应用配置官方解释</a></p>
</div>
<p><code>AndroidManifest.xml</code> 包含以下几个部分：</p>
<ol>
<li>运行配置、备份等</li>
<li>Activity：应用程序组件</li>
<li>软件包名、应用 ID</li>
<li>应用组件：<code>&lt;activity&gt;</code>、<code>&lt;service&gt;</code>、<code>&lt;receiver&gt;</code>、<code>&lt;provider&gt;</code></li>
<li>Intent 过滤器</li>
<li>图标、标签</li>
<li>权限</li>
<li>设备兼容</li>
</ol>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>标签</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;action&gt;</code></td>
<td>向 Intent 过滤器添加操作。</td>
</tr>
<tr>
<td><code>&lt;activity&gt;</code></td>
<td>声明 Activity 组件。</td>
</tr>
<tr>
<td><code>&lt;activity-alias&gt;</code></td>
<td>声明 Activity 的别名。</td>
</tr>
<tr>
<td><code>&lt;application&gt;</code></td>
<td>应用的声明。</td>
</tr>
<tr>
<td><code>&lt;category&gt;</code></td>
<td>向 Intent 过滤器添加类别名称。</td>
</tr>
<tr>
<td><code>&lt;compatible-screens&gt;</code></td>
<td>指定与应用兼容的每个屏幕配置。</td>
</tr>
<tr>
<td><code>&lt;data&gt;</code></td>
<td>向 Intent 过滤器添加数据规范。</td>
</tr>
<tr>
<td><code>&lt;grant-uri-permission&gt;</code></td>
<td>指定父级内容提供程序有权访问的应用数据的子集。</td>
</tr>
<tr>
<td><code>&lt;instrumentation&gt;</code></td>
<td>声明支持您监控应用与系统进行交互的 <code>Instrumentation</code> 类。</td>
</tr>
<tr>
<td><code>&lt;intent-filter&gt;</code></td>
<td>指定 Activity、服务或广播接收器可以响应的 Intent 类型。</td>
</tr>
<tr>
<td><code>&lt;manifest&gt;</code></td>
<td>AndroidManifest.xml 文件的根元素。</td>
</tr>
<tr>
<td><code>&lt;meta-data&gt;</code></td>
<td>可以提供给父级组件的其他任意数据项的名称-值对。</td>
</tr>
<tr>
<td><code>&lt;path-permission&gt;</code></td>
<td>定义内容提供程序中特定数据子集的路径和所需权限。</td>
</tr>
<tr>
<td><code>&lt;permission&gt;</code></td>
<td>声明安全权限，可用于限制对此应用或其他应用的特定组件或功能的访问。</td>
</tr>
<tr>
<td><code>&lt;permission-group&gt;</code></td>
<td>为相关权限的逻辑分组声明名称。</td>
</tr>
<tr>
<td><code>&lt;permission-tree&gt;</code></td>
<td>声明权限树的基本名称。</td>
</tr>
<tr>
<td><code>&lt;provider&gt;</code></td>
<td>声明内容提供程序组件。</td>
</tr>
<tr>
<td><code>&lt;receiver&gt;</code></td>
<td>声明广播接收器组件。</td>
</tr>
<tr>
<td><code>&lt;service&gt;</code></td>
<td>声明服务组件。</td>
</tr>
<tr>
<td><code>&lt;supports-gl-texture&gt;</code></td>
<td>声明应用支持的一种 GL 纹理压缩格式。</td>
</tr>
<tr>
<td><code>&lt;supports-screens&gt;</code></td>
<td>声明应用支持的屏幕尺寸，并为大于此尺寸的屏幕启用屏幕兼容模式。</td>
</tr>
<tr>
<td><code>&lt;uses-configuration&gt;</code></td>
<td>指明应用要求的特定输入功能。</td>
</tr>
<tr>
<td><code>&lt;uses-feature&gt;</code></td>
<td>声明应用使用的单个硬件或软件功能。</td>
</tr>
<tr>
<td><code>&lt;uses-library&gt;</code></td>
<td>指定应用必须链接到的共享库。</td>
</tr>
<tr>
<td><code>&lt;uses-permission&gt;</code></td>
<td>指定为使应用正常运行，用户必须授予的系统权限。</td>
</tr>
<tr>
<td><code>&lt;uses-permission-sdk-23&gt;</code></td>
<td>指明应用需要特定权限，但仅当应用在运行 Android 6.0（API 级别 23）或更高版本的设备上安装时才需要。</td>
</tr>
<tr>
<td><code>&lt;uses-sdk&gt;</code></td>
<td>您可以通过整数形式的 API 级别，表示应用与一个或多个版本的 Android 平台的兼容性。</td>
</tr>
</tbody>
</table>
</div><h2> 应用权限</h2>
<p>Android 系统实现了<em>最小权限原则</em>。换言之，默认情况下，每个应用只能访问执行其工作所需的组件，而不能访问其他组件。这样便能创建非常安全的环境，在此环境中，应用无法访问其未获得权限的系统部分。不过，应用仍可通过一些途径与其他应用共享数据以及访问系统服务：</p>
<ul>
<li>可以安排两个应用共享同一 Linux 用户 ID，在此情况下，二者便能访问彼此的文件。为节省系统资源，也可安排拥有相同用户 ID 的应用在同一 Linux 进程中运行，并共享同一 VM。应用还必须使用相同的证书进行签名。</li>
<li>应用可以请求访问设备数据（如用户的联系人、短信消息、可装载存储装置（SD 卡）、相机、蓝牙等）的权限。用户必须明确授予这些权限。如需了解详细信息，请参阅<a href="https://developer.android.google.cn/training/permissions?hl=zh-cn" target="_blank" rel="noopener noreferrer">使用系统权限</a>。</li>
</ul>
<p>方式：</p>
<ol>
<li>懒加载</li>
<li>饿汉式</li>
</ol>
<h3> 动态申请权限</h3>
<ol>
<li>检查是否开启了指定权限</li>
<li>请求系统弹窗，以便用户选择是否开启权限</li>
<li>判断用户的结果</li>
</ol>
<h2> 运行时权限</h2>
<p>并不是所有权限都需要在运行时申请，对于用户来说，不停地授权也很烦琐。Android现</p>
<p>在将常用的权限大致归成了两类，一类是普通权限，一类是危险权限</p>
<p><strong>危险权限：</strong></p>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>权限组名</th>
<th>权限名</th>
</tr>
</thead>
<tbody>
<tr>
<td>CALENDAR</td>
<td>READ_CALENDAR、WRITE_CALENDAR</td>
</tr>
<tr>
<td>CALL_LOG</td>
<td>READ_CALL_LOG、WRITE_CALL_LOG、PROCESS_OUTGOING_CALLS</td>
</tr>
<tr>
<td>CAMERA</td>
<td>CAMERA</td>
</tr>
<tr>
<td>CONTACTS</td>
<td>READ_CONTACTS、WRITE_CONTACTS、GET_ACCOUNTS</td>
</tr>
<tr>
<td>LOCATION</td>
<td>ACCESS_FINE_LOCATION、ACCESS_COARSE_LOCATION、ACCESS_BACKGROUND_LOCATION</td>
</tr>
<tr>
<td>MICROPHONE</td>
<td>RECORD_AUDIO</td>
</tr>
<tr>
<td>PHONE</td>
<td>READ_PHONE_STATE、READ_PHONE_NUMBERS、CALL_PHONE、ANSWER_PHONE_CALLS、ADD_VOICEMAIL、USE_SIP、ACCEPT_HANDOVER</td>
</tr>
<tr>
<td>SENSORS</td>
<td>BODY_SENSORS</td>
</tr>
<tr>
<td>ACTIVITY_RECOGNITION</td>
<td>ACTIVITY_RECOGNITION</td>
</tr>
<tr>
<td>SMS</td>
<td>SEND_SMS、RECEIVE_SMS、READ_SMS、RECEIVE_WAP_PUSH、RECEIVE_MMS</td>
</tr>
<tr>
<td>STORAGE</td>
<td>READ_EXTERNAL_STORAGE、WRITE_EXTERNAL_STORAGE、ACCESS_MEDIA_LOCATION</td>
</tr>
</tbody>
</table>
</div><h2> 混淆</h2>
<p><a href="http://proguard.sourceforge.net/" target="_blank" rel="noopener noreferrer">ProGuard</a> 是一个在Android项目中广泛使用的压缩和混淆打包的源码的工具</p>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Android Activity</title>
    <id>https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/C-AndroidActivity.html</id>
    <link href="https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/C-AndroidActivity.html"/>
    <updated>2023-10-12T06:47:33.000Z</updated>
    <summary type="html"><![CDATA[<h2> Android Activity</h2>

<h3> 启动模式</h3>
<p><strong>launchMode：</strong></p>
<ol>
<li><code>standard</code>：先进后出</li>
<li><code>singleTop</code>：栈顶复用</li>
<li><code>singleInstance</code>：全局唯一</li>
<li><code>singleTask</code>：栈顶复用并清空目标活动上面的所有活动</li>
</ol>
<p><strong>启动标志（在 intent 种设置）：</strong></p>]]></summary>
    <content type="html"><![CDATA[<h2> Android Activity</h2>

<h3> 启动模式</h3>
<p><strong>launchMode：</strong></p>
<ol>
<li><code>standard</code>：先进后出</li>
<li><code>singleTop</code>：栈顶复用</li>
<li><code>singleInstance</code>：全局唯一</li>
<li><code>singleTask</code>：栈顶复用并清空目标活动上面的所有活动</li>
</ol>
<p><strong>启动标志（在 intent 种设置）：</strong></p>
<ol>
<li><code>FLAG_ACTIVITY_SINGLE_TOP</code>：当栈顶为待跳转的活动时，重用该活动</li>
<li><code>FLAG_ACTIVITY_CLEAR_TOP</code>：创建新的活动并销毁</li>
<li><code>FLAG_ACTIVITY_CLEAR_TASK</code>：跳转到新活动中时，将栈中所有的任务清除</li>
<li><code>FLAG_ACTIVITY_NEW_TASK</code>：开启新的任务栈</li>
<li><code>FLAG_ACTIVITY_NO_HISTORY</code>：栈中不保存新启动的实例</li>
<li>如要启动 Activity，可以向 <code>startActivity()</code> 或 <code>startActivityForResult()</code> 传递 <code>Intent</code>（想让 Activity 返回结果时），或者为其安排新任务。</li>
<li>在 Android 5.0（API 级别 21）及更高版本中，可以使用 <code>JobScheduler</code> 类来调度操作。对于早期 Android 版本，可以通过向 <code>startService()</code> 传递 <code>Intent</code> 来启动服务（或对执行中的服务下达新指令）。也可通过向将 <code>bindService()</code> 传递 <code>Intent</code> 来绑定到该服务。</li>
<li>可以通过向 <code>sendBroadcast()</code>、<code>sendOrderedBroadcast()</code> 或 <code>sendStickyBroadcast()</code> 等方法传递 <code>Intent</code> 来发起广播。</li>
<li>可以通过在 <code>ContentResolver</code> 上调用 <code>query()</code>，对内容提供程序执行查询。</li>
</ol>
<h3> 启动过程</h3>
<ul>
<li>Activity启动过程的源码相当复杂，涉及Instrumentation、ActivityThread和ActivityManagerService（简称AMS）。</li>
<li>在新Activity启动之前，桟顶的Activity需要先onPause后，新Activity才能启动。</li>
</ul>
<h3> Intent</h3>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p><a href="https://developer.android.google.cn/guide/components/intents-common?hl=zh-cn" target="_blank" rel="noopener noreferrer">常用 Intent</a></p>
</div>
<blockquote>
<p>意图：分为显式和隐式</p>
</blockquote>
<ol>
<li>表明本次通信的请求方向</li>
<li>存储通信所需的数据</li>
<li>接收应答方的响应数据</li>
</ol>
<p>显式意图：直接指定来源与目标，数据精确匹配</p>
<ol>
<li>直接创建</li>
<li>调用 <code>setClass</code></li>
<li>调用 <code>setComponent</code></li>
</ol>
<p>隐式意图：没有明确指定，只给出一个动作字符串让系统自行匹配，属于模糊匹配</p>
<ol>
<li>通过 <code>setAction</code></li>
</ol>
<p>注意点：</p>
<ol>
<li>根据 Activity 是否希望从即将启动的新 Activity 中获取返回结果，可以使用 <code>startActivity()</code> 或  <code>startActivityForResult()</code> 方法启动新 Activity。这两种方法都需要传入一个 <code>Intent</code> 对象。</li>
<li><code>Intent</code> 对象指定要启动的具体 Activity，或描述要执行的操作类型（系统选择相应的 Activity，该 Activity 甚至可以来自不同应用）。<code>Intent</code> 对象还可以携带由已启动的 Activity 使用的少量数据。（<a href="https://developer.android.google.cn/guide/components/intents-filters?hl=zh-cn" target="_blank" rel="noopener noreferrer">Intent 和 Intent 过滤器</a>）</li>
<li>与 Activity、服务和广播接收器不同，内容提供程序并非由 Intent 启动。相反，它们会在成为 <code>ContentResolver</code> 的请求目标时启动。</li>
<li>通过将收到的 Intent 与设备上其他应用的清单文件中提供的 <em>Intent 过滤器</em>进行比较，系统便可识别能响应 Intent 的组件。</li>
<li>在应用的清单文件中声明 Activity 时，可以选择性地加入声明 Activity 功能的 Intent 过滤器，以便响应来自其他应用的 Intent。</li>
</ol>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>Intent 常用动作名</th>
<th>常量值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACTION_MAIN</td>
<td><code>android.intent.action.MAIN</code></td>
<td>APP 启动时的入口</td>
</tr>
<tr>
<td>ACTION_VIEW</td>
<td><code>android.intent.action.VIEW</code></td>
<td>向用户显示数据</td>
</tr>
<tr>
<td>ACTION_SEND</td>
<td><code>android.intent.action.SEND</code></td>
<td>分享内容</td>
</tr>
<tr>
<td>ACTION_CALL</td>
<td><code>android.intent.action.CALL</code></td>
<td>直接拨号</td>
</tr>
<tr>
<td>ACTION_DIAL</td>
<td><code>android.intent.action.DIAL</code></td>
<td>间接拨号</td>
</tr>
<tr>
<td>ACTION_SENDTO</td>
<td><code>android.intent.action.SENDTO</code></td>
<td>发送短信</td>
</tr>
<tr>
<td>ACTION_ANSWER</td>
<td><code>android.intent.action.ANSWER</code></td>
<td>接听电话</td>
</tr>
</tbody>
</table>
</div><div class="table-wrapper "><table>
<thead>
<tr>
<th>元素名称</th>
<th>设置方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Component</td>
<td><code>setComponent</code></td>
<td>组件，指定 intent 的来源与目标</td>
</tr>
<tr>
<td>Action</td>
<td><code>setAction</code></td>
<td>行为，指定意图的动作行为</td>
</tr>
<tr>
<td>Data</td>
<td><code>setData</code></td>
<td>URI，指定动作要操作的数据路径</td>
</tr>
<tr>
<td>Category</td>
<td><code>addCategory</code></td>
<td>类别，指定 intent 的操作类别</td>
</tr>
<tr>
<td>Type</td>
<td><code>setType</code></td>
<td>数据类型，指定消息的数据类型</td>
</tr>
<tr>
<td>Extras</td>
<td><code>putExtras</code></td>
<td>扩展信息，指定装载的包裹信息</td>
</tr>
<tr>
<td>Flags</td>
<td><code>setFlags</code></td>
<td>标志位，指定活动的启动标志</td>
</tr>
</tbody>
</table>
</div><h3> Bundle</h3>
<ol>
<li><a href="https://developer.android.google.cn/reference/android/os/Bundle?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>Bundle</code></a> 对象并不适合保留大量数据，因为它需要在主线程上进行序列化处理并占用系统进程内存。如需保存大量数据，您应组合使用持久性本地存储、<a href="https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onSaveInstanceState(android.os.Bundle)" target="_blank" rel="noopener noreferrer"><code>onSaveInstanceState()</code></a> 方法和 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>ViewModel</code></a> 类来保存数据</li>
<li>重建先前被销毁的 Activity 后，您可以从系统传递给 Activity 的 <a href="https://developer.android.google.cn/reference/android/os/Bundle?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>Bundle</code></a> 中恢复保存的实例状态。<a href="https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onCreate(android.os.Bundle)" target="_blank" rel="noopener noreferrer"><code>onCreate()</code></a> 和 <a href="https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onRestoreInstanceState(android.os.Bundle)" target="_blank" rel="noopener noreferrer"><code>onRestoreInstanceState()</code></a> 回调方法均会收到包含实例状态信息的相同 <a href="https://developer.android.google.cn/reference/android/os/Bundle?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>Bundle</code></a>。</li>
</ol>
<h3> 生命周期</h3>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#java" target="_blank" rel="noopener noreferrer">官方文档</a></p>
</div>
<p>为了在 Activity 生命周期的各个阶段之间导航转换，Activity 类提供六个核心回调：<code>onCreate()</code>、<code>onStart()</code>、<code>onResume()</code>、<code>onPause()</code>、<code>onStop()</code> 和 <code>onDestroy()</code>。当 Activity 进入新状态时，系统会调用其中每个回调。</p>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//android/20231005/androidActivity生命周期.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4>onCreate</h4>
<ol>
<li>在系统首次创建 Activity 时触发。Activity 会在创建后进入“已创建”状态。</li>
<li>在 <code>onCreate()</code> 方法中，您需执行基本应用启动逻辑，该逻辑在 Activity 的整个生命周期中<strong>只应发生一次</strong>。</li>
<li>例如，<code>onCreate()</code> 的实现可能会将数据绑定到列表，将 <code>Activity</code> 与 <code>ViewModel</code> 相关联，并实例化某些类作用域变量。此方法会接收 <code>savedInstanceState</code> 参数，后者是包含 Activity 先前保存状态的 <code>Bundle</code> 对象。如果 Activity 此前未曾存在，<code>Bundle</code> 对象的值为 null。</li>
<li>还可以在 Activity 代码中新建 <code>View</code> 对象，并将新建的 <code>View</code> 插入到 <code>ViewGroup</code> 中，以构建视图层次结构。然后，将根 <code>ViewGroup</code> 传递给 <code>setContentView()</code> 以使用该布局（<a href="https://developer.android.google.cn/guide/topics/ui?hl=zh-cn" target="_blank" rel="noopener noreferrer">参考</a>）</li>
<li><code>onCreate()</code> 方法完成执行后，Activity 进入“已开始”状态，系统会相继调用 <code>onStart()</code> 和 <code>onResume()</code> 方法。</li>
</ol>
<h4>onStart</h4>
<ol>
<li>当 Activity 进入“已开始”状态时，系统会调用此回调。<code>onStart()</code> 调用使 Activity 对用户可见，因为应用会为 Activity 进入前台并支持互动做准备。</li>
<li>当 Activity 进入已开始状态时，与 Activity 生命周期相关联的所有生命周期感知型组件都将收到 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle.Event?hl=zh-cn#ON_START" target="_blank" rel="noopener noreferrer"><code>ON_START</code></a> 事件。</li>
<li><code>onStart()</code> 方法会非常快速地完成，并且与“已创建”状态一样，Activity 不会一直处于“已开始”状态。一旦此回调结束，Activity 便会进入“已恢复”状态，系统将调用 <code>onResume()</code> 方法。</li>
</ol>
<h4>onResume</h4>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>事件在何时触发需要慎重，会影响用户体验（<a href="https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#java" target="_blank" rel="noopener noreferrer">参考</a>）</p>
</div>
<ol>
<li>Activity 会在进入“已恢复”状态时来到前台，然后系统调用 <code>onResume()</code> 回调。这是应用与用户互动的状态。</li>
<li>应用会一直保持这种状态，直到某些事件发生，让焦点远离应用。此类事件包括接到来电、用户导航到另一个 Activity，或设备屏幕关闭。</li>
<li>当 Activity 进入已恢复状态时，与 Activity 生命周期相关联的所有生命周期感知型组件都将收到 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle.Event?hl=zh-cn#ON_RESUME" target="_blank" rel="noopener noreferrer"><code>ON_RESUME</code></a> 事件。</li>
<li>当发生中断事件时，Activity 进入“已暂停”状态，系统调用 <code>onPause()</code> 回调。如果 Activity 从“已暂停”状态返回“已恢复”状态，系统将再次调用 <code>onResume()</code> 方法。</li>
<li>应实现 <code>onResume()</code>，以初始化在 <a href="https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onPause()" target="_blank" rel="noopener noreferrer"><code>onPause()</code></a> 期间释放的组件，并执行每次 Activity 进入“已恢复”状态时必须完成的任何其他初始化操作。</li>
<li>无论选择在哪个构建事件中执行初始化操作，都务必使用相应的生命周期事件来释放资源：
<ol>
<li>如果在收到 ON_START 事件后初始化某些内容，那么就在收到 ON_STOP 事件后释放或终止相应内容</li>
<li>如果在收到 ON_RESUME 事件后初始化某些内容，那么就在收到 ON_PAUSE 事件后将其释放</li>
</ol>
</li>
</ol>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>可以将组件初始化代码放置在生命周期感知型组件中，也可以直接将此代码放入 Activity 生命周期回调（例如 <a href="https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onStart()" target="_blank" rel="noopener noreferrer"><code>onStart()</code></a> 和 <a href="https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onStop()" target="_blank" rel="noopener noreferrer"><code>onStop()</code></a>），但官方不建议这样做。</p>
<p>通过将此逻辑添加到独立的生命周期感知型组件中，可以对多个 Activity 重复使用该组件，而无需复制代码（参阅：<a href="https://developer.android.google.cn/topic/libraries/architecture/lifecycle?hl=zh-cn" target="_blank" rel="noopener noreferrer">使用生命周期感知型组件处理生命周期</a>）</p>
</div>
<h4>onPause</h4>
<ol>
<li>系统将此方法视为用户将要离开 Activity 的第一个标志（尽管这并不总是意味着 Activity 会被销毁）</li>
<li>此方法表示 Activity 不再位于前台（尽管在用户处于多窗口模式时 Activity 仍然可见）</li>
<li>在此方法中，<strong>暂停或调整</strong>处于<strong>暂停状态</strong>时，不应该继续或者应该尽量少调用或者希望快速恢复的操作</li>
<li>进入暂停状态的原因包括：
<ol>
<li>某个事件会中断应用执行（最常见的情况）</li>
<li>在 Android 7.0（API 级别 24）或更高版本中，有多个应用在多窗口模式下运行。无论何时，都只有一个应用（窗口）可以拥有焦点，因此系统会暂停所有其他应用。</li>
<li>有新的半透明 Activity（例如对话框）处于开启状态。只要 Activity 仍然部分可见但并未处于焦点之中，它便会一直暂停。</li>
<li>当 Activity 进入已暂停状态时，与 Activity 生命周期相关联的所有生命周期感知型组件都将收到 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle.Event?hl=zh-cn#ON_PAUSE" target="_blank" rel="noopener noreferrer"><code>ON_PAUSE</code></a> 事件。这时，生命周期组件可以停止在组件未位于前台时无需运行的任何功能，例如停止相机预览。</li>
</ol>
</li>
<li><code>onPause()</code> 执行非常简单，而且不一定要有足够的时间来执行保存操作。因此，<strong>不应使用</strong> <code>onPause()</code> 来保存应用或用户数据、进行网络调用或执行数据库事务。因为在该方法完成之前，此类工作可能无法完成（应在 <code>onStop()</code> 期间执行高负载的关闭操作。<a href="https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#onstop" target="_blank" rel="noopener noreferrer">参阅 onStop()</a>。如需详细了解如何保存数据（参阅：<a href="https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn#saras" target="_blank" rel="noopener noreferrer">保存和恢复 Activity 状态</a>））</li>
</ol>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>还可以使用 <a href="https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onPause()" target="_blank" rel="noopener noreferrer"><code>onPause()</code></a> 方法释放系统资源、传感器（例如 GPS）手柄，或当 Activity 暂停且用户不需要它们时仍然可能影响电池续航时间的任何资源。</p>
<p>然而，如果处于多窗口模式，“已暂停”的 Activity 仍完全可见。因此，应该考虑使用 onStop() 而非 onPause() 来完全释放或调整与界面相关的资源和操作，以便更好地支持多窗口模式。</p>
</div>
<h4>onStop</h4>
<ol>
<li>如果 Activity 不再对用户可见，说明其已进入“已停止”状态，因此系统将调用 <code>onStop()</code> 回调。</li>
<li>当 Activity 进入已停止状态时，与 Activity 生命周期相关联的所有生命周期感知型组件都将收到 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle.Event?hl=zh-cn#ON_STOP" target="_blank" rel="noopener noreferrer"><code>ON_STOP</code></a> 事件。这时，生命周期组件可以停止在组件未显示在屏幕上时无需运行的任何功能。</li>
<li>在 <code>onStop()</code> 方法中，应用应释放或调整在应用对用户不可见时的无用资源。</li>
<li>使用 <code>onStop()</code> 而非 <code>onPause()</code> 可确保与界面相关的工作继续进行，即使用户在多窗口模式下查看您的 Activity 也能如此。</li>
<li>还应使用 <code>onStop()</code> 执行 CPU 相对密集的关闭操作。例如，如果您无法找到更合适的时机来将信息保存到数据库，可以在 <code>onStop()</code> 期间执行此操作。</li>
<li>当您的 Activity 进入“已停止”状态时，<code>Activity</code> 对象会继续驻留在内存中：该对象将维护所有状态和成员信息，但不会附加到窗口管理器。Activity 恢复后，Activity 会重新调用这些信息。您无需重新初始化在任何回调方法导致 Activity 进入“已恢复”状态期间创建的组件。</li>
<li>系统还会追踪布局中每个 <code>View</code> 对象的当前状态，如果用户在 <code>EditText</code> 微件中输入文本，系统将保留文本内容，因此您无需保存和恢复文本。</li>
<li>进入“已停止”状态后，Activity 要么返回与用户互动，要么结束运行并消失。如果 Activity 返回，系统将调用 <code>onRestart()</code>。如果 <code>Activity</code> 结束运行，系统将调用 <code>onDestroy()</code>。</li>
</ol>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>Activity 停止后，如果系统需要恢复内存，可能会销毁包含该 Activity 的进程。即使系统在 Activity 停止后销毁相应进程，系统仍会保留 <code>Bundle</code>（键值对的 blob）中 <code>View</code> 对象（例如 <code>EditText</code> 微件中的文本）的状态，并在用户返回 Activity 时恢复这些对象。</p>
</div>
<h4>onDestroy</h4>
<ol>
<li>调用该方法可能的原因（可以使用 <a href="https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#isFinishing()" target="_blank" rel="noopener noreferrer"><code>isFinishing()</code></a> 方法区分这两种情况）：
<ol>
<li>Activity 即将结束（由于用户彻底关闭 Activity 或由于系统为 Activity 调用 <a href="https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#finish()" target="_blank" rel="noopener noreferrer"><code>finish()</code></a>）</li>
<li>由于配置变更（例如设备旋转或多窗口模式），系统暂时销毁 Activity</li>
</ol>
</li>
<li>当 Activity 进入已销毁状态时，与 Activity 生命周期相关联的所有生命周期感知型组件都将收到 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle.Event?hl=zh-cn#ON_DESTROY" target="_blank" rel="noopener noreferrer"><code>ON_DESTROY</code></a> 事件。这时，生命周期组件可以在 Activity 被销毁之前清理所需的任何数据。</li>
<li>应使用 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>ViewModel</code></a> 对象来包含 Activity 的相关视图数据，而不是在 Activity 中加入逻辑来确定 Activity 被销毁的原因。这样做之后，如果因配置变更而重新创建 Activity，ViewModel 不必执行任何操作，因为系统将保留 ViewModel 并将其提供给下一个 Activity 实例。如果不重新创建 Activity，ViewModel 将调用 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn#onCleared()" target="_blank" rel="noopener noreferrer"><code>onCleared()</code></a> 方法，以便在 Activity 被销毁前清除所需的任何数据。</li>
<li>如果 Activity 即将结束，onDestroy() 是 Activity 收到的最后一个生命周期回调。如果由于配置变更而调用 onDestroy()，系统会立即新建 Activity 实例，然后在新配置中为新实例调用 <a href="https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onCreate(android.os.Bundle)" target="_blank" rel="noopener noreferrer"><code>onCreate()</code></a>。</li>
</ol>
<h4>常见的情况</h4>
<ol>
<li>针对一个特定的Activity，第一次启动，回调如下：<code>onCreate </code>-&gt; <code>onStart </code>-&gt; <code>onResume</code>。</li>
<li>当用户打开新的Activity或者切换到桌面的时候，回调如下：<code>onPause </code>-&gt; <code>onStop</code>。这里有一种特殊情况，如果新Activity采用了透明主题，那么当前Activity不会回调<code>onStop</code>。</li>
<li>当用户再次回到原Activity时，回调如下：<code>onRestart </code>-&gt; <code>onStart </code>-&gt; <code>onResume</code>。</li>
<li>当用户按back键回退时，回调如下：<code>onPause </code>-&gt; <code>onStop </code>-&gt; <code>onDestroy</code>。</li>
<li>当Activity被系统回收后再次打开，生命周期方法回调过程和第一种一样，注意只是生命周期方法一样，不代表所有过程都一样，这个问题在下一节会详细说明。</li>
<li>从整个生命周期来说，<code>onCreate</code>和<code>onDestroy</code>是配对的，分别标识着Activity的创建和销毁，并且只可能有一次调用。从Activity是否可见来说，<code>onStart</code>和<code>onStop</code>是配对的，随着用户的操作或者设备屏幕的点亮和熄灭，这两个方法可能被调用多次；从Activity是否在前台来说，<code>onResume</code>和<code>onPause</code>是配对的，随着用户操作或者设备屏幕的点亮和熄灭，这两个方法可能被调用多次。</li>
</ol>
<div class="hint-container info">
<p class="hint-container-title">onStart/onStop 与 onResume/onPause</p>
<p>onStart和onStop是从Activity是否可见这个角度来回调的，而onResume和onPause是从Activity是否位于前台这个角度来回调的，除了这种区别，在实际使用中没有其他明显区别。</p>
</div>
<h3> 生命周期事件</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>ON_ANY</code></td>
<td>所有事件</td>
</tr>
<tr>
<td style="text-align:left"><code>ON_CREATE</code></td>
<td><code>onCreate</code> 事件</td>
</tr>
<tr>
<td style="text-align:left"><code>ON_DESTROY</code></td>
<td><code>onDestroy</code> 事件</td>
</tr>
<tr>
<td style="text-align:left"><code>ON_PAUSE</code></td>
<td><code>onPause</code> 事件</td>
</tr>
<tr>
<td style="text-align:left"><code>ON_RESUME</code></td>
<td><code>onResume</code> 事件</td>
</tr>
<tr>
<td style="text-align:left"><code>ON_START</code></td>
<td><code>onStart</code> 事件</td>
</tr>
<tr>
<td style="text-align:left"><code>ON_STOP</code></td>
<td><code>onStop</code> 事件</td>
</tr>
</tbody>
</table>
</div><div class="hide-container"><p class="hide-container-title">HIDE</p>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">公共方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>static final Lifecycle.Event</code></td>
<td><code>downFrom(@NonNull Lifecycle.State state)</code>Returns the <code>Lifecycle.Event</code> that will be reported by a <code>Lifecycle</code> leaving the specified <code>Lifecycle.State</code> to a lower state, or <code>null</code> if there is no valid event that can move down from the given state.</td>
</tr>
<tr>
<td style="text-align:left"><code>static final Lifecycle.Event</code></td>
<td><code>downTo(@NonNull Lifecycle.State state)</code>Returns the <code>Lifecycle.Event</code> that will be reported by a <code>Lifecycle</code> entering the specified <code>Lifecycle.State</code> from a higher state, or <code>null</code> if there is no valid event that can move down to the given state.</td>
</tr>
<tr>
<td style="text-align:left"><code>final @NonNull Lifecycle.State</code></td>
<td><code>getTargetState()</code>Returns the new <code>Lifecycle.State</code> of a <code>Lifecycle</code> that just reported this <code>Lifecycle.Event</code>.</td>
</tr>
<tr>
<td style="text-align:left"><code>static final Lifecycle.Event</code></td>
<td><code>upFrom(@NonNull Lifecycle.State state)</code>Returns the <code>Lifecycle.Event</code> that will be reported by a <code>Lifecycle</code> leaving the specified <code>Lifecycle.State</code> to a higher state, or <code>null</code> if there is no valid event that can move up from the given state.</td>
</tr>
<tr>
<td style="text-align:left"><code>static final Lifecycle.Event</code></td>
<td><code>upTo(@NonNull Lifecycle.State state)</code>Returns the <code>Lifecycle.Event</code> that will be reported by a <code>Lifecycle</code> entering the specified <code>Lifecycle.State</code> from a lower state, or <code>null</code> if there is no valid event that can move up to the given state.</td>
</tr>
<tr>
<td style="text-align:left"><code>final @NonNull Lifecycle.Event</code></td>
<td><code>valueOf(@NonNull String value)</code>Returns the enum constant of this type with the specified name.</td>
</tr>
<tr>
<td style="text-align:left"><code>final @NonNull Lifecycle.Event[]</code></td>
<td><code>values()</code>Returns an array containing the constants of this enum type, in the order they're declared.</td>
</tr>
</tbody>
</table>
</div></div>
<h3> 处理生命周期</h3>
<blockquote>
<p>基于观察者模式/监听器模式</p>
</blockquote>
<ol>
<li>核心类：<code>Lifecycle</code>、<code>DefaultLifecycleObserver</code>、<code>LifecycleOwner</code></li>
</ol>
<ul>
<li>使界面控制器（activity 和 fragment）尽可能保持精简。它们不应试图获取自己的数据，而应使用 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>ViewModel</code></a> 执行此操作，同时应观测 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/LiveData?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>LiveData</code></a> 对象以在视图中体现相应变化。</li>
<li>设法编写数据驱动型界面，在此类界面中，界面控制器负责随着数据的更改更新视图，或者向 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>ViewModel</code></a> 通知用户的操作。</li>
<li>将数据逻辑放在 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>ViewModel</code></a> 类中。<a href="https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>ViewModel</code></a> 应充当界面控制器与应用其余部分之间的连接器。不过要注意，<a href="https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>ViewModel</code></a> 不负责提取数据（例如，从网络提取）。但是，<a href="https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>ViewModel</code></a> 应调用相应的组件来提取数据，然后将结果提供给界面控制器。</li>
<li>使用<a href="https://developer.android.google.cn/topic/libraries/data-binding?hl=zh-cn" target="_blank" rel="noopener noreferrer">数据绑定</a>在视图与界面控制器之间维持干净的接口。这样可以让视图更具声明性，并尽量减少需要在 activity 和 fragment 中编写的更新代码。如果您更愿意使用 Java 编程语言来达成此目的，请使用 <a href="http://jakewharton.github.io/butterknife/" target="_blank" rel="noopener noreferrer">Butter Knife</a> 之类的库，以避免样板代码并实现更好的抽象化。</li>
<li>如果界面很复杂，不妨考虑创建 <a href="http://www.gwtproject.org/articles/mvp-architecture.html#presenter" target="_blank" rel="noopener noreferrer">presenter</a> 类来处理界面的修改。这可能是一项艰巨的任务，但这样做可使界面组件更易于测试。</li>
<li>避免在 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>ViewModel</code></a> 中引用 <code>View</code> 或 <code>Activity</code> 上下文。如果 <code>ViewModel</code> 存在的时间比 activity 更长（在配置更改的情况下），activity 将泄漏并且不会获得垃圾回收器的妥善处置。</li>
<li>使用 <a href="https://developer.android.google.cn/topic/libraries/architecture/coroutines?hl=zh-cn" target="_blank" rel="noopener noreferrer">Kotlin 协程</a>管理长时间运行的任务和其他可以异步运行的操作。</li>
</ul>
<h3> 状态变更</h3>
<blockquote>
<p>TODO</p>
</blockquote>
<ol>
<li>配置发生了更改</li>
<li>Activity 或对话框显示在前台</li>
<li>用户点按“返回”按钮</li>
<li>系统终止应用进程</li>
</ol>
<h3> ViewModel</h3>
<ol>
<li>
<p><a href="https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>ViewModel</code></a> 类是一种<a href="https://developer.android.google.cn/topic/architecture/ui-layer/stateholders?hl=zh-cn" target="_blank" rel="noopener noreferrer">业务逻辑或屏幕级状态容器</a>。</p>
</li>
<li>
<p>它用于将状态公开给界面，以及封装相关的业务逻辑。</p>
</li>
<li>
<p>它的主要优点是，它可以缓存状态，并可在配置更改后持久保留相应状态。这意味着在 activity 之间导航时或进行配置更改后（例如旋转屏幕时），界面将无需重新提取数据。</p>
</li>
</ol>
<h3> 生命周期感知型组件</h3>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>生命周期感知型组件可执行操作来响应另一个组件（如 activity 和 fragment）的生命周期状态的变化。</p>
<p>这些组件有助于编写出更有条理且往往更精简的代码，此类代码更易于维护。</p>
</div>
<h3> 配置变更</h3>
<p>当发生配置变更时，系统会重新创建 <code>Activity</code>。为此，系统会调用 <a href="https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onDestroy()" target="_blank" rel="noopener noreferrer"><code>onDestroy()</code></a> 并销毁现有的 <code>Activity</code> 实例。随后，系统会使用 <a href="https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onCreate(android.os.Bundle)" target="_blank" rel="noopener noreferrer"><code>onCreate()</code></a> 创建一个新实例，并且这个新的 <code>Activity</code> 实例会使用更新后的新配置进行初始化。这也意味着，系统还会使用新配置重新创建界面。</p>
<p>重新创建过程还会清除您在 <code>Activity</code> 或其包含的 <code>Fragment</code>、<code>View</code> 或其他对象中，以字段形式保留的任何状态。这是因为 <code>Activity</code> 重新创建过程会创建 <code>Activity</code> 和界面的全新实例。此外，之前的旧 <code>Activity</code> 不再可见或不再有效，因此对该 activity 或其所含对象的任何其余引用都已过时。它们会导致 bug、内存泄漏和崩溃。</p>
<ol>
<li>变更时发生了什么？</li>
<li>保持用户期望</li>
<li>限制 Activity 重新创建</li>
</ol>
<p>如需验证应用中是否保留了状态，您可以在应用处于前台和后台时执行会导致配置变更的操作。这些操作包括：</p>
<ul>
<li>旋转设备</li>
<li>进入多窗口模式</li>
<li>在多窗口模式或自由窗口模式下调整应用大小</li>
<li>折叠具有多个显示屏的可折叠设备</li>
<li>更改系统主题，例如深色模式与浅色模式</li>
<li>更改字体大小</li>
<li>更改系统或应用语言</li>
<li>连接或断开硬件键盘</li>
<li>连接或断开基座</li>
</ul>
<p>可以采用三种主要方法在重新创建 <code>Activity</code> 的过程中保留相关状态。采用哪种方法取决于要保留的状态类型：</p>
<ul>
<li><a href="https://developer.android.google.cn/topic/libraries/architecture/saving-states?hl=zh-cn#local" target="_blank" rel="noopener noreferrer">本地持久性存储</a>可用于处理复杂或大型数据的进程终止。持久性本地存储包括数据库或 <a href="https://developer.android.google.cn/topic/libraries/architecture/datastore?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>DataStore</code></a>。</li>
<li><a href="https://developer.android.google.cn/topic/libraries/architecture/saving-states?hl=zh-cn#viewmodel" target="_blank" rel="noopener noreferrer">保留的对象</a>（如 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>ViewModel</code></a> 实例）可在用户正在使用应用时，处理内存中与界面相关的状态。</li>
<li><a href="https://developer.android.google.cn/topic/libraries/architecture/saving-states?hl=zh-cn#onsaveinstancestate" target="_blank" rel="noopener noreferrer">已保存的实例状态</a>可用于处理系统发起的进程终止，并根据用户输入或导航情况保留瞬时状态。</li>
</ul>
<p>如需详细了解各个 API 以及各自适用的使用场景，请参阅<a href="https://developer.android.google.cn/topic/libraries/architecture/saving-states?hl=zh-cn" target="_blank" rel="noopener noreferrer">保存界面状态</a>。</p>
<p>在 <code>View</code> 系统中，如果发生配置变更并且已停用 <code>Activity</code> 重新创建功能，activity 会收到对 <a href="https://developer.android.google.cn/reference/android/app/Activity?hl=zh-cn#onConfigurationChanged(android.content.res.Configuration)" target="_blank" rel="noopener noreferrer"><code>Activity.onConfigurationChanged()</code></a> 的调用。任何关联的视图也会收到对 <a href="https://developer.android.google.cn/reference/kotlin/android/view/View?hl=zh-cn#onconfigurationchanged" target="_blank" rel="noopener noreferrer"><code>View.onConfigurationChanged()</code></a> 的调用。对于尚未添加到 <code>android:configChanges</code> 的配置变更，系统会照常重新创建 activity。</p>
<p><code>onConfigurationChanged()</code> 回调方法会收到一个 <a href="https://developer.android.google.cn/reference/android/content/res/Configuration?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>Configuration</code></a> 对象，其中指定了新的设备配置。请读取 <code>Configuration</code> 对象中的字段来确定您的新配置。如需进行后续更改，请更新您在接口中使用的资源。当系统调用此方法时，activity 的 <code>Resources</code> 对象会相应地进行更新，并根据新配置返回资源。这样一来，您就可以在系统不重启 activity 的情况下轻松重置界面元素。</p>
<p>在处理配置变更时，需要了解以下关键概念：</p>
<ul>
<li>**配置：**设备配置用于定义界面如何向用户显示内容，例如应用显示大小、语言区域或系统主题。</li>
<li>**配置变更：**配置会根据用户互动发生变更。例如，用户可能会更改设备设置或与设备的物理互动方式。您无法阻止配置变更。</li>
<li>**<code>Activity</code> 重新创建：**默认情况下，配置变更会导致重新创建 <code>Activity</code>。这是为新配置重新初始化应用状态的内置机制。</li>
<li><strong><code>Activity</code> 销毁：</strong><code>Activity</code> 重新创建会导致系统销毁旧的 <code>Activity</code> 实例，并创建一个新实例来代替它。旧实例现已过时。对该实例的任何其余引用都会导致内存泄漏、bug 或崩溃。</li>
<li>**状态：**旧 <code>Activity</code> 实例中的状态不存在于新 <code>Activity</code> 实例中，因为它们是两个不同的对象实例。请按照<a href="https://developer.android.google.cn/topic/libraries/architecture/saving-states?hl=zh-cn" target="_blank" rel="noopener noreferrer">保存界面状态</a>中描述的方法保留应用和用户状态。</li>
<li>**停用：**为某种类型的配置变更停用 activity 重新创建功能是一种潜在的优化方案。您需要确保应用根据新配置进行正确更新。</li>
</ul>
<p>为了提供良好的用户体验，遵循以下最佳实践：</p>
<ul>
<li><strong>为配置频繁变更做好准备</strong>：不要认为配置变更会很少发生或从不发生过，无论 API 级别、外形规格或界面工具包如何。当用户导致配置变更时，他们会希望应用进行更新，并继续使用新配置正常运行。</li>
<li>**保留状态：**在重新创建 <code>Activity</code> 时，不要丢失用户的状态。请按照<a href="https://developer.android.google.cn/topic/libraries/architecture/saving-states?hl=zh-cn" target="_blank" rel="noopener noreferrer">保存界面状态</a>中描述的方法保留状态。</li>
<li>**避免停用快速修复功能：**不要停用 <code>Activity</code> 重新创建功能，这样可以轻松避免丢失状态。停用 activity 重新创建功能需要实现处理变更的承诺，而您可能会因为其他配置变更、进程终止或应用关闭所带来的 <code>Activity</code> 重新创建而丢失状态。因此，您无法完全停用 <code>Activity</code> 重新创建功能。请按照<a href="https://developer.android.google.cn/topic/libraries/architecture/saving-states?hl=zh-cn" target="_blank" rel="noopener noreferrer">保存界面状态</a>中描述的方法保留状态。</li>
<li>**不要回避配置变更：**不要为了回避配置变更和 <code>Activity</code> 重新创建，而对屏幕方向、宽高比或尺寸可调整性施加限制。这会对想要按照自己首选方式使用应用的用户产生负面影响。</li>
</ul>
<h3> Fragment</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>函数钩子</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>onAttach()</code></td>
<td>当Fragment和Activity建立关联时调用</td>
</tr>
<tr>
<td><code>onCreateView()</code></td>
<td>为Fragment创建视图（加载布局）时调用</td>
</tr>
<tr>
<td><code>onActivityCreated()</code></td>
<td>确保与Fragment相关联的Activity已经创建完毕时调用</td>
</tr>
<tr>
<td><code>onDestroyView()</code></td>
<td>当与Fragment关联的视图被移除时调用</td>
</tr>
<tr>
<td><code>onDetach()</code></td>
<td>当Fragment和Activity解除关联时调用</td>
</tr>
</tbody>
</table>
</div><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//android/20231002/androidFragment生命周期.png" alt="image-20230922154152968" tabindex="0" loading="lazy"><figcaption>image-20230922154152968</figcaption></figure>
<p>Fragments应该作为实现UI界面默认选择。可以重复使用Fragments用户接口来组合成应用。官方强烈推荐使用Fragments而不是activity来呈现UI界面，理由如下：</p>
<ul>
<li>提供多窗格布局解决方案 Fragments 的引入主要将手机应用延伸到平板电脑，所以在平板电脑上你可能有A、B两个窗格，但是在手机应用上A、B可能分别充满 整个屏幕。如果应用在最初就使用了fragments，那么以后应用适配到其他不同尺寸屏幕就会非常简单。</li>
<li>屏幕间数据通信从一个Activity发送复杂数据(例如Java对象)到另外一个Activity，Android的API并没有提供合适的方法。不过使用Fragment，你可以使用 一个activity实例作为这个activity子fragments的通信通道。即使这样比Activity与Activity间的通信好，你也想考虑使用Event Bus架构，使用如 Otto 或者 greenrobot EventBus作为更简洁的实现。 如果你希望避免添加另外一个类库，RxJava同样可以实现一个Event Bus。</li>
<li>Fragments 一般通用的不只有UI 你可以有一个没有界面的fragment作为Activity提供后台工作。 进一步你可以使用这个特性来创建一个fragment 包含改变其它fragment的逻辑而不是把这个逻辑放在activity中。</li>
<li>甚至ActionBar 都可以使用内部fragment来管理 你可以选择使用一个没有UI界面的fragment来专门管理ActionBar,或者你可以选择使用在每个Fragment中 添加它自己的action 来作为父Activity的ActionBar（<a href="http://www.grokkingandroid.com/adding-action-items-from-within-fragments/" target="_blank" rel="noopener noreferrer">参考</a>）</li>
</ul>
<p>很不幸，我们不建议广泛的使用嵌套的fragments，因为 有时会引起matryoshka bugs。我们只有当它有意义(例如，在水平滑动的ViewPager在 像屏幕一样fragment中)或者他的确是一个明智的选择的时候才广泛的使用fragment。</p>
<p>在一个架构级别，你的APP应该有一个顶级的activity来包含绝大部分业务相关的fragment。你也可能还有一些辅助的activity ，这些辅助的activity与主activity 通信很简单限制在这两种方法 <code>Intent.setData()</code> 或 <code>Intent.setAction()</code>或类似的方法。</p>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Android Service</title>
    <id>https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/D-AndroidService.html</id>
    <link href="https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/D-AndroidService.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Android Service</h1>

<blockquote>
<p>在很早之前，Android系统的后台功能是非常开放的，Service的优先级也很高，仅次于Activity，那个时候可以在Service中做很多事情。但由于后台功能太过于开放，每个应用都想无限地占用后台资源，导致手机的内存越来越紧张，耗电越来越快，也变得越来越卡。为了解决这些情况，基本上Android系统每发布一个新版本，后台权限都会被进一步收紧。</p>
</blockquote>
<p>核心方法：</p>
<ol>
<li>
<p><code>onBind()</code></p>
</li>
<li>
<p><code>onCreate()</code></p>
</li>
<li>
<p><code>onStartCommand()</code></p>
</li>
<li>
<p><code>onDestroy()</code></p>
</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> Android Service</h1>

<blockquote>
<p>在很早之前，Android系统的后台功能是非常开放的，Service的优先级也很高，仅次于Activity，那个时候可以在Service中做很多事情。但由于后台功能太过于开放，每个应用都想无限地占用后台资源，导致手机的内存越来越紧张，耗电越来越快，也变得越来越卡。为了解决这些情况，基本上Android系统每发布一个新版本，后台权限都会被进一步收紧。</p>
</blockquote>
<p>核心方法：</p>
<ol>
<li>
<p><code>onBind()</code></p>
</li>
<li>
<p><code>onCreate()</code></p>
</li>
<li>
<p><code>onStartCommand()</code></p>
</li>
<li>
<p><code>onDestroy()</code></p>
</li>
</ol>
<h3> 异步消息处理</h3>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//android/20231002/android异步消息原理.png" alt="image-20230922154930504" tabindex="0" loading="lazy"><figcaption>image-20230922154930504</figcaption></figure>
<p>Android中的异步消息处理主要由4个部分组成：Message、Handler、MessageQueue和Looper：</p>
<ol>
<li><strong>Message</strong>：Message是在线程之间传递的消息，它可以在内部携带少量的信息，用于在不同线程之间传递数据。上一小节中我们使用到了Message的what字段，除此之外还可以使用arg1和arg2字段来携带一些整型数据，使用obj字段携带一个Object对象。</li>
<li><strong>Handler</strong>：Handler顾名思义也就是处理者的意思，它主要是用于发送和处理消息的。发送消息一般是使用Handler的sendMessage()方法、post()方法等，而发出的消息经过一系列地辗转处理后，最终会传递到Handler的handleMessage()方法中。</li>
<li><strong>MessageQueue</strong>：MessageQueue是消息队列的意思，它主要用于存放所有通过Handler发送的消息。这部分消息会一直存在于消息队列中，等待被处理。每个线程中只会有一个MessageQueue对象。</li>
<li><strong>Looper</strong>：Looper 是每个线程中的MessageQueue的管家，调用Looper的loop()方法后，就会进入一个无限循环当中，然后每当发现MessageQueue中存在一条消息时，就会将它取出，并传递到Handler的handleMessage()方法中。每个线程中只会有一个Looper对象。</li>
</ol>
<h3> 前台 Service</h3>
<p>Service中的代码都是默认运行在主线程当中的，如果直接在Service里处理一些耗时的逻辑，就很容易出现ANR（Application Not Responding）的情况。</p>
<p>从Android 8.0系统开始，只有当应用保持在前台可见状态的情况下，Service才能保证稳定运行，一旦应用进入后台之后，Service随时都有可能被系统回收。而如果你希望Service能够一直保持运行状态，就可以考虑使用前台Service。</p>
<p>前台Service和普通Service最大的区别就在于，它一直会有一个正在运行的图标在系统的状态栏显示，下拉状态栏后可以看到更加详细的信息，非常类似于通知的效果。</p>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Android BroadcastReceiver</title>
    <id>https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/E-AndroidBroadcastReceiver.html</id>
    <link href="https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/E-AndroidBroadcastReceiver.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h2> Android BroadcastReceiver</h2>
<blockquote>
<p>配合意图过滤器 IntentFilter</p>
</blockquote>
<ol>
<li>标准广播（接收器）</li>
<li>有序广播</li>
</ol>
<p>类型：</p>
<ol>
<li>静态注册</li>
<li>动态注册</li>
</ol>
<p>系统广播：</p>
<ol>
<li>分钟到达广播</li>
<li>网络变更广播</li>
<li>定时管理器</li>
<li>横竖切换</li>
<li>回到桌面</li>
<li>任务列表画中画</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h2> Android BroadcastReceiver</h2>
<blockquote>
<p>配合意图过滤器 IntentFilter</p>
</blockquote>
<ol>
<li>标准广播（接收器）</li>
<li>有序广播</li>
</ol>
<p>类型：</p>
<ol>
<li>静态注册</li>
<li>动态注册</li>
</ol>
<p>系统广播：</p>
<ol>
<li>分钟到达广播</li>
<li>网络变更广播</li>
<li>定时管理器</li>
<li>横竖切换</li>
<li>回到桌面</li>
<li>任务列表画中画</li>
</ol>
<p>Android中的广播主要可以分为两种类型：标准广播和有序广播</p>
<p>静态注册的方式来接收（<a href="https://developer.android.google.cn/guide/components/broadcast-exceptions?hl=zh-cn" target="_blank" rel="noopener noreferrer">参考</a>）</p>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Android ContentProvider</title>
    <id>https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/F-AndroidContentProvider.html</id>
    <link href="https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/F-AndroidContentProvider.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Android ContentProvider</h1>

<h2> ContentResolver</h2>
<p>对于每一个应用程序来说，如果想要访问ContentProvider中共享的数据，就一定要借助ContentResolver类，可以通过Context中的getContentResolver()方法获取该类的实例。</p>
<p>ContentResolver中提供了一系列的方法用于对数据进行增删改查操作，其中insert()方法用于添加数据，update()方法用于更新数据，delete()方法用于删除数据，query()方法用于查询数据。有没有似曾相识的感觉？没错，SQLiteDatabase中也是使用这几个方法进行增删改查操作的，只不过它们在方法参数上稍微有一些区别。</p>]]></summary>
    <content type="html"><![CDATA[<h1> Android ContentProvider</h1>

<h2> ContentResolver</h2>
<p>对于每一个应用程序来说，如果想要访问ContentProvider中共享的数据，就一定要借助ContentResolver类，可以通过Context中的getContentResolver()方法获取该类的实例。</p>
<p>ContentResolver中提供了一系列的方法用于对数据进行增删改查操作，其中insert()方法用于添加数据，update()方法用于更新数据，delete()方法用于删除数据，query()方法用于查询数据。有没有似曾相识的感觉？没错，SQLiteDatabase中也是使用这几个方法进行增删改查操作的，只不过它们在方法参数上稍微有一些区别。</p>
<p>不同于SQLiteDatabase，ContentResolver中的增删改查方法都是不接收表名参数的，而是使用一个Uri参数代替，这个参数被称为内容URI。</p>
<p>内容URI给ContentProvider中的数据建立了唯一标识符，它主要由两部分组成：authority和path。</p>
<ol>
<li>authority是用于对不同的应用程序做区分的，一般为了避免冲突，会采用应用包名的方式进行命名。比如某个应用的包名是com.example.app，那么该应用对应的authority就可以命名为com.example.app.provider。</li>
<li>path则是用于对同一应用程序中不同的表做区分的，通常会添加到authority的后面。</li>
</ol>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>**query()**方法参数</th>
<th>对应<strong>SQL</strong>部分</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>uri</code></td>
<td><code>from table_name</code></td>
<td>指定查询某个应用程序下的某一张表</td>
</tr>
<tr>
<td><code>projection</code></td>
<td><code>select column1, column2</code></td>
<td>指定查询的列名</td>
</tr>
<tr>
<td><code>selection</code></td>
<td><code>where column = value</code></td>
<td>指定where的约束条件</td>
</tr>
<tr>
<td><code>selectionArgs</code></td>
<td><code>-</code></td>
<td>为where中的占位符提供具体的值</td>
</tr>
<tr>
<td><code>sortOrder</code></td>
<td><code>order by column1, column2</code></td>
<td>指定查询结果的排序方式</td>
</tr>
</tbody>
</table>
</div><p>getType()方法。它是所有的ContentProvider都必须提供的一个方法，用于获取Uri对象所对应的MIME类型。一个内容URI所对应的MIME字符串主要由3部分组成，Android对这3个部分做了如下格式规定。</p>
<ol>
<li>必须以<code>vnd</code>开头。</li>
<li>如果内容URI以路径结尾，则后接<code>android.cursor.dir/</code>；如果内容URI以id结尾，则后接<code>android.cursor.item/</code>。</li>
<li>最后接上<code>vnd.&lt;authority&gt;.&lt;path&gt;</code>。</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Android 界面绘制</title>
    <id>https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/G-Android%E7%95%8C%E9%9D%A2%E7%BB%98%E5%88%B6.html</id>
    <link href="https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/G-Android%E7%95%8C%E9%9D%A2%E7%BB%98%E5%88%B6.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Android 界面绘制</h1>

<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://developer.android.google.cn/guide/topics/resources/drawable-resource?hl=zh-cn#LayerList" target="_blank" rel="noopener noreferrer">可绘制资源</a></p>
</div>
<blockquote>
<p>控件都可以称为 View 或者视图</p>
</blockquote>]]></summary>
    <content type="html"><![CDATA[<h1> Android 界面绘制</h1>

<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://developer.android.google.cn/guide/topics/resources/drawable-resource?hl=zh-cn#LayerList" target="_blank" rel="noopener noreferrer">可绘制资源</a></p>
</div>
<blockquote>
<p>控件都可以称为 View 或者视图</p>
</blockquote>
<p>两种方式；</p>
<ol>
<li>XML</li>
<li>硬编码</li>
</ol>
<p>两种 API：</p>
<ol>
<li>View（自定义 View）</li>
<li>Compose</li>
</ol>
<p>界面的构成（使用 UDF 管理，状态向下流动、事件向上流动的这种模式称为单向数据流 (UDF)）：</p>
<ol>
<li>元素</li>
<li>状态</li>
</ol>
<p>中级控件</p>
<p>高级控件</p>
<p>自定义控件</p>
<h2> UDF</h2>
<p>状态向下流动、事件向上流动的这种模式称为单向数据流 (UDF)。这种模式对应用架构的影响如下：</p>
<ul>
<li>ViewModel 会存储并公开界面要使用的状态。界面状态是经过 ViewModel 转换的应用数据。</li>
<li>界面会向 ViewModel 发送用户事件通知。</li>
<li>ViewModel 会处理用户操作并更新状态。</li>
<li>更新后的状态将反馈给界面以进行呈现。</li>
<li>系统会对导致状态更改的所有事件重复上述操作。</li>
</ul>
<p>换句话说，UDF 有助于实现以下几点：</p>
<ul>
<li><strong>数据一致性</strong>。界面只有一个可信来源。</li>
<li><strong>可测试性</strong>。状态来源是独立的，因此可独立于界面进行测试。</li>
<li><strong>可维护性</strong>。状态的更改遵循明确定义的模式，即状态更改是用户事件及其数据拉取来源共同作用的结果。</li>
</ul>
<p>如需关于将 <code>LiveData</code> 用作可观察数据容器的介绍，请参阅<a href="https://developer.android.google.cn/codelabs/basic-android-kotlin-training-livedata?hl=zh-cn" target="_blank" rel="noopener noreferrer">此 Codelab</a>。如需关于 Kotlin 数据流的类似介绍，请参阅 <a href="https://developer.android.google.cn/kotlin/flow?hl=zh-cn" target="_blank" rel="noopener noreferrer">Android 上的 Kotlin 数据流</a>。</p>
<h2> 用户事件</h2>
<p>如果用户事件与修改界面元素的状态（如可展开项的状态）相关，界面便可以直接处理这些事件。如果事件需要执行业务逻辑（如刷新屏幕上的数据），则应用由 ViewModel 处理此事件。</p>
<h2> 尺寸</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://www.jb51.net/article/113125.htm" target="_blank" rel="noopener noreferrer">Android中的常用尺寸单位（dp、sp）快速入门教程</a></p>
</div>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>单位/概念</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>px</td>
<td>像素（Pixel），是屏幕上的最小可操作单元，通常用于表示图像或屏幕上的点</td>
</tr>
<tr>
<td>resolution</td>
<td>分辨率，表示屏幕上水平和垂直方向的像素数量，通常以宽x高的形式表示，例如1920x1080</td>
</tr>
<tr>
<td>dpi</td>
<td>每英寸点数（Dots Per Inch），表示每英寸的线性像素密度，用于测量屏幕或图像的清晰度</td>
</tr>
<tr>
<td>density</td>
<td>密度，通常指屏幕像素密度或显示设备的像素密度，通常以DPI（每英寸点数）表示</td>
</tr>
<tr>
<td>inch</td>
<td>英寸，1 英寸约等于2.54厘米，主要用来描述手机屏幕的大小</td>
</tr>
<tr>
<td>pt</td>
<td>通常用来作为字体的尺寸单位，1 pt相当于1/72英寸</td>
</tr>
<tr>
<td>sp</td>
<td>大部分人只知道它通常用作字体的尺寸单位，实际大小还与具体设备上的用户设定有关</td>
</tr>
<tr>
<td>dp（dip）</td>
<td>即设备无关像素（device independent pixels），这种尺寸单位在不同设备上的物理大小相同</td>
</tr>
</tbody>
</table>
</div><ul>
<li>
<p><code>dpi</code>：像素密度</p>
</li>
<li>
<p><code>ldpi</code>：对应的dpi范围为0 ~ 120，也就是说每英寸有0到120个像素点的屏幕的屏幕密度都属于</p>
</li>
<li>
<p><code>mdpi</code>：dpi范围为120 ~ 160</p>
</li>
<li>
<p><code>hdpi</code>：dpi范围为160 ~ 240</p>
</li>
<li>
<p><code>xhdpi</code>：dpi范围为240~320</p>
</li>
<li>
<p><code>xxhdpi</code>：dpi范围为320~480</p>
</li>
<li>
<p><code>px = dip x dpi / 160</code></p>
</li>
</ul>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>对于相同尺寸的手机，即使分辨率不一样，同 dp 的组件占用屏幕的比例也相同</p>
</div>
<h2> 视图/布局</h2>
<p>视图：</p>
<ol>
<li><code>ScrollView</code> 垂直滚动视图</li>
<li><code>HorizontalScrollView</code> 水平滚动视图</li>
</ol>
<p>布局（可以自定义后引入，组件化思想）：</p>
<ol>
<li><code>LinearLayout</code> 线性布局：水平、垂直、权重</li>
<li><code>RelativeLayout</code> 相对布局：<a href="https://blog.csdn.net/ZQIR12/article/details/127822301" target="_blank" rel="noopener noreferrer">相关文章</a></li>
<li><code>GridLayout</code> 网格布局</li>
<li><code>FrameLayout</code>：帧布局（外加 Fragment）</li>
</ol>
<p>其他：</p>
<ol>
<li>layout_width、layout_height：wrap_content、match_parent、固定大小</li>
<li>ViewGroup、Context（Resource）</li>
<li>对齐（layout_gravity、gravity）</li>
<li>orientation=vertical/horizontal</li>
</ol>
<h2> 简单控件</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://blog.csdn.net/weixin_49770443/article/details/117327634" target="_blank" rel="noopener noreferrer">Android 常用的控件总结</a></p>
</div>
<div class="hint-container note">
<p class="hint-container-title">说明（XML）</p>
<p>注意点：需要注意命名空间</p>
<p>代码中获取 XML 中的组件使用 R 类（gradle 自动生成）直接获取</p>
<p>层次结构：</p>
<ol>
<li>layout</li>
<li>id</li>
</ol>
<p>引用：</p>
<ol>
<li>唯一 ID：@+id/</li>
<li>引用组件：@string/</li>
</ol>
</div>
<p>文本：设置文本的：内容、颜色、宽高</p>
<ol>
<li><code>TextView</code>（文本框）</li>
<li><code>EditView</code>（输入框）</li>
<li><code>AutoCompleteTextView</code></li>
</ol>
<p>选择框：</p>
<ol>
<li><code>RadioGroup</code>（单选）</li>
<li><code>CheckBox</code>（多选）</li>
</ol>
<p>按钮：</p>
<ol>
<li><code>Button</code>：由 <code>TextView</code> 派生而来
<ol>
<li><code>onClick </code>点击事件（不推荐直接使用，应当使用监听器）</li>
<li><code>setOnClickListener</code> 设置监听（实现 <code>View.onOnClickListener</code>）</li>
<li><code>setOnLongClickListener </code>长按点击事件</li>
<li>双击事件</li>
<li>可用/禁用</li>
</ol>
</li>
<li><code>ImageButton</code>（图像按钮）</li>
<li><code>ToggleButton</code>（开关）</li>
<li><code>RadioButtun</code>（单选按钮）</li>
</ol>
<p>图像：</p>
<ol>
<li><code>ImageView</code></li>
<li><code>ImageButton</code>：继承于 <code>ImageView</code></li>
<li>同时展示文本和图像：<code>ImageView</code> + <code>TextView</code>、Button 的 drawable 属性</li>
<li><code>ImageSwitcher</code> / <code>Gallery</code></li>
</ol>
<p>列表：</p>
<ol>
<li><code>Spinner</code>：下拉列表</li>
<li><code>ListView</code>：列表（最常用）</li>
</ol>
<p>日期/时间：</p>
<ol>
<li><code>DatePicker</code>：日期选择器</li>
<li><code>TimePicker</code>：时间选择器</li>
</ol>
<p>提示/对话框：</p>
<ol>
<li><code>Toast</code>：提示</li>
<li><code>Dialog</code>：对话</li>
</ol>
<p>进度条：</p>
<ol>
<li><code>ProgressBar</code>：进度条</li>
<li><code>ProgressDialog</code>：对话框中的进度条</li>
</ol>
<p>其他：</p>
<ol>
<li><code>SeekBar</code>：拖动条</li>
<li><code>RatingBar</code>：评分组件</li>
</ol>
<h2> 高级控件</h2>
<p>适配器：</p>
<ol>
<li>数组适配器</li>
<li>简单适配器</li>
<li>基础适配器</li>
</ol>
<p>控件：</p>
<ol>
<li>下拉列表</li>
<li>列表类视图
<ol>
<li>ListView</li>
<li>RecyclerView</li>
<li>GridView</li>
</ol>
</li>
<li>翻页类视图
<ol>
<li>ViewPager（可以做引导页）</li>
<li>PagerTabStrip</li>
</ol>
</li>
<li>Fragment（处理适配）
<ol>
<li>生命周期</li>
<li>静态注册、动态注册</li>
</ol>
</li>
<li>WebView 网页控件</li>
<li>Snackbar</li>
<li>DrawerLayout</li>
<li>NavigationView/circleimageview</li>
<li>FloatingActionButton</li>
<li>CoordinatorLayout/FrameLayout</li>
<li>MaterialCardView</li>
<li>AppBarLayout</li>
<li>SwipeRefreshLayout</li>
<li>CollapsingToolbarLayout</li>
</ol>
<h2> 界面渲染</h2>
<ul>
<li>每一个Activity都拥有一个Window对象的实例。这个实例实际是PhoneWindow类型的。那么PhoneWindow从名字很容易看出，它应该是Window的儿子</li>
<li>每一个Activity都有一个PhoneWindow对象，通过setContentView()设置的布局是被放到DecorView中，DecorView是视图树的最顶层</li>
<li>DecorView继承了FrameLayout，并且一般情况下，它会在先添加一个预设的布局。比如DecorCaptionView，它是从上到下放置自己的子布局的，相当于一个LinearLayout。通常它会有一个标题栏，然后有一个容纳内容的mContentRoot，这个布局的类型视情况而定。我们希望显示的布局就是放到了mContentRoot中。</li>
<li>WindowManager是在Activity执行attach()时被创建的，attach()方法是在onCreate()之前被调用的。</li>
<li>WindowManagerImpl持有了PhoneWindow的引用，因此它可以对PhoneWindow进行管理。同时它还持有一个非常重要的引用mGlobal。这个mGlobal指向一个WindowManagerGlobal类型的单例对象，这个单例每个应用程序只有唯一的一个。在图中，我说明了WindowManagerGlobal维护了本应用程序内所有Window的DecorView，以及与每一个DecorView对应关联的ViewRootImpl。这也就是为什么我前面提到过，WindowManager只是一个代理，实际的管理功能是通过WindowManagerGlobal实现的。</li>
<li>WindowManagerImpl确实只是WindowManagerGlobal的一个代理而已。同时，上面这个方法在整个Android的视图框架流程中十分的重要。我们知道，在Activity执行onResume()后界面就要开始渲染了。原因是在onResume()时，会调用WindowManager的addView()方法(实际最后调用的是WindowManagerGlobal的addView()方法)，把视图添加到窗口上。</li>
</ul>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Android 数据存储</title>
    <id>https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/H-Android%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8.html</id>
    <link href="https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/H-Android%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h2> Android 数据存储</h2>

<div class="hint-container note">
<p class="hint-container-title">数据格式</p>
<ol>
<li>关系型数据</li>
<li>文本文件</li>
</ol>
</div>
<h3> SharePreference</h3>
<blockquote>
<p>轻量级的存储工具，键值对形式</p>
</blockquote>
<p>适用于：</p>
<ol>
<li>简单且孤立的数据</li>
<li>文本格式的数据</li>
<li>需要持久化存储的数据</li>
</ol>
<p><strong>Context</strong>类中的**getSharedPreferences()**方法：</p>]]></summary>
    <content type="html"><![CDATA[<h2> Android 数据存储</h2>

<div class="hint-container note">
<p class="hint-container-title">数据格式</p>
<ol>
<li>关系型数据</li>
<li>文本文件</li>
</ol>
</div>
<h3> SharePreference</h3>
<blockquote>
<p>轻量级的存储工具，键值对形式</p>
</blockquote>
<p>适用于：</p>
<ol>
<li>简单且孤立的数据</li>
<li>文本格式的数据</li>
<li>需要持久化存储的数据</li>
</ol>
<p><strong>Context</strong>类中的**getSharedPreferences()**方法：</p>
<ol>
<li>第一个参数用于指定SharedPreferences文件的名称，如果指定的文件不存在则会创建一个，SharedPreferences文件都是存放在<code>/data/data/&lt;packagename&gt;/shared_prefs/</code>目录下的；</li>
<li>第二个参数用于指定操作模式，目前只有默认的MODE_PRIVATE这一种模式可选，它和直接传入0的效果是相同的，表示只有当前的应用程序才可以对这个SharedPreferences文件进行读写。</li>
</ol>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>其他几种操作模式均已被废弃，MODE_WORLD_READABLE和MODE_WORLD_WRITEABLE这两种模式是在Android 4.2版本中被废弃的，MODE_MULTI_PROCESS模式是在Android 6.0版本中被废弃的s<strong>Activity</strong>类中的**getPreferences()**方法</p>
</div>
<h3> LiveData</h3>
<p><a href="https://developer.android.google.cn/reference/androidx/lifecycle/LiveData?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>LiveData</code></a> 是一种可观察的数据存储器类。与常规的可观察类不同，LiveData 具有生命周期感知能力，意指它遵循其他应用组件（如 activity、fragment 或 service）的生命周期。这种感知能力可确保 LiveData 仅更新处于活跃生命周期状态的应用组件观察者。</p>
<h3> SQLite</h3>
<blockquote>
<p>TODO SQLiteDatabase、SQLiteOpenHelper</p>
</blockquote>
<h3> Jetpack Room</h3>
<blockquote>
<p>TODO 基于注解简化 SQLite</p>
</blockquote>
<p>可能需要亲自写一些解析代码去从Sqlite读取数据对象，或者进行相反的操作。如果可以序列化数据对象，例如通过Gson，只持久化存储最终是字符串。通过这种方式虽然会降低性能，但是从另一个角度来讲，你不需要为每一个数据结构声明表结构。</p>
<p>使用ORM我们通常不推荐使用对象关系映射第三方库除非你有非常复杂的数据结构，并且你确定你真的需要它。他们通常比较复杂，并且需要时间去学习。如果你决定了在你的应用中使用ORM，你应该注意它是否是线程安全的，而对于目前大多数ORM解决方案都是非线程安全的。</p>
<p>使用StethoStetho 是一个Facebook 开源的Android调试工具，它是Chrome Developer Tools的扩展。通过它可以检测应用的网络情况。它也允许你可以检测应用的数据库，shared preferences。但是，你应该确保Stetho只有在Debug状态下得以开启，而不是在正式发布版本中。</p>
<p>使用LeakCanaryLeakCanary 是可以在应用运行中检测，定位内存泄露的Java库。使用它应是你开发应用过程中的一部分。更多详细的配置和使用情况请参照wiki。你只需要记得它在你的正式版本中你是不需要配置的。</p>
<h3> 内外存储</h3>
<p>内部存储（内存）</p>
<p>外部存储分为：公共控件和私有空间</p>
<h3> 文件操作</h3>
<p>Context类中提供了一个openFileOutput()方法，可以用于将数据存储到指定的文件中。这个方法接收两个参数：</p>
<ol>
<li>第一个参数是文件名，在文件创建的时候使用，注意这里指定的文件名不可以包含路径，因为所有的文件都默认存储到<code>/data/data/&lt;package name&gt;/files/</code>目录下；</li>
<li>第二个参数是文件的操作模式，主要有MODE_PRIVATE和MODE_APPEND两种模式可选，默认是MODE_PRIVATE，表示当指定相同文件名的时候，所写入的内容将会覆盖原文件中的内容，而MODE_APPEND则表示如果该文件已存在，就往文件里面追加内容，不存在就创建新文件。</li>
</ol>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>其实文件的操作模式本来还有另外两种：MODE_WORLD_READABLE和MODE_WORLD_WRITEABLE。这两种模式表示允许其他应用程序对我们程序中的文件进行读写操作，不过由于这两种模式过于危险，很容易引起应用的安全漏洞，已在Android 4.2版本中被废弃。</p>
</div>
<h3> 其他存储方式</h3>
<ol>
<li>
<p>可以通过 Application 对象存储数据。</p>
</li>
<li>
<p>如果SharedPreferences不足以满足你的需求，那么你可以使用平台标准的ContentProviders，它不仅快速，并且线程安全。使用ContentProviders的唯一问题是建立他们需要大量的模板代码，并且少有高质量的教程。如果可以，我们可以通过使用第三方库Schematic，极大降低了冗余操作，去生ContentProviders。</p>
</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Android 项目日志</title>
    <id>https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/X-Android%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97.html</id>
    <link href="https://gzwrrr.github.io/article/android/A-Android%E5%9F%BA%E7%A1%80/X-Android%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Android 项目日志</h1>
<blockquote>
<p>五个级别（Log）</p>
</blockquote>
<p>APP 开发模式</p>
<ol>
<li>原生开发（Java + Kotlin）重用户体验</li>
<li>混合开发（Flutter、前端）</li>
</ol>
<p>也有可能使用 JNI 调用 C++ 的代码</p>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>调用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Log.v()</code></td>
<td>用于打印那些最为琐碎的、意义最小的日志信息。对应级别verbose，是Android日志里面级别最低的一种</td>
</tr>
<tr>
<td><code>Log.d()</code></td>
<td>用于打印一些调试信息，这些信息对你调试程序和分析问题应该是有帮助的。对应级别debug，比verbose高一级</td>
</tr>
<tr>
<td><code>Log.i()</code></td>
<td>用于打印一些比较重要的数据，这些数据应该是你非常想看到的、可以帮你分析用户行为的数据。对应级别info，比debug高一级</td>
</tr>
<tr>
<td><code>Log.w()</code></td>
<td>用于打印一些警告信息，提示程序在这个地方可能会有潜在的风险，最好去修复一下这些出现警告的地方。对应级别warn，比info高一级</td>
</tr>
<tr>
<td><code>Log.e()</code></td>
<td>用于打印程序中的错误信息，比如程序进入了catch语句中。当有错误信息打印出来的时候，一般代表你的程序出现严重问题了，必须尽快修复。对应级别error，比warn高一级</td>
</tr>
</tbody>
</table>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> Android 项目日志</h1>
<blockquote>
<p>五个级别（Log）</p>
</blockquote>
<p>APP 开发模式</p>
<ol>
<li>原生开发（Java + Kotlin）重用户体验</li>
<li>混合开发（Flutter、前端）</li>
</ol>
<p>也有可能使用 JNI 调用 C++ 的代码</p>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>调用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Log.v()</code></td>
<td>用于打印那些最为琐碎的、意义最小的日志信息。对应级别verbose，是Android日志里面级别最低的一种</td>
</tr>
<tr>
<td><code>Log.d()</code></td>
<td>用于打印一些调试信息，这些信息对你调试程序和分析问题应该是有帮助的。对应级别debug，比verbose高一级</td>
</tr>
<tr>
<td><code>Log.i()</code></td>
<td>用于打印一些比较重要的数据，这些数据应该是你非常想看到的、可以帮你分析用户行为的数据。对应级别info，比debug高一级</td>
</tr>
<tr>
<td><code>Log.w()</code></td>
<td>用于打印一些警告信息，提示程序在这个地方可能会有潜在的风险，最好去修复一下这些出现警告的地方。对应级别warn，比info高一级</td>
</tr>
<tr>
<td><code>Log.e()</code></td>
<td>用于打印程序中的错误信息，比如程序进入了catch语句中。当有错误信息打印出来的时候，一般代表你的程序出现严重问题了，必须尽快修复。对应级别error，比warn高一级</td>
</tr>
</tbody>
</table>
</div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Android 网络通信</title>
    <id>https://gzwrrr.github.io/article/android/B-Android%E8%BF%9B%E9%98%B6/Android%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1.html</id>
    <link href="https://gzwrrr.github.io/article/android/B-Android%E8%BF%9B%E9%98%B6/Android%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Android 网络通信</h1>

<h2> 异步消息</h2>
<p><strong>四大组件：</strong></p>
<ol>
<li><code>Message</code></li>
<li><code>MessageQueue</code></li>
<li><code>Handler</code></li>
<li><code>Looper</code></li>
</ol>
<h3> AsyncTask</h3>
<p>重写AsyncTask中的几个方法才能完成对异步任务的定制。经常需要重写的方法有以下4个：</p>
<ol>
<li>
<p><code>onPreExecute()</code>：这个方法会在后台任务开始执行之前调用，用于进行一些界面上的初始化操作，比如显示一个进度条对话框等</p>
</li>
<li>
<p><code>doInBackground(Params...)</code>：这个方法中的所有代码都会在子线程中运行，我们应该在这里去处理所有的耗时任务。任务一旦完成，就可以通过return语句将任务的执行结果返回，如果AsyncTask的第三个泛型参数指定的是Unit，就可以不返回任务执行结果。注意，在这个方法中是不可以进行UI操作的，如果需要更新UI元素，比如说反馈当前任务的执行进度，可以调用<code>publishProgress (Progress...)</code>方法来完成。</p>
</li>
<li>
<p><code>onProgressUpdate(Progress...)</code>：当在后台任务中调用了<code>publishProgress(Progress...)</code>方法后，<code>onProgressUpdate (Progress...)</code>方法就会很快被调用，该方法中携带的参数就是在后台任务中传递过来的。在这个方法中可以对UI进行操作，利用参数中的数值就可以对界面元素进行相应的更新。</p>
</li>
<li>
<p><code>onPostExecute(Result)</code>：当后台任务执行完毕并通过return语句进行返回时，这个方法就很快会被调用。返回的数据会作为参数传递到此方法中，可以利用返回的数据进行一些UI操作，比如说提醒任务执行的结果，以及关闭进度条对话框等。</p>
</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> Android 网络通信</h1>

<h2> 异步消息</h2>
<p><strong>四大组件：</strong></p>
<ol>
<li><code>Message</code></li>
<li><code>MessageQueue</code></li>
<li><code>Handler</code></li>
<li><code>Looper</code></li>
</ol>
<h3> AsyncTask</h3>
<p>重写AsyncTask中的几个方法才能完成对异步任务的定制。经常需要重写的方法有以下4个：</p>
<ol>
<li>
<p><code>onPreExecute()</code>：这个方法会在后台任务开始执行之前调用，用于进行一些界面上的初始化操作，比如显示一个进度条对话框等</p>
</li>
<li>
<p><code>doInBackground(Params...)</code>：这个方法中的所有代码都会在子线程中运行，我们应该在这里去处理所有的耗时任务。任务一旦完成，就可以通过return语句将任务的执行结果返回，如果AsyncTask的第三个泛型参数指定的是Unit，就可以不返回任务执行结果。注意，在这个方法中是不可以进行UI操作的，如果需要更新UI元素，比如说反馈当前任务的执行进度，可以调用<code>publishProgress (Progress...)</code>方法来完成。</p>
</li>
<li>
<p><code>onProgressUpdate(Progress...)</code>：当在后台任务中调用了<code>publishProgress(Progress...)</code>方法后，<code>onProgressUpdate (Progress...)</code>方法就会很快被调用，该方法中携带的参数就是在后台任务中传递过来的。在这个方法中可以对UI进行操作，利用参数中的数值就可以对界面元素进行相应的更新。</p>
</li>
<li>
<p><code>onPostExecute(Result)</code>：当后台任务执行完毕并通过return语句进行返回时，这个方法就很快会被调用。返回的数据会作为参数传递到此方法中，可以利用返回的数据进行一些UI操作，比如说提醒任务执行的结果，以及关闭进度条对话框等。</p>
</li>
</ol>
<h2> 网络请求</h2>
<p>在过去，Android上发送HTTP请求一般有两种方式：<code>HttpURLConnection</code>和<code>HttpClient</code>。不过由于HttpClient存在API数量过多、扩展困难等缺点，Android团队越来越不建议我们使用这种方式。</p>
<p>在Android 6.0系统中，HttpClient的功能被完全移除了，标志着此功能被正式弃用，因此本小节我们就学习一下现在官方建议使用的<code>HttpURLConnection</code>的用法。</p>
<p>如今一般采用：</p>
<ol>
<li>OkHttp</li>
<li>Retrofit</li>
</ol>
<h2> 并发</h2>
<p>Kotlin 中线程参数主要有以下3种值可选：</p>
<ol>
<li><code>Dispatchers.Default</code></li>
<li><code>Dispatchers.IO</code></li>
<li><code>Dispatchers.Main</code></li>
</ol>
<p><code>suspendCoroutine</code>函数必须在协程作用域或挂起函数中才能调用，它接收一个Lambda表达式参数，主要作用是将当前协程立即挂起，然后在一个普通的线程中执行Lambda表达式中的代码。Lambda表达式的参数列表上会传入一个Continuation参数，调用它的<code>resume()</code>方法或<code>resumeWithException()</code>可以让协程恢复执行</p>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Android 进阶相关文章</title>
    <id>https://gzwrrr.github.io/article/android/B-Android%E8%BF%9B%E9%98%B6/Android%E8%BF%9B%E9%98%B6%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0.html</id>
    <link href="https://gzwrrr.github.io/article/android/B-Android%E8%BF%9B%E9%98%B6/Android%E8%BF%9B%E9%98%B6%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Android 进阶相关文章</h1>
<ol>
<li><a href="https://www.jianshu.com/p/9ecea420eb52" target="_blank" rel="noopener noreferrer">3分钟看懂Activity启动流程</a></li>
<li><a href="https://mp.weixin.qq.com/s/zNXi6g7AAWz3lzxocXwZyg" target="_blank" rel="noopener noreferrer">用两张图告诉你，为什么你的App会卡顿?</a></li>
<li><a href="https://www.jianshu.com/u/c50b715ccaeb" target="_blank" rel="noopener noreferrer">简书 – Season_zlc</a> – <a href="https://mp.weixin.qq.com/s/5_59HK4ktvgkum8hac3xDQ" target="_blank" rel="noopener noreferrer">RxJava入门系列</a></li>
<li><a href="https://mp.weixin.qq.com/s/lSg6EFcaSoVtlLcpfTBedA" target="_blank" rel="noopener noreferrer">2017腾讯实习生Android客户端开发面试总结</a></li>
<li><a href="https://mp.weixin.qq.com/s/0HefjPhItpwyLU_93Uc5aA" target="_blank" rel="noopener noreferrer">把公众号推送的文章干货，整理了一波！！</a></li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> Android 进阶相关文章</h1>
<ol>
<li><a href="https://www.jianshu.com/p/9ecea420eb52" target="_blank" rel="noopener noreferrer">3分钟看懂Activity启动流程</a></li>
<li><a href="https://mp.weixin.qq.com/s/zNXi6g7AAWz3lzxocXwZyg" target="_blank" rel="noopener noreferrer">用两张图告诉你，为什么你的App会卡顿?</a></li>
<li><a href="https://www.jianshu.com/u/c50b715ccaeb" target="_blank" rel="noopener noreferrer">简书 – Season_zlc</a> – <a href="https://mp.weixin.qq.com/s/5_59HK4ktvgkum8hac3xDQ" target="_blank" rel="noopener noreferrer">RxJava入门系列</a></li>
<li><a href="https://mp.weixin.qq.com/s/lSg6EFcaSoVtlLcpfTBedA" target="_blank" rel="noopener noreferrer">2017腾讯实习生Android客户端开发面试总结</a></li>
<li><a href="https://mp.weixin.qq.com/s/0HefjPhItpwyLU_93Uc5aA" target="_blank" rel="noopener noreferrer">把公众号推送的文章干货，整理了一波！！</a></li>
</ol>
<h2> 其他</h2>
<ol>
<li>如果 ViewModel 执行长时间运行的操作，则还要负责将相应逻辑移至后台线程。Kotlin 协程是管理并发操作的绝佳方式，Jetpack 架构组件则为其提供内置支持。如需详细了解如何在 Android 应用中使用协程，请参阅 <a href="https://developer.android.google.cn/kotlin/coroutines?hl=zh-cn" target="_blank" rel="noopener noreferrer">Android 上的 Kotlin 协程</a>。</li>
<li>公开 API
<ol>
<li>一次性操作：在 Kotlin 中，数据层应公开挂起函数；对于 Java 编程语言，数据层应公开用于提供回调来通知操作结果的函数，或公开 RxJava <code>Single</code>、<code>Maybe</code> 或 <code>Completable</code> 类型。</li>
<li>接收关于数据随时间变化的通知：在 Kotlin 中，数据层应公开<a href="https://developer.android.google.cn/kotlin/flow?hl=zh-cn" target="_blank" rel="noopener noreferrer">数据流</a>；对于 Java 编程语言，数据层应公开用于发出新数据的回调，或公开 RxJava <code>Observable</code> 或 <code>Flowable</code> 类型。</li>
</ol>
</li>
<li>线程处理
<ol>
<li>请注意，大部分数据源都已提供具有主线程安全性的 API，例如 <a href="https://developer.android.google.cn/training/data-storage/room?hl=zh-cn" target="_blank" rel="noopener noreferrer">Room</a>、<a href="https://square.github.io/retrofit/" target="_blank" rel="noopener noreferrer">Retrofit</a> 或 <a href="https://ktor.io/" target="_blank" rel="noopener noreferrer">Ktor</a> 提供的挂起方法调用。在这些 API 可用时，您的仓库可以充分利用它们。</li>
<li>如需详细了解线程处理，请参阅<a href="https://developer.android.google.cn/guide/background?hl=zh-cn" target="_blank" rel="noopener noreferrer">后台处理指南</a>。对于 Kotlin 用户，建议使用<a href="https://developer.android.google.cn/kotlin/coroutines?hl=zh-cn" target="_blank" rel="noopener noreferrer">协程</a>。如需了解针对 Java 编程语言的推荐选项，请参阅<a href="https://developer.android.google.cn/guide/background/threading?hl=zh-cn" target="_blank" rel="noopener noreferrer">在后台线程中运行 Android 任务</a>。</li>
</ol>
</li>
<li>paging：Paging 库可帮助您加载和显示来自本地存储或网络中更大的数据集中的数据页面。此方法可让您的应用更高效地利用网络带宽和系统资源。Paging 库的组件旨在契合推荐的 <a href="https://developer.android.google.cn/jetpack/docs/guide?hl=zh-cn" target="_blank" rel="noopener noreferrer">Android 应用架构</a>，流畅集成其他 <a href="https://developer.android.google.cn/jetpack?hl=zh-cn" target="_blank" rel="noopener noreferrer">Jetpack</a> 组件，并提供一流的 Kotlin 支持。</li>
<li>可能是史上最简单的！一张图3分钟让你明白Activity启动流程，不看后悔！<a href="http://www.jianshu.com/p/9ecea420eb52" target="_blank" rel="noopener noreferrer">3分钟看懂Activity启动流程 - 简书</a></li>
<li>开源项目：干货来袭，推荐几款开源的Kotlin的Android项目<a href="https://mp.weixin.qq.com/s/RV8kj1ZnFd35ZmGBwdxAxw%E3%80%81https://mp.weixin.qq.com/s/x4zMgl7wRRVurAWSa4GqHQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/RV8kj1ZnFd35ZmGBwdxAxw、https://mp.weixin.qq.com/s/x4zMgl7wRRVurAWSa4GqHQ</a></li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Jetpack 概览</title>
    <id>https://gzwrrr.github.io/article/android/C-Jetpack/A-Jetpack%E6%A6%82%E8%A7%88.html</id>
    <link href="https://gzwrrr.github.io/article/android/C-Jetpack/A-Jetpack%E6%A6%82%E8%A7%88.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Jetpack 概览</h1>

<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<ul>
<li>
<p><a href="https://developer.android.google.cn/jetpack?hl=zh-cn" target="_blank" rel="noopener noreferrer">Jetpack 官方文档</a></p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/334350927" target="_blank" rel="noopener noreferrer">Jetpack 是什么？</a></p>
</li>
</ul>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> Jetpack 概览</h1>

<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<ul>
<li>
<p><a href="https://developer.android.google.cn/jetpack?hl=zh-cn" target="_blank" rel="noopener noreferrer">Jetpack 官方文档</a></p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/334350927" target="_blank" rel="noopener noreferrer">Jetpack 是什么？</a></p>
</li>
</ul>
</div>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>组件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/activity?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>activity</code></a></td>
<td>访问基于 <code>activity </code>构建的可组合 API。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/appcompat?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>appcompat</code></a></td>
<td>允许在平台的旧版 API 上访问新 API（很多使用 <code>Material Design</code>）。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/appsearch?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>appsearch</code></a></td>
<td>为用户构建自定义应用内搜索功能。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/camera?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>camera</code></a></td>
<td>构建移动相机应用。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/compose?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>compose</code></a></td>
<td><code>Jetpack Compose</code>是一种声明式的UI框架，用于构建安卓应用的用户界面。它通过使用<code>Kotlin</code>语言来定义应用的界面结构和外观，取代了传统的XML布局和编程方式。<code>Compose</code>简化了UI开发过程，提供了更简洁、直观和灵活的方式来构建应用界面</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/databinding?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>databinding</code></a></td>
<td><code>Data Binding</code>是一种用于实现数据和界面绑定的库。它允许开发者在布局文件中直接绑定数据对象，使数据的变化能够自动反映在界面上，减少了手动更新界面的工作，即使用声明性格式将布局中的界面组件绑定到应用中的数据源。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/fragment?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>fragment</code></a></td>
<td>将您的应用细分为在一个 Activity 中托管的多个独立屏幕。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/hilt?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>hilt</code></a></td>
<td>扩展了 <code>Dagger Hilt </code>的功能，以实现 <code>androidx </code>库中某些类的依赖项注入。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/lifecycle?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>lifecycle</code></a></td>
<td>构建生命周期感知型组件，这些组件可以根据 <code>activity </code>或 <code>fragment</code> 的当前生命周期状态调整行为。</td>
</tr>
<tr>
<td><a href="https://material.io/develop/android" target="_blank" rel="noopener noreferrer"><code>Material Design 组件</code></a></td>
<td>适用于 <code>Android</code> 的模块化、可自定义 <code>Material Design</code> 界面组件。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/navigation?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>navigation</code></a></td>
<td>构建和组织应用内界面，处理深层链接以及在屏幕之间导航。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/paging?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>paging</code></a></td>
<td>在页面中加载数据，并在 <code>RecyclerView </code>中呈现。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/room?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>room</code></a></td>
<td>创建、存储和管理由 <code>SQLite </code>数据库支持的持久性数据。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/test?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>test</code></a></td>
<td>在 <code>Android </code>中进行测试。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/work?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>work</code></a></td>
<td>调度和执行可延期且基于约束条件的后台任务。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/ads?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>ads</code></a></td>
<td>获取广告 ID（无论是否通过 Play 服务）。</td>
</tr>
<tr>
<td><a href="https://developer.android.google.cn/jetpack/androidx/releases/annotation?hl=zh-cn" target="_blank" rel="noopener noreferrer"><code>annotation</code></a></td>
<td>公开元数据，帮助工具开发者和其他开发者了解您的应用代码。</td>
</tr>
<tr>
<td><code>ViewModel</code></td>
<td><code>ViewModel</code>是一种用于管理UI相关数据的架构组件。它可以存储和管理与界面相关的数据，并在配置变化（如旋转屏幕）时保持数据的一致性，以避免数据的丢失和重新加载</td>
</tr>
<tr>
<td><code>LiveData</code></td>
<td><code>LiveData</code>是一种可观察的数据持有者类，它可以感知生命周期并提供数据的更新和通知机制。<code>LiveData</code>可以与<code>ViewModel</code>一起使用，以实现数据的观察和响应</td>
</tr>
</tbody>
</table>
</div><h2> 前言</h2>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>Jetpack 非常庞大，主要由基础、架构、行为、界面这4个部分组成。</p>
<p>能够帮助开发者更好更方便地构建应用程序的组件，Google都将其纳入了Jetpack</p>
</div>
<h2> ViewModel</h2>
<div class="language-groovy line-numbers-mode" data-ext="groovy"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//android/20231001/viewmodel生命周期.png" alt="image-20230928160334188" tabindex="0" loading="lazy"><figcaption>image-20230928160334188</figcaption></figure>
<h2> Lifecycles</h2>
<p>在编写Android应用程序的时候，可能会经常遇到需要感知Activity生命周期的情况。比如说，某个界面中发起了一条网络请求，但是当请求得到响应的时候，界面或许已经关闭了，这个时候就不应该继续对响应的结果进行处理。</p>
<p>因此，我们需要能够时刻感知到Activity的生命周期，以便在适当的时候进行相应的逻辑控制。</p>
<blockquote>
<p>TODO</p>
</blockquote>
<h2> LiveData</h2>
<blockquote>
<p>此外还应该关注：RxJava、Flow</p>
</blockquote>
<ol>
<li>
<p>LiveData是Jetpack提供的一种响应式编程组件，它可以包含任何类型的数据，并在数据发生变化的时候通知给观察者。LiveData特别适合与ViewModel结合在一起使用，虽然它也可以单独用在别的地方，但是在绝大多数情况下，它是使用在ViewModel当中的</p>
</li>
<li>
<p>千万不可以把Activity的实例传给ViewModel，ViewModel的生命周期是长于Activity的，如果把Activity的实例传给ViewModel，就很有可能会因为Activity无法释放而造成内存泄漏</p>
</li>
<li>
<p>LiveData可以包含任何类型的数据，并在数据发生变化的时候通知给观察者。</p>
</li>
<li>
<p>如果你需要在子线程中给LiveData设置数据，一定要调用postValue()方法，而不能再使用setValue()方法，否则会发生崩溃。</p>
</li>
</ol>
<blockquote>
<p>TODO</p>
</blockquote>
<h3> map 和 switchMap</h3>
<p>LiveData的基本用法虽说可以满足大部分的开发需求，但是当项目变得复杂之后，可能会出现一些更加特殊的需求。</p>
<p>LiveData为了能够应对各种不同的需求场景，提供了两种转换方法：<code>map()</code>和<code>switchMap()</code>方法。</p>
<p><code>switchMap()</code>的使用场景非常固定：如果ViewModel中的某个LiveData对象是调用另外的方法获取的，那么我们就可以借助<code>switchMap()</code>方法，将这个LiveData对象转换成另外一个可观察的LiveData对象。</p>
<blockquote>
<p>TODO</p>
</blockquote>
<h3> 感知组件生命周期</h3>
<ol>
<li>LiveData之所以能够成为Activity与ViewModel之间通信的桥梁，并且还不会有内存泄漏的风险，靠的就是Lifecycles组件。LiveData在内部使用了Lifecycles组件来自我感知生命周期的变化，从而可以在Activity销毁的时候及时释放引用，避免产生内存泄漏的问题。</li>
<li>由于要减少性能消耗，当Activity处于不可见状态的时候（比如手机息屏，或者被其他的Activity遮挡），如果LiveData中的数据发生了变化，是不会通知给观察者的。只有当Activity重新恢复可见状态时，才会将数据通知给观察者，而LiveData之所以能够实现这种细节的优化，依靠的还是Lifecycles组件。</li>
<li>如果在Activity处于不可见状态的时候，LiveData发生了多次数据变化，当Activity恢复可见状态时，只有最新的那份数据才会通知给观察者，前面的数据在这种情况下相当于已经过期了，会被直接丢弃。</li>
</ol>
<blockquote>
<p>TODO</p>
</blockquote>
<h2> Room</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://developer.android.google.cn/topic/libraries/architecture/room?hl=zh-cn" target="_blank" rel="noopener noreferrer">Room 官方文档</a></p>
</div>
<blockquote>
<p>主要由Entity、Dao和Database这3部分组成，每个部分都有明确的职责</p>
<p>TODO</p>
</blockquote>
<h2> WorkManager</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://developer.android.google.cn/reference/androidx/work/WorkManager?hl=zh-cn" target="_blank" rel="noopener noreferrer">WorkManager 官方文档</a></p>
</div>
<div class="language-groovy line-numbers-mode" data-ext="groovy"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li>为了解决频繁的功能和API变更，Google推出了WorkManager组件。WorkManager很适合用于处理一些要求定时执行的任务，它可以根据操作系统的版本自动选择，底层是使用AlarmManager实现还是JobScheduler实现，从而降低了我们的使用成本。另外，它还支持周期性任务、链式任务处理等功能，是一个非常强大的工具。</li>
<li>适合用于持久性工作的推荐解决方案。如果工作始终要通过应用重启和系统重新启动来调度，便是持久性的工作。由于大多数后台处理操作都是通过持久性工作完成的，因此 WorkManager 是适用于后台处理操作的主要推荐 API。</li>
<li>WorkManager和Service并不相同，也没有直接的联系。Service是Android系统的四大组件之一，它在没有被销毁的情况下是一直保持在后台运行的。而WorkManager只是一个处理定时任务的工具，它可以保证即使在应用退出甚至手机重启的情况下，之前注册的任务仍然将会得到执行，因WorkManager很适合用于执行一些定期和服务器进行交互的任务，比如周期性地同步数据等等。</li>
<li>使用WorkManager注册的周期性任务不能保证一定会准时执行，这并不是bug，而是系统为了减少电量消耗，可能会将触发时间临近的几个任务放在一起执行，这样可以大幅度地减少CPU被唤醒的次数，从而有效延长电池的使用时间。WorkManager的基本用法其实非常简单，主要分为以下3步：</li>
</ol>
<br>
<p><strong>一般步骤：</strong></p>
<ol>
<li>定义一个后台任务，并实现具体的任务逻辑；</li>
<li>配置该后台任务的运行条件和约束信息，并构建后台任务请求；</li>
<li>将该后台任务请求传入WorkManager的enqueue()方法中，系统会在合适的时间运行。</li>
</ol>
<br>
<p>后台任务的写法非常固定，也很好理解。首先每一个后台任务都必须继承自Worker类，并调用它唯一的构造函数。然后重写父类中的<code>doWork()</code>方法，在这个方法中编写具体的后台任务逻辑即可。</p>
<ol>
<li><code>doWork()</code>方法不会运行在主线程当中，因此可以放心地在这里执行耗时逻辑</li>
<li><code>doWork()</code>方法要求返回一个<code>Result</code>对象，用于表示任务的运行结果，成功就返回<code>Result.success()</code>，失败就返回<code>Result.failure()</code>。除此之外，还有一个<code>Result.retry()</code>方法，它其实也代表着失败，只是可以结合<code>WorkRequest.Builder</code>的<code>setBackoffCriteria()</code>方法来重新执行任务</li>
<li>如果后台任务的doWork()方法中返回了Result.retry()，那么是可以结合setBackoffCriteria()方法来重新执行任务的</li>
<li>可以借助链式编程来实现多个独立的后台任务的调度</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">RxJava</title>
    <id>https://gzwrrr.github.io/article/android/D-%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6/RxJava.html</id>
    <link href="https://gzwrrr.github.io/article/android/D-%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6/RxJava.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> RxJava</h1>
<div class="hint-container info">
<p class="hint-container-title">相关文档</p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/" target="_blank" rel="noopener noreferrer">RxJava 中文文档</a></p>
</div>
<p>核心是异步数据流和响应式编程</p>
<ol>
<li>为异步而生，无需手动创建线程，具备线程切换能力</li>
<li>支持链式调用</li>
<li>具有各种操作符</li>
<li>简化了异常处理</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> RxJava</h1>
<div class="hint-container info">
<p class="hint-container-title">相关文档</p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/" target="_blank" rel="noopener noreferrer">RxJava 中文文档</a></p>
</div>
<p>核心是异步数据流和响应式编程</p>
<ol>
<li>为异步而生，无需手动创建线程，具备线程切换能力</li>
<li>支持链式调用</li>
<li>具有各种操作符</li>
<li>简化了异常处理</li>
</ol>
<p>使用场景：</p>
<ol>
<li>网络请求</li>
<li>数据库读写</li>
<li>文件读写</li>
<li>定时任务</li>
</ol>
<h2> 核心概念</h2>
<ol>
<li>观察者：观察事件并做出响应</li>
<li>被观察者（可以互相转换）：触发事件并确定何时发送事件。
<ol>
<li>Observable</li>
<li>Flowable</li>
<li>Single</li>
<li>Completable</li>
<li>Maybe</li>
</ol>
</li>
<li>订阅：观察者与被观察者建立连接（与正常逻辑相反，RxJava 中是被观察者订阅观察者）</li>
</ol>
<h2> 相关文章</h2>
<ol>
<li><a href="http://futurice.com/blog/tech-pick-of-the-week-rx-for-net-and-rxjava-for-android" target="_blank" rel="noopener noreferrer">http://futurice.com/blog/tech-pick-of-the-week-rx-for-net-and-rxjava-for-android</a></li>
<li><a href="http://futurice.com/blog/top-7-tips-for-rxjava-on-android" target="_blank" rel="noopener noreferrer">http://futurice.com/blog/top-7-tips-for-rxjava-on-android</a></li>
<li><a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" target="_blank" rel="noopener noreferrer">https://gist.github.com/staltz/868e7e9bc2a7b8c1f754</a></li>
<li><a href="http://futurice.com/blog/android-development-has-its-own-swift" target="_blank" rel="noopener noreferrer">http://futurice.com/blog/android-development-has-its-own-swift</a></li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">ADB</title>
    <id>https://gzwrrr.github.io/article/android/Z-%E5%85%B6%E4%BB%96/ADB.html</id>
    <link href="https://gzwrrr.github.io/article/android/Z-%E5%85%B6%E4%BB%96/ADB.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> ADB</h1>
<ol>
<li>普通型</li>
<li>Shell型（ROOT）
<ol>
<li>非交互式</li>
<li>交互式</li>
</ol>
</li>
</ol>
<h2> 普通型常用命令</h2>
<ol>
<li><code>adb devices</code>：查看设备</li>
<li><code>adb install &lt;args&gt; &lt;path&gt;</code>：安装 APK
<ol>
<li><code>-r</code>：强制替换已存在的应用程序</li>
<li><code>-d</code>：允许降级安装</li>
<li><code>-t</code>：允许安装 debug 版测试包</li>
<li><code>-l</code>：锁定应用程序</li>
<li><code>-s</code>：将应用程序安装到 SD 卡上</li>
<li><code>-g</code>：安装后自动授权所有权限</li>
</ol>
</li>
<li><code>adb uninstall &lt;packagename&gt;</code>：卸载</li>
<li><code>adb push/pull</code>：推送接收文件</li>
<li><code>adb reboot &lt;args&gt;</code>：
<ol>
<li>默认是重启</li>
<li><code>recovery</code>：重启到恢复模式</li>
<li><code>bootloader</code>：重启到 <code>fastboot</code> 模式</li>
<li><code>edl</code>：重启到 9008 串口模式</li>
<li><code>download</code>：重启到挖煤模式</li>
<li><code>-p</code>：关机</li>
</ol>
</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> ADB</h1>
<ol>
<li>普通型</li>
<li>Shell型（ROOT）
<ol>
<li>非交互式</li>
<li>交互式</li>
</ol>
</li>
</ol>
<h2> 普通型常用命令</h2>
<ol>
<li><code>adb devices</code>：查看设备</li>
<li><code>adb install &lt;args&gt; &lt;path&gt;</code>：安装 APK
<ol>
<li><code>-r</code>：强制替换已存在的应用程序</li>
<li><code>-d</code>：允许降级安装</li>
<li><code>-t</code>：允许安装 debug 版测试包</li>
<li><code>-l</code>：锁定应用程序</li>
<li><code>-s</code>：将应用程序安装到 SD 卡上</li>
<li><code>-g</code>：安装后自动授权所有权限</li>
</ol>
</li>
<li><code>adb uninstall &lt;packagename&gt;</code>：卸载</li>
<li><code>adb push/pull</code>：推送接收文件</li>
<li><code>adb reboot &lt;args&gt;</code>：
<ol>
<li>默认是重启</li>
<li><code>recovery</code>：重启到恢复模式</li>
<li><code>bootloader</code>：重启到 <code>fastboot</code> 模式</li>
<li><code>edl</code>：重启到 9008 串口模式</li>
<li><code>download</code>：重启到挖煤模式</li>
<li><code>-p</code>：关机</li>
</ol>
</li>
</ol>
<h2> Shell 型</h2>
<ol>
<li>am 命令（Activity Manager）</li>
<li>pm 命令（Package Manager）</li>
<li>wm 命令（Window Manager）</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Android"/>
    <category term="移动端"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-10-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">小程序学习路线</title>
    <id>https://gzwrrr.github.io/article/mp/A-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html</id>
    <link href="https://gzwrrr.github.io/article/mp/A-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 小程序学习路线</h1>

<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<ul>
<li>Vue3/Vite版要求 node 版本<code>^14.18.0 || &gt;=16.0.0</code></li>
<li>如果使用 HBuilderX（3.6.7以下版本）运行 Vue3/Vite 创建的最新的 cli 工程，需要在 HBuilderX 运行配置最底部设置 node路径 为自己本机高版本 node 路径（注意需要重启 HBuilderX 才可以生效）</li>
</ul>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 小程序学习路线</h1>

<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<ul>
<li>Vue3/Vite版要求 node 版本<code>^14.18.0 || &gt;=16.0.0</code></li>
<li>如果使用 HBuilderX（3.6.7以下版本）运行 Vue3/Vite 创建的最新的 cli 工程，需要在 HBuilderX 运行配置最底部设置 node路径 为自己本机高版本 node 路径（注意需要重启 HBuilderX 才可以生效）</li>
</ul>
</div>
<h2> 前期准备</h2>
<ol>
<li>
<p>前端三大件基础、<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">尚硅谷 vue2 + vue3 视频教程</a> （vue2 必须，vue3 拓展）</p>
</li>
<li>
<p>构建工具（了解即可）：vue-cli、vite</p>
</li>
<li>
<p>开发工具：<a href="https://dcloud.io/hbuilderx.html" target="_blank" rel="noopener noreferrer">Hbuilder</a> + <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener noreferrer">微信开发者工具</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener noreferrer">微信公众平台注册账号</a>，了解平台内的配置</p>
</li>
<li>
<p>参考相关文章了解：项目配置（包括微信公众平台的配置，不了解可能导致请求失败等）、目录结构及含义、部署上线流程</p>
</li>
<li>
<p>小程序发展、小程序平台、小程序与 uniapp 的关系</p>
</li>
<li>
<p><a href="https://uniapp.dcloud.net.cn/vernacular.html#" target="_blank" rel="noopener noreferrer">白话 Uniapp</a> 配合视频 <a href="https://learning.dcloud.io/#/" target="_blank" rel="noopener noreferrer">Uniapp 与 Vue 合作教程（简单介绍）</a>（简单过一遍即可）</p>
</li>
</ol>
<h2> Uniapp 学习</h2>
<ol>
<li>基础：
<ol>
<li>项目配置、全局配置、页面配置</li>
<li>页面代码构成：标签变化（对比 vue）、js 部分变化（对比 vue 的生命周期）、样式导入的变化</li>
<li>路由导航、事件触发、状态管理、网络请求、数据缓存、上传下载、图片文件等</li>
<li>常用组件或组件库学习（前期熟悉内置组件就行，后续建议看看 <a href="https://www.graceui.com/" target="_blank" rel="noopener noreferrer">Grace UI</a>、<a href="https://www.uviewui.com/" target="_blank" rel="noopener noreferrer">uView</a>、<a href="https://thorui.cn/doc/" target="_blank" rel="noopener noreferrer">ThorUI</a>）、自定义组件与组件间通信、页面适配</li>
<li>Uniapp 常用 API 学习，调用小程序原生 API</li>
<li>个人认证、权限管理、第三方接入（短信、支付等）</li>
</ol>
</li>
<li>进阶：
<ol>
<li>插件扩展（遇到需求再调研就行，没有最后才自己实现）</li>
<li>运行调试开源项目（推荐：<a href="https://github.com/macrozheng/mall-app-web" target="_blank" rel="noopener noreferrer">mall-app-web</a>（简单）、<a href="https://gitee.com/kevin_chou/qdpz" target="_blank" rel="noopener noreferrer">前端铺子-uniapp移动端</a>（较难））</li>
<li><a href="https://nativesupport.dcloud.net.cn/#" target="_blank" rel="noopener noreferrer">APP 原生渲染</a></li>
<li>调试与性能优化</li>
<li>云存储、uniCloud、云函数（个人认为没什么必要…不过可以作为拓展或者暴露一些自己的小服务之类的）</li>
</ol>
</li>
</ol>
<h2> 建议</h2>
<ol>
<li>最好是自己构建起整个框架再填充内容</li>
<li>可以先看 uniapp 再看小程序的原生实现，这样会比较容易上手</li>
<li>如果已经有不错的前端基础，建议直接看官方文档，信息密度大一点（但是需要注意官方文档有点乱，必须要自己总结）</li>
<li>如果是按<a href="https://www.bilibili.com/video/BV1834y1676P?p=114&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">黑马程序员前端微信小程序开发教程</a>学习的，可以直接从 <strong>95</strong> 集看起，就是先看 uniapp，遇到问题再按视频目录往回找对应的微信小程序对应的内容</li>
<li>如果是看视频的话，建议过程中或者看完后过一遍的官方文档，大致有个印象就行，之后可能经常查
<ol>
<li><a href="https://uniapp.dcloud.net.cn/tutorial/" target="_blank" rel="noopener noreferrer">官方教程</a></li>
<li><a href="https://uniapp.dcloud.net.cn/component/" target="_blank" rel="noopener noreferrer">内置组件</a></li>
<li><a href="https://uniapp.dcloud.net.cn/api/" target="_blank" rel="noopener noreferrer">官方 API 文档</a></li>
</ol>
</li>
</ol>
<h2> 视频目标</h2>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>下面是 <a href="https://www.bilibili.com/video/BV1834y1676P?p=114&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">黑马程序员前端微信小程序开发教程</a> 的课程目标速查</p>
<p>先 uniaap 再微信小程序，或者反过来都可以</p>
</div>
<h3> uniapp 目标速查（95~192）</h3>
<h4>Step01（95~107）</h4>
<ol>
<li>如何配置uni-app的开发环境</li>
<li>如何把uni-app项目运行到微信开发者工具</li>
<li>如何在uni-app中配置tabBar效果</li>
<li>如何在 uni-app中配置分包并创建分包页面</li>
<li>如何在uni-app项目中发起网络数据请求</li>
</ol>
<br>
<h4>Step02（108~124）</h4>
<ol>
<li>使用scroll-view实现cate分类页面的开发</li>
<li>在uni-app中自定义my-search组件</li>
<li>使用CSS实现吸顶的样式效果</li>
<li>使用CSS实现单行文本溢出时显示为省略号的效果</li>
<li>实现搜索框防抖的功能</li>
<li>使用Set对象解决搜索关键词重复的问题</li>
</ol>
<br>
<h4>Step03（125~145）</h4>
<ol>
<li>如何实现商品列表页面的下拉刷新和上拉加载更多</li>
<li>如何使用rich-text组件渲染富文本内容</li>
<li>如何在uni-app项目中配置和使用vuex</li>
<li>Vue的watch侦听器中immediate属性的作用</li>
<li>如何把设置tabBar徽标的代码抽离为mixins</li>
</ol>
<br>
<h4>Step04（146~162）</h4>
<ol>
<li>如何为my-goods组件封装radio勾选状态</li>
<li>如何为my-goods组件封装NumberBox</li>
<li>如何实现购物车滑动删除的效果</li>
<li>如何封装收货地址组件</li>
<li>如何实现收货地址重新授权的功能</li>
</ol>
<br>
<h4>Step05（163~192）</h4>
<ol>
<li>如何实现购物车结算区域的功能开发</li>
<li>如何如何实现微信登录的功能</li>
<li>如何实现3秒倒计时导航跳转的功能</li>
<li>如何实现微信支付的功能</li>
<li>如何把uni-app项目发布为小程序和安卓App</li>
</ol>
<h3> 小程序目标速查（1~94）</h3>
<h4>Step01（1~17）</h4>
<ol>
<li>如何创建小程序项目</li>
<li>小程序项目的基本组成结构</li>
<li>小程序页面由几部分组成</li>
<li>小程序中常见的组件如何使用</li>
<li>小程序如何进行协同开发和发布</li>
</ol>
<br>
<h4>Step02（18~37）</h4>
<ol>
<li>WXML 模板语法渲染页面结构</li>
<li>WXSS 样式美化页面结构</li>
<li>app.json 对小程序进行全局性配置</li>
<li>page.json 对小程序页面进行个性化配置</li>
<li>如何发起网络数据请求</li>
</ol>
<br>
<h4>Step03（38~59）</h4>
<ol>
<li>如何实现页面之间的导航跳转</li>
<li>如何实现下拉刷新效果</li>
<li>如何实现上拉加载更多效果</li>
<li>小程序中常用的生命周期函数</li>
</ol>
<br>
<h4>Step04（60~76）</h4>
<ol>
<li>创建并引用组件</li>
<li>如何修改组件的样式隔离选项</li>
<li>如何定义和使用数据监听器</li>
<li>如何定义和使用纯数据字段</li>
<li>实现组件父子通信有哪3种方式</li>
<li>如何定义和使用behaviors</li>
</ol>
<br>
<h4>Step05（77~94）</h4>
<ol>
<li>如何安装和配置 vant-weapp 组件库</li>
<li>如何使用 MobX 实现全局数据共享</li>
<li>如何对小程序的 API 进行 Promise 化</li>
<li>如何实现自定义 tabBar 的效果</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="移动端"/>
    <category term="小程序"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-09-15T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Uniapp 知识点</title>
    <id>https://gzwrrr.github.io/article/mp/B-Uniapp%E7%9F%A5%E8%AF%86%E7%82%B9.html</id>
    <link href="https://gzwrrr.github.io/article/mp/B-Uniapp%E7%9F%A5%E8%AF%86%E7%82%B9.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Uniapp 知识点</h1>

<h2> 概览</h2>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>下面的知识点会陆续补充上…</p>
</div>
<ol>
<li>约定与项目结构</li>
<li>全局配置、页面配置</li>
<li>样式</li>
<li>数据绑定</li>
<li>事件触发</li>
<li>生命周期</li>
<li>状态管理</li>
<li>组件、通信</li>
<li>网络请求</li>
<li>数据缓存</li>
<li>上传下载</li>
<li>图片、文件</li>
<li>路由导航</li>
<li>插件扩展</li>
<li>调试与性能调优</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> Uniapp 知识点</h1>

<h2> 概览</h2>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>下面的知识点会陆续补充上…</p>
</div>
<ol>
<li>约定与项目结构</li>
<li>全局配置、页面配置</li>
<li>样式</li>
<li>数据绑定</li>
<li>事件触发</li>
<li>生命周期</li>
<li>状态管理</li>
<li>组件、通信</li>
<li>网络请求</li>
<li>数据缓存</li>
<li>上传下载</li>
<li>图片、文件</li>
<li>路由导航</li>
<li>插件扩展</li>
<li>调试与性能调优</li>
</ol>
<h2> 约定与项目结构</h2>
<div class="hint-container info">
<p class="hint-container-title">规范</p>
<ol>
<li>页面文件遵循 Vue 单文件组件 (SFC) 规范</li>
<li>组件标签靠近小程序规范，详见uni-app 组件规范</li>
<li>接口能力（JS API）靠近微信小程序规范，但需将前缀 wx 替换为 uni，详见uni-app接口规范</li>
<li>数据绑定及事件处理同 Vue.js 规范，同时补充了App及页面的生命周期</li>
<li>为兼容多端运行，建议使用flex布局进行开发</li>
</ol>
</div>
<ol>
<li><code>pages.json</code> 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等</li>
<li><code>manifest.json</code> 文件是应用的配置文件，用于指定应用的名称、图标、权限等。</li>
<li><code>App.vue</code> 是我们的跟组件，所有页面都是在App.vue下进行切换的，是页面入口文件，可以调用应用的生命周期函数。</li>
<li><code>main.js</code> 是我们的项目入口文件，主要作用是初始化vue实例并使用需要的插件。</li>
<li><code>uni.scss</code> 文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，uni.scss文件里预置了一批scss变量预置。</li>
<li><code>unpackage</code> 就是打包目录，在这里有各个平台的打包文件</li>
<li><code>pages</code> 所有的页面存放目录</li>
<li><code>static</code> 静态资源目录，例如图片等</li>
<li><code>components</code> 组件存放目录</li>
</ol>
<h2> 生命周期</h2>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">函数名</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>onLaunch</code></td>
<td style="text-align:left">当<code>uni-app</code>初始化完成时触发（局部只触发一次）</td>
</tr>
<tr>
<td style="text-align:left"><code>onOpen</code></td>
<td style="text-align:left">当<code>uni-app</code>启动，或从后台进入前台显示</td>
</tr>
<tr>
<td style="text-align:left"><code>onHide</code></td>
<td style="text-align:left">当<code>uni-app</code>从前台进入后台</td>
</tr>
<tr>
<td style="text-align:left"><code>onError</code></td>
<td style="text-align:left">当<code>uni-app</code>报错时触发</td>
</tr>
<tr>
<td style="text-align:left"><code>onUniNViewMessage</code></td>
<td style="text-align:left">对<code>nvue</code>页面发送的数据进行监听，可参考<code>nvue </code>向<code>vue </code>通讯</td>
</tr>
<tr>
<td style="text-align:left"><code>onUnhandledRejection</code></td>
<td style="text-align:left">对未处理的 Promise 拒绝事件监听函数（2.8.1+）</td>
</tr>
<tr>
<td style="text-align:left"><code>onPageNotFound</code></td>
<td style="text-align:left">页面不存在监听函数</td>
</tr>
<tr>
<td style="text-align:left"><code>onThemeChange</code></td>
<td style="text-align:left">监听系统主题变化</td>
</tr>
</tbody>
</table>
</div><h2> 路由导航</h2>
<p>框架以栈的形式管理当前所有页面，当发生路由切换的时候，页面栈的表现如下：</p>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">路由方式</th>
<th style="text-align:left">页面栈表现</th>
<th style="text-align:left">触发时机</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">初始化</td>
<td style="text-align:left">新页面入栈</td>
<td style="text-align:left">uni-app：的第一个页面</td>
</tr>
<tr>
<td style="text-align:left">新页面</td>
<td style="text-align:left">新页面入栈</td>
<td style="text-align:left">调用API  <code>uni.navigateTo</code> ，使用组件  <code>&lt;navigator open-type =“ navigate” /&gt;</code></td>
</tr>
<tr>
<td style="text-align:left">页面重启</td>
<td style="text-align:left">当前页面出栈，新页面入栈</td>
<td style="text-align:left">调用API  <code>uni.redirectTo</code> ，使用组件 <code>&lt;navigator open-type =“ redirectTo” /&gt;</code></td>
</tr>
<tr>
<td style="text-align:left">页面返回</td>
<td style="text-align:left">页面不断出栈，直到目标返回页</td>
<td style="text-align:left">调用API  <code>uni.navigateBack</code>  ，使用组件 <code>&lt;navigator open-type =“ navigateBack” /&gt;</code> ，用户按左上角返回按钮，安卓用户点击物理后退键</td>
</tr>
<tr>
<td style="text-align:left">标签切换</td>
<td style="text-align:left">页面全部出栈，只留下新的标签页面</td>
<td style="text-align:left">调用API  <code>uni.switchTab</code>  ，使用组件 <code>&lt;navigator open-type =“ switchTab” /&gt;</code>，用户切换 Tab</td>
</tr>
<tr>
<td style="text-align:left">重加载</td>
<td style="text-align:left">页面全部出栈，只留下新的页面</td>
<td style="text-align:left">调用API <code>uni.reLaunch</code>，使用组件 <code>&lt;navigator open-type =“ reLaunch” /&gt;</code></td>
</tr>
</tbody>
</table>
</div><h2> 样式</h2>
<p>uni-app 支持的通用 css 单位包括 px、rpx：</p>
<ul>
<li>px 即屏幕像素</li>
<li>rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大。</li>
</ul>
<br>
<p>vue页面支持普通H5单位，但在nvue里不支持：</p>
<ul>
<li>rem 默认根字体大小为 屏幕宽度/20（微信小程序、字节跳动小程序、App、H5）</li>
<li>vh viewpoint height，视窗高度，1vh等于视窗高度的1%</li>
<li>vw viewpoint width，视窗宽度，1vw等于视窗宽度的1%</li>
</ul>
<br>
<p>nvue还不支持百分比单位。</p>
<p>App端，在 pages.json 里的 titleNView 或页面里写的 plus api 中涉及的单位，只支持 px。注意此时不支持 rpx</p>
<p>nvue中，uni-app 模式（nvue 不同编译模式介绍）可以使用 px 、rpx，表现与 vue 中一致。weex 模式目前遵循weex的单位，它的单位比较特殊：</p>
<ul>
<li>px:，以750宽的屏幕为基准动态计算的长度单位，与 vue 页面中的 rpx 理念相同。（一定要注意 weex 模式的 px，和 vue 里的 px 逻辑不一样。）</li>
<li>wx：与设备屏幕宽度无关的长度单位，与 vue 页面中的 px 理念相同</li>
</ul>
<br>
<p>下面对 rpx 详细说明：</p>
<ul>
<li>设计师在提供设计图时，一般只提供一个分辨率的图。</li>
<li>严格按设计图标注的 px 做开发，在不同宽度的手机上界面很容易变形。</li>
<li>而且主要是宽度变形。高度一般因为有滚动条，不容易出问题。由此，引发了较强的动态宽度单位需求。</li>
<li>微信小程序设计了 rpx 解决这个问题，uni-app 在 App 端、H5 端都支持了 rpx。</li>
<li>rpx 是相对于基准宽度的单位，可以根据屏幕宽度进行自适应。uni-app 规定屏幕基准宽度 750rpx。</li>
<li>开发者可以通过设计稿基准宽度计算页面元素 rpx 值，设计稿 1px 与框架样式 1rpx 转换公式如下：</li>
<li>设计稿 1px / 设计稿基准宽度 = 框架样式 1rpx / 750rpx</li>
<li>换言之，页面元素宽度在 uni-app 中的宽度计算公式：750 * 元素在设计稿中的宽度 / 设计稿基准宽度</li>
</ul>
<p>举例说明：</p>
<ol>
<li>若设计稿宽度为 750px，元素 A 在设计稿上的宽度为 100px，那么元素 A 在 uni-app 里面的宽度应该设为：750 * 100 / 750，结果为：100rpx。</li>
<li>若设计稿宽度为 640px，元素 A 在设计稿上的宽度为 100px，那么元素 A 在 uni-app 里面的宽度应该设为：750 * 100 / 640，结果为：117rpx。</li>
<li>若设计稿宽度为 375px，元素 B 在设计稿上的宽度为 200px，那么元素 B 在 uni-app 里面的宽度应该设为：750 * 200 / 375，结果为：400rpx。</li>
</ol>
<div class="hint-container note">
<p class="hint-container-title">Tips</p>
<ul>
<li>注意 rpx 是和宽度相关的单位，屏幕越宽，该值实际像素越大。如不想根据屏幕宽度缩放，则应该使用 px 单位。</li>
<li>如果开发者在字体或高度中也使用了 rpx ，那么需注意这样的写法意味着随着屏幕变宽，字体会变大、高度会变大。如果你需要固定高度，则应该使用 px 。</li>
<li>rpx不支持动态横竖屏切换计算，使用rpx建议锁定屏幕方向</li>
<li>设计师可以用 iPhone6 作为视觉稿的标准。</li>
<li>如果设计稿不是750px，HBuilderX提供了自动换算的工具，详见：<a href="https://ask.dcloud.net.cn/article/35445%E3%80%82" target="_blank" rel="noopener noreferrer">https://ask.dcloud.net.cn/article/35445。</a></li>
<li>App端，在 pages.json 里的 titleNView 或页面里写的 plus api 中涉及的单位，只支持 px，不支持 rpx。</li>
<li>早期 uni-app 提供了 upx ，目前已经推荐统一改为 rpx 了，<a href="http://ask.dcloud.net.cn/article/36130" target="_blank" rel="noopener noreferrer">详见</a></li>
</ul>
</div>
<h3> 样式导入</h3>
<p>使用@import语句可以导入外联样式表，@import后跟需要导入的外联样式表的相对路径，用;表示语句结束。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 内联样式</h3>
<p>框架组件上支持使用 style、class 属性来控制组件的样式。</p>
<ul>
<li>style：静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进 style 中，以免影响渲染速度。<code>&lt;view :style="{color:color}" /&gt;</code></li>
<li>class：用于指定样式规则，其属性值是样式规则中类选择器名(样式类名)的集合，样式类名不需要带上.，样式类名之间用空格分隔。<code>&lt;view class="normal_view" /&gt;</code></li>
</ul>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="移动端"/>
    <category term="小程序"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-09-15T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Uniapp API</title>
    <id>https://gzwrrr.github.io/article/mp/C-UniappAPI.html</id>
    <link href="https://gzwrrr.github.io/article/mp/C-UniappAPI.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Uniapp API</h1>

<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p><a href="https://uniapp.dcloud.net.cn/api/" target="_blank" rel="noopener noreferrer">Uniapp 官方 API 文档</a></p>
<p>相关的 API 会陆续补充完整…（还会补上微信小程序原生的 API）</p>
</div>
<h2> 概览</h2>
<p>小程序中分为三类 API：</p>
<ol>
<li>事件监听类 API</li>
<li>同步 API</li>
<li>异步 API</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> Uniapp API</h1>

<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p><a href="https://uniapp.dcloud.net.cn/api/" target="_blank" rel="noopener noreferrer">Uniapp 官方 API 文档</a></p>
<p>相关的 API 会陆续补充完整…（还会补上微信小程序原生的 API）</p>
</div>
<h2> 概览</h2>
<p>小程序中分为三类 API：</p>
<ol>
<li>事件监听类 API</li>
<li>同步 API</li>
<li>异步 API</li>
</ol>
<h2> 常用</h2>
<p>发送请求：uni.request</p>
<p>选择图片：uni.chooseImage</p>
<p>上传文件：uni.uploadFile</p>
<p>弹框提示：uni.showToast</p>
<p>下载文件：uni.downloadFile</p>
<p>跳转：uni.navigateTo(object)</p>
<p>重定向：uni.redirectTo(object)</p>
<p>重新加载：uni.reLaunch(object)</p>
<p>切换TAB：uni.switchTab(object)</p>
<p>返回：uni.navigateBack(object)</p>
<h2> WebSocket</h2>
<ol>
<li>SocketTask.onMessage</li>
<li>SocketTask.send(object)</li>
<li>SocketTask.close(object)</li>
<li>SocketTask.onOpen(callback)</li>
<li>SocketTask.onClose(callback)</li>
<li>SocketTask.onError(callback)</li>
</ol>
<h2> 缓存</h2>
<ol>
<li>设置缓存：uni.setStorage(object)</li>
<li>uni.setStorageSync(key,data)</li>
<li>uni.getStorage(object)</li>
<li>uni.getStorageSync(key)</li>
<li>uni.getStorageInfo(object)</li>
<li>uni.getStorageInfoSync()</li>
<li>uni.removeStorage(object)</li>
<li>uni.removeStorageSync(key)</li>
<li>uni.clearStorage()</li>
<li>uni.clearStorageSync()</li>
</ol>
<h2> 位置</h2>
<ol>
<li>uni.getLocation(object)</li>
<li>uni.chooseLocation(object)</li>
<li>uni.openLocation(OBJECT)</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="移动端"/>
    <category term="小程序"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-09-15T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Uniapp</title>
    <id>https://gzwrrr.github.io/article/mp/</id>
    <link href="https://gzwrrr.github.io/article/mp/"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Uniapp</h1>

<h2> 简介</h2>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//uniapp/20230920/uniapp架构图.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ol>
<li>DCloud 公司研发，跨平台框架，开发者编写一套代码，可发布到iOS，Android，H5，以及各种小程序（微信/支付宝/百度/头条/ QQ /钉钉）等多个平台</li>
<li>在跨端的同时，通过条件编译+平台特有API调用，可以优雅的为某平台写个性化代码，调用专有能力而不影响其他平台</li>
<li>支持原生代码混写和原生SDK集成</li>
<li>App端支持weex原生渲染，可支持更流畅的用户体验</li>
<li>vue语法 + 微信小程序api</li>
<li>uni-app 提供了两种 App 渲染模式，一种是 基于 weex 的 .nvue, 一种是 基于webview 的 .vue。对于后者，还有一个类似的平台：<a href="https://www.zhihu.com/search?q=apicloud&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2450229554%7D" target="_blank" rel="noopener noreferrer">apicloud</a>，俩平台很类似，都是给webview提供常用的接口，让h5页面具备调用系统api能力。区别在于 uni 使用了vue而已</li>
<li>uni-app是<a href="http://mpvue.com/" target="_blank" rel="noopener noreferrer">mpvue</a>的超集</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> Uniapp</h1>

<h2> 简介</h2>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//uniapp/20230920/uniapp架构图.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ol>
<li>DCloud 公司研发，跨平台框架，开发者编写一套代码，可发布到iOS，Android，H5，以及各种小程序（微信/支付宝/百度/头条/ QQ /钉钉）等多个平台</li>
<li>在跨端的同时，通过条件编译+平台特有API调用，可以优雅的为某平台写个性化代码，调用专有能力而不影响其他平台</li>
<li>支持原生代码混写和原生SDK集成</li>
<li>App端支持weex原生渲染，可支持更流畅的用户体验</li>
<li>vue语法 + 微信小程序api</li>
<li>uni-app 提供了两种 App 渲染模式，一种是 基于 weex 的 .nvue, 一种是 基于webview 的 .vue。对于后者，还有一个类似的平台：<a href="https://www.zhihu.com/search?q=apicloud&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2450229554%7D" target="_blank" rel="noopener noreferrer">apicloud</a>，俩平台很类似，都是给webview提供常用的接口，让h5页面具备调用系统api能力。区别在于 uni 使用了vue而已</li>
<li>uni-app是<a href="http://mpvue.com/" target="_blank" rel="noopener noreferrer">mpvue</a>的超集</li>
</ol>
<h3> webview</h3>
<p>WebView是一种用于在移动应用中嵌入Web内容的组件或控件。它允许开发者在原生移动应用中显示Web页面，以便将Web内容与原生应用的功能和界面无缝整合在一起。WebView通常由操作系统提供，开发者可以在应用中使用它来加载和显示HTML、CSS和JavaScript等Web技术创建的内容。</p>
<ol>
<li><strong>原生应用嵌入Web内容</strong>：WebView允许开发者将Web页面嵌入到原生移动应用中的特定区域，用户可以在应用内部访问Web内容，而无需离开应用。</li>
<li><strong>与原生应用交互</strong>：WebView不仅可以显示静态Web页面，还可以与原生应用的功能进行交互。这意味着开发者可以使用JavaScript与原生代码通信，实现诸如打开相机、发送通知、访问设备传感器等功能。</li>
<li><strong>渲染引擎</strong>：WebView使用浏览器内核或渲染引擎来解析和渲染Web内容。不同的移动操作系统使用不同的内核，如Android使用<a href="https://webkit.org/" target="_blank" rel="noopener noreferrer">WebKit</a>或<a href="https://www.chromium.org/Home/" target="_blank" rel="noopener noreferrer">Chromium</a>，iOS使用WebKit。</li>
<li><strong>性能和安全性</strong>：WebView的性能和安全性与所使用的渲染引擎和操作系统有关。为了确保用户安全，开发者需要小心处理来自WebView的外部Web内容，以防止潜在的安全漏洞。</li>
<li><strong>适用场景</strong>：WebView通常用于以下场景：
<ul>
<li>在应用中显示帮助文档或用户协议。</li>
<li>显示新闻文章、博客或其他在线内容。</li>
<li>集成第三方Web服务，如社交媒体登录、支付、地图等。</li>
<li>在原生应用中展示Web视图，以实现动态内容和用户互动。</li>
</ul>
</li>
<li><strong>跨平台开发</strong>：许多跨平台移动应用框架，如React Native、Flutter和Xamarin，也提供了WebView的封装组件，使开发者能够在不同平台上使用相同的Web内容。</li>
</ol>
<h3> weex</h3>
<p><a href="https://github.com/alibaba/weex" target="_blank" rel="noopener noreferrer">Weex</a>是一个开源的跨平台移动应用开发框架，它由阿里巴巴集团开发并开源，旨在帮助开发者构建高性能的移动应用，同时实现跨平台的开发和发布。Weex允许开发者使用一套代码，将应用程序同时发布到多个移动平台，如iOS、Android和Web。</p>
<ol>
<li><strong>跨平台开发</strong>：Weex的主要目标是支持一次开发，多平台发布。开发者可以使用Vue.js或Rax等框架编写一套代码，然后将其发布到iOS、Android和Web等平台上。</li>
<li><strong>组件化开发</strong>：Weex使用组件化的开发模式，允许开发者构建可重用的UI组件。这些组件可以跨平台使用，并且在不同平台上具有相似的行为和外观。</li>
<li><strong>原生渲染引擎</strong>：Weex应用程序的UI组件由原生渲染引擎来渲染，以保证高性能和原生应用的体验。这意味着Weex应用的性能可以与原生应用媲美。</li>
<li><strong>热更新支持</strong>：Weex支持热更新，允许开发者在不重新发布应用的情况下，实时更新应用内容和功能。</li>
<li><strong>生态系统</strong>：Weex拥有丰富的生态系统，包括一系列的UI组件库、插件和工具，帮助开发者更轻松地构建应用。</li>
<li><strong>开放性和扩展性</strong>：Weex是一个开放的框架，允许开发者扩展和定制其功能。你可以编写自定义的Weex组件和模块，以满足特定需求。</li>
<li><strong>支持多语言</strong>：Weex支持多种前端开发语言，包括Vue.js、Rax（类React框架）、Angular等，让开发者可以使用熟悉的技术栈来开发应用。</li>
</ol>
<h3> uniapp 与 vue</h3>
<ol>
<li><strong>跨平台 vs 单平台</strong>：
<ul>
<li>UniApp是一个跨平台开发框架，可以将代码发布到多个平台，如iOS、Android、Web、微信小程序、支付宝小程序等。</li>
<li>Vue.js主要用于单页面应用（SPA）的开发，通常在Web浏览器上运行，虽然也可以通过一些工具将其用于移动应用开发，但不具备UniApp的跨平台特性。</li>
</ul>
</li>
<li><strong>API和组件的差异</strong>：
<ul>
<li>UniApp提供了一套内置的API和组件，用于访问不同平台的设备功能和UI元素，这些API和组件在不同平台上有一定的差异。</li>
<li>Vue.js并不直接提供设备访问功能或跨平台UI组件，它更侧重于构建Web应用，通常需要第三方库或插件来实现设备功能和UI组件。</li>
</ul>
</li>
<li><strong>项目结构</strong>：
<ul>
<li>UniApp的项目结构通常包括不同平台的代码目录，如<code>/pages</code>用于存放页面，<code>/components</code>用于存放组件，以及平台特定的配置文件。</li>
<li>Vue.js项目结构更加自由，可以根据需要组织代码，但通常包括<code>/src</code>用于存放Vue组件和应用代码。</li>
</ul>
</li>
<li><strong>路由管理</strong>：
<ul>
<li>UniApp使用自带的路由管理机制，类似于Vue Router，但需要处理不同平台的路由差异。</li>
<li>Vue.js也可以使用Vue Router进行路由管理，但通常需要额外配置来适应移动应用或跨平台应用的需求。</li>
</ul>
</li>
<li><strong>打包和发布</strong>：
<ul>
<li>UniApp具有特定于每个平台的打包和发布工具，可以轻松将应用程序发布到不同的应用商店或Web服务器。</li>
<li>Vue.js在移动应用或跨平台开发时需要使用其他工具，如Cordova、Ionic等，来打包和发布应用。</li>
</ul>
</li>
<li><strong>生态系统</strong>：
<ul>
<li>Vue.js拥有庞大的生态系统，有丰富的第三方库、插件和社区支持，适用于Web应用开发。</li>
<li>UniApp的生态系统相对较小，主要集中在移动应用和小程序开发领域。</li>
</ul>
</li>
</ol>
<br>
<br>
<h2> 相关资源</h2>
<h3> 官方文档</h3>
<ol>
<li><a href="https://uniapp.dcloud.net.cn/tutorial/" target="_blank" rel="noopener noreferrer">Uniapp 官方教程</a></li>
<li><a href="https://uniapp.dcloud.net.cn/resource.html#%E4%B8%89%E6%96%B9%E5%9F%B9%E8%AE%AD%E6%9C%BA%E6%9E%84%E8%A7%86%E9%A2%91" target="_blank" rel="noopener noreferrer">Uniapp 官方推荐</a></li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/" target="_blank" rel="noopener noreferrer">微信小程序文档</a></li>
<li><a href="https://gitee.com/dcloud/uni-app" target="_blank" rel="noopener noreferrer">Uniapp Gitee 仓库</a></li>
</ol>
<h3> 视频教程</h3>
<ol>
<li><a href="https://www.bilibili.com/video/BV1834y1676P?p=114&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">黑马程序员前端微信小程序开发教程</a></li>
<li><a href="https://www.bilibili.com/video/BV1BJ411W7pX/?spm_id_from=333.788.recommend_more_video.0&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Uni-App从入门到实战</a></li>
<li><a href="https://learning.dcloud.io/#/" target="_blank" rel="noopener noreferrer">Uniapp 与 Vue 合作教程（简单介绍）</a></li>
</ol>
<h3> 相关文章</h3>
<ol>
<li><a href="https://www.w3cschool.cn/uni_app/uni_app-k8zg370b.html" target="_blank" rel="noopener noreferrer">W3C 速查</a></li>
<li><a href="https://blog.csdn.net/qiushi_1990/article/details/127675537" target="_blank" rel="noopener noreferrer">2023最新最全uniapp入门学习</a></li>
<li><a href="https://blog.csdn.net/Qiuxuntao/article/details/126420043" target="_blank" rel="noopener noreferrer">uniapp学习笔记之知识点大总结</a></li>
<li><a href="https://blog.csdn.net/john_QY/article/details/109440641" target="_blank" rel="noopener noreferrer">uniapp基础知识—大总结</a></li>
<li><a href="https://segmentfault.com/a/1190000015684864" target="_blank" rel="noopener noreferrer">小程序的生命周期、数据绑定、事件处理、组件与通信</a></li>
<li><a href="https://ask.dcloud.net.cn/article/35657" target="_blank" rel="noopener noreferrer">组件/标签、js、css 等的变化</a></li>
</ol>
<h3> 开源项目</h3>
<ol>
<li><a href="https://github.com/macrozheng/mall-app-web" target="_blank" rel="noopener noreferrer">mall-app-web</a>、<a href="https://gitee.com/macrozheng/mall" target="_blank" rel="noopener noreferrer">mall-app-admin</a>、<a href="https://www.macrozheng.com/" target="_blank" rel="noopener noreferrer">mall-app 文档</a></li>
<li><a href="https://gitee.com/kevin_chou/qdpz" target="_blank" rel="noopener noreferrer">前端铺子-uniapp移动端</a></li>
<li><a href="https://gitee.com/fuyang_lipengjun/platform" target="_blank" rel="noopener noreferrer">微同商城</a></li>
</ol>
<h3> 在线书籍/文档</h3>
<p><a href="https://www.bookstack.cn/explore?tab=popular&amp;cid=152" target="_blank" rel="noopener noreferrer">书栈网 - 移动端</a></p>
<h3> 其他</h3>
<p><a href="https://www.zhihu.com/question/444976489" target="_blank" rel="noopener noreferrer">建议看看做好心理准备（被坑过几次了…）</a></p>
<br>
<h2> 常用组件库</h2>
<div class="hint-container info">
<p class="hint-container-title">官方推荐</p>
<ol>
<li>
<p>**uni-app 中可使用的 UI 框架：**<a href="https://ask.dcloud.net.cn/article/35489" target="_blank" rel="noopener noreferrer">https://ask.dcloud.net.cn/article/35489</a></p>
</li>
<li>
<p><strong>uni-app 导航栏开发指南：</strong> <a href="https://ask.dcloud.net.cn/article/34921" target="_blank" rel="noopener noreferrer">https://ask.dcloud.net.cn/article/34921</a></p>
</li>
<li>
<p><strong>uni-app 实现全局变量：</strong> <a href="https://ask.dcloud.net.cn/article/35021" target="_blank" rel="noopener noreferrer">https://ask.dcloud.net.cn/article/35021</a></p>
</li>
<li>
<p><strong>uni-app 引用 npm 第三方库：</strong> <a href="https://ask.dcloud.net.cn/article/19727" target="_blank" rel="noopener noreferrer">https://ask.dcloud.net.cn/article/19727</a></p>
</li>
<li>
<p>**uni-app 中使用微信小程序第三方 SDK 及资源汇总：**<a href="https://ask.dcloud.net.cn/article/35070" target="_blank" rel="noopener noreferrer">https://ask.dcloud.net.cn/article/35070</a></p>
</li>
<li>
<p>**原生控件层级过高无法覆盖的解决方案：**<a href="https://uniapp.dcloud.io/component/native-component" target="_blank" rel="noopener noreferrer">https://uniapp.dcloud.io/component/native-component</a></p>
</li>
<li>
<p>**国际化/多语言/i18n方案：**<a href="https://ask.dcloud.net.cn/article/35872" target="_blank" rel="noopener noreferrer">https://ask.dcloud.net.cn/article/35872</a></p>
</li>
<li>
<p>**本地存储详解：**<a href="https://ask.dcloud.net.cn/article/166" target="_blank" rel="noopener noreferrer">https://ask.dcloud.net.cn/article/166</a></p>
</li>
</ol>
</div>
<ul>
<li><a href="https://www.graceui.com/" target="_blank" rel="noopener noreferrer">Grace UI</a></li>
<li><a href="https://www.uviewui.com/" target="_blank" rel="noopener noreferrer">uView</a></li>
<li><a href="https://thorui.cn/doc/" target="_blank" rel="noopener noreferrer">ThorUI</a></li>
<li><a href="https://ext.dcloud.net.cn/plugin?id=239" target="_blank" rel="noopener noreferrer">ColorUI</a></li>
<li><a href="https://vant-contrib.gitee.io/vant/#/zh-CN" target="_blank" rel="noopener noreferrer">Vant</a></li>
<li><a href="https://www.firstui.cn/" target="_blank" rel="noopener noreferrer">FirstUI</a></li>
<li><a href="https://nutui.jd.com/#/" target="_blank" rel="noopener noreferrer">NutUI</a></li>
<li><a href="https://varlet.gitee.io/varlet-ui/#/zh-CN/home" target="_blank" rel="noopener noreferrer">Varlet</a></li>
<li><a href="https://nutui.jd.com/bingo/#/" target="_blank" rel="noopener noreferrer">nutui-bingo</a></li>
<li><a href="https://uniapp.dcloud.net.cn/component/uniui/uni-ui.html" target="_blank" rel="noopener noreferrer">uni-ui</a></li>
</ul>
<br>
<h2> 插件</h2>
<div class="hint-container info">
<p class="hint-container-title">文档</p>
<ul>
<li>
<p><a href="https://www.runoob.com/w3cnote/wx-xcx-repo.html" target="_blank" rel="noopener noreferrer">微信小程序开发资源汇总</a></p>
</li>
<li>
<p><a href="https://ext.dcloud.net.cn/" target="_blank" rel="noopener noreferrer">插件市场</a></p>
</li>
</ul>
</div>
<ul>
<li><a href="https://uniapp.dcloud.net.cn/api/request/request.html" target="_blank" rel="noopener noreferrer">uni-request</a>：发起HTTP请求</li>
<li><a href="https://ask.dcloud.net.cn/article/40621" target="_blank" rel="noopener noreferrer">uni-simple-router-v3</a>：vue3 + vite 路由</li>
<li><a href="https://www.npmjs.com/package/uniapp-router-patch" target="_blank" rel="noopener noreferrer">uniapp-router-patch</a>：路由兼容插件</li>
<li><a href="https://ext.dcloud.net.cn/plugin?id=28" target="_blank" rel="noopener noreferrer">uni-icons</a>：丰富图标集</li>
<li><a href="https://ext.dcloud.net.cn/plugin?id=11792" target="_blank" rel="noopener noreferrer">popup</a>：弹出框和提示框</li>
<li><a href="https://ext.dcloud.net.cn/plugin?id=56" target="_blank" rel="noopener noreferrer">uni-calendar</a>：日历组件</li>
<li><a href="https://ext.dcloud.net.cn/plugin?id=3962" target="_blank" rel="noopener noreferrer">uni-datetime-picker</a>：日期选择器</li>
<li><a href="https://ext.dcloud.net.cn/plugin?id=4079" target="_blank" rel="noopener noreferrer">uni-file-picker</a>：文件选择器</li>
<li><a href="https://ext.dcloud.net.cn/plugin?id=3796" target="_blank" rel="noopener noreferrer">uni-data-picker</a>：数据驱动的picker选择器</li>
<li><a href="%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8">richtext-editor</a>：富文本编辑器插件</li>
<li><a href="https://z-paging.zxlee.cn/" target="_blank" rel="noopener noreferrer">z-paging</a>：上拉加载下拉刷新组件</li>
<li><a href="https://ext.dcloud.net.cn/plugin?id=8308" target="_blank" rel="noopener noreferrer">z-tabs</a>：tab栏组件库</li>
<li><a href="https://github.com/hairyf/uni-composition-api" target="_blank" rel="noopener noreferrer">uni-composition-api</a>：Composition API 插件</li>
<li><a href="https://github.com/SilurianYang/uni-simple-router" target="_blank" rel="noopener noreferrer">uni-simple-router</a>：路由扩展库</li>
</ul>
<br>
<h2> 其他问题</h2>
<div class="hint-container warning">
<p class="hint-container-title">说明</p>
<p>可能会踩的一些坑…</p>
<ol>
<li>
<p><a href="https://uniapp.dcloud.net.cn/matter.html" target="_blank" rel="noopener noreferrer">官方说明，遇到问题可以先看这</a></p>
</li>
<li>
<p><a href="https://uniapp.dcloud.net.cn/faq.html" target="_blank" rel="noopener noreferrer">官方总结</a></p>
</li>
</ol>
</div>
<p><strong>各端的管理规则需要耐心学习</strong></p>
<p>每个端，有每个端的管理规则，这不是uni-app在技术上上可以抹平的：</p>
<ul>
<li>例如H5端的浏览器有跨域限制</li>
<li>例如微信小程序会强制要求https链接，并且所有要联网的服务器域名都要配到微信的白名单中</li>
<li>例如App端，iOS对隐私控制和虚拟支付控制非常严格</li>
<li>例如App端，Android，国产rom各种兼容性差异，尤其是因为谷歌服务被墙，导致的push，定位等开发混乱的坑</li>
<li>如果App要使用三方sdk，进行定位，地图，支付，推送...还要遵守他们的规则和限制</li>
</ul>
<br>
<p><strong>文档混乱</strong></p>
<p>由于为了宣传的支持多平台，文档中接口也为了做到统一，所以经常会看到这样的情况：</p>
<ol>
<li>找到一个api 接口</li>
<li>拿来测试一遍</li>
<li>怎么跑都跑不动</li>
<li>文档往下翻，翻到最后，发现不支持这个平台</li>
</ol>
<p>另外还有很多 uni app 自己都解决不了的问题，只能自己修修补补…</p>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="移动端"/>
    <category term="小程序"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-09-15T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Q&amp;A</title>
    <id>https://gzwrrr.github.io/about/Q_A.html</id>
    <link href="https://gzwrrr.github.io/about/Q_A.html"/>
    <updated>2023-10-12T06:47:33.000Z</updated>
    <summary type="html"><![CDATA[<h1> Q&amp;A</h1>

<h2> 我是怎么收集信息的？</h2>
<p><strong>收集的主要分为：</strong></p>
<ol>
<li>技术发展趋势</li>
<li>碎片化知识</li>
<li>优质技术文章</li>
</ol>
<p><strong>途径：</strong></p>
<ol>
<li>Github Trending（关注开源项目）</li>
<li>技术相关的公众号（关注了 50+，基本每天都能学习新知识） + 微信标签整理</li>
<li>网页收藏 + Onetab 整理分类网页（便于分类，目前收藏大几百）</li>
<li>Rsshub + RSS 客户端主动订阅 + 技术博客</li>
<li>技术交流群</li>
<li>视频博主（Bilibili&amp;Youtube，快速实践，目前关注 260+）</li>
<li>书籍 + Calibre</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> Q&amp;A</h1>

<h2> 我是怎么收集信息的？</h2>
<p><strong>收集的主要分为：</strong></p>
<ol>
<li>技术发展趋势</li>
<li>碎片化知识</li>
<li>优质技术文章</li>
</ol>
<p><strong>途径：</strong></p>
<ol>
<li>Github Trending（关注开源项目）</li>
<li>技术相关的公众号（关注了 50+，基本每天都能学习新知识） + 微信标签整理</li>
<li>网页收藏 + Onetab 整理分类网页（便于分类，目前收藏大几百）</li>
<li>Rsshub + RSS 客户端主动订阅 + 技术博客</li>
<li>技术交流群</li>
<li>视频博主（Bilibili&amp;Youtube，快速实践，目前关注 260+）</li>
<li>书籍 + Calibre</li>
</ol>
<p><strong>其他：</strong></p>
<ol>
<li>碎片化知识的整合主要是靠：Typora + 滴答清单</li>
<li>提升效率方面，我是采用 UTools + AutoHotKey + Groupy 快速分类、搜索</li>
<li>后续考虑 NAS + PT 自动化收集</li>
<li>目录文件等的管理需要自己不断探索，这一步非常重要，不做一段时间后就会很乱</li>
</ol>
<h2> 我常用的辅助开发的工具有哪些？</h2>
<ol>
<li>ChatGPT + New Bing</li>
<li>Claude</li>
<li>文心一言</li>
<li>Llama 2</li>
<li>CodeGeeX</li>
</ol>
]]></content>
    <published>2023-09-15T06:07:01.000Z</published>
  </entry>
  <entry>
    <title type="text">ElasticSearch 原理</title>
    <id>https://gzwrrr.github.io/article/elasticsearch/B-ElasticSearch%E5%8E%9F%E7%90%86.html</id>
    <link href="https://gzwrrr.github.io/article/elasticsearch/B-ElasticSearch%E5%8E%9F%E7%90%86.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> ElasticSearch 原理</h1>

<h2> 前言</h2>
<p>Elasticsearch 尽可能地屏蔽了分布式系统的复杂性。这里列举了一些在后台自动执行的操作：</p>
<ul>
<li>分配文档到不同的容器 或 <em>分片</em> 中，文档可以储存在一个或多个节点中</li>
<li>按集群节点来均衡分配这些分片，从而对索引和搜索过程进行负载均衡</li>
<li>复制每个分片以支持数据冗余，从而防止硬件故障导致的数据丢失</li>
<li>将集群中任一节点的请求路由到存有相关数据的节点</li>
<li>集群扩容时无缝整合新节点，重新分配分片以便从离群节点恢复</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h1> ElasticSearch 原理</h1>

<h2> 前言</h2>
<p>Elasticsearch 尽可能地屏蔽了分布式系统的复杂性。这里列举了一些在后台自动执行的操作：</p>
<ul>
<li>分配文档到不同的容器 或 <em>分片</em> 中，文档可以储存在一个或多个节点中</li>
<li>按集群节点来均衡分配这些分片，从而对索引和搜索过程进行负载均衡</li>
<li>复制每个分片以支持数据冗余，从而防止硬件故障导致的数据丢失</li>
<li>将集群中任一节点的请求路由到存有相关数据的节点</li>
<li>集群扩容时无缝整合新节点，重新分配分片以便从离群节点恢复</li>
</ul>
<h2> 文档</h2>
<blockquote>
<p>通常情况下，我们使用的术语 <em>对象</em> 和 <em>文档</em> 是可以互相替换的。不过，有一个区别： 一个对象仅仅是类似于 hash 、 hashmap 、字典或者关联数组的 JSON 对象，对象中也可以嵌套其他的对象。 对象可能包含了另外一些对象。在 Elasticsearch 中，术语 <em>文档</em> 有着特定的含义。它是指最顶层或者根对象, 这个根对象被序列化成 JSON 并存储到 Elasticsearch 中，指定了唯一 ID。</p>
</blockquote>
<h2> 集群原理</h2>
<blockquote>
<p>对于大多数的数据库而言，通常需要对应用程序进行非常大的改动，才能利用上横向扩容的新增资源。 与之相反的是，ElastiSearch天生就是 <em>分布式的</em> ，它知道如何通过管理多节点来提高扩容性和可用性。 这也意味着你的应用无需关注这个问题。</p>
</blockquote>
<h3> 空集群</h3>
<blockquote>
<p>一个运行中的 Elasticsearch 实例称为一个节点，而集群是由一个或者多个拥有相同 <code>cluster.name</code> 配置的节点组成， 它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。</p>
</blockquote>
<p><strong>主节点：</strong></p>
<p>当一个节点被选举成为 <em>主</em> 节点时， 它将负责管理集群范围内的所有变更，例如增加、删除索引，或者增加、删除节点等。</p>
<p>主节点并不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。 任何节点都可以成为主节点。我们的示例集群就只有一个节点，所以它同时也成为了主节点。</p>
<p><strong>管理透明：</strong></p>
<p>作为用户，我们可以将请求发送到 <em>集群中的任何节点</em> ，包括主节点。</p>
<p>每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。</p>
<p>无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。</p>
<p>Elasticsearch 对这一切的管理都是透明的。</p>
<h3> 健康监控</h3>
<blockquote>
<p>Elasticsearch 的集群监控信息中包含了许多的统计数据，其中最为重要的一项就是 <em>集群健康</em> ， 它在 <code>status</code> 字段中展示为 <code>green</code> 、 <code>yellow</code> 或者 <code>red</code> 。</p>
</blockquote>
<p><code>status</code> 字段指示着当前集群在总体上是否工作正常。它的三种颜色含义如下：</p>
<ul>
<li><code>green</code>：所有的主分片和副本分片都正常运行。</li>
<li><code>yellow</code>：所有的主分片都正常运行，但不是所有的副本分片都正常运行。</li>
<li><code>red</code>：有主分片没能正常运行。</li>
</ul>
<h3> 分片</h3>
<p><strong>分片：</strong></p>
<ul>
<li>一个分片是一个底层的工作单元 ，它仅保存了全部数据中的一部分。</li>
<li>一个分片是一个 Lucene 的实例，以及它本身就是一个完整的搜索引擎。</li>
<li>一个分片可以是 <em>主</em> 分片或者 <em>副本</em> 分片。 索引内任意一个文档都归属于一个主分片，所以主分片的数目决定着索引能够保存的最大数据量。一个副本分片只是一个主分片的拷贝。副本分片作为硬件故障时保护数据不丢失的冗余备份，并为搜索和返回文档等读操作提供服务。在索引建立的时候就已经确定了主分片数，但是副本分片数可以随时修改。索引在默认情况下会被分配 5 个主分片。</li>
</ul>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>存储：</strong></p>
<ul>
<li>文档被存储和索引到分片内，但是应用程序是直接与索引而不是与分片进行交互。</li>
<li>Elasticsearch 是利用分片将数据分发到集群内各处的。</li>
<li>分片是数据的容器，文档保存在分片内，分片又被分配到集群内的各个节点里。</li>
<li>技术上来说，一个主分片最大能够存储 Integer.MAX_VALUE - 128 个文档，但是实际最大值还需要参考你的使用场景：包括你使用的硬件， 文档的大小和复杂程度，索引和查询文档的方式以及你期望的响应时长。</li>
</ul>
<p>**扩缩容：**当集群规模扩大或者缩小时， Elasticsearch 会自动的在各节点中迁移分片，使得数据仍然均匀分布在集群里。</p>
<h3> 故障转移</h3>
<p>可以在同一个目录内，完全依照启动第一个节点的方式来启动一个新节点。多个节点可以共享同一个目录。</p>
<p>当你在同一台机器上启动了第二个节点时，只要它和第一个节点有同样的 <code>cluster.name</code> 配置，它就会自动发现集群并加入到其中。</p>
<p>但是在不同机器上启动节点的时候，为了加入到同一集群，你需要配置一个可连接到的单播主机列表（<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/important-configuration-changes.html#unicast" target="_blank" rel="noopener noreferrer">最好使用单播代替组播</a>）。</p>
<p>当第二个节点加入到集群后，每个主分片对应的副本分片都会被分配到该节点上。 这意味着当集群内任何一个节点出现问题时，我们的数据都完好无损。</p>
<p>所有新近被索引的文档都将会保存在主分片上，然后被并行的复制到对应的副本分片上。这就保证了我们既可以从主分片又可以从副本分片上获得文档。</p>
<h3> 水平扩容</h3>
<p>水平扩容后，为了分散负载会对分片进行重新分配</p>
<p>分片是一个功能完整的搜索引擎，它拥有使用一个节点上的所有资源的能力。</p>
<p>拥有6个分片（3个主分片和3个副本分片）的索引可以最大扩容到6个节点，每个节点上存在一个分片，并且每个分片拥有所在节点的全部资源。</p>
<p>读操作——搜索和返回数据——可以同时被主分片 <em>或</em> 副本分片所处理，所以拥有越多的副本分片，将拥有越高的吞吐量。</p>
<p>更大的扩容：主分片的数目在索引创建时就已经确定了下来，但是副本分片的数量可以随时进行调整（如果只是在相同节点数目的集群上增加更多的副本分片并不能提高性能，因为每个分片从节点上获得的资源会变少。 需要增加更多的硬件资源来提升吞吐量）。</p>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="中间件"/>
    <category term="elasticsearch"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-04-23T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">ElasticSearch 客户端</title>
    <id>https://gzwrrr.github.io/article/elasticsearch/X-ElasticSearch%E5%AE%A2%E6%88%B7%E7%AB%AF.html</id>
    <link href="https://gzwrrr.github.io/article/elasticsearch/X-ElasticSearch%E5%AE%A2%E6%88%B7%E7%AB%AF.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> ElasticSearch 客户端</h1>

<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>相关文档：</p>
<ol>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/current/getting-started-java.html" target="_blank" rel="noopener noreferrer">https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/current/getting-started-java.html</a></li>
<li><a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#reference" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#reference</a></li>
</ol>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> ElasticSearch 客户端</h1>

<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>相关文档：</p>
<ol>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/current/getting-started-java.html" target="_blank" rel="noopener noreferrer">https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/current/getting-started-java.html</a></li>
<li><a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#reference" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#reference</a></li>
</ol>
</div>
<h2> 概述</h2>
<p>在 Java 中使用 Elasticsearch 有多种方式，Elasticsearch 是一个开源的分布式搜索和分析引擎，用于存储和检索大量的数据。以下是在 Java 中使用 Elasticsearch 的一些常见方式：</p>
<ol>
<li><strong>Elasticsearch Java High-Level REST Client：</strong> 这是官方提供的高级 REST 客户端，通过 HTTP 与 Elasticsearch 集群进行交互。它提供了与 Elasticsearch API 对应的 Java 方法，使得编写 Java 代码与 Elasticsearch 进行数据的索引、检索、删除等操作非常方便。</li>
<li><strong>Elasticsearch Java Low-Level REST Client：</strong> 这也是官方提供的 REST 客户端，与上述高级客户端相比，它提供了更底层的访问方式，更接近 Elasticsearch 的原生 REST API。适用于那些需要更精细控制的情况。</li>
<li><strong>Spring Data Elasticsearch：</strong> 如果您使用 Spring 框架，可以使用 Spring Data Elasticsearch 模块来集成 Elasticsearch。它提供了与 Spring Data JPA 类似的仓库接口和查询构建方式，让您能够通过编写简洁的代码与 Elasticsearch 进行交互。</li>
<li><strong>Native Java API：</strong> Elasticsearch 提供了原生的 Java API，您可以使用它来构建各种与 Elasticsearch 集群交互的代码。这需要更多的配置和处理，但提供了更高的灵活性。</li>
<li><strong>Elasticsearch Transport Client（已弃用）：</strong> Elasticsearch 早期提供了 Transport Client，用于与 Elasticsearch 集群建立连接，但在较新的版本中已被弃用，不再推荐使用。</li>
<li><strong>第三方库：</strong> 除了官方提供的方式外，还有一些第三方的 Elasticsearch 客户端库，例如 Jest、Elasticsearch RestHighLevelClient 等，它们也提供了在 Java 中与 Elasticsearch 集群进行交互的能力。</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="中间件"/>
    <category term="elasticsearch"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-04-23T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Kafaka 生产者</title>
    <id>https://gzwrrr.github.io/article/kafaka/Kafaka%E7%94%9F%E4%BA%A7%E8%80%85.html</id>
    <link href="https://gzwrrr.github.io/article/kafaka/Kafaka%E7%94%9F%E4%BA%A7%E8%80%85.html"/>
    <updated>2023-10-12T06:47:33.000Z</updated>
    <summary type="html"><![CDATA[<h1> Kafaka 生产者</h1>
<h2> 发送流程</h2>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//kafaka/20230731/生产者发送流程.png" alt="生产者发送流程" tabindex="0" loading="lazy"><figcaption>生产者发送流程</figcaption></figure>
<h2> 异步发送</h2>
<ol>
<li>普通异步发送</li>
<li>回调异步发送</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">"192.168.30.201:9092,192.168.30.201:9093,192.168.30.201:9094"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"test"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>recordMetadata<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主题："</span> <span class="token operator">+</span> recordMetadata<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 分区："</span> <span class="token operator">+</span> recordMetadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Kafaka 生产者</h1>
<h2> 发送流程</h2>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//kafaka/20230731/生产者发送流程.png" alt="生产者发送流程" tabindex="0" loading="lazy"><figcaption>生产者发送流程</figcaption></figure>
<h2> 异步发送</h2>
<ol>
<li>普通异步发送</li>
<li>回调异步发送</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>分区的好处：</strong></p>
<ol>
<li>便于合理使用存储资源，每个分区在一个 Broker 上存储，可以把海量的数据按照分区切割成一块一块数据存储在多台 Broker 上，合理控制分区的任务，可以实现负载均衡的效果</li>
<li>提高并行度：生产者可以以分区为单位发送数据，消费者可以以分区为单位消费数据</li>
</ol>
<br>
<p><strong>默认分区规则：</strong></p>
<ol>
<li>指定分区时直接将指明的值作为分区的值</li>
<li>没有指明分区值，但是有 key 的情况下，将 key 的 hash 值与 topic 的分区数进行取余得到分区值</li>
<li>既没有分区值也没有 key 时，采用 Sticky Partiton（黏性分区器），随机选择一个分区，并尽可能一直使用该分区，待该分区的 batch 已满或者已完成，再随机选择一个分区进行使用（和上一次的分区不一样）</li>
</ol>
<br>
<p><strong>自定义分区：</strong></p>
<p>实现 Partitioner 接口</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<p><strong>生产者提高吞吐量：</strong></p>
<ol>
<li>改变 batch.size 大小，默认是 16 k</li>
<li>改变等待时间 <a href="http://linger.ms" target="_blank" rel="noopener noreferrer">linger.ms</a>，可以修改为 5 ~ 100ms</li>
<li>改变 compression.type，压缩 snappy</li>
<li>改变 RecordAccumulator 缓冲区大小，可以修改为 64M</li>
</ol>
<p><strong>ack 应答级别：</strong></p>
<blockquote>
<p>从上到下可靠性上升，效率下降</p>
</blockquote>
<ol>
<li>级别 0：生产者发送过来的数据，不需要等待数据落盘应答</li>
<li>级别 1：生产者发送过来的数据，Leader 收到数据后应答</li>
<li>级别 -1（all）：生产者发送过来的数据，Leader 和 ISR 队列里面的所有节点收齐数据后应答</li>
</ol>
<h2> 事务</h2>
<blockquote>
<p>注意：开启事务，必须开启幂等性</p>
</blockquote>
<p>Producer 在使用事务功能之前，必须先自定义一个唯一的 <a href="http://transactional.id" target="_blank" rel="noopener noreferrer">transactional.id</a>，有了该 ID 后即使客户端挂掉了，重启后也能继续处理未完成的事务</p>
<p>事务信息存储在一个特定的分区中：</p>
<ol>
<li>默认有50个分区，每个分区负责一部分事务。</li>
<li>事务划分是根据 <a href="http://transactional.id" target="_blank" rel="noopener noreferrer">transactional.id</a> 的 hashcode 值 %50，计算出该事务属于哪个分区。</li>
<li>该分区 Leader 副本所在的 broker 节点即为这个 <a href="http://transactional.id" target="_blank" rel="noopener noreferrer">transactional.id</a> 对应的 Transaction Coordinator 节点。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 数据去重</h2>
<p><strong>幂等性原理：</strong></p>
<p>值 Producer 不论向 Broker 发送多少次重复数据，Broker 端都只会持久化一条，保证了不重复</p>
<p>重复数据的判断标准：具有 <code>&lt;PID, Partition, SeqNumber&gt;</code> 相同主键的消息提交时，Broker 只会持久化一条，其中 PID 是 Kafka 每次重启都会分配的 ID，Partition 表示分区号，Sequence Number 是单调自增的</p>
<p>所以幂等性只能保证再「单分区单会话」内不会重复</p>
<ol>
<li>精确一次：幂等性 + 至少一次（ack = -1 + 分区副本数 》= 2 + ISR 最小副本数 &gt;= 2）</li>
</ol>
<h2> 数据有序</h2>
<ol>
<li>单分区内有序</li>
<li>多分区时分区与分区无序</li>
</ol>
<p>Broker 默认最多缓存 5 个请求</p>
<p>kafka 1.x 之前无法保证单分区有序，需要单分区有序可以将 max.in.flight.requests.per.connection = 1（不需要考虑是否开启幂等性 ）</p>
<p>kafka 1.x 之后保证单分区有序可以使用：</p>
<ol>
<li>未开启幂等性：max.in.flight.requests.per.connection = 1</li>
<li>开启幂等性：max.in.flight.requests.per.connection &lt;= 5</li>
</ol>
<p><a href="https://www.bilibili.com/video/BV1vr4y1677k?p=22&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1vr4y1677k?p=22&amp;vd_source=e356fec025b50061af78324a814f8da0</a></p>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="中间件"/>
    <category term="消息队列"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-01-13T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Mybatis 源码</title>
    <id>https://gzwrrr.github.io/article/mybatis/Mybatis%E6%BA%90%E7%A0%81.html</id>
    <link href="https://gzwrrr.github.io/article/mybatis/Mybatis%E6%BA%90%E7%A0%81.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Mybatis 源码</h1>
<h2> 解析配置</h2>
<p>配置文件解析：SqlSessionFactory -&gt; SqlSessionFactoryBuilder -&gt; XMLConfigBuilder，XMLConfigBuilder 核心方法为：<code>parseConfiguration</code>：</p>
<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseConfiguration</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// issue #117 read properties first</span>
        <span class="token comment">// properties 只能放在最前面</span>
        <span class="token function">propertiesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Properties</span> settings <span class="token operator">=</span> <span class="token function">settingsAsProperties</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">loadCustomVfs</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">loadCustomLogImpl</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">typeAliasesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeAliases"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pluginElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"plugins"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">objectFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">objectWrapperFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectWrapperFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">reflectorFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"reflectorFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">settingsElement</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// read it after objectFactory and objectWrapperFactory issue #631</span>
        <span class="token function">environmentsElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"environments"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">databaseIdProviderElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"databaseIdProvider"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">typeHandlerElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeHandlers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">mapperElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"mappers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Error parsing SQL Mapper Configuration. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Mybatis 源码</h1>
<h2> 解析配置</h2>
<p>配置文件解析：SqlSessionFactory -&gt; SqlSessionFactoryBuilder -&gt; XMLConfigBuilder，XMLConfigBuilder 核心方法为：<code>parseConfiguration</code>：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以使用 JavaConfig 创建配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 执行 SQL</h2>
<p>SqlSessionFactory 可以获取到 SqlSession，SqlSession 提供了在数据库执行 SQL 命令所需的所有方法，可以通过 SqlSession 实例来直接执行已映射的 SQL 语句</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>SqlSessionFactory 用于获取 SqlSession，有两个实现类：</p>
<ol>
<li>DefaultSqlSessionFactory</li>
<li>SqlSessionManager</li>
</ol>
<p>SqlSession 中定义了所有操作 SQL 的方法，有两个实现类：</p>
<ol>
<li>DefaultSqlSession</li>
<li>SqlSessionManager</li>
</ol>
<p>DefaultSqlSessionFactory，DefaultSqlSession 是具体的实现</p>
</div>
<p>使用代理获取 SqlSession：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning">
<p class="hint-container-title">注意点（SqlSession）</p>
<p>​	每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 如果你现在正在使用一种 Web 框架，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。 换句话说，每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。 这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 finally 块中,在所有代码中都遵循这种使用模式，可以保证所有数据库资源都能被正确地关闭。</p>
</div>
<div class="hint-container warning">
<p class="hint-container-title">注意点（Mapper）</p>
<p>​	映射器是一些绑定映射语句的接口。映射器接口的实例是从 SqlSession 中获得的。虽然从技术层面上来讲，任何映射器实例的最大作用域与请求它们的 SqlSession 相同。但方法作用域才是映射器实例的最合适的作用域。 也就是说，映射器实例应该在调用它们的方法中被获取，使用完毕之后即可丢弃。 映射器实例并不需要被显式地关闭。尽管在整个请求作用域保留映射器实例不会有什么问题，但是你很快会发现，在这个作用域上管理太多像 SqlSession 的资源会让你忙不过来。 因此，最好将映射器放在方法作用域内</p>
</div>
<h2> 映射 SQL</h2>
<ol>
<li>XML 映射</li>
<li>注解映射</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="数据库"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-05-03T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">MySQL 函数</title>
    <id>https://gzwrrr.github.io/article/mysql/X-MySQL%E5%87%BD%E6%95%B0.html</id>
    <link href="https://gzwrrr.github.io/article/mysql/X-MySQL%E5%87%BD%E6%95%B0.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> MySQL 函数</h1>
<h2> 版本一</h2>
<h3> 数值型函数</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>函数名称</th>
<th>作 用</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://c.biancheng.net/mysql/abc.html" target="_blank" rel="noopener noreferrer">ABS</a></td>
<td>求绝对值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/sqrt.html" target="_blank" rel="noopener noreferrer">SQRT</a></td>
<td>求二次方根</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/mod.html" target="_blank" rel="noopener noreferrer">MOD</a></td>
<td>求余数</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/ceil_celing.html" target="_blank" rel="noopener noreferrer">CEIL 和 CEILING</a></td>
<td>两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/floor.html" target="_blank" rel="noopener noreferrer">FLOOR</a></td>
<td>向下取整，返回值转化为一个BIGINT</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/rand.html" target="_blank" rel="noopener noreferrer">RAND</a></td>
<td>生成一个0~1之间的随机数，传入整数参数是，用来产生重复序列</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/round.html" target="_blank" rel="noopener noreferrer">ROUND</a></td>
<td>对所传参数进行四舍五入</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/sign.html" target="_blank" rel="noopener noreferrer">SIGN</a></td>
<td>返回参数的符号</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/pow_power.html" target="_blank" rel="noopener noreferrer">POW 和 POWER</a></td>
<td>两个函数的功能相同，都是所传参数的次方的结果值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/sin.html" target="_blank" rel="noopener noreferrer">SIN</a></td>
<td>求正弦值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/asin.html" target="_blank" rel="noopener noreferrer">ASIN</a></td>
<td>求反正弦值，与函数 SIN 互为反函数</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/cos.html" target="_blank" rel="noopener noreferrer">COS</a></td>
<td>求余弦值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/acos.html" target="_blank" rel="noopener noreferrer">ACOS</a></td>
<td>求反余弦值，与函数 COS 互为反函数</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/tan.html" target="_blank" rel="noopener noreferrer">TAN</a></td>
<td>求正切值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/atan.html" target="_blank" rel="noopener noreferrer">ATAN</a></td>
<td>求反正切值，与函数 TAN 互为反函数</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/cot.html" target="_blank" rel="noopener noreferrer">COT</a></td>
<td>求余切值</td>
</tr>
</tbody>
</table>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> MySQL 函数</h1>
<h2> 版本一</h2>
<h3> 数值型函数</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>函数名称</th>
<th>作 用</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://c.biancheng.net/mysql/abc.html" target="_blank" rel="noopener noreferrer">ABS</a></td>
<td>求绝对值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/sqrt.html" target="_blank" rel="noopener noreferrer">SQRT</a></td>
<td>求二次方根</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/mod.html" target="_blank" rel="noopener noreferrer">MOD</a></td>
<td>求余数</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/ceil_celing.html" target="_blank" rel="noopener noreferrer">CEIL 和 CEILING</a></td>
<td>两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/floor.html" target="_blank" rel="noopener noreferrer">FLOOR</a></td>
<td>向下取整，返回值转化为一个BIGINT</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/rand.html" target="_blank" rel="noopener noreferrer">RAND</a></td>
<td>生成一个0~1之间的随机数，传入整数参数是，用来产生重复序列</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/round.html" target="_blank" rel="noopener noreferrer">ROUND</a></td>
<td>对所传参数进行四舍五入</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/sign.html" target="_blank" rel="noopener noreferrer">SIGN</a></td>
<td>返回参数的符号</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/pow_power.html" target="_blank" rel="noopener noreferrer">POW 和 POWER</a></td>
<td>两个函数的功能相同，都是所传参数的次方的结果值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/sin.html" target="_blank" rel="noopener noreferrer">SIN</a></td>
<td>求正弦值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/asin.html" target="_blank" rel="noopener noreferrer">ASIN</a></td>
<td>求反正弦值，与函数 SIN 互为反函数</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/cos.html" target="_blank" rel="noopener noreferrer">COS</a></td>
<td>求余弦值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/acos.html" target="_blank" rel="noopener noreferrer">ACOS</a></td>
<td>求反余弦值，与函数 COS 互为反函数</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/tan.html" target="_blank" rel="noopener noreferrer">TAN</a></td>
<td>求正切值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/atan.html" target="_blank" rel="noopener noreferrer">ATAN</a></td>
<td>求反正切值，与函数 TAN 互为反函数</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/cot.html" target="_blank" rel="noopener noreferrer">COT</a></td>
<td>求余切值</td>
</tr>
</tbody>
</table>
</div><h3> 字符串函数</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>函数名称</th>
<th>作 用</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://c.biancheng.net/mysql/length.html" target="_blank" rel="noopener noreferrer">LENGTH</a></td>
<td>计算字符串长度函数，返回字符串的字节长度</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/concat.html" target="_blank" rel="noopener noreferrer">CONCAT</a></td>
<td>合并字符串函数，返回结果为连接参数产生的字符串，参数可以使一个或多个</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/insert.html" target="_blank" rel="noopener noreferrer">INSERT</a></td>
<td>替换字符串函数</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/lower.html" target="_blank" rel="noopener noreferrer">LOWER</a></td>
<td>将字符串中的字母转换为小写</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/upper.html" target="_blank" rel="noopener noreferrer">UPPER</a></td>
<td>将字符串中的字母转换为大写</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/left.html" target="_blank" rel="noopener noreferrer">LEFT</a></td>
<td>从左侧字截取符串，返回字符串左边的若干个字符</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/right.html" target="_blank" rel="noopener noreferrer">RIGHT</a></td>
<td>从右侧字截取符串，返回字符串右边的若干个字符</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/trim.html" target="_blank" rel="noopener noreferrer">TRIM</a></td>
<td>删除字符串左右两侧的空格</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/replace.html" target="_blank" rel="noopener noreferrer">REPLACE</a></td>
<td>字符串替换函数，返回替换后的新字符串</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/substring.html" target="_blank" rel="noopener noreferrer">SUBSTRING</a></td>
<td>截取字符串，返回从指定位置开始的指定长度的字符换</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/reverse.html" target="_blank" rel="noopener noreferrer">REVERSE</a></td>
<td>字符串反转（逆序）函数，返回与原始字符串顺序相反的字符串</td>
</tr>
</tbody>
</table>
</div><h3> 日期和时间函数</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>函数名称</th>
<th>作 用</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://c.biancheng.net/mysql/curdate_current_date.html" target="_blank" rel="noopener noreferrer">CURDATE 和 CURRENT_DATE</a></td>
<td>两个函数作用相同，返回当前系统的日期值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/curtime_current_time.html" target="_blank" rel="noopener noreferrer">CURTIME 和 CURRENT_TIME</a></td>
<td>两个函数作用相同，返回当前系统的时间值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/now_sysdate.html" target="_blank" rel="noopener noreferrer">NOW 和 SYSDATE</a></td>
<td>两个函数作用相同，返回当前系统的日期和时间值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/unix_timestamp.html" target="_blank" rel="noopener noreferrer">UNIX_TIMESTAMP</a></td>
<td>获取UNIX时间戳函数，返回一个以 UNIX 时间戳为基础的无符号整数</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/from_unixtime.html" target="_blank" rel="noopener noreferrer">FROM_UNIXTIME</a></td>
<td>将 UNIX 时间戳转换为时间格式，与UNIX_TIMESTAMP互为反函数</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/month.html" target="_blank" rel="noopener noreferrer">MONTH</a></td>
<td>获取指定日期中的月份</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/monthname.html" target="_blank" rel="noopener noreferrer">MONTHNAME</a></td>
<td>获取指定日期中的月份英文名称</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/dayname.html" target="_blank" rel="noopener noreferrer">DAYNAME</a></td>
<td>获取指定曰期对应的星期几的英文名称</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/dayofweek.html" target="_blank" rel="noopener noreferrer">DAYOFWEEK</a></td>
<td>获取指定日期对应的一周的索引位置值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/week.html" target="_blank" rel="noopener noreferrer">WEEK</a></td>
<td>获取指定日期是一年中的第几周，返回值的范围是否为 0〜52 或 1〜53</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/dayofyear.html" target="_blank" rel="noopener noreferrer">DAYOFYEAR</a></td>
<td>获取指定曰期是一年中的第几天，返回值范围是1~366</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/dayofmonth.html" target="_blank" rel="noopener noreferrer">DAYOFMONTH</a></td>
<td>获取指定日期是一个月中是第几天，返回值范围是1~31</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/year.html" target="_blank" rel="noopener noreferrer">YEAR</a></td>
<td>获取年份，返回值范围是 1970〜2069</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/time_to_sec.html" target="_blank" rel="noopener noreferrer">TIME_TO_SEC</a></td>
<td>将时间参数转换为秒数</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/sec_to_time.html" target="_blank" rel="noopener noreferrer">SEC_TO_TIME</a></td>
<td>将秒数转换为时间，与TIME_TO_SEC 互为反函数</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/date_add_adddate.html" target="_blank" rel="noopener noreferrer">DATE_ADD 和 ADDDATE</a></td>
<td>两个函数功能相同，都是向日期添加指定的时间间隔</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/date_sub_subdate.html" target="_blank" rel="noopener noreferrer">DATE_SUB 和 SUBDATE</a></td>
<td>两个函数功能相同，都是向日期减去指定的时间间隔</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/addtime.html" target="_blank" rel="noopener noreferrer">ADDTIME</a></td>
<td>时间加法运算，在原始时间上添加指定的时间</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/subtime.html" target="_blank" rel="noopener noreferrer">SUBTIME</a></td>
<td>时间减法运算，在原始时间上减去指定的时间</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/datediff.html" target="_blank" rel="noopener noreferrer">DATEDIFF</a></td>
<td>获取两个日期之间间隔，返回参数 1 减去参数 2 的值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/date_format.html" target="_blank" rel="noopener noreferrer">DATE_FORMAT</a></td>
<td>格式化指定的日期，根据参数返回指定格式的值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/weekday.html" target="_blank" rel="noopener noreferrer">WEEKDAY</a></td>
<td>获取指定日期在一周内的对应的工作日索引</td>
</tr>
</tbody>
</table>
</div><h3> 聚合函数</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>函数名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://c.biancheng.net/mysql/max.html" target="_blank" rel="noopener noreferrer">MAX</a></td>
<td>查询指定列的最大值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/min.html" target="_blank" rel="noopener noreferrer">MIN</a></td>
<td>查询指定列的最小值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/count.html" target="_blank" rel="noopener noreferrer">COUNT</a></td>
<td>统计查询结果的行数</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/sum.html" target="_blank" rel="noopener noreferrer">SUM</a></td>
<td>求和，返回指定列的总和</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/avg.html" target="_blank" rel="noopener noreferrer">AVG</a></td>
<td>求平均值，返回指定列数据的平均值</td>
</tr>
</tbody>
</table>
</div><h3> 流程控制函数</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>函数名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://c.biancheng.net/mysql/if.html" target="_blank" rel="noopener noreferrer">IF</a></td>
<td>判断，流程控制</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/ifnull.html" target="_blank" rel="noopener noreferrer">IFNULL</a></td>
<td>判断是否为空</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/mysql/case.html" target="_blank" rel="noopener noreferrer">CASE</a></td>
<td>搜索语句</td>
</tr>
</tbody>
</table>
</div><h2> 版本二</h2>
<h3> 字符串函数</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ASCII(s)</td>
<td style="text-align:left">返回字符串 s 的第一个字符的 ASCII 码。</td>
<td style="text-align:left">返回 CustomerName 字段第一个字母的 ASCII 码：<code>SELECT ASCII(CustomerName) AS NumCodeOfFirstChar FROM Customers;</code></td>
</tr>
<tr>
<td style="text-align:left">CHAR_LENGTH(s)</td>
<td style="text-align:left">返回字符串 s 的字符数</td>
<td style="text-align:left">返回字符串 RUNOOB 的字符数<code>SELECT CHAR_LENGTH("RUNOOB") AS LengthOfString;</code></td>
</tr>
<tr>
<td style="text-align:left">CHARACTER_LENGTH(s)</td>
<td style="text-align:left">返回字符串 s 的字符数，等同于 CHAR_LENGTH(s)</td>
<td style="text-align:left">返回字符串 RUNOOB 的字符数<code>SELECT CHARACTER_LENGTH("RUNOOB") AS LengthOfString;</code></td>
</tr>
<tr>
<td style="text-align:left">CONCAT(s1,s2...sn)</td>
<td style="text-align:left">字符串 s1,s2 等多个字符串合并为一个字符串</td>
<td style="text-align:left">合并多个字符串<code>SELECT CONCAT("SQL ", "Runoob ", "Gooogle ", "Facebook") AS ConcatenatedString;</code></td>
</tr>
<tr>
<td style="text-align:left">CONCAT_WS(x, s1,s2...sn)</td>
<td style="text-align:left">同 CONCAT(s1,s2,...) 函数，但是每个字符串之间要加上 x，x 可以是分隔符</td>
<td style="text-align:left">合并多个字符串，并添加分隔符：<code>SELECT CONCAT_WS("-", "SQL", "Tutorial", "is", "fun!")AS ConcatenatedString;</code></td>
</tr>
<tr>
<td style="text-align:left">FIELD(s,s1,s2...)</td>
<td style="text-align:left">返回第一个字符串 s 在字符串列表(s1,s2...)中的位置</td>
<td style="text-align:left">返回字符串 c 在列表值中的位置：<code>SELECT FIELD("c", "a", "b", "c", "d", "e");</code></td>
</tr>
<tr>
<td style="text-align:left">FIND_IN_SET(s1,s2)</td>
<td style="text-align:left">返回在字符串s2中与s1匹配的字符串的位置</td>
<td style="text-align:left">返回字符串 c 在指定字符串中的位置：<code>SELECT FIND_IN_SET("c", "a,b,c,d,e");</code></td>
</tr>
<tr>
<td style="text-align:left">FORMAT(x,n)</td>
<td style="text-align:left">函数可以将数字 x 进行格式化 "#,###.##", 将 x 保留到小数点后 n 位，最后一位四舍五入。</td>
<td style="text-align:left">格式化数字 "#,###.##" 形式：<code>SELECT FORMAT(250500.5634, 2);     -- 输出 250,500.56</code></td>
</tr>
<tr>
<td style="text-align:left">INSERT(s1,x,len,s2)</td>
<td style="text-align:left">字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串</td>
<td style="text-align:left">从字符串第一个位置开始的 6 个字符替换为 runoob：<code>SELECT INSERT("google.com", 1, 6, "runoob");  -- 输出：runoob.com</code></td>
</tr>
<tr>
<td style="text-align:left">LOCATE(s1,s)</td>
<td style="text-align:left">从字符串 s 中获取 s1 的开始位置</td>
<td style="text-align:left">获取 b 在字符串 abc 中的位置：<code>SELECT LOCATE('st','myteststring');  -- 5</code>返回字符串 abc 中 b 的位置：<code>SELECT LOCATE('b', 'abc') -- 2</code></td>
</tr>
<tr>
<td style="text-align:left">LCASE(s)</td>
<td style="text-align:left">将字符串 s 的所有字母变成小写字母</td>
<td style="text-align:left">字符串 RUNOOB 转换为小写：<code>SELECT LCASE('RUNOOB') -- runoob</code></td>
</tr>
<tr>
<td style="text-align:left">LEFT(s,n)</td>
<td style="text-align:left">返回字符串 s 的前 n 个字符</td>
<td style="text-align:left">返回字符串 runoob 中的前两个字符：<code>SELECT LEFT('runoob',2) -- ru</code></td>
</tr>
<tr>
<td style="text-align:left">LOWER(s)</td>
<td style="text-align:left">将字符串 s 的所有字母变成小写字母</td>
<td style="text-align:left">字符串 RUNOOB 转换为小写：<code>SELECT LOWER('RUNOOB') -- runoob</code></td>
</tr>
<tr>
<td style="text-align:left">LPAD(s1,len,s2)</td>
<td style="text-align:left">在字符串 s1 的开始处填充字符串 s2，使字符串长度达到 len</td>
<td style="text-align:left">将字符串 xx 填充到 abc 字符串的开始处：<code>SELECT LPAD('abc',5,'xx') -- xxabc</code></td>
</tr>
<tr>
<td style="text-align:left">LTRIM(s)</td>
<td style="text-align:left">去掉字符串 s 开始处的空格</td>
<td style="text-align:left">去掉字符串 RUNOOB开始处的空格：<code>SELECT LTRIM("    RUNOOB") AS LeftTrimmedString;-- RUNOOB</code></td>
</tr>
<tr>
<td style="text-align:left">MID(s,n,len)</td>
<td style="text-align:left">从字符串 s 的 n 位置截取长度为 len 的子字符串，同 SUBSTRING(s,n,len)</td>
<td style="text-align:left">从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：<code>SELECT MID("RUNOOB", 2, 3) AS ExtractString; -- UNO</code></td>
</tr>
<tr>
<td style="text-align:left">POSITION(s1 IN s)</td>
<td style="text-align:left">从字符串 s 中获取 s1 的开始位置</td>
<td style="text-align:left">返回字符串 abc 中 b 的位置：<code>SELECT POSITION('b' in 'abc') -- 2</code></td>
</tr>
<tr>
<td style="text-align:left">REPEAT(s,n)</td>
<td style="text-align:left">将字符串 s 重复 n 次</td>
<td style="text-align:left">将字符串 runoob 重复三次：<code>SELECT REPEAT('runoob',3) -- runoobrunoobrunoob</code></td>
</tr>
<tr>
<td style="text-align:left">REPLACE(s,s1,s2)</td>
<td style="text-align:left">将字符串 s2 替代字符串 s 中的字符串 s1</td>
<td style="text-align:left">将字符串 abc 中的字符 a 替换为字符 x：<code>SELECT REPLACE('abc','a','x') --xbc</code></td>
</tr>
<tr>
<td style="text-align:left">REVERSE(s)</td>
<td style="text-align:left">将字符串s的顺序反过来</td>
<td style="text-align:left">将字符串 abc 的顺序反过来：<code>SELECT REVERSE('abc') -- cba</code></td>
</tr>
<tr>
<td style="text-align:left">RIGHT(s,n)</td>
<td style="text-align:left">返回字符串 s 的后 n 个字符</td>
<td style="text-align:left">返回字符串 runoob 的后两个字符：<code>SELECT RIGHT('runoob',2) -- ob</code></td>
</tr>
<tr>
<td style="text-align:left">RPAD(s1,len,s2)</td>
<td style="text-align:left">在字符串 s1 的结尾处添加字符串 s2，使字符串的长度达到 len</td>
<td style="text-align:left">将字符串 xx 填充到 abc 字符串的结尾处：<code>SELECT RPAD('abc',5,'xx') -- abcxx</code></td>
</tr>
<tr>
<td style="text-align:left">RTRIM(s)</td>
<td style="text-align:left">去掉字符串 s 结尾处的空格</td>
<td style="text-align:left">去掉字符串 RUNOOB 的末尾空格：<code>SELECT RTRIM("RUNOOB     ") AS RightTrimmedString;   -- RUNOOB</code></td>
</tr>
<tr>
<td style="text-align:left">SPACE(n)</td>
<td style="text-align:left">返回 n 个空格</td>
<td style="text-align:left">返回 10 个空格：<code>SELECT SPACE(10);</code></td>
</tr>
<tr>
<td style="text-align:left">STRCMP(s1,s2)</td>
<td style="text-align:left">比较字符串 s1 和 s2，如果 s1 与 s2 相等返回 0 ，如果 s1&gt;s2 返回 1，如果 s1&lt;s2 返回 -1</td>
<td style="text-align:left">比较字符串：<code>SELECT STRCMP("runoob", "runoob");  -- 0</code></td>
</tr>
<tr>
<td style="text-align:left">SUBSTR(s, start, length)</td>
<td style="text-align:left">从字符串 s 的 start 位置截取长度为 length 的子字符串</td>
<td style="text-align:left">从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：<code>SELECT SUBSTR("RUNOOB", 2, 3) AS ExtractString; -- UNO</code></td>
</tr>
<tr>
<td style="text-align:left">SUBSTRING(s, start, length)</td>
<td style="text-align:left">从字符串 s 的 start 位置截取长度为 length 的子字符串，等同于 SUBSTR(s, start, length)</td>
<td style="text-align:left">从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：<code>SELECT SUBSTRING("RUNOOB", 2, 3) AS ExtractString; -- UNO</code></td>
</tr>
<tr>
<td style="text-align:left">SUBSTRING_INDEX(s, delimiter, number)</td>
<td style="text-align:left">返回从字符串 s 的第 number 个出现的分隔符 delimiter 之后的子串。 如果 number 是正数，返回第 number 个字符左边的字符串。 如果 number 是负数，返回第(number 的绝对值(从右边数))个字符右边的字符串。</td>
<td style="text-align:left"><code>SELECT SUBSTRING_INDEX('a*b','*',1) -- a SELECT SUBSTRING_INDEX('a*b','*',-1)  -- b SELECT SUBSTRING_INDEX(SUBSTRING_INDEX('a*b*c*d*e','*',3),'*',-1)  -- c</code></td>
</tr>
<tr>
<td style="text-align:left">TRIM(s)</td>
<td style="text-align:left">去掉字符串 s 开始和结尾处的空格</td>
<td style="text-align:left">去掉字符串 RUNOOB 的首尾空格：<code>SELECT TRIM('    RUNOOB    ') AS TrimmedString;</code></td>
</tr>
<tr>
<td style="text-align:left">UCASE(s)</td>
<td style="text-align:left">将字符串转换为大写</td>
<td style="text-align:left">将字符串 runoob 转换为大写：<code>SELECT UCASE("runoob"); -- RUNOOB</code></td>
</tr>
<tr>
<td style="text-align:left">UPPER(s)</td>
<td style="text-align:left">将字符串转换为大写</td>
<td style="text-align:left">将字符串 runoob 转换为大写：<code>SELECT UPPER("runoob"); -- RUNOOB</code></td>
</tr>
</tbody>
</table>
</div><h3> 数字函数</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">函数名</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ABS(x)</td>
<td style="text-align:left">返回 x 的绝对值</td>
<td style="text-align:left">返回 -1 的绝对值：<code>SELECT ABS(-1) -- 返回1</code></td>
</tr>
<tr>
<td style="text-align:left">ACOS(x)</td>
<td style="text-align:left">求 x 的反余弦值（单位为弧度），x 为一个数值</td>
<td style="text-align:left"><code>SELECT ACOS(0.25);</code></td>
</tr>
<tr>
<td style="text-align:left">ASIN(x)</td>
<td style="text-align:left">求反正弦值（单位为弧度），x 为一个数值</td>
<td style="text-align:left"><code>SELECT ASIN(0.25);</code></td>
</tr>
<tr>
<td style="text-align:left">ATAN(x)</td>
<td style="text-align:left">求反正切值（单位为弧度），x 为一个数值</td>
<td style="text-align:left"><code>SELECT ATAN(2.5);</code></td>
</tr>
<tr>
<td style="text-align:left">ATAN2(n, m)</td>
<td style="text-align:left">求反正切值（单位为弧度）</td>
<td style="text-align:left"><code>SELECT ATAN2(-0.8, 2);</code></td>
</tr>
<tr>
<td style="text-align:left">AVG(expression)</td>
<td style="text-align:left">返回一个表达式的平均值，expression 是一个字段</td>
<td style="text-align:left">返回 Products 表中Price 字段的平均值：<code>SELECT AVG(Price) AS AveragePrice FROM Products;</code></td>
</tr>
<tr>
<td style="text-align:left">CEIL(x)</td>
<td style="text-align:left">返回大于或等于 x 的最小整数</td>
<td style="text-align:left"><code>SELECT CEIL(1.5) -- 返回2</code></td>
</tr>
<tr>
<td style="text-align:left">CEILING(x)</td>
<td style="text-align:left">返回大于或等于 x 的最小整数</td>
<td style="text-align:left"><code>SELECT CEILING(1.5); -- 返回2</code></td>
</tr>
<tr>
<td style="text-align:left">COS(x)</td>
<td style="text-align:left">求余弦值(参数是弧度)</td>
<td style="text-align:left"><code>SELECT COS(2);</code></td>
</tr>
<tr>
<td style="text-align:left">COT(x)</td>
<td style="text-align:left">求余切值(参数是弧度)</td>
<td style="text-align:left"><code>SELECT COT(6);</code></td>
</tr>
<tr>
<td style="text-align:left">COUNT(expression)</td>
<td style="text-align:left">返回查询的记录总数，expression 参数是一个字段或者 * 号</td>
<td style="text-align:left">返回 Products 表中 products 字段总共有多少条记录：<code>SELECT COUNT(ProductID) AS NumberOfProducts FROM Products;</code></td>
</tr>
<tr>
<td style="text-align:left">DEGREES(x)</td>
<td style="text-align:left">将弧度转换为角度</td>
<td style="text-align:left"><code>SELECT DEGREES(3.1415926535898) -- 180</code></td>
</tr>
<tr>
<td style="text-align:left">n DIV m</td>
<td style="text-align:left">整除，n 为被除数，m 为除数</td>
<td style="text-align:left">计算 10 除于 5：<code>SELECT 10 DIV 5;  -- 2</code></td>
</tr>
<tr>
<td style="text-align:left">EXP(x)</td>
<td style="text-align:left">返回 e 的 x 次方</td>
<td style="text-align:left">计算 e 的三次方：<code>SELECT EXP(3) -- 20.085536923188</code></td>
</tr>
<tr>
<td style="text-align:left">FLOOR(x)</td>
<td style="text-align:left">返回小于或等于 x 的最大整数</td>
<td style="text-align:left">小于或等于 1.5 的整数：<code>SELECT FLOOR(1.5) -- 返回1</code></td>
</tr>
<tr>
<td style="text-align:left">GREATEST(expr1, expr2, expr3, ...)</td>
<td style="text-align:left">返回列表中的最大值</td>
<td style="text-align:left">返回以下数字列表中的最大值：<code>SELECT GREATEST(3, 12, 34, 8, 25); -- 34</code>返回以下字符串列表中的最大值：<code>SELECT GREATEST("Google", "Runoob", "Apple");   -- Runoob</code></td>
</tr>
<tr>
<td style="text-align:left">LEAST(expr1, expr2, expr3, ...)</td>
<td style="text-align:left">返回列表中的最小值</td>
<td style="text-align:left">返回以下数字列表中的最小值：<code>SELECT LEAST(3, 12, 34, 8, 25); -- 3</code>返回以下字符串列表中的最小值：<code>SELECT LEAST("Google", "Runoob", "Apple");   -- Apple</code></td>
</tr>
<tr>
<td style="text-align:left">LN</td>
<td style="text-align:left">返回数字的自然对数，以 e 为底。</td>
<td style="text-align:left">返回 2 的自然对数：<code>SELECT LN(2);  -- 0.6931471805599453</code></td>
</tr>
<tr>
<td style="text-align:left">LOG(x) 或 LOG(base, x)</td>
<td style="text-align:left">返回自然对数(以 e 为底的对数)，如果带有 base 参数，则 base 为指定带底数。</td>
<td style="text-align:left"><code>SELECT LOG(20.085536923188) -- 3 SELECT LOG(2, 4); -- 2</code></td>
</tr>
<tr>
<td style="text-align:left">LOG10(x)</td>
<td style="text-align:left">返回以 10 为底的对数</td>
<td style="text-align:left"><code>SELECT LOG10(100) -- 2</code></td>
</tr>
<tr>
<td style="text-align:left">LOG2(x)</td>
<td style="text-align:left">返回以 2 为底的对数</td>
<td style="text-align:left">返回以 2 为底 6 的对数：<code>SELECT LOG2(6);  -- 2.584962500721156</code></td>
</tr>
<tr>
<td style="text-align:left">MAX(expression)</td>
<td style="text-align:left">返回字段 expression 中的最大值</td>
<td style="text-align:left">返回数据表 Products 中字段 Price 的最大值：<code>SELECT MAX(Price) AS LargestPrice FROM Products;</code></td>
</tr>
<tr>
<td style="text-align:left">MIN(expression)</td>
<td style="text-align:left">返回字段 expression 中的最小值</td>
<td style="text-align:left">返回数据表 Products 中字段 Price 的最小值：<code>SELECT MIN(Price) AS MinPrice FROM Products;</code></td>
</tr>
<tr>
<td style="text-align:left">MOD(x,y)</td>
<td style="text-align:left">返回 x 除以 y 以后的余数</td>
<td style="text-align:left">5 除于 2 的余数：<code>SELECT MOD(5,2) -- 1</code></td>
</tr>
<tr>
<td style="text-align:left">PI()</td>
<td style="text-align:left">返回圆周率(3.141593）</td>
<td style="text-align:left"><code>SELECT PI() --3.141593</code></td>
</tr>
<tr>
<td style="text-align:left">POW(x,y)</td>
<td style="text-align:left">返回 x 的 y 次方</td>
<td style="text-align:left">2 的 3 次方：<code>SELECT POW(2,3) -- 8</code></td>
</tr>
<tr>
<td style="text-align:left">POWER(x,y)</td>
<td style="text-align:left">返回 x 的 y 次方</td>
<td style="text-align:left">2 的 3 次方：<code>SELECT POWER(2,3) -- 8</code></td>
</tr>
<tr>
<td style="text-align:left">RADIANS(x)</td>
<td style="text-align:left">将角度转换为弧度</td>
<td style="text-align:left">180 度转换为弧度：<code>SELECT RADIANS(180) -- 3.1415926535898</code></td>
</tr>
<tr>
<td style="text-align:left">RAND()</td>
<td style="text-align:left">返回 0 到 1 的随机数</td>
<td style="text-align:left"><code>SELECT RAND() --0.93099315644334</code></td>
</tr>
<tr>
<td style="text-align:left">ROUND(x [,y])</td>
<td style="text-align:left">返回离 x 最近的整数，可选参数 y 表示要四舍五入的小数位数，如果省略，则返回整数。</td>
<td style="text-align:left"><code>SELECT ROUND(1.23456) --1 SELECT ROUND(345.156, 2) -- 345.16</code></td>
</tr>
<tr>
<td style="text-align:left">SIGN(x)</td>
<td style="text-align:left">返回 x 的符号，x 是负数、0、正数分别返回 -1、0 和 1</td>
<td style="text-align:left"><code>SELECT SIGN(-10) -- (-1)</code></td>
</tr>
<tr>
<td style="text-align:left">SIN(x)</td>
<td style="text-align:left">求正弦值(参数是弧度)</td>
<td style="text-align:left"><code>SELECT SIN(RADIANS(30)) -- 0.5</code></td>
</tr>
<tr>
<td style="text-align:left">SQRT(x)</td>
<td style="text-align:left">返回x的平方根</td>
<td style="text-align:left">25 的平方根：<code>SELECT SQRT(25) -- 5</code></td>
</tr>
<tr>
<td style="text-align:left">SUM(expression)</td>
<td style="text-align:left">返回指定字段的总和</td>
<td style="text-align:left">计算 OrderDetails 表中字段 Quantity 的总和：<code>SELECT SUM(Quantity) AS TotalItemsOrdered FROM OrderDetails;</code></td>
</tr>
<tr>
<td style="text-align:left">TAN(x)</td>
<td style="text-align:left">求正切值(参数是弧度)</td>
<td style="text-align:left"><code>SELECT TAN(1.75);  -- -5.52037992250933</code></td>
</tr>
<tr>
<td style="text-align:left">TRUNCATE(x,y)</td>
<td style="text-align:left">返回数值 x 保留到小数点后 y 位的值（与 ROUND 最大的区别是不会进行四舍五入）</td>
<td style="text-align:left"><code>SELECT TRUNCATE(1.23456,3) -- 1.234</code></td>
</tr>
</tbody>
</table>
</div><hr>
<h3> 日期函数</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">函数名</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ADDDATE(d,n)</td>
<td style="text-align:left">计算起始日期 d 加上 n 天的日期</td>
<td style="text-align:left"><code>SELECT ADDDATE("2017-06-15", INTERVAL 10 DAY); -&gt;2017-06-25</code></td>
</tr>
<tr>
<td style="text-align:left">ADDTIME(t,n)</td>
<td style="text-align:left">n 是一个时间表达式，时间 t 加上时间表达式 n</td>
<td style="text-align:left">加 5 秒：<code>SELECT ADDTIME('2011-11-11 11:11:11', 5); -&gt;2011-11-11 11:11:16 (秒)</code>添加 2 小时, 10 分钟, 5 秒:<code>SELECT ADDTIME("2020-06-15 09:34:21", "2:10:5");  -&gt; 2020-06-15 11:44:26</code></td>
</tr>
<tr>
<td style="text-align:left">CURDATE()</td>
<td style="text-align:left">返回当前日期</td>
<td style="text-align:left"><code>SELECT CURDATE(); -&gt; 2018-09-19</code></td>
</tr>
<tr>
<td style="text-align:left">CURRENT_DATE()</td>
<td style="text-align:left">返回当前日期</td>
<td style="text-align:left"><code>SELECT CURRENT_DATE(); -&gt; 2018-09-19</code></td>
</tr>
<tr>
<td style="text-align:left">CURRENT_TIME</td>
<td style="text-align:left">返回当前时间</td>
<td style="text-align:left"><code>SELECT CURRENT_TIME(); -&gt; 19:59:02</code></td>
</tr>
<tr>
<td style="text-align:left">CURRENT_TIMESTAMP()</td>
<td style="text-align:left">返回当前日期和时间</td>
<td style="text-align:left"><code>SELECT CURRENT_TIMESTAMP() -&gt; 2018-09-19 20:57:43</code></td>
</tr>
<tr>
<td style="text-align:left">CURTIME()</td>
<td style="text-align:left">返回当前时间</td>
<td style="text-align:left"><code>SELECT CURTIME(); -&gt; 19:59:02</code></td>
</tr>
<tr>
<td style="text-align:left">DATE()</td>
<td style="text-align:left">从日期或日期时间表达式中提取日期值</td>
<td style="text-align:left"><code>SELECT DATE("2017-06-15");     -&gt; 2017-06-15</code></td>
</tr>
<tr>
<td style="text-align:left">DATEDIFF(d1,d2)</td>
<td style="text-align:left">计算日期 d1-&gt;d2 之间相隔的天数</td>
<td style="text-align:left"><code>SELECT DATEDIFF('2001-01-01','2001-02-02') -&gt; -32</code></td>
</tr>
<tr>
<td style="text-align:left">DATE_ADD(d，INTERVAL expr type)</td>
<td style="text-align:left">计算起始日期 d 加上一个时间段后的日期，type 值可以是：MICROSECONDSECONDMINUTEHOURDAYWEEKMONTHQUARTERYEARSECOND_MICROSECONDMINUTE_MICROSECONDMINUTE_SECONDHOUR_MICROSECONDHOUR_SECONDHOUR_MINUTEDAY_MICROSECONDDAY_SECONDDAY_MINUTEDAY_HOURYEAR_MONTH</td>
<td style="text-align:left"><code>SELECT DATE_ADD("2017-06-15", INTERVAL 10 DAY);     -&gt; 2017-06-25 SELECT DATE_ADD("2017-06-15 09:34:21", INTERVAL 15 MINUTE); -&gt; 2017-06-15 09:49:21 SELECT DATE_ADD("2017-06-15 09:34:21", INTERVAL -3 HOUR); -&gt;2017-06-15 06:34:21 SELECT DATE_ADD("2017-06-15 09:34:21", INTERVAL -3 MONTH); -&gt;2017-04-15</code></td>
</tr>
<tr>
<td style="text-align:left">DATE_FORMAT(d,f)</td>
<td style="text-align:left">按表达式 f的要求显示日期 d</td>
<td style="text-align:left"><code>SELECT DATE_FORMAT('2011-11-11 11:11:11','%Y-%m-%d %r') -&gt; 2011-11-11 11:11:11 AM</code></td>
</tr>
<tr>
<td style="text-align:left">DATE_SUB(date,INTERVAL expr type)</td>
<td style="text-align:left">函数从日期减去指定的时间间隔。</td>
<td style="text-align:left">Orders 表中 OrderDate 字段减去 2 天：<code>SELECT OrderId,DATE_SUB(OrderDate,INTERVAL 2 DAY) AS OrderPayDate FROM Orders</code></td>
</tr>
<tr>
<td style="text-align:left">DAY(d)</td>
<td style="text-align:left">返回日期值 d 的日期部分</td>
<td style="text-align:left"><code>SELECT DAY("2017-06-15");   -&gt; 15</code></td>
</tr>
<tr>
<td style="text-align:left">DAYNAME(d)</td>
<td style="text-align:left">返回日期 d 是星期几，如 Monday,Tuesday</td>
<td style="text-align:left"><code>SELECT DAYNAME('2011-11-11 11:11:11') -&gt;Friday</code></td>
</tr>
<tr>
<td style="text-align:left">DAYOFMONTH(d)</td>
<td style="text-align:left">计算日期 d 是本月的第几天</td>
<td style="text-align:left"><code>SELECT DAYOFMONTH('2011-11-11 11:11:11') -&gt;11</code></td>
</tr>
<tr>
<td style="text-align:left">DAYOFWEEK(d)</td>
<td style="text-align:left">日期 d 今天是星期几，1 星期日，2 星期一，以此类推</td>
<td style="text-align:left"><code>SELECT DAYOFWEEK('2011-11-11 11:11:11') -&gt;6</code></td>
</tr>
<tr>
<td style="text-align:left">DAYOFYEAR(d)</td>
<td style="text-align:left">计算日期 d 是本年的第几天</td>
<td style="text-align:left"><code>SELECT DAYOFYEAR('2011-11-11 11:11:11') -&gt;315</code></td>
</tr>
<tr>
<td style="text-align:left">EXTRACT(type FROM d)</td>
<td style="text-align:left">从日期 d 中获取指定的值，type 指定返回的值。 type可取值为： MICROSECONDSECONDMINUTEHOURDAYWEEKMONTHQUARTERYEARSECOND_MICROSECONDMINUTE_MICROSECONDMINUTE_SECONDHOUR_MICROSECONDHOUR_SECONDHOUR_MINUTEDAY_MICROSECONDDAY_SECONDDAY_MINUTEDAY_HOURYEAR_MONTH</td>
<td style="text-align:left"><code>SELECT EXTRACT(MINUTE FROM '2011-11-11 11:11:11')  -&gt; 11</code></td>
</tr>
<tr>
<td style="text-align:left">FROM_DAYS(n)</td>
<td style="text-align:left">计算从 0000 年 1 月 1 日开始 n 天后的日期</td>
<td style="text-align:left"><code>SELECT FROM_DAYS(1111) -&gt; 0003-01-16</code></td>
</tr>
<tr>
<td style="text-align:left">HOUR(t)</td>
<td style="text-align:left">返回 t 中的小时值</td>
<td style="text-align:left"><code>SELECT HOUR('1:2:3') -&gt; 1</code></td>
</tr>
<tr>
<td style="text-align:left">LAST_DAY(d)</td>
<td style="text-align:left">返回给给定日期的那一月份的最后一天</td>
<td style="text-align:left"><code>SELECT LAST_DAY("2017-06-20"); -&gt; 2017-06-30</code></td>
</tr>
<tr>
<td style="text-align:left">LOCALTIME()</td>
<td style="text-align:left">返回当前日期和时间</td>
<td style="text-align:left"><code>SELECT LOCALTIME() -&gt; 2018-09-19 20:57:43</code></td>
</tr>
<tr>
<td style="text-align:left">LOCALTIMESTAMP()</td>
<td style="text-align:left">返回当前日期和时间</td>
<td style="text-align:left"><code>SELECT LOCALTIMESTAMP() -&gt; 2018-09-19 20:57:43</code></td>
</tr>
<tr>
<td style="text-align:left">MAKEDATE(year, day-of-year)</td>
<td style="text-align:left">基于给定参数年份 year 和所在年中的天数序号 day-of-year 返回一个日期</td>
<td style="text-align:left"><code>SELECT MAKEDATE(2017, 3); -&gt; 2017-01-03</code></td>
</tr>
<tr>
<td style="text-align:left">MAKETIME(hour, minute, second)</td>
<td style="text-align:left">组合时间，参数分别为小时、分钟、秒</td>
<td style="text-align:left"><code>SELECT MAKETIME(11, 35, 4); -&gt; 11:35:04</code></td>
</tr>
<tr>
<td style="text-align:left">MICROSECOND(date)</td>
<td style="text-align:left">返回日期参数所对应的微秒数</td>
<td style="text-align:left"><code>SELECT MICROSECOND("2017-06-20 09:34:00.000023"); -&gt; 23</code></td>
</tr>
<tr>
<td style="text-align:left">MINUTE(t)</td>
<td style="text-align:left">返回 t 中的分钟值</td>
<td style="text-align:left"><code>SELECT MINUTE('1:2:3') -&gt; 2</code></td>
</tr>
<tr>
<td style="text-align:left">MONTHNAME(d)</td>
<td style="text-align:left">返回日期当中的月份名称，如 November</td>
<td style="text-align:left"><code>SELECT MONTHNAME('2011-11-11 11:11:11') -&gt; November</code></td>
</tr>
<tr>
<td style="text-align:left">MONTH(d)</td>
<td style="text-align:left">返回日期d中的月份值，1 到 12</td>
<td style="text-align:left"><code>SELECT MONTH('2011-11-11 11:11:11') -&gt;11</code></td>
</tr>
<tr>
<td style="text-align:left">NOW()</td>
<td style="text-align:left">返回当前日期和时间</td>
<td style="text-align:left"><code>SELECT NOW() -&gt; 2018-09-19 20:57:43</code></td>
</tr>
<tr>
<td style="text-align:left">PERIOD_ADD(period, number)</td>
<td style="text-align:left">为 年-月 组合日期添加一个时段</td>
<td style="text-align:left"><code>SELECT PERIOD_ADD(201703, 5);    -&gt; 201708</code></td>
</tr>
<tr>
<td style="text-align:left">PERIOD_DIFF(period1, period2)</td>
<td style="text-align:left">返回两个时段之间的月份差值</td>
<td style="text-align:left"><code>SELECT PERIOD_DIFF(201710, 201703); -&gt; 7</code></td>
</tr>
<tr>
<td style="text-align:left">QUARTER(d)</td>
<td style="text-align:left">返回日期d是第几季节，返回 1 到 4</td>
<td style="text-align:left"><code>SELECT QUARTER('2011-11-11 11:11:11') -&gt; 4</code></td>
</tr>
<tr>
<td style="text-align:left">SECOND(t)</td>
<td style="text-align:left">返回 t 中的秒钟值</td>
<td style="text-align:left"><code>SELECT SECOND('1:2:3') -&gt; 3</code></td>
</tr>
<tr>
<td style="text-align:left">SEC_TO_TIME(s)</td>
<td style="text-align:left">将以秒为单位的时间 s 转换为时分秒的格式</td>
<td style="text-align:left"><code>SELECT SEC_TO_TIME(4320) -&gt; 01:12:00</code></td>
</tr>
<tr>
<td style="text-align:left">STR_TO_DATE(string, format_mask)</td>
<td style="text-align:left">将字符串转变为日期</td>
<td style="text-align:left"><code>SELECT STR_TO_DATE("August 10 2017", "%M %d %Y"); -&gt; 2017-08-10</code></td>
</tr>
<tr>
<td style="text-align:left">SUBDATE(d,n)</td>
<td style="text-align:left">日期 d 减去 n 天后的日期</td>
<td style="text-align:left"><code>SELECT SUBDATE('2011-11-11 11:11:11', 1) -&gt;2011-11-10 11:11:11 (默认是天)</code></td>
</tr>
<tr>
<td style="text-align:left">SUBTIME(t,n)</td>
<td style="text-align:left">时间 t 减去 n 秒的时间</td>
<td style="text-align:left"><code>SELECT SUBTIME('2011-11-11 11:11:11', 5) -&gt;2011-11-11 11:11:06 (秒)</code></td>
</tr>
<tr>
<td style="text-align:left">SYSDATE()</td>
<td style="text-align:left">返回当前日期和时间</td>
<td style="text-align:left"><code>SELECT SYSDATE() -&gt; 2018-09-19 20:57:43</code></td>
</tr>
<tr>
<td style="text-align:left">TIME(expression)</td>
<td style="text-align:left">提取传入表达式的时间部分</td>
<td style="text-align:left"><code>SELECT TIME("19:30:10"); -&gt; 19:30:10</code></td>
</tr>
<tr>
<td style="text-align:left">TIME_FORMAT(t,f)</td>
<td style="text-align:left">按表达式 f 的要求显示时间 t</td>
<td style="text-align:left"><code>SELECT TIME_FORMAT('11:11:11','%r') 11:11:11 AM</code></td>
</tr>
<tr>
<td style="text-align:left">TIME_TO_SEC(t)</td>
<td style="text-align:left">将时间 t 转换为秒</td>
<td style="text-align:left"><code>SELECT TIME_TO_SEC('1:12:00') -&gt; 4320</code></td>
</tr>
<tr>
<td style="text-align:left">TIMEDIFF(time1, time2)</td>
<td style="text-align:left">计算时间差值</td>
<td style="text-align:left"><code>mysql&gt; SELECT TIMEDIFF("13:10:11", "13:10:10"); -&gt; 00:00:01 mysql&gt; SELECT TIMEDIFF('2000:01:01 00:00:00',    -&gt;                 '2000:01:01 00:00:00.000001');        -&gt; '-00:00:00.000001' mysql&gt; SELECT TIMEDIFF('2008-12-31 23:59:59.000001',    -&gt;                 '2008-12-30 01:01:01.000002');        -&gt; '46:58:57.999999'</code></td>
</tr>
<tr>
<td style="text-align:left">TIMESTAMP(expression, interval)</td>
<td style="text-align:left">单个参数时，函数返回日期或日期时间表达式；有2个参数时，将参数加和</td>
<td style="text-align:left"><code>mysql&gt; SELECT TIMESTAMP("2017-07-23",  "13:10:11"); -&gt; 2017-07-23 13:10:11 mysql&gt; SELECT TIMESTAMP('2003-12-31');        -&gt; '2003-12-31 00:00:00' mysql&gt; SELECT TIMESTAMP('2003-12-31 12:00:00','12:00:00');        -&gt; '2004-01-01 00:00:00'</code></td>
</tr>
<tr>
<td style="text-align:left">TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)</td>
<td style="text-align:left">计算时间差，返回 datetime_expr2 − datetime_expr1 的时间差</td>
<td style="text-align:left"><code>mysql&gt; SELECT TIMESTAMPDIFF(DAY,'2003-02-01','2003-05-01');   // 计算两个时间相隔多少天        -&gt; 89 mysql&gt; SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');   // 计算两个时间相隔多少月        -&gt; 3 mysql&gt; SELECT TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01');    // 计算两个时间相隔多少年        -&gt; -1 mysql&gt; SELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');  // 计算两个时间相隔多少分钟        -&gt; 128885</code></td>
</tr>
<tr>
<td style="text-align:left">TO_DAYS(d)</td>
<td style="text-align:left">计算日期 d 距离 0000 年 1 月 1 日的天数</td>
<td style="text-align:left"><code>SELECT TO_DAYS('0001-01-01 01:01:01') -&gt; 366</code></td>
</tr>
<tr>
<td style="text-align:left">WEEK(d)</td>
<td style="text-align:left">计算日期 d 是本年的第几个星期，范围是 0 到 53</td>
<td style="text-align:left"><code>SELECT WEEK('2011-11-11 11:11:11') -&gt; 45</code></td>
</tr>
<tr>
<td style="text-align:left">WEEKDAY(d)</td>
<td style="text-align:left">日期 d 是星期几，0 表示星期一，1 表示星期二</td>
<td style="text-align:left"><code>SELECT WEEKDAY("2017-06-15"); -&gt; 3</code></td>
</tr>
<tr>
<td style="text-align:left">WEEKOFYEAR(d)</td>
<td style="text-align:left">计算日期 d 是本年的第几个星期，范围是 0 到 53</td>
<td style="text-align:left"><code>SELECT WEEKOFYEAR('2011-11-11 11:11:11') -&gt; 45</code></td>
</tr>
<tr>
<td style="text-align:left">YEAR(d)</td>
<td style="text-align:left">返回年份</td>
<td style="text-align:left"><code>SELECT YEAR("2017-06-15"); -&gt; 2017</code></td>
</tr>
<tr>
<td style="text-align:left">YEARWEEK(date, mode)</td>
<td style="text-align:left">返回年份及第几周（0到53），mode 中 0 表示周天，1表示周一，以此类推</td>
<td style="text-align:left"><code>SELECT YEARWEEK("2017-06-15"); -&gt; 201724</code></td>
</tr>
</tbody>
</table>
</div><h3> 高级函数</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">函数名</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">BIN(x)</td>
<td style="text-align:left">返回 x 的二进制编码</td>
<td style="text-align:left">15 的 2 进制编码:<code>SELECT BIN(15); -- 1111</code></td>
</tr>
<tr>
<td style="text-align:left">BINARY(s)</td>
<td style="text-align:left">将字符串 s 转换为二进制字符串</td>
<td style="text-align:left"><code>SELECT BINARY "RUNOOB"; -&gt; RUNOOB</code></td>
</tr>
<tr>
<td style="text-align:left"><code>CASE expression    WHEN condition1 THEN result1    WHEN condition2 THEN result2   ...    WHEN conditionN THEN resultN    ELSE result END</code></td>
<td style="text-align:left">CASE 表示函数开始，END 表示函数结束。如果 condition1 成立，则返回 result1, 如果 condition2 成立，则返回 result2，当全部不成立则返回 result，而当有一个成立之后，后面的就不执行了。</td>
<td style="text-align:left"><code>SELECT CASE  　WHEN 1 &gt; 0 　THEN '1 &gt; 0' 　WHEN 2 &gt; 0 　THEN '2 &gt; 0' 　ELSE '3 &gt; 0' 　END -&gt;1 &gt; 0</code></td>
</tr>
<tr>
<td style="text-align:left">CAST(x AS type)</td>
<td style="text-align:left">转换数据类型</td>
<td style="text-align:left">字符串日期转换为日期：<code>SELECT CAST("2017-08-29" AS DATE); -&gt; 2017-08-29</code></td>
</tr>
<tr>
<td style="text-align:left">COALESCE(expr1, expr2, ...., expr_n)</td>
<td style="text-align:left">返回参数中的第一个非空表达式（从左向右）</td>
<td style="text-align:left"><code>SELECT COALESCE(NULL, NULL, NULL, 'runoob.com', NULL, 'google.com'); -&gt; runoob.com</code></td>
</tr>
<tr>
<td style="text-align:left">CONNECTION_ID()</td>
<td style="text-align:left">返回唯一的连接 ID</td>
<td style="text-align:left"><code>SELECT CONNECTION_ID(); -&gt; 4292835</code></td>
</tr>
<tr>
<td style="text-align:left">CONV(x,f1,f2)</td>
<td style="text-align:left">返回 f1 进制数变成 f2 进制数</td>
<td style="text-align:left"><code>SELECT CONV(15, 10, 2); -&gt; 1111</code></td>
</tr>
<tr>
<td style="text-align:left">CONVERT(s USING cs)</td>
<td style="text-align:left">函数将字符串 s 的字符集变成 cs</td>
<td style="text-align:left"><code>SELECT CHARSET('ABC') -&gt;utf-8     SELECT CHARSET(CONVERT('ABC' USING gbk)) -&gt;gbk</code></td>
</tr>
<tr>
<td style="text-align:left">CURRENT_USER()</td>
<td style="text-align:left">返回当前用户</td>
<td style="text-align:left"><code>SELECT CURRENT_USER(); -&gt; guest@%</code></td>
</tr>
<tr>
<td style="text-align:left">DATABASE()</td>
<td style="text-align:left">返回当前数据库名</td>
<td style="text-align:left"><code>SELECT DATABASE();    -&gt; runoob</code></td>
</tr>
<tr>
<td style="text-align:left">IF(expr,v1,v2)</td>
<td style="text-align:left">如果表达式 expr 成立，返回结果 v1；否则，返回结果 v2。</td>
<td style="text-align:left"><code>SELECT IF(1 &gt; 0,'正确','错误')     -&gt;正确</code></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/mysql/mysql-func-ifnull.html" target="_blank" rel="noopener noreferrer">IFNULL(v1,v2)</a></td>
<td style="text-align:left">如果 v1 的值不为 NULL，则返回 v1，否则返回 v2。</td>
<td style="text-align:left"><code>SELECT IFNULL(null,'Hello Word') -&gt;Hello Word</code></td>
</tr>
<tr>
<td style="text-align:left">ISNULL(expression)</td>
<td style="text-align:left">判断表达式是否为 NULL</td>
<td style="text-align:left"><code>SELECT ISNULL(NULL); -&gt;1</code></td>
</tr>
<tr>
<td style="text-align:left">LAST_INSERT_ID()</td>
<td style="text-align:left">返回最近生成的 AUTO_INCREMENT 值</td>
<td style="text-align:left"><code>SELECT LAST_INSERT_ID(); -&gt;6</code></td>
</tr>
<tr>
<td style="text-align:left">NULLIF(expr1, expr2)</td>
<td style="text-align:left">比较两个字符串，如果字符串 expr1 与 expr2 相等 返回 NULL，否则返回 expr1</td>
<td style="text-align:left"><code>SELECT NULLIF(25, 25); -&gt;</code></td>
</tr>
<tr>
<td style="text-align:left">SESSION_USER()</td>
<td style="text-align:left">返回当前用户</td>
<td style="text-align:left"><code>SELECT SESSION_USER(); -&gt; guest@%</code></td>
</tr>
<tr>
<td style="text-align:left">SYSTEM_USER()</td>
<td style="text-align:left">返回当前用户</td>
<td style="text-align:left"><code>SELECT SYSTEM_USER(); -&gt; guest@%</code></td>
</tr>
<tr>
<td style="text-align:left">USER()</td>
<td style="text-align:left">返回当前用户</td>
<td style="text-align:left"><code>SELECT USER(); -&gt; guest@%</code></td>
</tr>
<tr>
<td style="text-align:left">VERSION()</td>
<td style="text-align:left">返回数据库的版本号</td>
<td style="text-align:left"><code>SELECT VERSION() -&gt; 5.6.34</code></td>
</tr>
</tbody>
</table>
</div><h3> 其他</h3>
<p>以下是 MySQL 8.0 版本新增的一些常用函数：</p>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">JSON_OBJECT()</td>
<td style="text-align:left">将键值对转换为 JSON 对象</td>
<td style="text-align:left"><code>SELECT JSON_OBJECT('key1', 'value1', 'key2', 'value2')</code></td>
</tr>
<tr>
<td style="text-align:left">JSON_ARRAY()</td>
<td style="text-align:left">将值转换为 JSON 数组</td>
<td style="text-align:left"><code>SELECT JSON_ARRAY(1, 2, 'three')</code></td>
</tr>
<tr>
<td style="text-align:left">JSON_EXTRACT()</td>
<td style="text-align:left">从 JSON 字符串中提取指定的值</td>
<td style="text-align:left"><code>SELECT JSON_EXTRACT('{"name": "John", "age": 30}', '$.name')</code></td>
</tr>
<tr>
<td style="text-align:left">JSON_CONTAINS()</td>
<td style="text-align:left">检查一个 JSON 字符串是否包含指定的值</td>
<td style="text-align:left"><code>SELECT JSON_CONTAINS('{"name": "John", "age": 30}', 'John', '$.name')</code></td>
</tr>
<tr>
<td style="text-align:left">ROW_NUMBER()</td>
<td style="text-align:left">为查询结果中的每一行分配一个唯一的数字</td>
<td style="text-align:left"><code>SELECT ROW_NUMBER() OVER(ORDER BY id) AS row_number, name FROM users</code></td>
</tr>
<tr>
<td style="text-align:left">RANK()</td>
<td style="text-align:left">为查询结果中的每一行分配一个排名</td>
<td style="text-align:left"><code>SELECT RANK() OVER(ORDER BY score DESC) AS rank, name, score FROM students</code></td>
</tr>
</tbody>
</table>
</div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="mysql"/>
    <category term="数据库"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2021-05-11T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">RabbitMQ 客户端</title>
    <id>https://gzwrrr.github.io/article/rabbitmq/X-RabbitMQ%E5%AE%A2%E6%88%B7%E7%AB%AF.html</id>
    <link href="https://gzwrrr.github.io/article/rabbitmq/X-RabbitMQ%E5%AE%A2%E6%88%B7%E7%AB%AF.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> RabbitMQ 客户端</h1>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>相关文章：</p>
<ol>
<li><a href="https://docs.spring.io/spring-amqp/docs/current/reference/html/" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-amqp/docs/current/reference/html/</a></li>
</ol>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> RabbitMQ 客户端</h1>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>相关文章：</p>
<ol>
<li><a href="https://docs.spring.io/spring-amqp/docs/current/reference/html/" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-amqp/docs/current/reference/html/</a></li>
</ol>
</div>
<h2> 概述</h2>
<p>在 Java Spring Boot 中，您可以使用多种方式集成 RabbitMQ，以实现消息传递和处理。以下是一些常见的使用 RabbitMQ 的方式：</p>
<ol>
<li><strong>Spring AMQP：</strong> Spring Boot 提供了 Spring AMQP 模块，它是 Spring 框架对 AMQP（Advanced Message Queuing Protocol）的抽象。您可以使用 <code>RabbitTemplate</code> 发布消息和接收消息，使用 <code>@RabbitListener</code> 注解创建消息监听器，以便处理接收到的消息。</li>
<li><strong>Spring Cloud Stream with RabbitMQ Binder：</strong> 如果您正在构建微服务应用程序，并且使用 Spring Cloud 技术栈，可以使用 Spring Cloud Stream 来集成 RabbitMQ。Spring Cloud Stream 提供了更高级的抽象，让您能够通过定义消息通道和绑定来实现消息的发布和订阅。</li>
<li><strong>Spring Integration with RabbitMQ：</strong> Spring Integration 是用于构建企业集成应用的 Spring 模块，它可以与 RabbitMQ 集成，实现消息的传递、转换和路由。您可以使用 Spring Integration 来构建复杂的消息处理流程。</li>
<li><strong>使用 <code>amqp</code> Starter：</strong> 在 Spring Boot 中，您可以使用名为 <code>spring-boot-starter-amqp</code> 的 Starter，它包含了 Spring AMQP 相关的依赖和配置。通过添加这个 Starter，您可以轻松地开始使用 RabbitMQ。</li>
<li><strong>使用 RabbitMQ Java Client：</strong> 如果您更倾向于直接使用 RabbitMQ 官方提供的 Java 客户端，您可以在 Spring Boot 项目中添加相关的依赖，并编写代码来创建连接、通道，发送和接收消息。</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="通信"/>
    <category term="中间件"/>
    <category term="rabbitmq"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-05-09T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">经典算法概览</title>
    <id>https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%A6%82%E8%A7%88.html</id>
    <link href="https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%A6%82%E8%A7%88.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 经典算法概览</h1>

<h2> 算法汇总</h2>
<h3> 顺序表相关</h3>
<ol>
<li>线性枚举</li>
<li>前缀和</li>
<li>双指针</li>
<li>二分/三分枚举</li>
<li>离散化</li>
<li>排序：冒泡、选择、插入、快速、希尔、归并、堆排、基数、计数</li>
<li>贪心</li>
<li>模拟</li>
</ol>
<h3> 链表相关</h3>
<ol>
<li>单向链表</li>
<li>双向链表</li>
</ol>
<h3> 栈相关</h3>
<ol>
<li>LIFO 后进先出栈</li>
<li>单调栈</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> 经典算法概览</h1>

<h2> 算法汇总</h2>
<h3> 顺序表相关</h3>
<ol>
<li>线性枚举</li>
<li>前缀和</li>
<li>双指针</li>
<li>二分/三分枚举</li>
<li>离散化</li>
<li>排序：冒泡、选择、插入、快速、希尔、归并、堆排、基数、计数</li>
<li>贪心</li>
<li>模拟</li>
</ol>
<h3> 链表相关</h3>
<ol>
<li>单向链表</li>
<li>双向链表</li>
</ol>
<h3> 栈相关</h3>
<ol>
<li>LIFO 后进先出栈</li>
<li>单调栈</li>
</ol>
<h3> 队列相关</h3>
<ol>
<li>FIFO 先进先出队列</li>
<li>双端队列</li>
<li>单调队列</li>
</ol>
<h3> 字符串相关</h3>
<ol>
<li>KMP</li>
<li>字典树</li>
<li>Manacher</li>
<li>AC 自动机</li>
<li>后缀树组</li>
<li>BM</li>
</ol>
<h3> 树相关</h3>
<ol>
<li>二叉树</li>
<li>二叉搜索树</li>
<li>二叉平衡搜索树：AVL 树、SB 树、红黑树</li>
<li>线段树</li>
<li>哈夫曼树</li>
<li>堆</li>
<li>伸展树</li>
<li>左偏树</li>
<li>Treap</li>
<li>B/B+ 树</li>
<li>树链剖分</li>
</ol>
<h3> 图相关</h3>
<ol>
<li>树状数组</li>
<li>哈希表</li>
<li>跳表</li>
<li>并查集</li>
<li>二分图</li>
<li>最短路</li>
<li>最小生成树</li>
<li>最近公共祖先</li>
<li>深度优先搜索/广度优先搜索/双向广度搜索</li>
<li>强连通分量/双连通分量</li>
<li>2-sat</li>
<li>欧拉回路/哈密尔顿回路</li>
<li>迭代加深</li>
<li>拓扑排序</li>
<li>A*</li>
<li>差分约束</li>
<li>最大流</li>
</ol>
<h3> DP 相关</h3>
<ol>
<li>递推</li>
<li>线性 DP</li>
<li>树形 DP</li>
<li>区间 DP</li>
<li>数位 DP</li>
<li>状态压缩</li>
<li>记忆化搜索</li>
<li>背包问题：01、完全、多重</li>
</ol>
<h2> 常用的算法</h2>
<blockquote>
<p>基本上带名字的算法都不考，但是原理要知道</p>
</blockquote>
<p>常用：</p>
<ol>
<li>二分法</li>
<li>拓扑排序</li>
<li>动态规划</li>
<li>分治法</li>
<li>贪心</li>
<li>最小生成树</li>
</ol>
<p>不常用：</p>
<ol>
<li>最短路算法（Dijkstra、Floyd）</li>
<li>Morris 遍历</li>
<li>Manacher</li>
<li>KMP</li>
<li>网络流</li>
<li>希尔排序</li>
</ol>
<h2> 常用的数据结构</h2>
<p>常用：</p>
<ol>
<li>哈希表</li>
<li>二叉搜索树</li>
<li>堆</li>
<li>并查集</li>
<li>字典树</li>
</ol>
<p>不常用：</p>
<ol>
<li>跳表</li>
<li>线段树</li>
<li>平衡排序二叉树（比如红黑树）</li>
<li>B/B+ 树</li>
<li>KD 树</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="算法"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">暴力递归算法</title>
    <id>https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/B-%E6%9A%B4%E5%8A%9B%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95.html</id>
    <link href="https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/B-%E6%9A%B4%E5%8A%9B%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 暴力递归算法</h1>

<div class="hint-container info">
<p class="hint-container-title">说明</p>
<ul>
<li>
<p>暴力递归就是不断分解问题，不断寻找子问题，直到到达不能分解的问题（base case）</p>
</li>
<li>
<p>暴力递归是动态规划的基础</p>
</li>
</ul>
</div>
<h2> 汉诺塔问题</h2>
<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hanoi</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">process</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">"左"</span><span class="token punctuation">,</span> <span class="token string">"中"</span><span class="token punctuation">,</span> <span class="token string">"右"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 因为每个过程都是一样，都可以抽象成 from 到 to 的问题，所以只需考虑一个大的标准，只要每个过程都满足了，整个过程就是对的</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token class-name">String</span> form<span class="token punctuation">,</span> <span class="token class-name">String</span> end<span class="token punctuation">,</span> <span class="token class-name">String</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里就是 base case</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Move 1 from"</span> <span class="token operator">+</span> from <span class="token operator">+</span> <span class="token string">"to"</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">process</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> other<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Move"</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">"from"</span> <span class="token operator">+</span> from <span class="token operator">+</span> <span class="token string">"to"</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">process</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> other<span class="token punctuation">,</span> end<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> 暴力递归算法</h1>

<div class="hint-container info">
<p class="hint-container-title">说明</p>
<ul>
<li>
<p>暴力递归就是不断分解问题，不断寻找子问题，直到到达不能分解的问题（base case）</p>
</li>
<li>
<p>暴力递归是动态规划的基础</p>
</li>
</ul>
</div>
<h2> 汉诺塔问题</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> 字符串全部子序列</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="算法"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">回溯算法</title>
    <id>https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/C-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95.html</id>
    <link href="https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/C-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 回溯算法</h1>

<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&amp;mid=2247496080&amp;idx=1&amp;sn=a2ae8c8ebf13c7ea704ffb6b16018f08&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">一文秒杀排列组合问题的 9 种题型</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 回溯算法</h1>

<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&amp;mid=2247496080&amp;idx=1&amp;sn=a2ae8c8ebf13c7ea704ffb6b16018f08&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">一文秒杀排列组合问题的 9 种题型</a></p>
</div>
<blockquote>
<p>其实回溯也算是暴力递归，只不过有优化手段，比如剪枝</p>
</blockquote>
<h2> 组合/排列/子集</h2>
<blockquote>
<p>组合/排列/子集问题基本上都可以使用回溯剪枝来解决，本质上就是对决策树进行不同程度的剪枝</p>
</blockquote>
<p><strong>要点：</strong></p>
<ol>
<li>子集问题和组合问题本质上是一样的，关键在于 base case 不太一样</li>
<li>组合和排列只是在剪枝时不太一样，组合涉及的回溯不走回头路，而排列涉及的回溯要走回头路，因此还需要额外的数据结构存储是否访问过之类的</li>
</ol>
<p><strong>表现形式：</strong></p>
<ol>
<li>元素无重复，不可重复选</li>
<li>元素重复，不可重复选。先排序再进行剪枝</li>
<li>元素无重复，可以重复选</li>
</ol>
<p><strong>组合和排列的回溯框架：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="算法"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">字符串相关算法</title>
    <id>https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/D-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95.html</id>
    <link href="https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/D-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 字符串相关算法</h1>

<h2> KMP</h2>
<blockquote>
<p>寻找子串</p>
<p><a href="https://www.bilibili.com/video/BV1PD4y1o7nd/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1PD4y1o7nd/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0</a></p>
<p><a href="https://mp.weixin.qq.com/s/MoRBHbS4hQXn7LcPdmHmIg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/MoRBHbS4hQXn7LcPdmHmIg</a></p>
</blockquote>]]></summary>
    <content type="html"><![CDATA[<h1> 字符串相关算法</h1>

<h2> KMP</h2>
<blockquote>
<p>寻找子串</p>
<p><a href="https://www.bilibili.com/video/BV1PD4y1o7nd/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1PD4y1o7nd/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0</a></p>
<p><a href="https://mp.weixin.qq.com/s/MoRBHbS4hQXn7LcPdmHmIg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/MoRBHbS4hQXn7LcPdmHmIg</a></p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h2> Manacher</h2>
<blockquote>
<p>回文子串的最优解</p>
</blockquote>
<p><strong>题目要求：</strong></p>
<ul>
<li>返回字符串中最大回文字符串的字符数量，时间复杂度 o(n)</li>
</ul>
<p><strong>相关概念：</strong></p>
<ul>
<li>回文半径</li>
<li>回文直径</li>
<li>之前扩的所有位置中所到达的最右回文右边界 R（初始为 -1 ）</li>
<li>取得更远边界时中心点的位置 C （初始为 -1 ，R 更新 C 一定更新，否则都不更新）</li>
</ul>
<p><strong>所有情况：</strong></p>
<ol>
<li>当前来到的中心位置 i 没有在右边界 R 里，暴力扩展无优化</li>
<li>当前来到的中心位置 i 在右边界 R 里，则一定存在：[L ... i’ ... C ... i ... R]
<ol>
<li>以 i 为 C 的回文区域完全在 L -- R 里：[L... (L ... i ... R) ...R]，此时 i 的半径为原本的半径，不用扩展</li>
<li>以 i 为 C 的回文区域不完全在 L -- R 里：( ... [L ... i’ )... C ... ( i ... R] ... )，此时 i 的半径为 (R - I + 1)，不用扩展</li>
<li>以 i 为 C 的回文区域边界正好「压线」：[(L ... i’ ... ) ... C ... ( ... i ... R)]，此时需要扩展</li>
</ol>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="算法"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">链表相关算法</title>
    <id>https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/E-%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95.html</id>
    <link href="https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/E-%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 链表相关算法</h1>

<h2> 反转部分链表</h2>
<p>节点结构：</p>
<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> 链表相关算法</h1>

<h2> 反转部分链表</h2>
<p>节点结构：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>迭代版本：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>递归版本：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="算法"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">树相关算法</title>
    <id>https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/F-%E6%A0%91%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95.html</id>
    <link href="https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/F-%E6%A0%91%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 树相关算法</h1>

<h2> 树状数组</h2>
<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BitArray</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 树状数组
     */</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">BitArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 初始化
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">update</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取 index 最低位 1
     * <span class="token keyword">@param</span> <span class="token parameter">index</span> 索引
     * <span class="token keyword">@return</span> index 最低位 1
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 单点修改
     * <span class="token keyword">@param</span> <span class="token parameter">index</span> 目标左营
     * <span class="token keyword">@param</span> <span class="token parameter">num</span> 操作数
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pos <span class="token operator">=</span> index<span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> pos <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            array<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">+=</span> num<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 前 N 项和
     * <span class="token keyword">@param</span> <span class="token parameter">index</span> 右边界
     * <span class="token keyword">@return</span> 前 N 项和
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pos <span class="token operator">=</span> index<span class="token punctuation">;</span> pos <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> pos <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">+=</span> array<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 区间查询
     * <span class="token keyword">@param</span> <span class="token parameter">l</span> 左边界
     * <span class="token keyword">@param</span> <span class="token parameter">r</span> 右边界
     * <span class="token keyword">@return</span> 区间和
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">query</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> 树相关算法</h1>

<h2> 树状数组</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 线段树</h2>
<div class="hint-container info">
<p class="hint-container-title">相关资源</p>
<p>文章：<a href="https://zhuanlan.zhihu.com/p/106118909" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/106118909</a></p>
<p>视频：<a href="https://www.bilibili.com/video/BV1yF411p7Bt/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1yF411p7Bt/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0</a></p>
</div>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>线段树是平衡二叉树</p>
<p>使用小区间更新大区间，问题需要满足：区间加法</p>
<p>对于区间 [L, R]，答案可以通过 [L, M] + [M+1, R] 求出</p>
<p>可以求解的问题：</p>
<ol>
<li>区间求和</li>
<li>区间最大/小值</li>
</ol>
<p>不可以求解的问题：</p>
<ol>
<li>区间的众数</li>
<li>区间最长连续问题</li>
<li>最长不下降问题</li>
</ol>
<p>数据结构：</p>
<p>一般是用数组，以堆的方式存储数据，注意线段树的数组要开到 4 * N 大小才不会出现越界访问</p>
</div>
<p>线段树涉及的操作：</p>
<ol>
<li>单点修改：
<ol>
<li>深搜，如果当前节点的左儿子的区间 [L, R] 包含了 i，那么就访问左儿子，否则访问右儿子</li>
<li>当搜索到需要修改的数据后（L = R），修改数据，之后将包含该数据的大区间的值更新</li>
</ol>
</li>
<li>区间求和：
<ol>
<li>如果需要查询的区间完全覆盖当前区间，直接返回当前区间的值</li>
<li>如果查询区间与左儿子有交集，搜索左儿子，否则右儿子</li>
<li>最后合并处理两边搜索结果</li>
</ol>
</li>
<li>区间修改，lazy 标记（表示区间的值已经更新，但是子区间还没有更新，更新的信息存储在标记中）：
<ol>
<li>如果需要修改的区间完全覆盖当前的区间，那么直接更新这个区间，打上 lazy 标记</li>
<li>如果没有完全覆盖，并且当前区间有 lazy 标记，那么先下传 lazy 标记到子区间，再清除当前区间的 lazy 标记</li>
<li>如果修改区间和左儿子有交集，搜索左儿子，否则搜索右儿子</li>
<li>最后将当前区间的值更新</li>
</ol>
</li>
<li>区间查询：
<ol>
<li>如果需要查询的区间完全覆盖当前区间，直接返回当前区间的值，如果没有完全覆盖，下传 lazy 标记</li>
<li>如果查询区间与左儿子有交集，搜索左儿子，否则右儿子</li>
<li>最后合并处理两边搜索结果</li>
</ol>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="算法"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">图相关算法</title>
    <id>https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/G-%E5%9B%BE%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95.html</id>
    <link href="https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/G-%E5%9B%BE%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 图相关算法</h1>

<h2> 并查集</h2>
<blockquote>
<p>Union-Find 并查集，相关文章：<a href="https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&amp;mid=2247497087&amp;idx=1&amp;sn=6d68414edf4a19e2d1fba94210851eeb&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&amp;mid=2247497087&amp;idx=1&amp;sn=6d68414edf4a19e2d1fba94210851eeb&amp;scene=21#wechat_redirect</a></p>
</blockquote>]]></summary>
    <content type="html"><![CDATA[<h1> 图相关算法</h1>

<h2> 并查集</h2>
<blockquote>
<p>Union-Find 并查集，相关文章：<a href="https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&amp;mid=2247497087&amp;idx=1&amp;sn=6d68414edf4a19e2d1fba94210851eeb&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&amp;mid=2247497087&amp;idx=1&amp;sn=6d68414edf4a19e2d1fba94210851eeb&amp;scene=21#wechat_redirect</a></p>
</blockquote>
<p><strong>连通与连通量：</strong></p>
<ol>
<li>连通：是指一个无向图或有向图中的所有顶点都可以通过路径相互到达。如果一个图不连通，那么它可以被分成若干个连通子图。</li>
<li>连通量：是指无向图或有向图中的连通子图的个数。一个无向图或有向图中只有一个连通子图，那么它就是连通图，它的连通量为1。</li>
</ol>
<p>「连通」是一种等价关系，也就是说具有如下三个性质：</p>
<ol>
<li><strong>自反性</strong>：节点<code>p</code>和<code>p</code>是连通的。</li>
<li><strong>对称性</strong>：如果节点<code>p</code>和<code>q</code>连通，那么<code>q</code>和<code>p</code>也连通。</li>
<li><strong>传递性</strong>：如果节点<code>p</code>和<code>q</code>连通，<code>q</code>和<code>r</code>连通，那么<code>p</code>和<code>r</code>也连通。</li>
</ol>
<p>并查集的作用：</p>
<p>并查集是一种基于树型数据结构的算法，用于解决集合划分的问题。主要解决的问题是如何快速地判断两个元素是否属于同一集合，或者将两个集合合并为一个集合。在并查集中，每个元素都有一个父节点，相互处于一个集合中的元素具有相同的父节点。可以通过查找一个元素的根节点来判断两个元素是否处于同一个集合中。</p>
<p>并查集的应用场景比较广泛，例如：</p>
<ol>
<li>图的连通性问题：可以使用并查集来判断无向图是否连通。将图中的每个顶点看作一个元素，每个连通子图看作一个集合，将连通子图中的任意一个顶点作为代表元素，使用并查集来判断两个顶点是否在同一个连通子图中，如果不在，则将它们所在的连通子图合并。</li>
<li>社交网络中的关系判断：可以使用并查集来判断两个人是否是朋友关系。将每个人看作一个元素，将朋友关系看作一个集合，使用并查集来判断两个人是否在同一个集合中，如果不在，则将它们所在的集合合并。</li>
<li>计算机网络中的路由选择：可以使用并查集来实现网络中路由的选择。将网络中的每个路由器看作一个元素，将同一网络子网中的路由器看作一个集合，使用并查集来判断两个路由器是否在同一个网络子网中，如果不在，则将它们所在的集合合并。</li>
</ol>
<h3> 核心 API</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Union-Find 算法的关键就在于<code>union</code>和<code>connected</code>函数的效率。</p>
<p>连通操作：如果两个节点连通，那么让一个节点的根节点连接到另一个节点的根节点，也就是说 <strong>如果两个节点连通，那么他们一定有共同的根节点</strong></p>
<p>使用 <code>HashMap</code> 的解法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 数组优化</h3>
<p>使用数组优化的具体实现：</p>
<ol>
<li>
<p>使用森林（若干棵树）来表示图的动态连通性，用数组来具体实现这个森林。</p>
</li>
<li>
<p>设定树的每个节点有一个指针指向其父节点，如果是根节点的话，这个指针指向自己。</p>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>union</code> 和 <code>connected</code> 都依赖 <code>find</code> 方法，最坏情况下时间复杂度为：O(N)，所以每次查找都需要线性的时间复杂度</p>
<p>此时可以在每棵树上加上权重以实现自平衡的目的，即小树加在大树上：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以在 <code>find</code> 的时候进行路径压缩：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>高度压缩后的完整代码：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：Union-Find 算法的复杂度可以这样分析：构造函数初始化数据结构需要 O(N) 的时间和空间复杂度；连通两个节点<code>union</code>、判断两个节点的连通性<code>connected</code>、计算连通分量<code>count</code>所需的时间跟树高有关，高度压缩后复杂度均为 O(1)。</p>
<h3> 最简模板</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Dijkstra</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&amp;mid=2247492167&amp;idx=1&amp;sn=bc96c8f97252afdb3973c7d760edb9c0&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">我写了一个模板，把 Dijkstra 算法变成了默写题</a></p>
</div>
<blockquote>
<p>加权有向图，并且没有负权重时，可以求得某一点到其余点的最短距离</p>
</blockquote>
<p>二叉树广度优先遍历：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>过渡到 Dijkstra 模板（效率较低，但是通用）：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> FloodFill</h2>
<blockquote>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&amp;mid=2247492234&amp;idx=1&amp;sn=fef28b1ca7639e056104374ddc9fbf0b&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&amp;mid=2247492234&amp;idx=1&amp;sn=fef28b1ca7639e056104374ddc9fbf0b&amp;scene=21#wechat_redirect</a></p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="算法"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">动态规划相关算法</title>
    <id>https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/H-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95.html</id>
    <link href="https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/H-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 动态规划相关算法</h1>

<h2> 背包问题</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://www.programmercarl.com/%E8%83%8C%E5%8C%85%E6%80%BB%E7%BB%93%E7%AF%87.html" target="_blank" rel="noopener noreferrer">听说背包问题很难？ 这篇总结篇来拯救你了</a></p>
</div>
<p>分类：</p>
<ol>
<li>0-1 背包</li>
<li>完全背包</li>
<li>多重背包</li>
<li>分组背包</li>
<li>混合背包</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> 动态规划相关算法</h1>

<h2> 背包问题</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://www.programmercarl.com/%E8%83%8C%E5%8C%85%E6%80%BB%E7%BB%93%E7%AF%87.html" target="_blank" rel="noopener noreferrer">听说背包问题很难？ 这篇总结篇来拯救你了</a></p>
</div>
<p>分类：</p>
<ol>
<li>0-1 背包</li>
<li>完全背包</li>
<li>多重背包</li>
<li>分组背包</li>
<li>混合背包</li>
</ol>
<blockquote>
<p>N个物品，背包最大重量为 W，v[1…N] 分别代表每个物品的价值，w[1….M] 代表每个物品的重量</p>
</blockquote>
<p>背包问题的关键在于搞懂 dp 数组的含义：<code>dp[i][j]</code> 表示前 i 个物品在 j 的容量下的最大价值。</p>
<p>选择分为：放入当前物品和不放入，对应的状态转移方程为：</p>
<ol>
<li>装不下时：<code>dp[i][j] = dp[i][j - 1]</code></li>
<li>装得下时：<code>dp[i][j] = max(v[i - 1] + dp[i - 1][j - w[i - 1]], dp[i][j - 1])</code></li>
</ol>
<h3> 股票问题</h3>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&amp;mid=2247484508&amp;idx=1&amp;sn=42cae6e7c5ccab1f156a83ea65b00b78&amp;chksm=9bd7fa54aca07342d12ae149dac3dfa76dc42bcdd55df2c71e78f92dedbbcbdb36dec56ac13b&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">团灭股票问题</a></p>
</div>
<blockquote>
<p>画出状态转换图后穷举，需要特别注意，一次交易是指买完再卖，只需要在买的时候或者卖的时候将最大将以次数减一即可</p>
</blockquote>
<p>三种选择：</p>
<ol>
<li>买入</li>
<li>卖出</li>
<li>无操作</li>
</ol>
<p>状态（画出状态转换图）：</p>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//算法/20230319/股票问题状态转换.png" alt="股票问题状态转换" tabindex="0" loading="lazy"><figcaption>股票问题状态转换</figcaption></figure>
<p>状态转换方程：</p>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//算法/20230319/股票问题状态转换方程.jpeg" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>
<p>Base case：</p>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//算法/20230319/股票问题base case.jpeg" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>
<p>综合：</p>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//算法/20230319/股票问题状态汇总.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="算法"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">贪心算法</title>
    <id>https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/I-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95.html</id>
    <link href="https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/I-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 贪心算法</h1>

<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>在某一个标准下，优先考虑最满足标准的样本，最后考虑最不满足标准的样本，最终得到一个答案</p>
<p>也就是不从整体上寻找最优解，而是做出某种意义上的局部最优解</p>
<p>有时可由局部最优得到整体最优</p>
<p>**注意：**贪心策略都是需要证明的，但是一般数学证明会非常难，所以在时间不允许的情况下使用对数器暴力验证是否正确</p>
<p>**最常用的做法：**堆和排序</p>
</div>
<h2> N 皇后问题</h2>]]></summary>
    <content type="html"><![CDATA[<h1> 贪心算法</h1>

<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>在某一个标准下，优先考虑最满足标准的样本，最后考虑最不满足标准的样本，最终得到一个答案</p>
<p>也就是不从整体上寻找最优解，而是做出某种意义上的局部最优解</p>
<p>有时可由局部最优得到整体最优</p>
<p>**注意：**贪心策略都是需要证明的，但是一般数学证明会非常难，所以在时间不允许的情况下使用对数器暴力验证是否正确</p>
<p>**最常用的做法：**堆和排序</p>
</div>
<h2> N 皇后问题</h2>
<ol>
<li>
<p>在 N * N 的棋盘上要摆 N 个皇后，要求任意两个皇后不同行、不同列、不在任何一条斜线上</p>
</li>
<li>
<p>给定一个 N，返回 N 皇后的摆法一共有多少种</p>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：常数优化后的方案在一定范围内时间会少很多，实现方法是改用位运算</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 开会排序</h2>
<blockquote>
<p>以结束时间排序能得到最优解</p>
</blockquote>
<h2> 拼接字符串字典序最小</h2>
<blockquote>
<p>以 a · b &lt;= b · a 比较能得到最优解</p>
</blockquote>
<h2> 切分金条最小代价</h2>
<p>切分金条得到最小代价（哈夫曼编码问题，由局部最小得到整体最小）</p>
<blockquote>
<p>利用小根堆排序累加能得到最优解</p>
</blockquote>
<h3> 做最多的项目</h3>
<blockquote>
<p>利用大小根堆配合，按花费排序的小根堆，按利用排序的大根堆</p>
</blockquote>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="算法"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">其他经典算法</title>
    <id>https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/Z-%E5%85%B6%E4%BB%96%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95.html</id>
    <link href="https://gzwrrr.github.io/article/algorithm/A-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/Z-%E5%85%B6%E4%BB%96%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 其他经典算法</h1>

<h2> 布隆过滤器</h2>
<ul>
<li>典型应用：网站链接黑名单，爬虫去重</li>
<li>操作只有增加、查询，没有删除</li>
<li>有一定程度的失误（不可避免，但是可以设计得很低）</li>
<li>使用「位图」（bit arr / bit map），用基础类型拼凑，与单样本大小无关</li>
<li>原理：对一个输入取 K 个哈希值，将位图（大小为 M）中对应的 bit 位「描黑」（置1/0），下次再判断输入是否在位图中即可（K 个哈希值有一个是「白」的就说明输入不在位图中）</li>
<li>具体实现时，需要考虑 K 和 M 的取值范围，K 太小太大或者 M 太小都会增加失误率（M 取值占主要）</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h1> 其他经典算法</h1>

<h2> 布隆过滤器</h2>
<ul>
<li>典型应用：网站链接黑名单，爬虫去重</li>
<li>操作只有增加、查询，没有删除</li>
<li>有一定程度的失误（不可避免，但是可以设计得很低）</li>
<li>使用「位图」（bit arr / bit map），用基础类型拼凑，与单样本大小无关</li>
<li>原理：对一个输入取 K 个哈希值，将位图（大小为 M）中对应的 bit 位「描黑」（置1/0），下次再判断输入是否在位图中即可（K 个哈希值有一个是「白」的就说明输入不在位图中）</li>
<li>具体实现时，需要考虑 K 和 M 的取值范围，K 太小太大或者 M 太小都会增加失误率（M 取值占主要）</li>
</ul>
<p>经过数学证明的公式（N 为样本量，P 为失误率，均向上取整）：</p>
<blockquote>
<p>M = -(N * lnP / (ln2)^2)</p>
<p>K = ln2 * M / N ≈ 0.7 * M / N</p>
<p>P真 = (1 - e^(- N * K真 / M真))^K真</p>
</blockquote>
<h2> 滑动窗口</h2>
<blockquote>
<p>滑动窗口是一种基于双指针的一种思想，两个指针指向的元素之间形成一个窗口</p>
</blockquote>
<p>滑动窗口分为两类：</p>
<ul>
<li>一种是固定大小类的窗口</li>
<li>一类是大小动态变化的窗口</li>
</ul>
<p>滑动窗口初始指针一般是「左闭右开」的，即：[left, right)</p>
<p>滑动窗口一般是由两个「循环」组成：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>滑动窗口框架：</strong></p>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>题目：最小覆盖子串，即寻找子序列（注意不是子串，二者有区别，有时候题目会说成子串，但是实际上是子序列），使用滑动窗口遍历一次：</strong></p>
<blockquote>
<p>题目示例：S=ABNDHGDSN，T=HNG，那么最小覆盖子序列就是：NDHG（很明显是子序列）</p>
</blockquote>
<p>流程大致为：使用两个指针 <code>left</code> 与 <code>right</code> 作为窗口，使用 <code>window</code> 哈希表记录窗口中每个字符的个数，使用 <code>need</code> 哈希表记录子串 <code>t</code> 中每个字符的个数。开始左右指针都在起始位置，右指针 <code>right</code> 先不断前进，前进时不断更新 <code>window</code> 中的字符的个数，并查看 <code>need</code> 中是否包含该字符并且 <strong>该字符的数量也相等</strong>，相等时使用一个变量 <code>valid</code> 记录 <code>window</code> 和 <code>need</code> 的字符及其数量都匹配的个数，当 <code>valid</code> 等于 <code>nedd.size()</code> 时，说明窗口中一定包含了子串中所有字符，并且需要的字符的个数也正确。</p>
<p>接下来要做的就是检验窗口中是否确实有需要的子串，做法就是让左指针 <code>left</code> 开始前进，前进时更新窗口中的字符个数以及 <code>valid</code> 变量，一旦  <code>valid</code> 小于了 <code>need.size()</code> 就说明窗口中已经没有了我们需要的字符或说有字符但是个数不对，此时左指针 <code>left</code> 就不需要再继续前进了，需要做的就是让右指针 <code>right</code> 继续前进直到再次满足 <code>valid</code>  等于 <code>need.size()</code>，不断这样操作直到遍历完成。</p>
<p>在左指针移动的过程中，还需要不断更新维护字符串中子串起始位置 <code>start</code>（其实就是不断更新到 <code>left</code> 的位置）以及窗口长度 <code>len</code>，因为左右指针的移动条件或说移动规则保证了需要的子串（如果确实有子串）一定在窗口内，所以更新起始位置变得很简单，遍历一遍便可以直接确定子串位置。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>题目：判断 S 是否包含 T 的排列，即 T 的排列是 S 的子串，这里很明显也是找子序列，和上面的寻找最小覆盖子串类似，只是左指针的移动条件有变化</strong></p>
<blockquote>
<p>题目示例：S=ahdjbc，T=cb，此时返回的是 True，因为 T 的排列 bc 是 S 的子串</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>上面的解法是没有优化的版本，使用的存储的数据结构开销比较大，整体的效率比较低。</p>
<p>但是这里主要说的是思路，思路有了怎么改都行</p>
</div>
<br>
<h2> N 数之和</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&amp;mid=2247485789&amp;idx=1&amp;sn=efc1167b85011c019e05d2c3db1039e6&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">一个函数秒杀 2Sum 3Sum 4Sum 问题</a></p>
</div>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 前缀和数组</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&amp;mid=2247484488&amp;idx=1&amp;sn=848f76e86fce722e70e265d0c6f84dc3&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">前缀和技巧：解决子数组问题</a></p>
</div>
<p>前缀和 <code>preSum</code> 用于快速确定 <code>nums[i...j]</code> 区域的相加的值，例如要找到 <code>nums[i...j]</code> 区域相加的值，只需要 <code>sums[j + 1] - sum[i]</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如题目：</p>
<blockquote>
<p>和为 K 的子数组：给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你统计并返回 <em>该数组中和为 <code>k</code> 的连续子数组的个数</em> 。</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以使用哈希表优化（具体看上面的给出的原文章）：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 差分数组</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&amp;mid=2247487011&amp;idx=1&amp;sn=5e2b00c1c736fd7afbf3ed35edc4aeec&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">论那些小而美的算法技巧：差分数组/前缀和</a></p>
</div>
<blockquote>
<p>差分数组用于对数组的某一个区域的所有数进行非常频繁的加减操作</p>
</blockquote>
<p>具体实现（直接看文章就可以了，有图很清晰）：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 最近最少使用 （LRUCache）</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://www.cnblogs.com/xiaoxi/p/6170590.html" target="_blank" rel="noopener noreferrer">Java集合之LinkedHashMap</a></p>
<p><a href="https://leetcode.cn/problems/lru-cache/solutions/259678/lruhuan-cun-ji-zhi-by-leetcode-solution/" target="_blank" rel="noopener noreferrer">Leetcode 题解</a></p>
</div>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 随机算法</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&amp;mid=2247498181&amp;idx=1&amp;sn=1e015d4bae3491beb1070c1105428577&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">说透游戏中常用的两种随机算法</a></p>
</div>
<h3> 二维数组随机</h3>
<p>降维成一维数组</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 洗牌算法</h3>
<blockquote>
<p>打乱数组</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 水塘抽样法</h3>
<blockquote>
<p>抽取 K 个随机元素</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 蒙特卡洛方法</h3>
<blockquote>
<p>测试次数越多，最终各个随机数出现的概率就几乎相等</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 阶乘</h2>
<p>阶乘后 0 的数量转化为 n 可以有多少个因子 5</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 素数</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&amp;mid=2247484472&amp;idx=1&amp;sn=ab8e97d0211de37bf6770a63caacc630&amp;scene=21&amp;poc_token=HI-k02SjY1Utrdv7uy9aLPUekEtd6GnLhxqUXCn_" target="_blank" rel="noopener noreferrer">如何用算法高效寻找素数</a></p>
</div>
<p>判断一个数是否是素数</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>算出某个范围内的素数有多少个（Sieve of Eratosthenes），时间复杂度：O(N * loglogN)</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="算法"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">应用发布与部署</title>
    <id>https://gzwrrr.github.io/article/other/G-%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7/%E5%BA%94%E7%94%A8%E5%8F%91%E5%B8%83%E4%B8%8E%E9%83%A8%E7%BD%B2.html</id>
    <link href="https://gzwrrr.github.io/article/other/G-%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7/%E5%BA%94%E7%94%A8%E5%8F%91%E5%B8%83%E4%B8%8E%E9%83%A8%E7%BD%B2.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 应用发布与部署</h1>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>全量发布：</p>
<ol>
<li>蓝绿发布</li>
<li>红黑发布</li>
</ol>
<p>增量发布：灰度发布（金丝雀发布）</p>
</div>
<h2> 蓝绿发布</h2>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//运维/20230725/蓝绿发布.png" alt="蓝绿发布" tabindex="0" loading="lazy"><figcaption>蓝绿发布</figcaption></figure>]]></summary>
    <content type="html"><![CDATA[<h1> 应用发布与部署</h1>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>全量发布：</p>
<ol>
<li>蓝绿发布</li>
<li>红黑发布</li>
</ol>
<p>增量发布：灰度发布（金丝雀发布）</p>
</div>
<h2> 蓝绿发布</h2>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//运维/20230725/蓝绿发布.png" alt="蓝绿发布" tabindex="0" loading="lazy"><figcaption>蓝绿发布</figcaption></figure>
<p>发布流程：</p>
<ol>
<li>断开集群A，升级新版本</li>
<li>当新版本完全启动后，接入新版本，同时下掉集群 B</li>
<li>断开集群 B，升级新版本</li>
<li>当新版本完全启动后，接入新版本</li>
</ol>
<h2> 红黑发布</h2>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//运维/20230725/红黑发布.png" alt="红黑发布" tabindex="0" loading="lazy"><figcaption>红黑发布</figcaption></figure>
<p>红黑发布利用云服务的弹性伸缩，发布流程：</p>
<ol>
<li>启动一个新的集群 B，完成后连接到集群 B</li>
<li>断开集群 A，并释放集群 A 的所有资源</li>
</ol>
<h2> 灰度发布</h2>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//运维/20230725/灰度发布.png" alt="灰度发布" tabindex="0" loading="lazy"><figcaption>灰度发布</figcaption></figure>
<p>发布流程：</p>
<ol>
<li>启动新版本集群 B，将部分流量接入集群 B</li>
<li>如果新版本可以使用，继续加大集群 B 的流量</li>
<li>最终将全部流量切换到集群 B，并断开集群 A</li>
</ol>
<p>可能的挑战：</p>
<ol>
<li>新旧版本系统的 SQL 语句可能不一致，需要考虑兼容性</li>
<li>新旧版本无法协同作业，此时可以改用红黑发布</li>
<li>如果使用随机访问的负载均衡策略，可能出现同一个用户在新旧版本切换，大概率会出现 Bug</li>
<li>注意要进行链路追踪，统计新版本的请求数据</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="运维"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-01-06T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">网络常见问题</title>
    <id>https://gzwrrr.github.io/article/other/I-%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html</id>
    <link href="https://gzwrrr.github.io/article/other/I-%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 网络常见问题</h1>
<h2> 浏览器种输入一个url会发生什么</h2>
<p><a href="https://blog.csdn.net/Damn_Yang/article/details/90727758" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/Damn_Yang/article/details/90727758</a></p>
]]></summary>
    <content type="html"><![CDATA[<h1> 网络常见问题</h1>
<h2> 浏览器种输入一个url会发生什么</h2>
<p><a href="https://blog.csdn.net/Damn_Yang/article/details/90727758" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/Damn_Yang/article/details/90727758</a></p>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="网络"/>
    <category term="小知识点"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-05-19T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">操作系统常见问题</title>
    <id>https://gzwrrr.github.io/article/other/J-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html</id>
    <link href="https://gzwrrr.github.io/article/other/J-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 操作系统常见问题</h1>
<h2> 进程间的通信方式</h2>
<p><a href="https://blog.csdn.net/zhaohong_bo/article/details/89552188" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/zhaohong_bo/article/details/89552188</a></p>
]]></summary>
    <content type="html"><![CDATA[<h1> 操作系统常见问题</h1>
<h2> 进程间的通信方式</h2>
<p><a href="https://blog.csdn.net/zhaohong_bo/article/details/89552188" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/zhaohong_bo/article/details/89552188</a></p>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="操作系统"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">C 基础</title>
    <id>https://gzwrrr.github.io/article/c/A-C%E5%9F%BA%E7%A1%80.html</id>
    <link href="https://gzwrrr.github.io/article/c/A-C%E5%9F%BA%E7%A1%80.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> C 基础</h1>

<h2> 类型</h2>
<p>分类</p>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">基本类型</td>
<td style="text-align:left">算术类型，包括两种类型：整数类型和浮点类型</td>
</tr>
<tr>
<td style="text-align:left">枚举类型</td>
<td style="text-align:left">算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量</td>
</tr>
<tr>
<td style="text-align:left">void 类型</td>
<td style="text-align:left">类型说明符 void 表明没有可用的值</td>
</tr>
<tr>
<td style="text-align:left">派生类型</td>
<td style="text-align:left">指针类型、数组类型、结构类型、共用体类型、函数类型</td>
</tr>
</tbody>
</table>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> C 基础</h1>

<h2> 类型</h2>
<p>分类</p>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">基本类型</td>
<td style="text-align:left">算术类型，包括两种类型：整数类型和浮点类型</td>
</tr>
<tr>
<td style="text-align:left">枚举类型</td>
<td style="text-align:left">算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量</td>
</tr>
<tr>
<td style="text-align:left">void 类型</td>
<td style="text-align:left">类型说明符 void 表明没有可用的值</td>
</tr>
<tr>
<td style="text-align:left">派生类型</td>
<td style="text-align:left">指针类型、数组类型、结构类型、共用体类型、函数类型</td>
</tr>
</tbody>
</table>
</div><p>注意：</p>
<ol>
<li>数组类型和结构类型统称为聚合类型</li>
<li>函数的类型指的是函数返回值的类型</li>
</ol>
<h3> 整数类型</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">存储大小</th>
<th style="text-align:left">值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">char</td>
<td style="text-align:left">1 byte</td>
<td style="text-align:left">-128 到 127 或 0 到 255</td>
</tr>
<tr>
<td style="text-align:left">unsigned char</td>
<td style="text-align:left">1 byte</td>
<td style="text-align:left">0 到 255</td>
</tr>
<tr>
<td style="text-align:left">signed char</td>
<td style="text-align:left">1 byte</td>
<td style="text-align:left">-128 到 127</td>
</tr>
<tr>
<td style="text-align:left">int</td>
<td style="text-align:left">2 或 4 bytes</td>
<td style="text-align:left">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td>
</tr>
<tr>
<td style="text-align:left">unsigned int</td>
<td style="text-align:left">2 或 4 bytes</td>
<td style="text-align:left">0 到 65,535 或 0 到 4,294,967,295</td>
</tr>
<tr>
<td style="text-align:left">short</td>
<td style="text-align:left">2 bytes</td>
<td style="text-align:left">-32,768 到 32,767</td>
</tr>
<tr>
<td style="text-align:left">unsigned short</td>
<td style="text-align:left">2 bytes</td>
<td style="text-align:left">0 到 65,535</td>
</tr>
<tr>
<td style="text-align:left">long</td>
<td style="text-align:left">4 bytes</td>
<td style="text-align:left">-2,147,483,648 到 2,147,483,647</td>
</tr>
<tr>
<td style="text-align:left">unsigned long</td>
<td style="text-align:left">4 bytes</td>
<td style="text-align:left">0 到 4,294,967,295</td>
</tr>
</tbody>
</table>
</div><h3> 浮点类型</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">存储大小</th>
<th style="text-align:left">值范围</th>
<th style="text-align:left">精度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">float</td>
<td style="text-align:left">4 byte</td>
<td style="text-align:left">1.2E-38 到 3.4E+38</td>
<td style="text-align:left">6 位小数</td>
</tr>
<tr>
<td style="text-align:left">double</td>
<td style="text-align:left">8 byte</td>
<td style="text-align:left">2.3E-308 到 1.7E+308</td>
<td style="text-align:left">15 位小数</td>
</tr>
<tr>
<td style="text-align:left">long double</td>
<td style="text-align:left">10 byte</td>
<td style="text-align:left">3.4E-4932 到 1.1E+4932</td>
<td style="text-align:left">19 位小数</td>
</tr>
</tbody>
</table>
</div><h3> void 类型</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">函数返回空</td>
<td style="text-align:left"><strong>函数返回为空</strong> C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 <strong>void exit (int status);</strong></td>
</tr>
<tr>
<td style="text-align:left">函数参数为空</td>
<td style="text-align:left"><strong>函数参数为空</strong> C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 <strong>int rand(void);</strong></td>
</tr>
<tr>
<td style="text-align:left">指针指向空</td>
<td style="text-align:left"><strong>指针指向 void</strong> 类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 <strong>void *malloc( size_t size );</strong> 返回指向 void 的指针，可以转换为任何数据类型。</td>
</tr>
</tbody>
</table>
</div><h3> 变量</h3>
<p>变量声明：</p>
<ol>
<li>
<p>变量声明向编译器保证变量以给定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明</p>
</li>
<li>
<p>可以使用 <strong>extern</strong> 关键字在任何地方声明一个变量。虽然可以在程序中多次声明一个变量，但变量只能在某个文件、函数或代码块中被定义一次</p>
</li>
</ol>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 常量</h3>
<blockquote>
<p>常量是固定值，在程序执行期间不会改变。这些固定的值，又叫做字面量</p>
<p>常量可以是任何的基本数据类型，比如整数常量、浮点常量、字符常量，或字符串字面值，也有枚举常量</p>
<p>常量就像是常规的变量，只不过常量的值在定义后不能进行修改</p>
</blockquote>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C 中，有两种简单的定义常量的方式：</p>
<ol>
<li>使用 <code>#define</code> 预处理器</li>
<li>使用 <code>const</code> 关键字</li>
</ol>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：当局部变量被定义时，系统不会对其初始化，您必须自行对其初始化。定义全局变量时，系统会自动对其初始化</p>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">数据类型</th>
<th style="text-align:left">初始化默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">int</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">char</td>
<td style="text-align:left">''</td>
</tr>
<tr>
<td style="text-align:left">float</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">double</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">pointer</td>
<td style="text-align:left">NULL</td>
</tr>
</tbody>
</table>
</div><h3> 存储类</h3>
<p>存储类定义 C 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C 程序中可用的存储类：</p>
<ul>
<li>auto：auto 只能用在函数内，即 auto 只能修饰局部变量，auto 只能用在函数内，即 auto 只能修饰局部变量</li>
<li>register：register 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个字节），且不能对它应用一元的 '&amp;' 运算符（因为它没有内存位置）；寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 'register' 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制</li>
<li>static：static 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值</li>
<li>extern：
<ul>
<li>extern 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当使用 'extern' 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置</li>
<li>当有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，<em>extern</em> 是用来在另一个文件中声明一个全局变量或函数</li>
</ul>
</li>
</ul>
<h2> 流程控制</h2>
<ol>
<li>判断：
<ol>
<li>if-else</li>
<li>三元运算符</li>
</ol>
</li>
<li>循环：
<ol>
<li>for</li>
<li>while</li>
<li>do-while</li>
</ol>
</li>
<li>循环控制语句：
<ol>
<li>break</li>
<li>continue</li>
<li>goto</li>
</ol>
</li>
</ol>
<h2> 函数</h2>
<blockquote>
<p>C 标准库提供了大量的程序可以调用的内置函数。例如，函数 <strong>strcat()</strong> 用来连接两个字符串，函数 <strong>memcpy()</strong> 用来复制内存到另一个位置</p>
</blockquote>
<p>包含：</p>
<ol>
<li>函数声明：告诉编译器函数的名称、返回类型和参数</li>
<li>函数定义：提供了函数的实际主体</li>
<li>函数参数：
<ol>
<li>传值调用： 该方法把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数不会影响实际参数</li>
<li>引用调用：该方法把参数的地址复制给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数</li>
</ol>
</li>
</ol>
<h3> 数组</h3>
<blockquote>
<p>C 语言支持数组数据结构，它可以存储一个固定大小的相同类型元素的顺序集合。数组是用来存储一系列数据，但它往往被认为是一系列相同类型的变量</p>
</blockquote>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">概念</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.w3cschool.cn/c/c-multi-dimensional-arrays.html" target="_blank" rel="noopener noreferrer">多维数组</a></td>
<td style="text-align:left">C 支持多维数组。多维数组最简单的形式是二维数组。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3cschool.cn/c/c-passing-arrays-to-functions.html" target="_blank" rel="noopener noreferrer">传递数组给函数</a></td>
<td style="text-align:left">您可以通过指定不带索引的数组名称来给函数传递一个指向数组的指针。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3cschool.cn/c/c-return-arrays-from-function.html" target="_blank" rel="noopener noreferrer">从函数返回数组</a></td>
<td style="text-align:left">C 允许从函数返回数组。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3cschool.cn/c/c-pointer-to-an-array.html" target="_blank" rel="noopener noreferrer">指向数组的指针</a></td>
<td style="text-align:left">您可以通过指定不带索引的数组名称来生成一个指向数组中第一个元素的指针。</td>
</tr>
</tbody>
</table>
</div><div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 指针</h2>
<blockquote>
<p>通过指针，可以简化一些 C 编程任务的执行，还有一些任务，如动态内存分配，没有指针是无法执行的</p>
</blockquote>
<p>每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号（&amp;）运算符访问的地址，它表示了在内存中的一个地址</p>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯</p>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一些指针相关的内容</p>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">概念</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.w3cschool.cn/c/c-pointer-arithmetic.html" target="_blank" rel="noopener noreferrer">指针的算术运算</a></td>
<td style="text-align:left">可以对指针进行四种算术运算：++、--、+、-</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3cschool.cn/c/c-array-of-pointers.html" target="_blank" rel="noopener noreferrer">指针数组</a></td>
<td style="text-align:left">可以定义用来存储指针的数组。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3cschool.cn/c/c-pointer-to-pointer.html" target="_blank" rel="noopener noreferrer">指向指针的指针</a></td>
<td style="text-align:left">C 允许指向指针的指针。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3cschool.cn/c/c-passing-pointers-to-functions.html" target="_blank" rel="noopener noreferrer">传递指针给函数</a></td>
<td style="text-align:left">通过引用或地址传递参数，使传递的参数在调用函数中被改变。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3cschool.cn/c/c-return-pointer-from-functions.html" target="_blank" rel="noopener noreferrer">从函数返回指针</a></td>
<td style="text-align:left">C 允许函数返回指针到局部变量、静态变量和动态内存分配。</td>
</tr>
</tbody>
</table>
</div><div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 字符串</h2>
<blockquote>
<p>在 C 语言中，字符串实际上是使用 <strong>null</strong> 字符 '' 终止的一维字符数组。因此，一个以 null 结尾的字符串，包含了组成字符串的字符‘</p>
</blockquote>
<p>操作字符串的函数</p>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>strcpy(s1, s2);</strong></td>
<td style="text-align:left">复制字符串 s2 到字符串 s1。</td>
</tr>
<tr>
<td style="text-align:left"><strong>strcat(s1, s2);</strong></td>
<td style="text-align:left">连接字符串 s2 到字符串 s1 的末尾。</td>
</tr>
<tr>
<td style="text-align:left"><strong>strlen(s1);</strong></td>
<td style="text-align:left">返回字符串 s1 的长度。</td>
</tr>
<tr>
<td style="text-align:left"><strong>strcmp(s1, s2);</strong></td>
<td style="text-align:left">如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回小于 0；如果 s1&gt;s2 则返回大于 0。</td>
</tr>
<tr>
<td style="text-align:left"><strong>strchr(s1, ch);</strong></td>
<td style="text-align:left">返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td>
</tr>
<tr>
<td style="text-align:left"><strong>strstr(s1, s2);</strong></td>
<td style="text-align:left">返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td>
</tr>
</tbody>
</table>
</div><h2> 结构体</h2>
<blockquote>
<p>C 数组允许定义可存储相同类型数据项的变量，结构体是 C 编程中另一种用户自定义的可用的数据类型，它允许存储不同类型的数据项</p>
</blockquote>
<p>结构体的定义</p>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了访问结构的成员，使用成员访问运算符 <code>.</code></p>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以定义指向结构的指针，方式与定义指向其他类型变量的指针相似，为了使用指向该结构的指针访问结构的成员，必须使用 <code>-&gt;</code> 运算符</p>
<div class="language-c# line-numbers-mode" data-ext="c#"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 共用体</h2>
<blockquote>
<p>共用体是一种特殊的数据类型，允许您在相同的内存位置存储不同的数据类型。您可以定义一个带有多成员的共用体，但是任何时候只能有一个成员带有值。共用体提供了一种使用相同的内存位置的有效方式</p>
</blockquote>
<p>共用体定义方式与定义结构类似，成员访问规则也类似</p>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Typedef</h2>
<blockquote>
<p>C 语言提供了 <strong>typedef</strong> 关键字，您可以使用它来为类型取一个新的名字</p>
</blockquote>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>#define</strong> 是 C 指令，用于为各种数据类型定义别名，与 <strong>typedef</strong> 类似，但是它们有以下几点不同：</p>
<ul>
<li><strong>typedef</strong> 仅限于为类型定义符号名称，<strong>#define</strong> 不仅可以为类型定义别名，也能为数值定义别名，比如您可以定义 1 为 ONE。</li>
<li><strong>typedef</strong> 是由编译器执行解释的，<strong>#define</strong> 语句是由预编译器进行处理的。</li>
</ul>
<h2> 文件读取</h2>
<div class="language-C line-numbers-mode" data-ext="C"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 预处理器</h2>
<blockquote>
<p><strong>C 预处理器</strong>不是编译器的组成部分，但是它是编译过程中一个单独的步骤。简言之，C 预处理器只不过是一个文本替换工具而已，它们会指示编译器在实际编译之前完成所需的预处理。我们将把 C 预处理器（C Preprocessor）简写为 CPP</p>
</blockquote>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">宏指令</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">#define</td>
<td style="text-align:left">定义宏</td>
</tr>
<tr>
<td style="text-align:left">#include</td>
<td style="text-align:left">包含一个源代码文件</td>
</tr>
<tr>
<td style="text-align:left">#undef</td>
<td style="text-align:left">取消已定义的宏</td>
</tr>
<tr>
<td style="text-align:left">#ifdef</td>
<td style="text-align:left">如果宏已经定义，则返回真</td>
</tr>
<tr>
<td style="text-align:left">#ifndef</td>
<td style="text-align:left">如果宏没有定义，则返回真</td>
</tr>
<tr>
<td style="text-align:left">#if</td>
<td style="text-align:left">如果给定条件为真，则编译下面代码</td>
</tr>
<tr>
<td style="text-align:left">#else</td>
<td style="text-align:left">#if 的替代方案</td>
</tr>
<tr>
<td style="text-align:left">#elif</td>
<td style="text-align:left">如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码</td>
</tr>
<tr>
<td style="text-align:left">#endif</td>
<td style="text-align:left">结束一个 #if……#else 条件编译块</td>
</tr>
<tr>
<td style="text-align:left">#error</td>
<td style="text-align:left">当遇到标准错误时，输出错误消息</td>
</tr>
<tr>
<td style="text-align:left">#pragma</td>
<td style="text-align:left">使用标准化方法，向编译器发布特殊的命令到编译器中</td>
</tr>
</tbody>
</table>
</div><p>ANSI C 定义了许多宏。在编程中可以使用这些宏，但是不能直接修改这些预定义的宏</p>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">宏</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>DATE</strong></td>
<td style="text-align:left">当前日期，一个以 "MMM DD YYYY" 格式表示的字符常量。</td>
</tr>
<tr>
<td style="text-align:left"><strong>TIME</strong></td>
<td style="text-align:left">当前时间，一个以 "HH:MM:SS" 格式表示的字符常量。</td>
</tr>
<tr>
<td style="text-align:left"><strong>FILE</strong></td>
<td style="text-align:left">这会包含当前文件名，一个字符串常量。</td>
</tr>
<tr>
<td style="text-align:left"><strong>LINE</strong></td>
<td style="text-align:left">这会包含当前行号，一个十进制常量。</td>
</tr>
<tr>
<td style="text-align:left"><strong>STDC</strong></td>
<td style="text-align:left">当编译器以 ANSI 标准编译时，则定义为 1。</td>
</tr>
</tbody>
</table>
</div><h2> 错误处理</h2>
<blockquote>
<p>C 语言不提供对错误处理的直接支持，但是作为一种系统编程语言，它以返回值的形式允许您访问底层数据。在发生错误时，大多数的 C 或 UNIX 函数调用返回 1 或 NULL，同时会设置一个错误代码 errno，该错误代码是全局变量，表示在函数调用期间发生了错误。您可以在 &lt;error.h&gt; 头文件中找到各种各样的错误代码。</p>
<p>所以，C 程序员可以通过检查返回值，然后根据返回值决定采取哪种适当的动作。开发人员应该在程序初始化时，把 errno 设置为 0，这是一种良好的编程习惯。0 值表示程序中没有错误。</p>
</blockquote>
<p>C 语言提供了 <strong>perror()</strong> 和 <strong>strerror()</strong> 函数来显示与 <strong>errno</strong> 相关的文本消息。</p>
<ul>
<li><strong>perror()</strong> 函数显示您传给它的字符串，后跟一个冒号、一个空格和当前 errno 值的文本表示形式。</li>
<li><strong>strerror()</strong> 函数，返回一个指针，指针指向当前 errno 值的文本表示形式。</li>
</ul>
<h2> 内存管理</h2>
<blockquote>
<p>C 语言为内存的分配和管理提供了几个函数。这些函数可以在 <strong>&lt;stdlib.h&gt;</strong> 头文件中找到</p>
</blockquote>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>void *calloc(int num, int size);</strong></td>
<td style="text-align:left">该函数分配一个带有 function allocates an array of <strong>num</strong> 个元素的数组，每个元素的大小为 <strong>size</strong> 字节。</td>
</tr>
<tr>
<td style="text-align:left"><strong>void free(void *address);</strong></td>
<td style="text-align:left">该函数释放 address 所指向的h内存块</td>
</tr>
<tr>
<td style="text-align:left"><strong>void *malloc(int num);</strong></td>
<td style="text-align:left">该函数分配一个 <strong>num</strong> 字节的数组，并把它们进行初始化</td>
</tr>
<tr>
<td style="text-align:left"><strong>void *realloc(void *address, int newsize);</strong></td>
<td style="text-align:left">该函数重新分配内存，把内存扩展到 <strong>newsize</strong></td>
</tr>
</tbody>
</table>
</div><h2> 其他</h2>
<h3> 作用域规则</h3>
<p>任何一种编程中，作用域是程序中定义的变量所存在的区域，超过该区域变量就不能被访问。C 语言中有三个地方可以声明变量：</p>
<ol>
<li>在函数或块内部的局部变量</li>
<li>在所有函数外部的全局变量</li>
<li>在形式参数的函数参数定义中</li>
</ol>
<h3> 位域</h3>
<p>有些信息在存储时，并不需要占用一个完整的字节，而只需占几个或一个二进制位。例如在存放一个开关量时，只有 0 和 1 两种状态，用 1 位二进位即可。为了节省存储空间，并使处理简便，C 语言又提供了一种数据结构，称为"位域"或"位段"</p>
<p>所谓"位域"是把一个字节中的二进位划分为几个不同的区域，并说明每个区域的位数。每个域有一个域名，允许在程序中按域名进行操作。这样就可以把几个不同的对象用一个字节的二进制位域来表示</p>
<p>典型的实例：</p>
<ul>
<li>用 1 位二进位存放一个开关量时，只有 0 和 1 两种状态。</li>
<li>读取外部文件格式——可以读取非标准的文件格式。例如：9 位的整数。</li>
</ul>
<p>位域与结构体相仿</p>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意点：</p>
<ol>
<li>一个位域必须存储在同一个字节中，不能跨两个字节。如一个字节所剩空间不够存放另一位域时，应从下一单元起存放该位域。也可以有意使某位域从下一单元开始</li>
<li>由于位域不允许跨两个字节，因此位域的长度不能大于一个字节的长度，也就是说不能超过8位二进位。如果最大长度大于计算机的整数字长，一些编译器可能会允许域的内存重叠，另外一些编译器可能会把大于一个域的部分存储在下一个字中</li>
<li>位域可以是无名位域，这时它只用来作填充或调整位置。无名的位域是不能使用的</li>
</ol>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 局部变量</h3>
<p>C 不支持在函数外返回局部变量的地址，除非定义局部变量为 <strong>static</strong> 变量</p>
<h3> 运算符</h3>
<blockquote>
<p>略</p>
</blockquote>
<h3> 其他</h3>
<ol>
<li>头文件</li>
<li>强制类型转换</li>
<li>可变参数</li>
<li>命令行参数</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="c"/>
    <category term="编程"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-03-20T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">C 进阶</title>
    <id>https://gzwrrr.github.io/article/c/B-C%E8%BF%9B%E9%98%B6.html</id>
    <link href="https://gzwrrr.github.io/article/c/B-C%E8%BF%9B%E9%98%B6.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> C 进阶</h1>
<blockquote>
<p>TODO</p>
</blockquote>
]]></summary>
    <content type="html"><![CDATA[<h1> C 进阶</h1>
<blockquote>
<p>TODO</p>
</blockquote>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="c"/>
    <category term="编程"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-04-20T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">C</title>
    <id>https://gzwrrr.github.io/article/c/</id>
    <link href="https://gzwrrr.github.io/article/c/"/>
    <updated>2023-07-11T11:38:36.000Z</updated>
    <summary type="html"><![CDATA[<h1> C</h1>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>C 的简单使用</p>
<p>相关文章：</p>
<ol>
<li><a href="https://www.w3cschool.cn/c/c-intro.html" target="_blank" rel="noopener noreferrer">W3C 的 C 语言教程</a></li>
<li><a href="https://www.w3cschool.cn/c/install-mingw.html" target="_blank" rel="noopener noreferrer">MinGW 下载</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/414471607" target="_blank" rel="noopener noreferrer">C/C++框架和第三方库汇总</a></li>
</ol>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> C</h1>
<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>C 的简单使用</p>
<p>相关文章：</p>
<ol>
<li><a href="https://www.w3cschool.cn/c/c-intro.html" target="_blank" rel="noopener noreferrer">W3C 的 C 语言教程</a></li>
<li><a href="https://www.w3cschool.cn/c/install-mingw.html" target="_blank" rel="noopener noreferrer">MinGW 下载</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/414471607" target="_blank" rel="noopener noreferrer">C/C++框架和第三方库汇总</a></li>
</ol>
</div>
<h2> 标准库</h2>
<blockquote>
<p>参考：<a href="https://www.w3cschool.cn/c/c-standard-library.html" target="_blank" rel="noopener noreferrer">https://www.w3cschool.cn/c/c-standard-library.html</a></p>
</blockquote>
<ol>
<li><code>&lt;assert.h&gt;</code>：用于验证程序做出的假设，并在假设为假时输出诊断消息</li>
<li><code>&lt;ctype.h&gt;</code>：可用于测试和映射字符</li>
<li><code>&lt;errno.h&gt;</code>：C 标准库的 <strong>errno.h</strong> 头文件定义了整数变量 <strong>errno</strong>，它是通过系统调用设置的，在错误事件中的某些库函数表明了什么发生了错误；在程序启动时，<strong>errno</strong> 设置为零，C 标准库中的特定函数修改它的值为一些非零值以表示某些类型的错误</li>
<li><code>&lt;float.h&gt;</code>：C 标准库的 <strong>float.h</strong> 头文件包含了一组与浮点值相关的依赖于平台的常量。这些常量是由 ANSI C 提出的，这让程序更具有可移植性</li>
<li><code>&lt;limists.h&gt;</code>：<strong>limits.h</strong> 头文件决定了各种变量类型的各种属性。定义在该头文件中的宏限制了各种变量类型（比如 char、int 和 long）的值</li>
<li><code>&lt;locale.h&gt;</code>：<strong>locale.h</strong> 头文件定义了特定地域的设置，比如日期格式和货币符号</li>
<li><code>&lt;math.h&gt;</code>：<strong>math.h</strong> 头文件定义了各种数学函数和一个宏。在这个库中所有可用的功能都带有一个 <strong>double</strong> 类型的参数，且都返回 <strong>double</strong> 类型的结果</li>
<li><code>&lt;setjmp.h&gt;</code>：<strong>setjmp.h</strong> 头文件定义了宏 <strong>setjmp()</strong>、函数 <strong>longjmp()</strong> 和变量类型 <strong>jmp_buf</strong>，该变量类型会绕过正常的函数调用和返回规则</li>
<li><code>&lt;signal.h&gt;</code>：<strong>signal.h</strong> 头文件定义了一个变量类型 <strong>sig_atomic_t</strong>、两个函数调用和一些宏来处理程序执行期间报告的不同信号</li>
<li><code>&lt;stdarg.h&gt;</code>：<strong>stdarg.h</strong> 头文件定义了一个变量类型 <strong>va_list</strong> 和三个宏，这三个宏可用于在参数个数未知（即参数个数可变）时获取函数中的参数</li>
<li><code>&lt;stddef.h&gt;</code>：<strong>stddef .h</strong> 头文件定义了各种变量类型和宏。这些定义中的大部分也出现在其它头文件中</li>
<li><code>&lt;stdio.h&gt;</code>：<strong>stdio .h</strong> 头文件定义了三个变量类型、一些宏和各种函数来执行输入和输出</li>
<li><code>&lt;stdlib.h&gt;</code>：<strong>stdlib .h</strong> 头文件定义了四个变量类型、一些宏和各种通用工具函数</li>
<li><code>&lt;string.h&gt;</code>：<strong>string .h</strong> 头文件定义了一个变量类型、一个宏和各种操作字符数组的函数</li>
<li><code>&lt;time.h&gt;</code>：<strong>time.h</strong> 头文件定义了四个变量类型、两个宏和各种操作日期和时间的函数</li>
</ol>
]]></content>
    <published>2023-07-11T11:38:36.000Z</published>
  </entry>
  <entry>
    <title type="text">Kafaka</title>
    <id>https://gzwrrr.github.io/article/kafaka/</id>
    <link href="https://gzwrrr.github.io/article/kafaka/"/>
    <updated>2023-10-12T06:47:33.000Z</updated>
    <summary type="html"><![CDATA[<h1> Kafaka</h1>
<blockquote>
<p>使用 Scala 编写</p>
</blockquote>
<div class="hint-container info">
<p class="hint-container-title">相关资源</p>
<p><a href="https://kafka.apache.org/documentation/" target="_blank" rel="noopener noreferrer">Kafaka 官网</a></p>
<p><a href="https://www.bilibili.com/video/BV1h94y1Q7Xg?p=7&amp;spm_id_from=pageDriver&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">kafka一小时入门精讲课程（高清重制无废话版）</a></p>
<p><a href="https://www.bilibili.com/video/BV1vr4y1677k?p=11&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Kafka3.x教程（从入门到调优，深入全面）</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> Kafaka</h1>
<blockquote>
<p>使用 Scala 编写</p>
</blockquote>
<div class="hint-container info">
<p class="hint-container-title">相关资源</p>
<p><a href="https://kafka.apache.org/documentation/" target="_blank" rel="noopener noreferrer">Kafaka 官网</a></p>
<p><a href="https://www.bilibili.com/video/BV1h94y1Q7Xg?p=7&amp;spm_id_from=pageDriver&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">kafka一小时入门精讲课程（高清重制无废话版）</a></p>
<p><a href="https://www.bilibili.com/video/BV1vr4y1677k?p=11&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Kafka3.x教程（从入门到调优，深入全面）</a></p>
</div>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//kafaka/20230731/kafaka架构.png" alt="image-20230731192719833" tabindex="0" loading="lazy"><figcaption>image-20230731192719833</figcaption></figure>
<p><strong>相关概念：</strong></p>
<ol>
<li>Producer：生产者即数据的发布者，该角色将消息发布到 Kafka 的 topic 中。broker 接收到生产者发送的消息后，broker将该消息追加到当前用于追加数据的 segment 文件中。生产者发送的消息，存储到一个 partition 中，生产者也可以指定数据存储的 partition</li>
<li>Consumer：消费者可以从broker中读取数据，消费者可以消费多个topic中的数据</li>
<li>Topic：在Kafka中，使用一个类别属性来划分数据的所属类，划分数据的这个类称为 topic。如果把 Kafka 看做为一个数据库，topic可以理解为数据库中的一张表，topic 的名字即为表名</li>
<li>Partition：topic 中的数据分割为一个或多个 partition。每个 topic 至少有一个 partition。每个 partition 中的数据使用多个 segment 文件存储。partition中的数据是有序的，partition 间的数据丢失了数据的顺序。如果 topic 有多个 partition，消费数据时就不能保证数据的顺序。在需要严格保证消息的消费顺序的场景下，需要将 partition 数目设为 1</li>
<li>Partition offset：每条消息都有一个当前 Partition 下唯一的 64 字节的 offset，它指明了这条消息的起始位置</li>
<li>Replicas of partition：副本是一个分区的备份。副本不会被消费者消费，副本只用于防止数据丢失，即消费者不从为 follower 的 partition 中消费数据，而是从为 leader 的 partition 中读取数据。副本之间是一主多从的关系</li>
<li>Leader：每个 partition 有多个副本，其中有且仅有一个作为 Leader，Leader 是当前负责数据的读写的 partition</li>
<li>Follower：Follower 跟随 Leader，所有写请求都通过 Leader 路由，数据变更会广播给所有 Follower，Follower 与 Leader 保持数据同步。如果Leader失效，则从 Follower 中选举出一个新的 Leader，当 Follower 与 Leader 挂掉、卡住或者同步太慢，leader 会把这个 follower，从 "in sync replicas" （ISR）列表中则除，重新创建一个Follower</li>
<li>Zookeeper：Zookeeper 负责维护和协调 broker。当 Kafka 系统中新增了 broker 或者某个 broker 发生故障失效时，由 ZooKeeper 通知生产者和消费者。生产者和消费者依据 Zookeeper 的 broker 状态信息与 broker 协调数据的发布和订阅任务。</li>
<li>AR（Assigned Replicas）：分区中的所有的副本</li>
<li>ISR（In-Sync Replicas）：所有与 Leader 部分保持一定程度的副本组成 ISR（包括 Leader 副本在内）</li>
<li>OSR（Out-of-Sync-Replicas）：与 Leader 副本同步滞后过多的副本</li>
<li>HW（High Watermark）：高水位，标识了一个特定的 offset，消费者只能拉取到这个 offset 之前的消息</li>
<li>LEO（Log End Offset）：即日志未端位移（log end offset），记录了该副本底层日志中下一条消息的位移值，注意是下一条消息！也就是
说，如果 LEO = 10，那么表示该副本保存了 10 条消息，位移值范围是 [0,9]</li>
</ol>
<p><strong>Kafaka 特点：</strong></p>
<ol>
<li>多副本提交日志</li>
<li>分布式</li>
<li>分区</li>
<li>流式处理平台</li>
<li>发布订阅</li>
</ol>
<p><strong>优势：</strong></p>
<ol>
<li>吞吐量高</li>
<li>伸缩性好</li>
<li>容错性和可靠性高</li>
<li>与大数据生态紧密结合，可以无缝对接 hadoop、strom、spark 等</li>
</ol>
<p><strong>发行版本：</strong></p>
<ol>
<li>Confluent Platform</li>
<li>Cloudera Kafaka</li>
<li>Hortonworks Kafaka</li>
</ol>
<p><strong>相关的消息模型/协议：</strong></p>
<ol>
<li>JMS 规范（限于 Java）</li>
<li>AMQP 协议（例如 RabbitMQ）</li>
<li>MQTT</li>
</ol>
<h2> 主题</h2>
<p><strong>主题 Topic：</strong></p>
<p>数据存储在 Topic 中，Topic 类似数据库中的表</p>
<p>通常将同一类型的数据存储到同一个 Topic 中</p>
<p>Topic 半结构化</p>
<h2> 分区</h2>
<p>Topic 中可以包含多个分区 Partition</p>
<p>不同的分区在不同的服务器上</p>
<p>分区是一个线性增长的不可变的提交日志，数据存储到分区后就不可变更</p>
<p>分区中每一条数据都有一个对应的 offset，kafaka 可以通过 offet 提取出数据，但是无法对消息的内容进行检索或者查询</p>
<p>同一分区中偏移量不可重复且是递增的，不同分区之间偏移量可以重复</p>
<p>可以通过 <code>replication-factor</code> 来设置分区副本的数量</p>
<p>分区集群有一个 leader 和若干个 follower</p>
<p>所有数据的读写都是由 leader 进行，follower 只负责复制，保证数据的一致性</p>
<p><code>ISR</code> 列表中保存同步的节点，当节点数据落后到一定程度就会从该队列中剔除，直到该节点追赶上其他节点，此时再重新加入</p>
<h2> 记录</h2>
<p>消息记录 Record 以键值对形式存储，不指定 key 时为空</p>
<p>当 key 为空时发送消息，kafaka 会以轮询的方式将消息发送到不同的分区中</p>
<p>如果 key 存在，那么相同 key 的消息会被写到同一个分区中</p>
<h2> 消息代理</h2>
<p>Kafaka 集群由多个消息代理 Broker 组成</p>
<p>Broker 负责消息的读写请求，并将数据写入到磁盘中</p>
<h2> 集群搭建</h2>
<p>Kafaka 目录包括：bin  config  libs  LICENSE  licenses  NOTICE  site-docs</p>
<p>Kafaka 依赖 Zookeeper，执行下面的命令进行配置：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Zookeeper 配置如下：</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面搭建三个节点的伪分布式集群：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 监听器</h2>
<p>listeners：指定 broker 启动时本机的监听名称和端口，给服务端使用</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>advertised.listeners 对外发布的访问 IP 和端口，注册到 Zookeeper 中，给客户端使用s</p>
<h2> 消息模型</h2>
<ol>
<li>点对点</li>
<li>发布订阅</li>
<li>分区与消息顺序</li>
<li>消息传递语义（需要生产者和消费者共同保证）：
<ol>
<li>至少一次：消息可能会丢失，永远不会重复发送</li>
<li>最多一次：消息不会丢失，但是可能会重复</li>
<li>精确一次：保证消息被传递到的服务端且服务端不重复</li>
</ol>
</li>
</ol>
<p>分区是最小的并行单位</p>
<p>一个消费者可以消费多个分区</p>
<p>一个分区可以被多个消费者组中的消费者消费，但是不能同时被同一个消费者组中的多个消费者消费</p>
<p>发布订阅模式中</p>
<p>每个消费者都属于同一个消费者组中</p>
<p>点对点模式中</p>
<p>全部消费者放在同一个组中</p>
<p>分区与消息顺序</p>
<ol>
<li>同一个生产者发送到同一个分区的消息，先发送的 offet 比后发送的 offset 小</li>
<li>同一个生产者发送到不同分区的消息，消息顺序是无法保证的</li>
</ol>
<p>分区与消费顺序</p>
<ol>
<li>消费者按照消息在分区中存放的顺序进行消费</li>
<li>Kafaka 只保证分区内的消息顺序，不能保证分区间的消息顺序</li>
</ol>
<p>如果想要保证所有消息都有顺序，那么可以设置一个分区，但是这样就失去了扩展性和性能</p>
<p>通过设置消息的 key，相同的 key 的消息会发送到同一个分区，这样也可以保证同一个类型的消息的顺序</p>
<h2> 序列化</h2>
<p>序列化可以使用：</p>
<ol>
<li>Avro：Hadoop、Hive 支持好，一般自定义序列化也使用 Avro</li>
<li>Protobuf</li>
</ol>
]]></content>
    <published>2023-07-11T11:38:36.000Z</published>
  </entry>
  <entry>
    <title type="text">一致性算法</title>
    <id>https://gzwrrr.github.io/article/framework/%E5%88%86%E5%B8%83%E5%BC%8F/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95.html</id>
    <link href="https://gzwrrr.github.io/article/framework/%E5%88%86%E5%B8%83%E5%BC%8F/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95.html"/>
    <updated>2023-10-12T06:47:33.000Z</updated>
    <summary type="html"><![CDATA[<h1> 一致性算法</h1>

<p>一致性算法是分布式系统中用于确保不同节点之间的数据一致性的算法。这些算法的目标是在面对节点故障、网络延迟等情况下，仍然能够保持数据的一致性。以下是一些常见的一致性算法：</p>
<ol>
<li><strong>Paxos：</strong> Paxos是一种经典的一致性算法，用于解决分布式系统中的一致性问题。它通过选举和提案的方式来达成共识，确保不同节点间的数据一致性。Paxos算法虽然有效，但由于其复杂性，实际应用中使用较少。</li>
<li><strong>Raft：</strong> Raft是一种相对于Paxos更易理解和实现的一致性算法。它也通过选举和领导者（Leader）的概念来确保数据一致性。Raft算法的设计更注重可读性，适用于更广泛的分布式系统。</li>
<li><strong>ZooKeeper Atomic Broadcast (ZAB)：</strong> ZooKeeper是一个分布式协调服务，其内部使用ZAB协议来维护数据一致性。ZAB基于Paxos算法，并对其进行了优化，使其更适用于ZooKeeper的需求。</li>
<li><strong>Google Spanner：</strong> Google Spanner是一个全球分布式数据库系统，它使用TrueTime来确保跨区域数据一致性。Spanner结合了分布式事务和外部时间源，从而实现强一致性。</li>
<li><strong>Amazon DynamoDB：</strong> Amazon DynamoDB是一个高可用的分布式数据库服务，它使用了一种基于版本的一致性模型。它提供了多个配置选项，使用户可以根据应用需求来调整一致性级别。</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> 一致性算法</h1>

<p>一致性算法是分布式系统中用于确保不同节点之间的数据一致性的算法。这些算法的目标是在面对节点故障、网络延迟等情况下，仍然能够保持数据的一致性。以下是一些常见的一致性算法：</p>
<ol>
<li><strong>Paxos：</strong> Paxos是一种经典的一致性算法，用于解决分布式系统中的一致性问题。它通过选举和提案的方式来达成共识，确保不同节点间的数据一致性。Paxos算法虽然有效，但由于其复杂性，实际应用中使用较少。</li>
<li><strong>Raft：</strong> Raft是一种相对于Paxos更易理解和实现的一致性算法。它也通过选举和领导者（Leader）的概念来确保数据一致性。Raft算法的设计更注重可读性，适用于更广泛的分布式系统。</li>
<li><strong>ZooKeeper Atomic Broadcast (ZAB)：</strong> ZooKeeper是一个分布式协调服务，其内部使用ZAB协议来维护数据一致性。ZAB基于Paxos算法，并对其进行了优化，使其更适用于ZooKeeper的需求。</li>
<li><strong>Google Spanner：</strong> Google Spanner是一个全球分布式数据库系统，它使用TrueTime来确保跨区域数据一致性。Spanner结合了分布式事务和外部时间源，从而实现强一致性。</li>
<li><strong>Amazon DynamoDB：</strong> Amazon DynamoDB是一个高可用的分布式数据库服务，它使用了一种基于版本的一致性模型。它提供了多个配置选项，使用户可以根据应用需求来调整一致性级别。</li>
</ol>
<h2> Paxos</h2>
<p>将所有节点分为三类：</p>
<ol>
<li>Proposer 提议者</li>
<li>Acceptor 接受者</li>
<li>Learner 学习者</li>
</ol>
<p>注意：每个节点是可以身兼数职的</p>
<p>完整的 Paxos 算法流程分为三个阶段：</p>
<ol>
<li>Prepare 准备阶段：Proposer 向多个 Acceptor 发出 Propose 请求，Acceptor 接收到请求后做出 Promise 承诺</li>
<li>Accept 接受阶段：Proposer 接收到多数 Acceptor 承诺的 Promise 后，向 Acceptor 发出 Propose 请求，Acceptor 接收到请求后进行 Accept 处理</li>
<li>Learn 学习阶段：Proposer 将形成的决议发送给所有 Learners</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="分布式"/>
    <category term="小知识点"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-12-12T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Java 代码规范</title>
    <id>https://gzwrrr.github.io/article/java/Z-%E5%85%B6%E4%BB%96/Java%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83.html</id>
    <link href="https://gzwrrr.github.io/article/java/Z-%E5%85%B6%E4%BB%96/Java%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Java 代码规范</h1>
<p>详情参考 GitHub 原地址：<a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener noreferrer">阿里巴巴 Java 开发手册</a></p>
<h2> 1.1 命名风格</h2>
<ol>
<li>代码中的命名均不能以下划线或美元符号开始或结束；</li>
<li>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式；</li>
<li>类名使用 UpperCamelCase 风格；</li>
<li>方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式；</li>
<li>常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长；</li>
<li>抽象类命名使用 Abstract 或 Base 开头、异常类命名使用 Exception 结尾、测试类命名以它要测试的类的名称开始，以 Test 结尾；</li>
<li>类型与中括号紧挨相连来表示数组；</li>
<li>Entity 类中布尔类型变量都不要加 is 前缀</li>
<li>包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式；</li>
<li>避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名，使可读性降低。</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> Java 代码规范</h1>
<p>详情参考 GitHub 原地址：<a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener noreferrer">阿里巴巴 Java 开发手册</a></p>
<h2> 1.1 命名风格</h2>
<ol>
<li>代码中的命名均不能以下划线或美元符号开始或结束；</li>
<li>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式；</li>
<li>类名使用 UpperCamelCase 风格；</li>
<li>方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式；</li>
<li>常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长；</li>
<li>抽象类命名使用 Abstract 或 Base 开头、异常类命名使用 Exception 结尾、测试类命名以它要测试的类的名称开始，以 Test 结尾；</li>
<li>类型与中括号紧挨相连来表示数组；</li>
<li>Entity 类中布尔类型变量都不要加 is 前缀</li>
<li>包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式；</li>
<li>避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名，使可读性降低。</li>
</ol>
<h2> 1.2 代码格式</h2>
<ol>
<li>如果大括号内为空，则简洁地写成 {} 即可，大括号中间无需换行和空格；</li>
<li>左右小括号和字符之间不能出现空格，而左大括号前必须出现空格；</li>
<li>If、for、while、switch、do 等保留字与括号之间都必须加空格；</li>
<li>注释的双斜线与注释内容之间有且仅有一个空格；</li>
<li>在进行类型强制转换时，右括号与强制转换值之间不需要任何空格隔开；</li>
<li>单行字符数限制不超过 120 个，超出需要换行。</li>
</ol>
<h2> 1.3 常量定义</h2>
<ol>
<li>不允许任何魔法值（即未经预先定义的常量）直接出现在代码中；</li>
<li>在 long 或者 Long 赋值时，数值后只能使用大写的 L，小写容易跟数字 1 混淆，造成误解。</li>
</ol>
<h2> 1.4 OOP（面向对象）</h2>
<ol>
<li>直接用类名来访问即可，避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓的增加编译器解析成本；</li>
<li>相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object；</li>
<li>外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么；</li>
<li>不能使用过时的类或方法（除非没有替代的依赖）；</li>
<li>Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用；</li>
<li>所有整型包装类对象之间值的比较，全部使用 equals 方法比较；</li>
<li>浮点数之间的等值判断，基本数据类型不能用 == 来比较，包装数据类型不能用 equals 来判断；</li>
<li>为了防止精度损失，禁止使用构造方法 BigDecimal(double)；</li>
<li>关于基本数据类型与包装数据类型的使用标准如下：
<ul>
<li>所有的 Entity 类属性必须使用包装数据类型；</li>
<li>RPC 方法的返回值和参数必须使用包装数据类；</li>
<li>所有的局部变量使用基本数据类型。</li>
</ul>
</li>
<li>定义 DO/DTO/VO 等 Entity 类时，不要设定任何属性默认值；</li>
<li>序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值；</li>
<li>构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中；</li>
<li>Entity 类必须写 toString 方法。</li>
</ol>
<h2> 1.5 控制语句</h2>
<ol>
<li>
<p>在一个 switch 块内，每个 case 要么通过 continue/break/return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使它什么代码也没有；</p>
</li>
<li>
<p>当 switch 括号内的变量类型为 String 并且此变量为外部参数时，必须先进行 null 判断；</p>
</li>
<li>
<p>在 if/else/for/while/do 语句中必须使用大括号；</p>
</li>
<li>
<p>在高并发场景中，避免使用「等于」判断作为中断或退出的条件；</p>
</li>
</ol>
<h2> 1.6 集合</h2>
<ol>
<li>关于 hashCode 和 equals 的处理，遵循如下规则：
<ul>
<li>只要覆写 equals，就必须覆写 hashCode；</li>
<li>因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以Set 存储的对象必须覆写这两个方法；</li>
<li>如果自定义对象作为 Map 的键，那么必须覆写 hashCode  和 equals。</li>
</ul>
</li>
<li>ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛ClassCastException 异常，即 java.util.RandomAccessSubList cannot be cast to java.util.ArrayList；</li>
<li>使用 Map 的方法 keySet()/values()/entrySet() 返回集合对象时，不可以对其进行添加元素操作，否则会抛出 UnsupportedOperationException 异常；</li>
<li>Collections 类返回的对象，如：emptyList()/singletonList() 等都是 immutable list，不可对其进行添加「或者」；</li>
<li>在 subList 场景中，高度注意对原集合元素的增加或删除，均会导致子列表的遍历、增加、删除产 ConcurrentModificationException 异常；</li>
<li>使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一致、长度为 0 的空数组；</li>
<li>在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行NPE 判断；</li>
<li>使用工具类 Arrays.asList() 把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常；</li>
<li>泛型通配符 &lt;? extends T&gt; 来接收返回的数据，此写法的泛型集合不能使用 add 方 法，而 &lt;? super T&gt; 不能使用 get 方法，作为接口调用赋值时易出错；</li>
<li>在无泛型限制定义的集合赋值给泛型限制的集合时，在使用集合元素时，需要进行 instanceof 判断，避免抛出 ClassCastException 异常；</li>
<li>不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator 方式，如果并发操作，需要对 Iterator 对象加锁；</li>
</ol>
<h2> 1.7 注释</h2>
<blockquote>
<p>注：IDEA 可以下载插件检查。建议包括：Alibaba Java Coding Guidelines、SonarLint、GokYapiUpload、Free Mybatis plugin</p>
</blockquote>
<p>1、类、类属性、类方法的注释必须使用 Javadoc 规范，使用 /** 内容 */ 格式，不得使用 // xxx 方式；</p>
<p>2、所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释、除了返回值、参数、 异常说明外，还必须指出该方法做什么事情，实现什么功能；</p>
<p>3、所有的类都必须添加创建者和创建日期；</p>
<p>4、方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用 /* */ 注释，注意与代码对齐；</p>
<p>5、所有的枚举类型字段必须要有注释，说明每个数据项的用途；</p>
<p>6、所有框架生成之外的代码必须加上 begin-end 注释并注明作者和日期；</p>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="java"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-01-08T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Maven</title>
    <id>https://gzwrrr.github.io/article/other/F-%E5%90%8E%E7%AB%AF/Maven.html</id>
    <link href="https://gzwrrr.github.io/article/other/F-%E5%90%8E%E7%AB%AF/Maven.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Maven</h1>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://mp.weixin.qq.com/mp/homepage?__biz=MzA5MTkxMDQ4MQ==&amp;hid=3&amp;sn=eebd634372eda11880ba859ee011942d&amp;scene=1&amp;devicetype=Windows+7+x64&amp;version=63020184&amp;lang=zh_CN&amp;nettype=WIFI&amp;ascene=1&amp;session_us=gh_6a32bacc9543&amp;uin=&amp;key=&amp;fontgear=2" target="_blank" rel="noopener noreferrer">Maven 高手系列</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> Maven</h1>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://mp.weixin.qq.com/mp/homepage?__biz=MzA5MTkxMDQ4MQ==&amp;hid=3&amp;sn=eebd634372eda11880ba859ee011942d&amp;scene=1&amp;devicetype=Windows+7+x64&amp;version=63020184&amp;lang=zh_CN&amp;nettype=WIFI&amp;ascene=1&amp;session_us=gh_6a32bacc9543&amp;uin=&amp;key=&amp;fontgear=2" target="_blank" rel="noopener noreferrer">Maven 高手系列</a></p>
</div>
<h2> 聚合与继承</h2>
<p>对于聚合来说，聚合模块是知道被聚合模块的存在的，而被聚合模块是感知不到聚合模块的存在。</p>
<p>对于继承来说，父构件是感知不到子构件的存在，而子构件需要使用<code>parent</code>来引用父构件。</p>
<p><strong>聚合：</strong></p>
<p>父 Pom 文件</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可以被子 pom 集成的属性：</strong>
groupId：项目组ID，项目坐标的核心元素
version：项目版本，项目坐标的核心元素
description：项目的描述信息
organization：项目的组织信息
inceptionYear：项目的创始年份
url：项目的url地址
developers：项目的开发者信息
contributors：项目的贡献者信息
distributionManagement：项目的部署配置信息
issueManagement：项目的缺陷跟踪系统信息
ciManagement：项目的持续集成系统信息
scm：项目的版本控制系统信息
mailingLists：项目的邮件列表信息
properties：自定义的maven属性配置信息
dependencyManagement：项目的依赖管理配置
repositories：项目的仓库配置
build：包括项目的源码目录配置、输出目录配置、插件管理配置等信息
reporting：包括项目的报告输出目录配置、报告插件配置等信息</p>
<p><strong>dependencies 与 dependencyManagement：</strong></p>
<p>父 pom 中的 dependencies 会直接被子 pom 继承，如果不需要全部继承可以使用 dependencyManagement</p>
<p>maven提供的dependencyManagement元素既能让子模块继承到父模块的依赖配置，又能保证子模块依赖使用的灵活性，<strong>在dependencyManagement元素下声明的依赖不会引入实际的依赖，他只是声明了这些依赖，不过它可以对<code>dependencies</code>中使用的依赖起到一些约束作用。</strong></p>
<p><strong>maven 是单继承的，如果需要引入其他依赖但是又不能继续继承，那么就需要换一种方法：</strong></p>
<p>当我们想在项目中使用另外一个构件中dependencyManagement声明的依赖，而又不想继承这个项目的时候，可以在我们的项目中使用加入下面配置：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>pluginManagement 插件继承：</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 反应堆（reactor）</h2>
<p><code>mvn</code>命令对多模块构件时，会根据模块的依赖关系而得到模块的构建顺序，这个功能就是maven的反应堆（reactor）做的事情，反应堆会根据模块之间的依赖关系、聚合关系、继承关系等等，从而计算得出一个合理的模块构建顺序，所以反应堆的功能是相当强大的。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 属性</h2>
<p><strong>内置属性：</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 多套环境构建</h2>
<p>设置文件复制过程的编码：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>资源文件中可以通过<code>${maven属性}</code>来引用maven属性中的值，打包的过程中这些会被替换掉，替换的过程默认是不开启的，需要手动开启配置：</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启动态配置替换：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义分隔符：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包含和排除指定的配置文件：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>maven支持让我们配置多套环境，每套环境中可以指定自己的maven属性，mvn命令对模块进行构建的时候可以通过<code>-P</code>参数来指定具体使用哪个环境的配置</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>id：表示这套环境的标识信息，properties可以定义环境中使用到的属性列表。</p>
<p>执行mvn命令编译的时候可以带上一个<code>-P profileid</code>来使用指定的环境进行构建。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在<code>-P</code>参数后跟多个环境的id，多个之间用逗号隔开，当使用多套环境的时候，多套环境中的maven属性会进行合并，如果多套环境中属性有一样的，后面的会覆盖前面的</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看有那些环境</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 环境配置聚合</h3>
<p>可以在profile中指定一个外部属性文件<code>xx.properties</code>，文件内容是这种格式的：</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Java"/>
    <category term="通用"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-05-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">时间处理</title>
    <id>https://gzwrrr.github.io/article/other/F-%E5%90%8E%E7%AB%AF/%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86.html</id>
    <link href="https://gzwrrr.github.io/article/other/F-%E5%90%8E%E7%AB%AF/%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 时间处理</h1>
<h2> 时区</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://zhuanlan.zhihu.com/p/135951778" target="_blank" rel="noopener noreferrer">彻底弄懂GMT、UTC、时区和夏令时</a></p>
<p><a href="https://blog.csdn.net/lilongsy/article/details/130130776" target="_blank" rel="noopener noreferrer">日期时间表示格式大全： ISO 8601、RFC、时间戳、Excel...</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 时间处理</h1>
<h2> 时区</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://zhuanlan.zhihu.com/p/135951778" target="_blank" rel="noopener noreferrer">彻底弄懂GMT、UTC、时区和夏令时</a></p>
<p><a href="https://blog.csdn.net/lilongsy/article/details/130130776" target="_blank" rel="noopener noreferrer">日期时间表示格式大全： ISO 8601、RFC、时间戳、Excel...</a></p>
</div>
<p>相关问题：</p>
<ol>
<li>
<p>时区</p>
</li>
<li>
<p>标准时间</p>
</li>
<li>
<p>时间戳及其格式</p>
</li>
<li>
<p>24小时制：以0到23之间的数字表示小时，例如13:45表示下午1点45分。</p>
</li>
<li>
<p>12小时制：以1到12之间的数字表示小时，结合上午（AM）和下午（PM）来区分上午和下午，例如1:45 PM表示下午1点45分。</p>
</li>
<li>
<p>小数形式：使用小数表示时间的一部分，例如3.5表示3小时30分钟。</p>
</li>
<li>
<p>UTC时间：以协调世界时（UTC）为基准，使用一个24小时制的数字表示时间，例如14:30表示协调世界时下午2点30分。</p>
</li>
<li>
<p>ISO 8601格式：这是一种国际标准化的日期和时间表示格式，例如"2023-06-12T09:30:00+00:00"表示2023年6月12日上午9点30分（协调世界时）。</p>
</li>
<li>
<p>AM/PM形式：使用上午（AM）和下午（PM）来表示时间，例如9:30 AM表示上午9点30分。</p>
</li>
<li>
<p>时间戳（Timestamp）：表示从某个固定的时间点（通常是协调世界时的1970年1月1日午夜）开始经过的毫秒数或秒数。时间戳是一种与时区无关的时间表示形式。</p>
</li>
</ol>
<p>Java中用于处理时区和时间的类有以下几个：</p>
<ol>
<li><code>java.util.TimeZone</code>：这个类提供了对时区的支持，可以获取和设置时区信息。</li>
<li><code>java.time.ZoneId</code>：这个类表示一个特定的时区，它可以用来创建<code>java.time.ZonedDateTime</code>对象，或者用于其他需要时区信息的操作。</li>
<li><code>java.time.ZonedDateTime</code>：这个类表示带时区的日期和时间，可以进行各种日期和时间操作，并且考虑了时区的影响。</li>
<li><code>java.time.OffsetDateTime</code>：这个类表示带偏移量的日期和时间，偏移量是相对于UTC（协调世界时）的时间差。</li>
<li><code>java.time.LocalDateTime</code>：这个类表示不带时区信息的日期和时间，它不考虑时区的影响。</li>
<li><code>java.time.Instant</code>：这个类表示一个瞬时点的时间，通常与UTC一起使用。</li>
</ol>
<p>除了这些类之外，还有一些与时区和时间相关的概念：</p>
<ol>
<li>UTC（协调世界时）：它是世界上使用最广泛的时间标准，它不考虑夏令时和时区的影响，被认为是一个参考时间。</li>
<li>夏令时（Daylight Saving Time，DST）：在一些地区，为了充分利用夏季长时间的日照，将时间提前一个小时，以增加日光活动时间。</li>
<li>偏移量（Offset）：偏移量表示相对于UTC的时间差，可以是正数或负数。例如，+02:00表示比UTC快两个小时，-05:00表示比UTC慢五个小时。</li>
</ol>
<p>在数据库中，常见的时间表示形式包括以下几种：</p>
<ol>
<li>DATE：这是表示日期的数据类型，通常以年-月-日的形式存储，例如"2023-06-12"。它只包含日期部分，没有时间信息。</li>
<li>TIME：这是表示时间的数据类型，通常以小时:分钟:秒的形式存储，例如"09:30:00"。它只包含时间部分，没有日期信息。</li>
<li>DATETIME/TIMESTAMP：这是同时表示日期和时间的数据类型。DATETIME以年-月-日 小时:分钟:秒的形式存储，例如"2023-06-12 09:30:00"。TIMESTAMP也表示日期和时间，但它通常以特定的格式存储，如UTC时间戳或特定时区的时间戳。</li>
<li>YEAR：这是表示年份的数据类型，通常存储为四位数的年份，例如"2023"。它只包含年份部分，没有具体的月份或日期信息。</li>
<li>INTERVAL：这是一种用于表示时间间隔的数据类型。它可以表示一段时间，如几天、几小时、几分钟等，以方便进行日期和时间的计算。</li>
</ol>
<p>这些时间表示形式在不同的数据库管理系统中可能会有些差异，具体使用哪种形式取决于数据库的选择、应用需求和数据模型设计。需要根据具体情况选择合适的数据类型来存储和处理时间信息。</p>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="Java"/>
    <category term="通用"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-05-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">IOC 源码</title>
    <id>https://gzwrrr.github.io/article/springs/D-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/IOC%E6%BA%90%E7%A0%81.html</id>
    <link href="https://gzwrrr.github.io/article/springs/D-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/IOC%E6%BA%90%E7%A0%81.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> IOC 源码</h1>
<blockquote>
<p>IoC 主要有两个模块实现：spring-beans 和 spring-context</p>
</blockquote>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>序号</th>
<th>体系</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Resource 体系</td>
<td>资源的抽象，每一个实现类都代表一种资源</td>
</tr>
<tr>
<td>2</td>
<td>ResourceLoader 体系</td>
<td>资源加载</td>
</tr>
<tr>
<td>3</td>
<td>BeanDefinition 体系</td>
<td>描述 Bean 对象</td>
</tr>
<tr>
<td>4</td>
<td>BeanDefinitionReader 体系</td>
<td>读取 Spring 的配置文件，将其转换成 BeanDefinition</td>
</tr>
<tr>
<td>5</td>
<td>BeanFactory 体系</td>
<td>Bean 容器，其中 BeanDefinition 是基本结构，BeanFactory 根据 BeanDefinition Map 进行 Bean 的创建和管理</td>
</tr>
<tr>
<td>6</td>
<td>ApplicationContext 体系</td>
<td>BeanFactory 的增强，提供国际化标准访问策略、强大的事件机制、多种资源加载器、Web 应用的支持</td>
</tr>
</tbody>
</table>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> IOC 源码</h1>
<blockquote>
<p>IoC 主要有两个模块实现：spring-beans 和 spring-context</p>
</blockquote>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>序号</th>
<th>体系</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Resource 体系</td>
<td>资源的抽象，每一个实现类都代表一种资源</td>
</tr>
<tr>
<td>2</td>
<td>ResourceLoader 体系</td>
<td>资源加载</td>
</tr>
<tr>
<td>3</td>
<td>BeanDefinition 体系</td>
<td>描述 Bean 对象</td>
</tr>
<tr>
<td>4</td>
<td>BeanDefinitionReader 体系</td>
<td>读取 Spring 的配置文件，将其转换成 BeanDefinition</td>
</tr>
<tr>
<td>5</td>
<td>BeanFactory 体系</td>
<td>Bean 容器，其中 BeanDefinition 是基本结构，BeanFactory 根据 BeanDefinition Map 进行 Bean 的创建和管理</td>
</tr>
<tr>
<td>6</td>
<td>ApplicationContext 体系</td>
<td>BeanFactory 的增强，提供国际化标准访问策略、强大的事件机制、多种资源加载器、Web 应用的支持</td>
</tr>
</tbody>
</table>
</div><h2> Resource 体系</h2>
<blockquote>
<p>Resource 位于 spring-core 模块中</p>
<p>Resource 体系的职责只有「如何定义资源」，而不涉及「如何加载资源」</p>
<p>资源由 ResourceLoader 体系加载后给客户端返回统一的抽象</p>
</blockquote>
<div class="hint-container info">
<p class="hint-container-title">继承关系</p>
<p>Resource 继承 InputStreamSource，其默认实现类为 AbstractResource</p>
<p>AbstractResource 很重要，如果要自定义 Resource 需要继承 AbstractResource（实现比较简单，主要交给子类实现具体功能）</p>
</div>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//ioc源码/20230514/Resource继承关系.png" alt="image-20230514192423469" tabindex="0" loading="lazy"><figcaption>image-20230514192423469</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Resource 的实现类：</p>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>序号</th>
<th>实现类</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>FileSystemResource</td>
<td>对 <code>java.io.File</code> 类型资源的封装，只要是跟 File 打交道的，基本上与 FileSystemResource 也可以打交道。支持文件和 URL 的形式，实现 WritableResource 接口，且从 Spring Framework 5.0 开始，FileSystemResource 使用 NIO2 API进行读/写交互</td>
</tr>
<tr>
<td>2</td>
<td>ByteArrayResource</td>
<td>对字节数组提供的数据的封装。如果通过 InputStream 形式访问该类型的资源，该实现会根据字节数组的数据构造一个相应的 ByteArrayInputStream</td>
</tr>
<tr>
<td>3</td>
<td>UrlResource</td>
<td>对 <code>java.net.URL</code>类型资源的封装。内部委派 URL 进行具体的资源操作</td>
</tr>
<tr>
<td>4</td>
<td>ClassPathResource</td>
<td>class path 类型资源的实现。使用给定的 ClassLoader 或者给定的 Class 来加载资源</td>
</tr>
<tr>
<td>5</td>
<td>InputStreamResource</td>
<td>将给定的 InputStream 作为一种资源的 Resource 的实现类</td>
</tr>
</tbody>
</table>
</div><h2> ResourceLoader 体系</h2>
<blockquote>
<p>ResourceLoader 位于 spring-core 模块中</p>
<p>ResourceLoader 体系的指责只有加载资源，具体是根据给定的资源地址返回对应的 Resource</p>
<p>DefaultResourceLoader 是 ResourceLoader 的默认实现（实现较为简单，就是需要注意获取资源时有三种策略）</p>
</blockquote>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//ioc源码/20230514/ResourceLoader继承关系图.png" alt="image-20230514201438816" tabindex="0" loading="lazy"><figcaption>image-20230514201438816</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ProtocolResolver 函数式接口是 ResourceLoader 的 SPI，用于使用自定义的资源加载器返回对应资源</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 ProtocolResolver 是没有实现类的，需要用户自定义；DefaultResourceLoader 通过一个 Set 维护 Resolver 集合，然后在实际需要获取 Resource 的时候将自身设置为对应的资源加载器</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以通过 ResourcePatternResolver 返回指定匹配模式下的所有资源</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最常用的实现类为 PathMatchingResourcePatternResolver，支持 Ant 风格的路径匹配模式，其中最重要的就是获取多个资源的实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> BeanDefinition</h2>
<p>IoC 容器的使用过程大致为：</p>
<ol>
<li>获取资源</li>
<li>获取 BeanFactory</li>
<li>根据新建的 BeanFactory 创建一个 BeanDefinitionReader 对象，该 Reader 对象为资源的<strong>解析器</strong></li>
<li>装载资源</li>
</ol>
<p>所以大致过程就是：资源定位 -&gt; 装载（资源到 BeanDefinition）-&gt; 注册（通过 HashMap 来维护 BeanDefinition）</p>
<p>注意：每一个 Bean 都对应一个 BeanDefinition</p>
<p>注意：上述过程还没有完成依赖注入（即 Bean 是懒加载的），而是完成了注册</p>
<p><strong>加载的核心代码如下：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>doLoadBeanDefinitions 主要就是负责：</p>
<ol>
<li>验证资源（XML 的正确性，与 DTD 和 XSD 有关）</li>
<li>获取 XML 实例</li>
<li>注册 Bean 实例</li>
</ol>
<p>注册 Bean 核心代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="spring"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Spring Boot 源码</title>
    <id>https://gzwrrr.github.io/article/springs/D-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/SpringBoot%E6%BA%90%E7%A0%81.html</id>
    <link href="https://gzwrrr.github.io/article/springs/D-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/SpringBoot%E6%BA%90%E7%A0%81.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Spring Boot 源码</h1>
<p><strong>spring-boot-project 包含模块：</strong></p>
<ol>
<li>spring-boot（核心）：核心实现，大概 4 万行代码</li>
<li>spring-boot-autoconfigure（核心）：可以根据类路径内容自动配置大部分常用的程序，大概 4 万行代码</li>
<li>spring-boot-actuator：监控和管理生产环境的模块，暴露自身应用信息，大概 2 W 行代码</li>
<li>spring-boot-actuator-autoconfigure：spring-boot-actuator 的自动配置功能，可以不看</li>
<li>spring-boot-starters：启动模块，只包含 Pom.xml 文件，可以不看</li>
<li>spring-boot-cli：提供命令行功能，可以运行 Groovy 脚本，可以不看</li>
<li>spring-boot-dependencies：依赖管理，可以不看</li>
<li>spring-boot-devtools：热部署，可以不看</li>
<li>spring-boot-test：提供测试方面的支持，可以不看</li>
<li>spring-boot-test-autoconfigure：spring-boot-test 的自动配置功能，可以不看</li>
<li>spring-boot-parent：其他项目的 parent，该模块的父模块是 spring-boot-dependencies，可以不看</li>
<li>spring-boot-tools：略</li>
<li>spring-boot-docs：略</li>
<li>spring-boot-properties-migrator：略</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> Spring Boot 源码</h1>
<p><strong>spring-boot-project 包含模块：</strong></p>
<ol>
<li>spring-boot（核心）：核心实现，大概 4 万行代码</li>
<li>spring-boot-autoconfigure（核心）：可以根据类路径内容自动配置大部分常用的程序，大概 4 万行代码</li>
<li>spring-boot-actuator：监控和管理生产环境的模块，暴露自身应用信息，大概 2 W 行代码</li>
<li>spring-boot-actuator-autoconfigure：spring-boot-actuator 的自动配置功能，可以不看</li>
<li>spring-boot-starters：启动模块，只包含 Pom.xml 文件，可以不看</li>
<li>spring-boot-cli：提供命令行功能，可以运行 Groovy 脚本，可以不看</li>
<li>spring-boot-dependencies：依赖管理，可以不看</li>
<li>spring-boot-devtools：热部署，可以不看</li>
<li>spring-boot-test：提供测试方面的支持，可以不看</li>
<li>spring-boot-test-autoconfigure：spring-boot-test 的自动配置功能，可以不看</li>
<li>spring-boot-parent：其他项目的 parent，该模块的父模块是 spring-boot-dependencies，可以不看</li>
<li>spring-boot-tools：略</li>
<li>spring-boot-docs：略</li>
<li>spring-boot-properties-migrator：略</li>
</ol>
<h2> jar 启动原理</h2>
<p>jar 包中包含四大模块：</p>
<ol>
<li>META-INF：<code>MANIFEST.MF</code> 文件提供了 <code>jar</code> 包的元数据，其中声明了 jar 包的启动类</li>
<li>org：spring-boot-loader 模块，是 Spring Boot 启动的关键，解决了 jar 包嵌套的问题</li>
<li>BOOT-INF/lib：项目中引入的依赖</li>
<li>BOOT-INF/classes：项目源文件（.class 文件、配置文件）</li>
</ol>
<h3> MANIFEST.MF</h3>
<blockquote>
<p>下面是 Halo 项目的 jar 包中 MANIFEST.MF 的内容</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要实现如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p>
<ol>
<li>处理器：处理 jar: 协议的 URL 的资源读取，后续读取每个 Archive 里的内容</li>
<li>Archive：jar 包中的 class 和所有依赖中嵌套的 jar 都被转换为 Archive 对象</li>
<li>LaunchedURLClassLoader：加载所有类</li>
<li>launch：反射运行元数据中指定的启动类的 main 方法</li>
</ol>
<h2> 自动配置</h2>
<p>加上注解 <code>@EnableAutoConfiguration</code> 启动自动配置，注意，加上 <code>@SpringBootApplication</code> 就直接开启了自动配置</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AutoConfigurationImportSelector 类中的核心方法如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取到需要自动装配的类后就需要解析，核心类为 ConfigurationClassParser：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现 ConfigurationClassParser 依赖于 AutoConfigurationGroup 类，AutoConfigurationGroup 的核心方法如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p>
<ol>
<li>自动装配与两个注解高度相关：<code>@EnableAutoConfiguration </code> 和 <code>@Import(AutoConfigurationImportSelector.class)</code></li>
<li>实现类中与两个类高度相关： AutoConfigurationImportSelector 和 ConfigurationClassParser，前者用于过滤获取需要自动装配的类，后者用于解析</li>
<li>AutoConfigurationImportSelector 是一切的核心，其中的方法作用为：
<ol>
<li>getCandidateConfigurations 方法：获取候选配置类</li>
<li>getAutoConfigurationEntry 方法：过滤候选配置类</li>
<li>内部类 AutoConfigurationGroup#process 方法：设置内部类各个列表</li>
<li>内部类 AutoConfigurationGroup#selectImports 方法：获取最终需要自动配置的配置类</li>
</ol>
</li>
</ol>
<h2> Condition</h2>
<blockquote>
<p>Spring 和 Spring Boot 中都有注解 @Conditional 和 Condition 接口</p>
<p>Spring 中 Condition 的实现较少，Spring Boot 中增加了大量实现</p>
<p>Spring 中核心的是 ProfileContion，Spring Boot 中核心的是 SpringBootCondition 抽象类</p>
<p>Spring Boot 中实现按条件加载是通过各种 OnXXXCondition 实现类，然后为最终注解加上 @Conditional(OnXXXCondition.class) 实现按条件加载</p>
</blockquote>
<p>SpringBootCondition 的继承关系：</p>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//springboot源码/20230516/SpringBootCondition继承关系.png" alt="image-20230516161456196" tabindex="0" loading="lazy"><figcaption>image-20230516161456196</figcaption></figure>
<p>SpringBootCondition 的主要方法如下，关键要看其子类如何实现：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> OnPropertyCondition</h3>
<p>SpringBootCondition 的一个具体实现 OnPropertyCondition 如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> AutoConfigurationImportFilter</h3>
<p>还有一个非常关键的函数式接口：AutoConfigurationImportFilter，这是在自动配置是用于排除不用的配置类的</p>
<blockquote>
<p>其中包含的方法为：boolean[] match(String[] autoConfigurationClasses, AutoConfigurationMetadata autoConfigurationMetadata);</p>
<p>将传入的 <code>autoConfigurationClasses</code> 配置类根据 <code>autoConfigurationMetadata</code> 的元数据进行匹配，判断是否需要引入，然后返回 <code>boolean[]</code> 结果</p>
<p><code>boolean[]</code> 结果和 <code>autoConfigurationClasses</code> 配置类是一一对应的关系。假设 <code>autoConfigurationClasses[0]</code> 对应的 <code>boolean[0]</code> 为 <code>false</code> ，表示无需引入，反之则需要引入</p>
</blockquote>
<p>AutoConfigurationImportFilter 的实现类是 FilteringSpringBootCondition，是一个抽象类，继承了 SpringBootCondition，其子类有：</p>
<ol>
<li>OnClassCondition：在 @ConditionalOnClass、@ConditionalOnMissingClass 中使用</li>
<li>OnWebApplicationCondition：在 @ConditionalOnWebApplication 和 @ConditionalOnNotWebApplication 中使用</li>
<li>OnBeanCondition：在 @ConditionalOnBean、@ConditionalOnMissingBean、@ConditionalOnSingleCandidate 中使用</li>
</ol>
<p>FilteringSpringBootCondition 的核心实现如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自动配置类 AutoConfigurationImportSelector 中的过滤实现如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="spring"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">JVM 性能调优</title>
    <id>https://gzwrrr.github.io/article/java/D-Jvm/H-JVM%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.html</id>
    <link href="https://gzwrrr.github.io/article/java/D-Jvm/H-JVM%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> JVM 性能调优</h1>
<h2> 概述</h2>
<h3> 常见问题</h3>
<ol>
<li>生产环境出现 OOM 证明处理</li>
<li>生产环境给服务器分配多少内存合适</li>
<li>如何对垃圾回收器的性能进行调优</li>
<li>生产环境 CPU 负载飙高如何处理</li>
<li>生产环境应该给应用分配多少线程</li>
<li>不加日志时如何确定请求是否执行了某一行代码</li>
<li>不加日志时如何查看某个方法的入参和返回值</li>
</ol>
<h3> 为什么调优</h3>
<ol>
<li>防止或解决 OOM</li>
<li>减少 Full GC 频率</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> JVM 性能调优</h1>
<h2> 概述</h2>
<h3> 常见问题</h3>
<ol>
<li>生产环境出现 OOM 证明处理</li>
<li>生产环境给服务器分配多少内存合适</li>
<li>如何对垃圾回收器的性能进行调优</li>
<li>生产环境 CPU 负载飙高如何处理</li>
<li>生产环境应该给应用分配多少线程</li>
<li>不加日志时如何确定请求是否执行了某一行代码</li>
<li>不加日志时如何查看某个方法的入参和返回值</li>
</ol>
<h3> 为什么调优</h3>
<ol>
<li>防止或解决 OOM</li>
<li>减少 Full GC 频率</li>
</ol>
<h3> 监控的依据</h3>
<ol>
<li>运行日志</li>
<li>异常堆栈</li>
<li>GC 日志</li>
<li>线程快照</li>
<li>堆转储快照</li>
</ol>
<h3> 性能优化三部曲</h3>
<p><strong>性能监控（发现问题）：</strong></p>
<ol>
<li>GC 频繁</li>
<li>CPU 负载过高</li>
<li>OOM</li>
<li>内存泄露</li>
<li>死锁</li>
<li>程序响应时间过长</li>
</ol>
<p><strong>性能分析（排查问题）：</strong></p>
<ol>
<li>使用工具分析日志</li>
<li>灵活运用命令行工具，比如：jps、jstack、jmap、jinfo</li>
<li>dump 出堆文件，使用内存分析工具分析</li>
<li>使用 Arthas、jconsole、jVisualVM 等图形化工具来查看 JVM 状态</li>
</ol>
<p><strong>性能调优（解决问题）：</strong></p>
<ol>
<li>适当增加内存，根据业务选择垃圾回收器</li>
<li>优化代码，控制内存使用</li>
<li>横向扩展服务器资源，分散节点压力</li>
<li>合理设置线程池线程数量</li>
<li>使用中间件提高程序效率，比如：缓存、消息队列</li>
</ol>
<h3> 性能指标</h3>
<ol>
<li>停顿时间</li>
<li>吞吐量</li>
<li>并发数</li>
<li>内存占用</li>
</ol>
<h3> 补充</h3>
<h4>对象回收</h4>
<p>在分析 GC 时可回收对象有哪些时还涉及到一下概念：</p>
<ol>
<li>浅堆（Shallow Heap）：与浅拷贝对应；不计算当前对象中引用指向的对象的大小，即只包含了当前对象的值、引用、对象头的大小</li>
<li>深堆（Retained Heap，保留集）：与深拷贝对应；在浅堆的基础上，加上「只能」由当前对象指向的对象的大小</li>
<li>对象实际大小：在浅堆的基础上，加上由当前对象指向的对象的大小</li>
<li>支配树：支配是指，如果访问 B 对象只能通过 A 对象，那么 A 对象支配 B 对象及 B 对象支配的对象，由此可以构成一棵支配树</li>
</ol>
<p>分析出支配树后，可以很容易找到对象的深堆，深堆的大小就是对象回收后释放的总内存的大小</p>
<h4>内存泄露与溢出</h4>
<p>要分清两个问题：</p>
<ol>
<li>是否被使用</li>
<li>是否被需要</li>
</ol>
<p>如果被使用中，但是不被需要，就代表可能存在不需要的对象引用未断开的情况，可能有内存泄露</p>
<p>内存泄露的一些情况：</p>
<ol>
<li>静态集合类：静态类指向局部变量</li>
<li>单例模式：对象生命周期过长</li>
<li>内部类持有外部类：内部类被其他类引用，这样会导致外部类无法释放</li>
<li>各种连接：数据库连接、网络连接、IO 连接</li>
<li>变量不合理的作用域：局部变量提升到全局变量后，只要对象不能被回收，那么该变量也不能被回收</li>
<li>改变了哈希值：将对象放入 HashSet 之后，如果对象中的某些字段参与了哈希值的计算，并且之后使用中还修改了这些字段的值，那么 HashSet 中的该对象就不能再被使用了</li>
<li>缓存泄露：本地缓存中的非必须的对象不能被及时清理，此时可以使用弱引用，当内存不足时将这些不是必须的对象回收</li>
<li>监听器和回调：如果客户端在实现的 API 中注册回调，但是没有显示地取消，那么就会积聚，此时也可以使用弱引用解决</li>
</ol>
<h2> 工具</h2>
<p>基础工具：</p>
<ol>
<li>jmap：<code>jmap -dump:format=b file=&lt;filename.hprof&gt; &lt;pid&gt;</code> 直接在控制台打印出信息。jmap是一个多功能的命令。它可以生成 java 程序的 dump 文件， 也可以查看堆内对象示例的统计信息、查看 ClassLoader 的信息以及 finalizer 队列</li>
<li>jconsole：JDK 自带的监控工具</li>
<li>jstack：线程堆栈分析工具（<a href="https://juejin.cn/post/6844904152850497543%EF%BC%89" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6844904152850497543）</a></li>
<li>jps：查看运行中的 Java 应用的进程号</li>
<li>jinfo：用来查看正在运行的 java 应用程序的扩展参数</li>
<li>jstat：查看 JVM 内存状态</li>
<li>CHLSDB</li>
<li>jdb</li>
</ol>
<p>进阶工具：</p>
<ol>
<li>jprofile</li>
<li>btrace</li>
<li>Greys</li>
<li>Arthas</li>
<li>javOSizez</li>
<li>dmesg</li>
</ol>
<p>常见的日志分析工具：</p>
<ol>
<li>GCViewer：离线工具，比较老</li>
<li>GCEasy：在线工具，官网 <a href="https://gceasy.io/" target="_blank" rel="noopener noreferrer">https://gceasy.io/</a></li>
<li>GCHisto：和 GCViewer 类似，不怎么维护了</li>
<li>GCLogViewer</li>
<li>Hpjmeter</li>
<li>garbagecat</li>
</ol>
<p>其他工具：</p>
<ol>
<li>Flame Graphs 火焰图：查看方法占用 CPU 的情况</li>
<li>Tprofiler</li>
<li>Btrace</li>
<li>YourKit</li>
<li>JProbe</li>
<li>Spring Insight</li>
</ol>
<h3> 命令行工具</h3>
<p>jstat</p>
<blockquote>
<p>jstat 命令结构：<code>jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</code></p>
</blockquote>
<ol>
<li><code>option</code>：可选参数</li>
<li><code>interval</code>：用于指定输出统计数据的周期，单位为毫秒</li>
<li><code>count</code>：用于指定查询的总次数</li>
<li><code>-t</code>：可以在输出信息前加上一个 Timestamp 列，显示程序运行的时间，单位为秒</li>
<li><code>-h</code>：可以在周期性数据输出时，输出多少行数据后输出一个表头信息</li>
<li><code>vmid</code>：进程号</li>
</ol>
<p>其中重点为 <code>option</code> 参数，其余参数可由下面的例子解释：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="table-wrapper "><table>
<thead>
<tr>
<th>序号</th>
<th>option</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>-class</code></td>
<td>显示类装载的相关信息</td>
</tr>
<tr>
<td>2</td>
<td><code>-gc</code></td>
<td>显示 GC 相关信息</td>
</tr>
<tr>
<td>3</td>
<td><code>-gccapacity</code></td>
<td>与 <code>-gc</code> 类似，但是更关注堆区最大/最小内存</td>
</tr>
<tr>
<td>4</td>
<td><code>-gcutil</code></td>
<td>与 <code>-gc</code> 类似，但是更关注已使用空间</td>
</tr>
<tr>
<td>5</td>
<td><code>-gccause</code></td>
<td>与 <code>-gcutil</code> 一样，但是还会额外打印原因</td>
</tr>
<tr>
<td>6</td>
<td><code>-gcnew</code></td>
<td>显示新生代 GC 情况</td>
</tr>
<tr>
<td>7</td>
<td><code>-gcnewcapacity</code></td>
<td>与 <code>-gccapacity</code> 类似</td>
</tr>
<tr>
<td>8</td>
<td><code>-gcold</code></td>
<td>显示老年代 GC 情况</td>
</tr>
<tr>
<td>9</td>
<td><code>-gcoldcapacity</code></td>
<td>与 <code>-gccapacity</code> 类似</td>
</tr>
<tr>
<td>10</td>
<td><code>-gcpermcapacity</code></td>
<td>与 <code>-gccapacity</code> 类似（显示永久代）</td>
</tr>
<tr>
<td>11</td>
<td><code>-compiler</code></td>
<td>显示  JIT 编译器编译过的方法、耗时等信息</td>
</tr>
<tr>
<td>12</td>
<td><code>-printcompilation</code></td>
<td>输出已经被 JIT 编译的方法</td>
</tr>
</tbody>
</table>
</div><p>补充：jstatd 可以用于监控远程程序，本质是一个 RMI 服务端程序，作用相当于代理服务器，可以建立本地计算机与远程监控工具的通信，然后将本地 Java 程序信息传递到远程计算机</p>
<h4>jinfo</h4>
<blockquote>
<p>查看虚拟机配置参数相关信息，命令结构较为简单：<code>jinfo &lt;option&gt; &lt;pid&gt;</code>，主要分为查看和修改信息</p>
</blockquote>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>序号</th>
<th>option</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>-sysprops</code></td>
<td>查看由 <code>System.getProperties()</code> 获取的参数</td>
</tr>
<tr>
<td>2</td>
<td><code>-flags</code></td>
<td>查看曾经赋值过的参数</td>
</tr>
<tr>
<td>3</td>
<td><code>-flag &lt;具体参数&gt;</code></td>
<td>查看某个进程的具体参数值</td>
</tr>
<tr>
<td>4</td>
<td>`-flag [+</td>
<td>-]&lt;具体参数&gt;`</td>
</tr>
<tr>
<td>5</td>
<td><code>-flag &lt;具体参数&gt;=&lt;具体参数值&gt;</code></td>
<td>修改某个进程的具体参数，针对非 boolean 类型的参数</td>
</tr>
</tbody>
</table>
</div><h4>jmap</h4>
<blockquote>
<p>导出内存映像文件（dump 文件）和内存使用情况</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：jmap 必须在安全点上进行操作，而 jstat 是可以实时获取数据的</p>
<h4>jhat</h4>
<blockquote>
<p>与 jmap 搭配使用，用于分析 dump 文件。jhat 内置了 HTTP 服务器，用户可以在浏览器中查看分析结果，默认访问地址为：<a href="http://localhost:7000" target="_blank" rel="noopener noreferrer">http://localhost:7000</a></p>
</blockquote>
<p>注意：jhat 在 JDK 9 之后就被删除了，官方建议使用 Visual VM 代替</p>
<h4>jstack</h4>
<blockquote>
<p>用于生成虚拟机指定进程当前时刻的线程快照 Thread Dump，命令结构为：<code>jstack -&lt;option&gt; &lt;pid&gt;</code></p>
</blockquote>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>序号</th>
<th>option</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>-F</code></td>
<td>当正常的请求不被响应时，强制输出线程堆栈</td>
</tr>
<tr>
<td>2</td>
<td><code>-l</code></td>
<td>除堆栈外，显示关于锁的附加信息</td>
</tr>
<tr>
<td>3</td>
<td><code>-m</code></td>
<td>如果调用的是本地方法，可以显示 C/C++ 的堆栈</td>
</tr>
<tr>
<td>4</td>
<td><code>-h</code></td>
<td>查看帮助信息</td>
</tr>
</tbody>
</table>
</div><h4>jcmd</h4>
<blockquote>
<p>多功能工具，可以实现之前的除了 jstat 之外的所有命令的功能，jcmd 有 jmap 的大部分功能，并且官方也建议使用 jcmd 代替 jmap</p>
</blockquote>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>序号</th>
<th>option</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>-l</code></td>
<td>列出所有 JVM 进程</td>
</tr>
<tr>
<td>2</td>
<td><code>&lt;pid&gt; help</code></td>
<td>针对指定的进程列出支持的所有指令</td>
</tr>
<tr>
<td>3</td>
<td><code>&lt;pid&gt; &lt;具体命令&gt;</code></td>
<td>配合上面的命令，对指定进程执行具体命令</td>
</tr>
</tbody>
</table>
</div><h3> 图形化工具</h3>
<h4>jConsole</h4>
<p>JDK 自带的可视化监控工具，可以查看 Java 应用程序的运行情况、监控堆信息、元空间使用情况、类加载情况等</p>
<h4>VisualVM</h4>
<blockquote>
<p>注意：分为 jVisualVM 和 VisualVM，都差不多，前者在 JDK 中就有，而后者需要单独下载</p>
</blockquote>
<p>JDK 提供的可视化监控工具，用于查看虚拟机运行的应用程序的详细信息</p>
<h4>JMC</h4>
<p>内置了 Java Flight Recorder，能够以极低的开销收集 Java 虚拟机的性能数据</p>
<h4>MAT</h4>
<p>基于 Eclipse 的内存分析工具，是一个快速、功能丰富的堆分析工具，可以帮助查找内存泄露和减少内存消耗</p>
<p>MAT 功能较为强大，可以很容易看出内存情况，比如给出了支配树、分析报告等</p>
<h4>JProfiler</h4>
<p>与 Visual VM 类似，功能强大的商业软件，但是需要付费</p>
<ol>
<li>跨平台、使用简单、界面友好</li>
<li>对分析的应用影响小</li>
<li>对 CPU、线程、内存的分析功能强大</li>
<li>对 JDBC、NoSQL、JSP、Servlet 等也提供分析功能</li>
<li>支持在线和离线模式，可以监控本地、远程环境</li>
</ol>
<p>包含的功能：</p>
<ol>
<li>遥感监测数据视图分析</li>
<li>内存视图分析</li>
<li>Heap Walker</li>
<li>CPU 视图分析</li>
<li>线程视图分析</li>
</ol>
<h4>Arthas</h4>
<p>Alibaba 开源 Java 诊断工具（用的比较多）</p>
<h4>Btrace</h4>
<p>Java 运行时追踪工具，可以在不停机的情况下跟踪指定的方法调用、构造函数调用、系统内存信息等</p>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="java"/>
    <category term="JVM"/>
    <category term="虚拟机"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-06-11T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">JVM 参数</title>
    <id>https://gzwrrr.github.io/article/java/D-Jvm/Y-JVM%E5%8F%82%E6%95%B0.html</id>
    <link href="https://gzwrrr.github.io/article/java/D-Jvm/Y-JVM%E5%8F%82%E6%95%B0.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> JVM 参数</h1>
<h2> 概述</h2>
<p>JVM 参数选项类型：</p>
<ol>
<li><code>-</code> 标准参数选项：稳定的参数，后续版本基本不会变化，但是使用的较少</li>
<li><code>-X</code> 参数选项：非标准参数，较为稳定，但是后续可能小概率变更，使用 <code>java -X</code> 可以查看该类型的所有参数选项，使用的也比较少</li>
<li><code>-XX</code> 参数选项：非标准化参数，实验性参数不稳定，变动比较大，但是使用的最多；分为布尔型格式和非布尔型格式，前者表示开启与否，后者需要指定具体的值</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> JVM 参数</h1>
<h2> 概述</h2>
<p>JVM 参数选项类型：</p>
<ol>
<li><code>-</code> 标准参数选项：稳定的参数，后续版本基本不会变化，但是使用的较少</li>
<li><code>-X</code> 参数选项：非标准参数，较为稳定，但是后续可能小概率变更，使用 <code>java -X</code> 可以查看该类型的所有参数选项，使用的也比较少</li>
<li><code>-XX</code> 参数选项：非标准化参数，实验性参数不稳定，变动比较大，但是使用的最多；分为布尔型格式和非布尔型格式，前者表示开启与否，后者需要指定具体的值</li>
</ol>
<p>补充：</p>
<ol>
<li>Hotspot JVM 有两种模式：server 和 client，前者对服务器配置要求比较高，后者较低，通过标准参数选项 <code>-server</code> 和 <code>-client</code> 开启</li>
<li>参数有三种设置方式：
<ol>
<li><code>-&lt;type&gt;:+&lt;option&gt;</code></li>
<li><code>-&lt;type&gt;:&lt;option&gt;&lt;size&gt;</code></li>
<li><code>-&lt;type&gt;:&lt;option&gt;=&lt;size&gt;</code></li>
</ol>
</li>
</ol>
<h2> 按类型分类</h2>
<h3> 标准参数</h3>
<blockquote>
<p>命令行中输入：<code>java -help</code> 查看</p>
</blockquote>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>序号</th>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>-d32</code></td>
<td>使用 32 位数据模型 (如果可用)</td>
</tr>
<tr>
<td>2</td>
<td><code>-d64</code></td>
<td>使用 64 位数据模型 (如果可用)</td>
</tr>
<tr>
<td>3</td>
<td><code>-server</code></td>
<td>选择 server 模式（默认）</td>
</tr>
<tr>
<td>4</td>
<td><code>-client</code></td>
<td>选择 client 模式</td>
</tr>
<tr>
<td>5</td>
<td><code>-cp &lt;目录和 zip/jar 文件的类搜索路径&gt;</code><br><code>-classpath &lt;目录和 zip/jar 文件的类搜索路径&gt;</code></td>
<td>用 <code>;</code> 分隔目录，设置 JAR 档案 和 ZIP 档案列表, 用于搜索类文件</td>
</tr>
<tr>
<td>6</td>
<td><code>-D&lt;名称&gt;=&lt;值&gt;</code></td>
<td>设置系统属性</td>
</tr>
<tr>
<td>7</td>
<td><code>-verbose:[class/gc/jni]</code></td>
<td>启用详细输出</td>
</tr>
<tr>
<td>8</td>
<td><code>-version</code></td>
<td>输出产品版本并退出</td>
</tr>
<tr>
<td>9</td>
<td><code>-version:&lt;值&gt;</code></td>
<td>警告: 此功能已过时，将在未来发行版中删除，需要指定的版本才能运行</td>
</tr>
<tr>
<td>10</td>
<td><code>-showversion</code></td>
<td>输出产品版本并继续</td>
</tr>
<tr>
<td>11</td>
<td><code>-jre-restrict-search / -no-jre-restrict-search</code></td>
<td>警告: 此功能已过时，将在未来发行版中删除，在版本搜索中包括/排除用户专用 JRE</td>
</tr>
<tr>
<td>12</td>
<td><code>-? -help</code></td>
<td>输出此帮助消息</td>
</tr>
<tr>
<td>13</td>
<td><code>-X</code></td>
<td>输出非标准选项的帮助</td>
</tr>
<tr>
<td>14</td>
<td><code>-ea[:&lt;packagename&gt;.../:&lt;classname&gt;]</code><br><code>-enableassertions[:&lt;packagename&gt;.../:&lt;classname&gt;]</code></td>
<td>按指定的粒度启用断言</td>
</tr>
<tr>
<td>15</td>
<td><code>-da[:&lt;packagename&gt;.../:&lt;classname&gt;]</code><br><code>-disableassertions[:&lt;packagename&gt;.../:&lt;classname&gt;]</code></td>
<td>禁用具有指定粒度的断言</td>
</tr>
<tr>
<td>16</td>
<td><code>-esa / -enablesystemassertions</code></td>
<td>启用系统断言</td>
</tr>
<tr>
<td>17</td>
<td><code>-dsa / -disablesystemassertions</code></td>
<td>禁用系统断言</td>
</tr>
<tr>
<td>18</td>
<td><code>-agentlib:&lt;libname&gt;[=&lt;选项&gt;]</code></td>
<td>加载本机代理库 <code>&lt;libname&gt;</code>，例如 <code>-agentlib:hprof</code>，另请参阅 <code>-agentlib:jdwp=help</code> 和 <code>-agentlib:hprof=help</code></td>
</tr>
<tr>
<td>19</td>
<td><code>-agentpath:&lt;pathname&gt;[=&lt;选项&gt;]</code></td>
<td>按完整路径名加载本机代理库</td>
</tr>
<tr>
<td>20</td>
<td><code>-javaagent:&lt;jarpath&gt;[=&lt;选项&gt;]</code></td>
<td>加载 Java 编程语言代理，请参阅 <code>java.lang.instrument</code></td>
</tr>
<tr>
<td>21</td>
<td><code>-splash:&lt;imagepath&gt;</code></td>
<td>使用指定的图像显示启动屏幕</td>
</tr>
</tbody>
</table>
</div><h3> 非标准 -X 参数</h3>
<blockquote>
<p>命令行中输入：<code>java -X</code> 查看</p>
</blockquote>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>序号</th>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>-Xint</code></td>
<td>禁用 JIT，所有字节码都被解释执行，该模式速度最慢</td>
</tr>
<tr>
<td>2</td>
<td><code>-Xcomp</code></td>
<td>所有字节码第一次使用就被编译成本地代码，然后再执行</td>
</tr>
<tr>
<td>3</td>
<td><code>-Xmixed</code></td>
<td>混合模式，也是默认模式，让 JIT 根据程序运行情况具体选择</td>
</tr>
<tr>
<td>4</td>
<td><code>-Xms</code></td>
<td>堆最小值</td>
</tr>
<tr>
<td>5</td>
<td><code>-Xmx</code></td>
<td>堆最大值，通常 <code>-Xms</code> 和 <code>-Xmx</code>大小相同，这样就不会动态扩容</td>
</tr>
<tr>
<td>6</td>
<td><code>-Xmn</code></td>
<td>新生代大小</td>
</tr>
<tr>
<td>7</td>
<td><code>-Xss</code></td>
<td>每个线程池的堆栈大小。在jdk5以上的版本，每个线程堆栈大小为1m，jdk5以前的版本是每个线程池大小为256k。一般在相同物理内存下，如果减少－xss值会产生更大的线程数，但不同的操作系统对进程内线程数是有限制的，是不能无限生成</td>
</tr>
<tr>
<td>8</td>
<td><code>-Xbootclasspath:&lt;用; 分隔的目录和 zip/jar 文件&gt;</code></td>
<td>设置搜索路径以引导类和资源</td>
</tr>
<tr>
<td>9</td>
<td><code>-Xbootclasspath/a:&lt;用 ;分隔的目录和 zip/jar 文件&gt;</code></td>
<td>附加在引导类路径末尾</td>
</tr>
<tr>
<td>10</td>
<td><code>-Xbootclasspath/p:&lt;用 ; 分隔的目录和 zip/jar 文件&gt;</code></td>
<td>置于引导类路径之前</td>
</tr>
<tr>
<td>11</td>
<td><code>-Xdiag</code></td>
<td>显示附加诊断消息</td>
</tr>
<tr>
<td>12</td>
<td><code>-Xnoclassgc</code></td>
<td>禁用类垃圾收集</td>
</tr>
<tr>
<td>13</td>
<td><code>-Xincgc</code></td>
<td>启用增量垃圾收集</td>
</tr>
<tr>
<td>14</td>
<td><code>-Xloggc:&lt;file&gt;</code></td>
<td>将 GC 状态记录在文件中 (带时间戳)</td>
</tr>
<tr>
<td>15</td>
<td><code>-Xbatch</code></td>
<td>禁用后台编译</td>
</tr>
<tr>
<td>16</td>
<td><code>-Xms&lt;size&gt;</code></td>
<td>设置初始 Java 堆大小</td>
</tr>
<tr>
<td>17</td>
<td><code>-Xmx&lt;size&gt;</code></td>
<td>设置最大 Java 堆大小</td>
</tr>
<tr>
<td>18</td>
<td><code>-Xss&lt;size&gt;</code></td>
<td>设置 Java 线程堆栈大小</td>
</tr>
<tr>
<td>19</td>
<td><code>-Xprof</code></td>
<td>输出 cpu 配置文件数据</td>
</tr>
<tr>
<td>20</td>
<td><code>-Xfuture</code></td>
<td>启用最严格的检查, 预期将来的默认值</td>
</tr>
<tr>
<td>21</td>
<td><code>-Xrs</code></td>
<td>减少 Java/VM 对操作系统信号的使用</td>
</tr>
<tr>
<td>22</td>
<td><code>-Xcheck:jni</code></td>
<td>对 JNI 函数执行其他检查</td>
</tr>
<tr>
<td>23</td>
<td><code>-Xshare:off</code></td>
<td>不尝试使用共享类数据</td>
</tr>
<tr>
<td>24</td>
<td><code>-Xshare:auto</code></td>
<td>在可能的情况下使用共享类数据 (默认)</td>
</tr>
<tr>
<td>25</td>
<td><code>-Xshare:on</code></td>
<td>要求使用共享类数据, 否则将失败</td>
</tr>
<tr>
<td>26</td>
<td><code>-XshowSettings</code></td>
<td>显示所有设置并继续</td>
</tr>
<tr>
<td>27</td>
<td><code>-XshowSettings:all</code></td>
<td>显示所有设置并继续</td>
</tr>
<tr>
<td>28</td>
<td><code>-XshowSettings:vm</code></td>
<td>显示所有与 vm 相关的设置并继续</td>
</tr>
<tr>
<td>29</td>
<td><code>-XshowSettings:properties</code></td>
<td>显示所有属性设置并继续</td>
</tr>
<tr>
<td>30</td>
<td><code>-XshowSettings:locale</code></td>
<td>显示所有与区域设置相关的设置并继续</td>
</tr>
</tbody>
</table>
</div><h3> 非标准 -XX 参数</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 按功能分类</h2>
<h3> 内存设置</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>序号</th>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>-Xms</code></td>
<td>堆最小值</td>
</tr>
<tr>
<td>2</td>
<td><code>-Xmx</code></td>
<td>堆最大值，通常 <code>-Xms</code> 和 <code>-Xmx</code>大小相同，这样就不会动态扩容</td>
</tr>
<tr>
<td>3</td>
<td><code>-Xmn</code></td>
<td>新生代大小</td>
</tr>
<tr>
<td>4</td>
<td><code>-Xss</code></td>
<td>每个线程池的堆栈大小。在jdk5以上的版本，每个线程堆栈大小为1m，jdk5以前的版本是每个线程池大小为256k。一般在相同物理内存下，如果减少－xss值会产生更大的线程数，但不同的操作系统对进程内线程数是有限制的，是不能无限生成</td>
</tr>
<tr>
<td>5</td>
<td><code>-XX:NewRatio</code></td>
<td>设置新生代与老年代比值，-XX:NewRatio = 4 表示新生代与老年代所占比例为 1 : 4 ，新生代占比整个堆的五分之一。如果设置了 <code>-Xmn</code> 的情况下，该参数是不需要在设置的</td>
</tr>
<tr>
<td>6</td>
<td><code>-XX:MaxTenuringThreshold</code></td>
<td>新生代对象的存活次数，默认为 15</td>
</tr>
<tr>
<td>7</td>
<td><code>-XX:SurvivorRatio</code></td>
<td>存活区与伊甸园区的比例，默认为 2 : 8</td>
</tr>
<tr>
<td>8</td>
<td><code>-XX:MaxMetaspaceSize</code></td>
<td>元数据区大小。<code>PermSize</code> 和 <code>MaxPermSize</code> （永久代）已经不能使用了，在 JDK8 中配置这两个参数将会发出警告。</td>
</tr>
</tbody>
</table>
</div><p>补充说明：</p>
<ol>
<li>Xmn用于设置新生代的大小。过小会增加Minor GC频率，过大会减小老年代的大小。一般设为整个堆空间的1/4或1/3.</li>
<li>XX:SurvivorRatio用于设置新生代中survivor空间(from/to)和eden空间的大小比例； XX:TargetSurvivorRatio表示，当经历Minor GC后，survivor空间占有量(百分比)超过它的时候，就会压缩进入老年代(当然，如果survivor空间不够，则直接进入老年代)。默认值为50%。</li>
<li>为了性能考虑，一开始尽量将新生代对象留在新生代，避免新生的大对象直接进入老年代。因为新生对象大部分都是短期的，这就造成了老年代的内存浪费，并且回收代价也高(Full GC发生在老年代和方法区Perm).</li>
<li>当Xms=Xmx，可以使得堆相对稳定，避免不停震荡</li>
<li>一般来说，MaxPermSize设为64MB可以满足绝大多数的应用了。若依然出现方法区溢出，则可以设为128MB。若128MB还不能满足需求，那么就应该考虑程序优化了，减少<strong>动态类</strong>的产生。</li>
</ol>
<h3> 错误处理</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>序号</th>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>-XX:+HeapDumpOutofMemoryErorr</code></td>
<td>当发生 OOM 时会自动 dump 堆栈到文件中</td>
</tr>
<tr>
<td>2</td>
<td><code>-XX:HeapDumpPath</code></td>
<td>指定 dump 文件的保存路径</td>
</tr>
<tr>
<td>3</td>
<td><code>-XX:-UseGCOverheadLimit</code></td>
<td>会将 OutOfMemoryError: GC overhead limit exceeded 延迟到 OutOfMemoryError: Java heap space</td>
</tr>
<tr>
<td>4</td>
<td><code>-XX:+HeapDumpOnOutOfMemoryError</code></td>
<td>在 OutOfMemoryError 后获取一份 HPROF 二进制 Heap Dump 文件</td>
</tr>
<tr>
<td>5</td>
<td><code>-XX:+HeapDumpOnCtrlBreak</code></td>
<td>Ctrl + Break 组合键即可获取一份 Heap Dump</td>
</tr>
<tr>
<td>6</td>
<td><code>-agentlib:hprof=heap=dump,format=b</code></td>
<td>在程序执行结束时或受到 SIGOUT 信号时生成 Dump 文件</td>
</tr>
</tbody>
</table>
</div><p>OOM：</p>
<ol>
<li>java.lang.OutOfMemoryError: Metaspace</li>
<li>OutOfMemoryError: GC overhead limit exceeded</li>
<li>OutOfMemoryError: Java heap space</li>
</ol>
<h3> 垃圾收集</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>序号</th>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>-XX:+PrintGC</code></td>
<td>输出 GC 日志</td>
</tr>
<tr>
<td>2</td>
<td><code>-XX:+PrintGCDetails</code></td>
<td>打印 GC 详细日志</td>
</tr>
<tr>
<td>3</td>
<td><code>-XX:+PrintGCTimeStamps</code></td>
<td>输出 GC 的时间戳（以基准时间的形式）</td>
</tr>
<tr>
<td>4</td>
<td><code>-XX:+PrintGCDateStamps</code></td>
<td>输出 GC 的时间戳（以日期的形式）</td>
</tr>
<tr>
<td>5</td>
<td><code>-XX:+PrintHeapAtGC</code></td>
<td>在进行 GC 的前后打印出堆的信息</td>
</tr>
<tr>
<td>6</td>
<td><code>-Xloggc:../logs/gc.log</code></td>
<td>日志文件的输出路径</td>
</tr>
<tr>
<td>7</td>
<td><code>-XX:+PrintCommandLineFlags</code></td>
<td>查看垃圾回收器</td>
</tr>
<tr>
<td>8</td>
<td><code>-XX:+UseSerialGC</code></td>
<td>使用 Serial GC 和 Serial Old GC</td>
</tr>
<tr>
<td>9</td>
<td><code>-XX:+UseParNewGC</code></td>
<td>使用 ParNew GC</td>
</tr>
<tr>
<td>10</td>
<td><code>-XX:+UseParallelGC</code></td>
<td>使用 Parallel GC 和 Parallel Old GC</td>
</tr>
<tr>
<td>11</td>
<td><code>-XX:ParallelGCThreads</code></td>
<td>使用多线程垃圾收集器时指定最大线程数，默认为 CPU 核数</td>
</tr>
<tr>
<td>12</td>
<td><code>-XX:MaxGCPauseMillis</code></td>
<td>设置垃圾回收的暂停时间，该参数会影响吞吐量，要谨慎修改</td>
</tr>
<tr>
<td>13</td>
<td><code>-XX:GCTimeRatio</code></td>
<td>垃圾收集时间占总时间的比例，默认 99，表示垃圾收集时间不大于 1 %，计算为 1 / (1 + N)，此处 N = 99，得出 1 %</td>
</tr>
<tr>
<td>14</td>
<td><code>-XX:+UseConcMarkSwapGC</code></td>
<td>使用 CMS GC 和 ParNew GC，某些情况下 CMS GC 无法工作会使用 Serial Old GC</td>
</tr>
<tr>
<td>15</td>
<td><code>-XX:ParallelCMSThreads</code></td>
<td>使用 CMS 时的线程数量限制</td>
</tr>
<tr>
<td>16</td>
<td><code>-XX:+UseCMSCompactAtFullCollection</code></td>
<td>使用 CMS 时，进行完 Full GC 后进行内存碎片整理</td>
</tr>
<tr>
<td>17</td>
<td><code>-XX:CMSFullGCsBeforeCompaction</code></td>
<td>使用 CMS 时，设置在多少次 Full GC 后进行内存碎片的整理</td>
</tr>
<tr>
<td>18</td>
<td><code>-XX:CMSInitiatingOccupanyFraction</code></td>
<td>设置堆内存使用率的阈值，超过就进行 CMS GC 的垃圾收集，JDK 6 之后默认为 92%</td>
</tr>
<tr>
<td>19</td>
<td><code>-XX:+UseG1GC</code></td>
<td>使用 G1 垃圾回收器</td>
</tr>
<tr>
<td>20</td>
<td><code>-XX:G1HeapRegionSize</code></td>
<td>使用 G1 GC 时设置 Region 大小，每个 Region 范围为 1MB ~ 32MB（ 2 的幂），分为 2048 个 Region，对应的堆内存为 2GB ~ 64 GB，Region 的大小默认为堆内存的 1/2000</td>
</tr>
<tr>
<td>21</td>
<td><code>-XX:ConcGCThreads</code></td>
<td>设置并发标记的线程数，一般为 <code>ParallelGCThreads</code> 的 1/4</td>
</tr>
<tr>
<td>22</td>
<td><code>-XX:InitiatingHeapOccupancyPercent</code></td>
<td>设置并发线程 GC 发生时堆内存的阈值，即超过该阈值就进行 GC</td>
</tr>
</tbody>
</table>
</div><h3> 其他</h3>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>序号</th>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>-XX:+PrintFlagsInitial</code></td>
<td>查看所有 JVM 启动参数的初始值</td>
</tr>
<tr>
<td>2</td>
<td><code>-XX:+PrintFlagsFinal</code></td>
<td>查看所有 JVM 参数的最终值</td>
</tr>
<tr>
<td>3</td>
<td><code>-XX:+PrintCommandLineFlags</code></td>
<td>查看已经被 JVM 或者用户设置过的详细的带有 <code>XX</code> 的参数和值</td>
</tr>
</tbody>
</table>
</div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="java"/>
    <category term="JVM"/>
    <category term="虚拟机"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-06-11T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">开源</title>
    <id>https://gzwrrr.github.io/article/other/A-%E5%AF%BC%E8%88%AA%E9%93%BE%E6%8E%A5/%E5%BC%80%E6%BA%90.html</id>
    <link href="https://gzwrrr.github.io/article/other/A-%E5%AF%BC%E8%88%AA%E9%93%BE%E6%8E%A5/%E5%BC%80%E6%BA%90.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 开源</h1>
<ol>
<li><a href="https://summer-ospp.ac.cn/help" target="_blank" rel="noopener noreferrer">开源之夏</a></li>
<li><a href="https://summerofcode.withgoogle.com/" target="_blank" rel="noopener noreferrer">SummerOfCode</a></li>
<li><a href="https://goodfirstissue.dev/language/java" target="_blank" rel="noopener noreferrer">GoodFirstIssue</a></li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> 开源</h1>
<ol>
<li><a href="https://summer-ospp.ac.cn/help" target="_blank" rel="noopener noreferrer">开源之夏</a></li>
<li><a href="https://summerofcode.withgoogle.com/" target="_blank" rel="noopener noreferrer">SummerOfCode</a></li>
<li><a href="https://goodfirstissue.dev/language/java" target="_blank" rel="noopener noreferrer">GoodFirstIssue</a></li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="链接"/>
    <category term="导航"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Mybatis 常见问题</title>
    <id>https://gzwrrr.github.io/article/mybatis/Mybaits%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html</id>
    <link href="https://gzwrrr.github.io/article/mybatis/Mybaits%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Mybatis 常见问题</h1>
<h2> Mybatis 的优缺点</h2>
<p>优点：</p>
<ol>
<li>与 JDBC 相比减少了大量不必要的代码，不需要手动开关连接，并且能够很好地与各种数据库兼容，和 Spring 也有很好的集成</li>
<li>灵活性高：MyBatis 可以使用 SQL 语句或存储过程，也可以使用对象关系映射（ORM）来进行数据访问，这使得开发人员可以根据需要自由选择使用不同的方法。</li>
<li>易于学习和使用：相对于其他 ORM 框架，MyBatis 学习曲线较平滑，使用起来相对简单，开发人员可以快速上手。</li>
<li>定制化程度高：MyBatis 提供了大量的配置选项和插件，可以根据需要进行灵活的配置和扩展。</li>
<li>SQL 映射功能强大：MyBatis 提供了强大的 SQL 映射功能，可以灵活地进行 SQL 查询和更新，支持多表联合查询和复杂条件查询等。</li>
<li>性能优越：MyBatis 相对于其他 ORM 框架，具有更高的性能和更低的资源消耗，尤其在高并发和大数据量情况下表现优异。</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> Mybatis 常见问题</h1>
<h2> Mybatis 的优缺点</h2>
<p>优点：</p>
<ol>
<li>与 JDBC 相比减少了大量不必要的代码，不需要手动开关连接，并且能够很好地与各种数据库兼容，和 Spring 也有很好的集成</li>
<li>灵活性高：MyBatis 可以使用 SQL 语句或存储过程，也可以使用对象关系映射（ORM）来进行数据访问，这使得开发人员可以根据需要自由选择使用不同的方法。</li>
<li>易于学习和使用：相对于其他 ORM 框架，MyBatis 学习曲线较平滑，使用起来相对简单，开发人员可以快速上手。</li>
<li>定制化程度高：MyBatis 提供了大量的配置选项和插件，可以根据需要进行灵活的配置和扩展。</li>
<li>SQL 映射功能强大：MyBatis 提供了强大的 SQL 映射功能，可以灵活地进行 SQL 查询和更新，支持多表联合查询和复杂条件查询等。</li>
<li>性能优越：MyBatis 相对于其他 ORM 框架，具有更高的性能和更低的资源消耗，尤其在高并发和大数据量情况下表现优异。</li>
</ol>
<p>缺点：</p>
<ol>
<li>SQL 语句需要手写：相对于其他 ORM 框架，MyBatis 需要手写 SQL 语句，这会增加一定的学习成本和开发成本。</li>
<li>映射文件较多：在使用 MyBatis 进行 ORM 映射时，需要编写大量的 XML 映射文件，这会增加代码量和维护成本。</li>
<li>命名规范不统一：MyBatis 没有统一的命名规范，导致开发人员可能会出现命名不一致的情况，增加代码可读性和维护难度。</li>
<li>不适合复杂关系映射：相对于其他 ORM 框架，MyBatis 不太适合处理复杂的关系映射，例如多对多、多层次等情况，这会增加开发人员的工作量。</li>
</ol>
<h2> #{} 和 ${} 的区别是什么？</h2>
<ol>
<li>#{} 是预编译处理，是占位符；${} 是字符串替换，是拼接符</li>
<li>Mybatis 在处理 ${} 时，会将 SQL 中的 ${} 替换成变量的值，调用 <code>Statement</code> 来赋值</li>
<li>Mybatis 在处理 #{} 时，会将 SQL 中的 #{} 替换成 ?，调用 <code>PreparedStatement</code> 来赋值</li>
</ol>
<p>使用 #{} 可以有效防止 SQL 注入，提高系统的安全性</p>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="数据库"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-05-03T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Java 基础常见问题</title>
    <id>https://gzwrrr.github.io/article/java/A-Java%E5%9F%BA%E7%A1%80/Z-Java%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html</id>
    <link href="https://gzwrrr.github.io/article/java/A-Java%E5%9F%BA%E7%A1%80/Z-Java%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Java 基础常见问题</h1>

<h2> JDK、JRE、JVM 的区别</h2>
<ol>
<li>JDK：Java Develpment Kit java 开发工具</li>
<li>JRE：Java Runtime Environment java运行时环境</li>
<li>JVM：java Virtual Machine java 虚拟机</li>
</ol>
<h2> hashcode 与 equals 的关系</h2>
<p>举例说明：</p>
<ul>
<li>
<p>对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，看该位置是否有值，如果没有、HashSet 会假设对象没有重复出现。</p>
</li>
<li>
<p>但是如果发现有值，这时会调用 <code>equals()</code> 方法来检查两个对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。这样就大大减少了 equals 的次数，相应就大大提高了执行速度。</p>
</li>
<li>
<p>如果两个对象相等，则hashcode一定也是相同的两个对象相等,对两个对象分别调用equals方法都返回 true</p>
</li>
<li>
<p>两个对象有相同的hashcode值，它们也不一定是相等的，因此，equals方法被覆盖过，则hashCode方法也必须被覆盖</p>
</li>
<li>
<p><code>hashCode()</code> 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h1> Java 基础常见问题</h1>

<h2> JDK、JRE、JVM 的区别</h2>
<ol>
<li>JDK：Java Develpment Kit java 开发工具</li>
<li>JRE：Java Runtime Environment java运行时环境</li>
<li>JVM：java Virtual Machine java 虚拟机</li>
</ol>
<h2> hashcode 与 equals 的关系</h2>
<p>举例说明：</p>
<ul>
<li>
<p>对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，看该位置是否有值，如果没有、HashSet 会假设对象没有重复出现。</p>
</li>
<li>
<p>但是如果发现有值，这时会调用 <code>equals()</code> 方法来检查两个对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。这样就大大减少了 equals 的次数，相应就大大提高了执行速度。</p>
</li>
<li>
<p>如果两个对象相等，则hashcode一定也是相同的两个对象相等,对两个对象分别调用equals方法都返回 true</p>
</li>
<li>
<p>两个对象有相同的hashcode值，它们也不一定是相等的，因此，equals方法被覆盖过，则hashCode方法也必须被覆盖</p>
</li>
<li>
<p><code>hashCode()</code> 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</p>
</li>
</ul>
<h2> String、StringBuilder、StringBuffer 的区别</h2>
<ul>
<li>String是final修饰的，不可变，每次操作都会产生新的String对象</li>
<li>StringBuffer和StringBuilder都是在原对象上操作</li>
<li>StringBuffer是线程安全的，StringBuilder线程不安全的</li>
<li>StringBuffer方法都是synchronized修饰的
性能：StringBuilder &gt; StringBuffer &gt; String
场景：经常需要改变字符串内容时使用后面两个：优先使用StringBuilder，多线程使用共享变量时使用StringBuffer</li>
</ul>
<h2> equals 与 == 的区别</h2>
<ol>
<li><code>==</code>：对于普通类型，比较的是值；对应引用类型来说，比较的是引用地址</li>
<li><code>equals</code>：主要看对象重写了 equals 和 hashcode 后的具体操作，首先还是先使用 == 比较，如果相等那么对象一定相等；如果不相等就看 equals 实现的比较方法</li>
</ol>
<h2> 重载和重写的区别</h2>
<ol>
<li>重载：发生在同一个类中，方法名相同时，参数类型、个数、顺序不同就发生重载，<strong>但是注意</strong>，单单是返回值和访问修饰符不同不算是重载。重载发生在 <mark>编译期</mark></li>
<li>重写：发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于父类，访问修饰符范围大于等于父类，<strong>但是注意</strong>，如果父类方法访问修饰符是 <code>private</code> 则子类不能重写该方法</li>
</ol>
<h2> List 和 Set 的区别</h2>
<ol>
<li>List 是有序的，按照元素进入的顺序存储，允许存储多个 null 值。可以使用 <code>Iterator</code> 取出所有元素逐一遍历，还可以使用 <code>get(int index)</code> 获取指定下标的元素，比较适合随机访问</li>
<li>Set：是无序的，只能存储一个 null 值，只能使用 <code>Iterator</code> 取出所有对象逐一遍历</li>
</ol>
<h2> ArrayList 和 LinkedList 的区别</h2>
<ol>
<li>底层结构不同：ArrayList 底层使用数组实现；LinkedList 底层使用链表实现</li>
<li>ArrayList 比较适合 <strong>随机查找</strong>；LinkedList 更适合 <strong>查询</strong> 和 <strong>删除</strong>，CRUD 的时间复杂度各不相同</li>
<li>二者都是实现了 <code>List</code> 接口，但是 LinkedList 还而外实现了 <code>Deque</code> 接口，所以 LinkedList 还可以当作队列来使用</li>
</ol>
<h2> ConcurrentHashMap 的扩容机制</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://blog.csdn.net/xingxiupaioxue/article/details/88062163" target="_blank" rel="noopener noreferrer">ConcurrentHashMap 1.7和1.8区别</a></p>
</div>

<h2> HashMap 的 put 方法流程是怎么样的？</h2>
<p>根据Ky通过哈希算法与与运算得出数组下标，然后判断数组下标位置是否为空：</p>

<h2> 深拷贝和浅拷贝</h2>
<p>都指对象的拷贝，而一个对象中可能存在两种类型的属性：基本数据类型或者示例对象的引用</p>
<ol>
<li>浅拷贝指：智慧拷贝基本数据类型的值，以及示例对象的引用地址，并不会复制一份新的引用地址指向对象，也就是说浅拷贝的对象内部的类属性都是指向同一个对象</li>
<li>深拷贝指：既拷贝基本数据类型的值，也会对示例对象的引用地址指向的对象进行复制，深拷贝的对象内部属性指向的不是同一个对象</li>
</ol>
<h2> HashMap 的扩容原理</h2>

<h2> CopyOnWriteArrayList 的底层原理是怎么样的？</h2>
<ol>
<li>首先 <code>CopyOnWriteArrayList </code> 内部也是通过数组来实现的，向其中添加元素时，会复制一个新的数组，<strong>写操作</strong> 在新数组上进行，<strong>读操作</strong> 在原数组上进行</li>
<li>写操作时会加锁，防止出现并发写入丢失数据的问题</li>
<li>写操作结束之后会把原数组指向新数组</li>
<li><code>CopyOnWriteArrayList </code>  允许在写操作时读取数据，大大提高了读数据的性能，适合 <strong>读多写少</strong> 的应用场景，但是 <code>CopyOnWriteArrayList </code>  本身比较占用内存，而且可能读取到的数据不是最新的数据，所以不适合实时性要求很高的场景</li>
</ol>
<h2> 什么是字节码？采用字节码的好处是什么？</h2>
<ol>
<li>
<p>Java语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解</p>
</li>
<li>
<p>释型语言可移植的特点。所以Java程序运行时比较高效，而且，由于字节码并不专对一种特定的机器，因此，Java程序无须重新编译便可在多种不同的计算机上运行。</p>
</li>
</ol>
<h2> Java 中的异常体系</h2>
<p>Java中的所有异常都来自顶级父类Throwable，Throwable下有两个子类Exception和Error</p>
<ol>
<li>Error是程序无法处理的错误，一旦出现这个错误，则程序将被迫停止运行</li>
<li>Exception不会导致程序停止，又分为两个部分RunTimeException运行时异常和CheckedException检查异常</li>
<li>RunTimeException常常发生在程序运行过程中，会导致程序当前线程执行失败。CheckedException常常发生在程序编译过程中，会导致程序编译不通过。</li>
</ol>
<h2> Java 有几种类加载器？</h2>
<p>三种类加载器，JDK自带有三个类加载器：bootstrap ClassLoader、ExtClassLoader、AppClassLoader：</p>
<ol>
<li>
<p>BootStrapClassLoader是ExtClassLoader的父类加载器，默认负责加载%JAVA_HOME%lib下的jar包和class文件</p>
</li>
<li>
<p>ExtClassLoader是AppClassLoader的父类加载器，负责加载%JAVA_HOME%/lib/ext文件夹下的jar包和class类</p>
</li>
<li>
<p>AppClassLoader是自定义类加载器的父类，负责加载classpath下的类文件。系统类加载器，线程上下文加载器，继承ClassLoader实现自定义类加载器</p>
</li>
</ol>
<h2> 类加载器的双亲委派机制</h2>
<p>JVM 在加载一个类时，会先从 AppClassLoader -&gt; ExtClassLoader -&gt; bootstrap ClassLoader 的顺序一直找到最上层，如果到了 bootstrap ClassLoader 无法加载，就交给 ExtClassLoader，还处理不了就交给 AppClassLoader</p>
<p>所以双亲委派是指，在加载类时，先委派给 Ext 和 Bootstrap 进行加载，加载不了再自己加载</p>
<h2> 枚举类</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://developer.aliyun.com/article/782278" target="_blank" rel="noopener noreferrer">枚举的底层原理是什么？</a></p>
</div>
<h2> 集合框架</h2>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://zhuanlan.zhihu.com/p/143700575" target="_blank" rel="noopener noreferrer">吃透Java集合框架！</a></p>
</div>
<h2> 对象锁和类锁的区别</h2>
<p><a href="https://blog.csdn.net/qq_45036591/article/details/105461253" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_45036591/article/details/105461253</a></p>
<h2> HashMap put get 过程</h2>
<p>在Java中，<code>HashMap</code>是一种常用的哈希表实现，用于存储键值对。当你使用<code>put()</code>方法向<code>HashMap</code>中添加元素，以及使用<code>get()</code>方法获取元素时，会涉及以下过程：</p>
<p><strong>1. <code>put()</code>方法过程：</strong></p>
<p>当你调用<code>put(key, value)</code>方法将键值对添加到<code>HashMap</code>时，以下步骤会发生：</p>
<ol>
<li>计算键的哈希值：<code>HashMap</code>会调用键的<code>hashCode()</code>方法来计算哈希值，以确定键值对应的存储位置。</li>
<li>根据哈希值找到存储位置：计算出的哈希值将被用来决定键值对应的桶（bucket）或索引位置。</li>
<li>处理哈希冲突：由于不同键的哈希值可能相同，这就是哈希冲突。<code>HashMap</code>使用链表或红黑树来存储同一桶中的多个键值对。如果当前桶中已经有元素，<code>HashMap</code>会遍历链表或红黑树来检查是否已经存在相同的键，如果存在则更新值，如果不存在则在链表或树中添加新节点。</li>
<li>如果链表变得太长：当链表的长度达到一定阈值（默认为8），<code>HashMap</code>会将链表转化为红黑树，以提高查找效率。</li>
</ol>
<p><strong>2. <code>get()</code>方法过程：</strong></p>
<p>当你调用<code>get(key)</code>方法来获取值时，以下步骤会发生：</p>
<ol>
<li>计算键的哈希值：与<code>put()</code>方法相同，先计算键的哈希值。</li>
<li>根据哈希值找到存储位置：根据哈希值找到对应的桶或索引位置。</li>
<li>遍历链表或树：如果该桶中存在多个键值对，<code>HashMap</code>会遍历链表或红黑树来查找具有相同键的节点，然后返回相应的值。</li>
</ol>
<p>总的来说，<code>HashMap</code>通过哈希值计算和桶的索引来实现快速的键值对查找。然而，当哈希冲突发生时，链表或红黑树的遍历会导致性能下降，因此，一个好的哈希函数和适当的装载因子（load factor）对于<code>HashMap</code>的性能非常重要。在实际应用中，你可以使用默认的哈希函数，也可以根据业务需求自定义哈希函数。</p>
<h2> 为什么HashMap要用红黑树，为什么不用二叉平衡树</h2>
<ol>
<li><strong>性能平衡：</strong> 红黑树和AVL树都是自平衡的二叉搜索树，但是红黑树相对于AVL树来说，在插入和删除操作时对树的旋转操作较少，因此性能上更加平衡。AVL树的平衡要求更严格，可能会导致更频繁的旋转操作，影响性能。</li>
<li><strong>实现复杂性：</strong> 红黑树相对于AVL树来说，实现起来相对简单。红黑树的平衡性要求比AVL树稍微宽松，这使得红黑树在实现时更加容易，也更适合应用于高频的插入和删除操作，如<code>HashMap</code>中的情况。</li>
<li><strong>内存占用：</strong> 红黑树相对于AVL树来说，在保持相对平衡的前提下，高度可能会稍微更高一些，但这可能会带来更少的旋转操作，从而降低了内存占用和维护的成本。</li>
</ol>
<p>总的来说，红黑树在实际应用中更适合作为一种自平衡的二叉搜索树结构。它在插入和删除操作时能够保持较好的性能，并且相对简单的实现使得它成为<code>HashMap</code>中处理哈希冲突的良好选择。</p>
<h2> 如果一个ConcurrentHashMap在被多个线程操作，在进行扩容操作时会有几个线程在处理</h2>
<p>在Java的<code>ConcurrentHashMap</code>中，扩容操作不会阻塞所有线程。<code>ConcurrentHashMap</code>使用一种分段锁（Segment-Level Concurrency）的策略来实现高度的并发性，每个分段都维护自己的哈希表，当需要扩容时，只会对其中的一个分段进行扩容，而不是锁住整个哈希表。这使得多个线程可以同时在不同的分段上执行操作，从而减少了扩容时的竞争。</p>
<p>在进行扩容操作时，通常只有一个线程会负责对一个分段进行扩容，其他线程可以继续操作其他分段。因此，扩容操作通常不会对整个<code>ConcurrentHashMap</code>的性能产生严重影响。</p>
<p>需要注意的是，虽然<code>ConcurrentHashMap</code>的设计使得它能够在高度并发的情况下提供较好的性能，但具体的表现还是受到各种因素的影响，包括分段数、并发访问模式、哈希冲突等。在某些情况下，扩容操作可能会引起一些额外的开销，所以在使用<code>ConcurrentHashMap</code>时，需要根据实际情况进行性能测试和调优。</p>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="java"/>
    <category term="注解与反射"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-01-11T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Java并发常见问题</title>
    <id>https://gzwrrr.github.io/article/java/C-Java%E5%B9%B6%E5%8F%91/Z-Java%E5%B9%B6%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html</id>
    <link href="https://gzwrrr.github.io/article/java/C-Java%E5%B9%B6%E5%8F%91/Z-Java%E5%B9%B6%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Java 并发常见问题</h1>

<p>这里简略回答，详细自行查找</p>
<h2> 创建线程池的方式</h2>
<ol>
<li>继承 <code>Thread</code> 类</li>
<li>实现 <code>Runnable</code> 接口</li>
<li>实现 <code>Callable&lt;T&gt;</code> 接口，配合 <code>FutureTask&lt;V&gt;</code> 类</li>
<li>线程池创建</li>
</ol>
<h2> 为什么不建议使用 Executors 创建线程池？</h2>
<p>底层使用 <code>ThreadPoolExecutor</code> 创建，其中 <code>LinkedBlockingQueue&lt;Runnable&gt;()</code> 是一个<mark>无界阻塞队列</mark>，任务过多时会不断将任务添加到队列中，最终可能耗尽内存，<mark>导致 OOM</mark></p>]]></summary>
    <content type="html"><![CDATA[<h1> Java 并发常见问题</h1>

<p>这里简略回答，详细自行查找</p>
<h2> 创建线程池的方式</h2>
<ol>
<li>继承 <code>Thread</code> 类</li>
<li>实现 <code>Runnable</code> 接口</li>
<li>实现 <code>Callable&lt;T&gt;</code> 接口，配合 <code>FutureTask&lt;V&gt;</code> 类</li>
<li>线程池创建</li>
</ol>
<h2> 为什么不建议使用 Executors 创建线程池？</h2>
<p>底层使用 <code>ThreadPoolExecutor</code> 创建，其中 <code>LinkedBlockingQueue&lt;Runnable&gt;()</code> 是一个<mark>无界阻塞队列</mark>，任务过多时会不断将任务添加到队列中，最终可能耗尽内存，<mark>导致 OOM</mark></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样地，使用其他的例如 <code>Executors.newSingleThreadExecutor</code>，也会有相同问题</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际生产中更建议直接使用 <code>ThreadPoolExecutor</code> 定义线程池，这样可以更加灵活地控制</p>
<h2> 线程池的状态</h2>
<ol>
<li>RUNNING</li>
<li>SHUTDOWN</li>
<li>STOP</li>
<li>TIDYING</li>
<li>TERMINATED</li>
</ol>
<h2> Sychronized 和 ReentrantLock 的不同点</h2>
<div class="table-wrapper "><table>
<thead>
<tr>
<th>Sychronized</th>
<th>ReentrantLock</th>
</tr>
</thead>
<tbody>
<tr>
<td>Java 中的关键字</td>
<td>JDK 提供的类</td>
</tr>
<tr>
<td>自动加锁和自动释放锁</td>
<td>需要手动加锁和手动释放锁</td>
</tr>
<tr>
<td>JVM 层面的锁</td>
<td>API 层面的锁</td>
</tr>
<tr>
<td>非公平锁</td>
<td>公平锁或非公平锁</td>
</tr>
<tr>
<td>锁的是对象，锁信息保存在对象头中</td>
<td>int 类型的 state 标识来标识锁的状态</td>
</tr>
<tr>
<td>底层有锁升级</td>
<td>没有锁升级过程</td>
</tr>
</tbody>
</table>
</div><h2> ThreadLocal 有哪些应用场景？底层如何实现？</h2>
<p>Java 中提供的<mark>线程本地存储机制</mark>，可以利用该机制<mark>将数据缓存在某个线程内部</mark>，该线程可以在任意时刻、任意方法中获取缓存的数据</p>
<p>底层是通过 <code>ThreadLocalMap</code> 实现的，key 为 <code>ThreadLocal</code> 对象，value 是需要缓存的值：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是注意：如果在线程池中使用  <code>ThreadLocal</code>  会造成内存泄露，因为线程池不会回收  <code>ThreadLocal</code>  对象的 <code>Entry</code> 对象。并且线程对象是通过强引用指向 <code>ThreadLocalMap</code> 的，而 <code>ThreadLocalMap</code>  是通过强引用指向  <code>Entry</code> 对象的，这样只要线程不被回收， <code>Entry</code> 对象就不会被回收，从而导致<mark>内存泄露</mark></p>
<p>解决方案：使用了 <code>ThreadLocal</code> 对象后手动调用 <code>remove()</code> 方法，手动清除 <code>Entry</code> 对象</p>
<p><code>ThreadLocal</code>  经典的应用场景就是 <strong>连接管理</strong>，即一个线程持有一个连接，该连接对象可以在不同的方法之间进行 <strong>传递</strong>，而线程之间不共享同一个连接</p>
<h2> ReentrantLock 分为公平锁和非公平锁，底层分别怎么实现？</h2>
<p>两种的底层<mark>都是使用 AQS 进行排队</mark>，区别在于线程加锁时：</p>
<ol>
<li>如果是公平锁，会先检查 AQS 队列是否存在线程在排队，如果有线程在排队，那么当前线程也排队</li>
<li>如果是非公平锁，不会检查是否排队，而是会直接竞争锁</li>
</ol>
<p>所以，两种锁一旦没有竞争到锁，都会进行排队，当锁释放时，都是唤醒排在最前面的锁</p>
<p>非公平锁知识体现在了线程加锁阶段，而没有体现在线程唤醒阶段</p>
<p><strong>注意：ReentrantLock 是可重入锁，不管是公平锁还是非公平锁都是可重入的</strong></p>
<h2> Reentrantlock 中的 tryLock 和 lock 方法的区别</h2>
<ol>
<li><code>tryLock()</code> 表示尝试加锁，可以加上锁也可能加不上，<strong>该方法不会阻塞线程</strong>，如果获取到锁就返回 <code>true</code>，否则返回 <code>false</code></li>
<li><code>lock()</code> 表示 <strong>阻塞加锁</strong>，线程会阻塞直到加上锁，该方法没有返回值</li>
</ol>
<h2> Sychronized 的锁升级过程</h2>
<ol>
<li>偏向锁：锁对象的对象头中获取线程 ID，该线程下次如果又来获取该锁就可以直接获取到，也就是支持锁重入</li>
<li>轻量级锁：当一个线程获取到锁后，先是称为偏向锁，如果有第二个线程来竞争，就升级成轻量级锁，底层是由自旋来实现的，<strong>不会阻塞线程</strong></li>
<li>重量级锁：如果自旋次数过多还没有获取锁，则会升级成重量级锁，重量级锁会导致线程阻塞</li>
</ol>
<p>自旋锁通过自旋不阻塞线程，也就无所谓唤醒线程。自旋锁是线程通过 CAS 获取预取的标记，如果没有获取到就会循环获取，因此线程是在一直运行着的，但是相对阻塞来说还是比较轻量的</p>
<p>阻塞和唤醒这两个步骤都是需要 <strong>操纵系统</strong> 进行操作的，比较消耗时间</p>
<h2> 说说对线程安全的理解</h2>
<p>线程安全一般是指我们写的某段代码，在多个线程同时执行的情况下也能有正常的结果，即不会混乱</p>
<p>比如执行 <code>i++</code> ，初始值为 0，如果线程安全那么线程一和线程二同时执行后结果应当是，一个线程为 <code>i=1</code>；另一个 <code>i=2</code>，如果不是这样的结果说明线程不安全</p>
<h2> 说说对守护线程的理解</h2>
<ul>
<li>线程分为 <strong>用户线程</strong> 和 <strong>守护线程</strong></li>
<li>用户线程就是普通线程；守护线程就是 JVM 的后台线程</li>
<li>比如垃圾回收线程就是一个守护线程，守护线程会在其他普通线程都停止运行之后自动关闭</li>
<li>可以通过 <code>thread.setDaemon(true)</code> 来把一个线程设置成守护线程</li>
</ul>
<h2> 并发、并行、串行之间的区别</h2>
<ol>
<li>串行：一个任务执行完才能执行下一个任务</li>
<li>并行：两个任何同时执行</li>
<li>并发：两个任务整体开上去是同时执行的，但是在底层是被切分成了很多份，然后在不同的时间片执行不同的部分，这样处理起来在整体上就像同时发生的</li>
</ol>
<h2> Java 死锁如何避免</h2>
<p><strong>造成死锁的几个原因：</strong></p>
<ol>
<li>一个资源每次只能被一个线程使用</li>
<li>一个线程在阻塞等待某个资源时，不是放已经占有的资源</li>
<li>一个线程已经获取了资源，在未使用完之前不能被强行剥夺</li>
<li>若干线程形成头尾相接的循环等待资源关系</li>
</ol>
<p>前三个条件是 <strong>锁必须满足的条件</strong>，要避免死锁就要打破第 4 个条件，即不出现循环等待的情况</p>
<p><strong>具体开发中就是：</strong></p>
<ol>
<li>要注意加锁顺序：保证每个线程按同样的顺序加锁</li>
<li>要注意加锁时限：可以针对锁设置一个 <strong>超时时间</strong></li>
<li>要注意死锁检查：这是一种预防机制，确保在第一时间发现死锁并解决</li>
</ol>
<h2> 线程池的底层工作原理</h2>
<p>当线程池中的核心线程都在忙时，如果继续往线程池中添加任务，那么这个任务就放入队列，队列满了之后，才会新开线程</p>
<p>线程池内部时通过「队列」+「线程」实现的，当利用线程池执行任务时：</p>
<ol>
<li>线程数量小于 <code>corePoolSize</code> 时，即使线程池中的线程都处于空闲状态，也要创建新的线程来处理被添加的任务</li>
<li>线程数量等于 <code>corePoolSize</code> 时，如果缓冲队列 <code>workQueue</code> 未满，那么任务会被放进缓冲队列</li>
<li>线程数量大于 <code>corePoolSize</code> 时，如果缓冲队列 <code>workQueue</code> 已满，并且线程池中的数量小于 <code>maximunPoolSize</code>，那么就建立新的线程来处理此任务</li>
<li>线程数量大于 <code>corePoolSize</code> 时，如果缓冲队列 <code>workQueue</code> 已满，并且线程池中的数量等于 <code>maximunPoolSize</code>，那么通过 <code>handler</code> 所指定的策略来处理此任务</li>
<li>线程数量大于 <code>corePoolSize</code> 时，如果某线程空闲时间超过 <code>keepAliveTime</code>，线程将被终止。这样，线程池可以动态动态地调整池中的线程数</li>
</ol>
<h2> CountDownLatch 和 Semaphore 的区别和底层原理</h2>
<p><code>CountDownLatch</code>和<code>Semaphore</code>都是Java中用于控制线程同步的工具类，它们的作用都是控制并发线程的数量，但是它们的实现方式和应用场景有所不同。</p>
<h3> CountDownLatch</h3>
<p><code>CountDownLatch</code>是一个计数器，它的作用是让一个或多个线程等待一个或多个线程完成操作，然后再继续执行。它的实现原理是一个线程等待多个线程的信号，当多个线程完成某项任务时，计数器减1，当计数器减为0时，等待的线程就可以继续执行了。</p>
<p>下面是一个简单的<code>CountDownLatch</code>示例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，创建了5个线程模拟耗时操作，等待所有线程执行完成之后输出“所有线程执行完成”。</p>
<h3> Semaphore</h3>
<p><code>Semaphore</code>是一个信号量，它的作用是控制同时访问某个资源的线程数量。例如，一个数据库连接池可以使用<code>Semaphore</code>来限制访问数据库的线程数量。</p>
<p><code>Semaphore</code>的实现原理是，它维护了一个许可证的数量，线程需要获取许可证才能访问资源。当线程访问资源完成之后，需要释放许可证，许可证数量加1。</p>
<p>下面是一个简单的<code>Semaphore</code>示例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，创建了10个线程，但是<code>Semaphore</code>的许可证数量只有5个。因此，只有5个线程能够获取到许可证并执行操作，其它线程需要等待许可证被释放之后才能</p>
<h2> 其他</h2>
<ol>
<li><a href="https://www.geeksforgeeks.org/future-and-futuretask-in-java/" target="_blank" rel="noopener noreferrer">Future and FutureTask</a></li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="java"/>
    <category term="并发"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-07T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">MySQL 优化</title>
    <id>https://gzwrrr.github.io/article/mysql/%E4%BC%98%E5%8C%96/SQL%E4%BC%98%E5%8C%96.html</id>
    <link href="https://gzwrrr.github.io/article/mysql/%E4%BC%98%E5%8C%96/SQL%E4%BC%98%E5%8C%96.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> MySQL 本身的优化</h1>

<ul>
<li>MySQL 内核优化</li>
<li>SQL 优化</li>
<li>MySQL 服务器配置优化</li>
<li>参数常量设置优化</li>
<li>主从复制</li>
<li>容灾备份</li>
</ul>
<h2> 慢 SQL 优化</h2>
<ol>
<li>检查是否走索引</li>
<li>检查是否是最优索引</li>
<li>检查所查的字段是否都是必须查询的</li>
<li>检查表中的数据是否过多，过多应该进行分库分表</li>
<li>检查数据库实例所在及其的性能配置</li>
</ol>
]]></summary>
    <content type="html"><![CDATA[<h1> MySQL 本身的优化</h1>

<ul>
<li>MySQL 内核优化</li>
<li>SQL 优化</li>
<li>MySQL 服务器配置优化</li>
<li>参数常量设置优化</li>
<li>主从复制</li>
<li>容灾备份</li>
</ul>
<h2> 慢 SQL 优化</h2>
<ol>
<li>检查是否走索引</li>
<li>检查是否是最优索引</li>
<li>检查所查的字段是否都是必须查询的</li>
<li>检查表中的数据是否过多，过多应该进行分库分表</li>
<li>检查数据库实例所在及其的性能配置</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="数据库"/>
    <category term="优化"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-12-22T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">脏读/不可重复读/幻读</title>
    <id>https://gzwrrr.github.io/article/mysql/%E9%80%9A%E7%94%A8/%E8%84%8F%E8%AF%BB-%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB-%E5%B9%BB%E8%AF%BB.html</id>
    <link href="https://gzwrrr.github.io/article/mysql/%E9%80%9A%E7%94%A8/%E8%84%8F%E8%AF%BB-%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB-%E5%B9%BB%E8%AF%BB.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 脏读/不可重复读/幻读</h1>

<div class="table-wrapper "><table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读可能性</th>
<th>不能重复读可能性</th>
<th>幻读可能性</th>
<th>加锁读</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ UNCOMMITTED</td>
<td>是</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>READ COMMITTED</td>
<td>否</td>
<td>是</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>REPEATABLE READ</td>
<td>否</td>
<td>否</td>
<td>是（innodb 除外）</td>
<td>否</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>否</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody>
</table>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 脏读/不可重复读/幻读</h1>

<div class="table-wrapper "><table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读可能性</th>
<th>不能重复读可能性</th>
<th>幻读可能性</th>
<th>加锁读</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ UNCOMMITTED</td>
<td>是</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>READ COMMITTED</td>
<td>否</td>
<td>是</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>REPEATABLE READ</td>
<td>否</td>
<td>否</td>
<td>是（innodb 除外）</td>
<td>否</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>否</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody>
</table>
</div><ul>
<li>
<p>脏读：</p>
<ul>
<li>事务读取到其他事务没提交的数据（针对某个字段）</li>
</ul>
</li>
<li>
<p>不可重复读：</p>
<ul>
<li>指同一次事务中前后查询不一致的问题（针对某个字段）</li>
<li>即在并发更新时，另一个事务前后查询相同数据时不符合预期</li>
</ul>
</li>
<li>
<p>幻读：</p>
<ul>
<li>一次事务中前后数据量发生变化（针对某几行数据）</li>
<li>即在并发新增、删除这种会产生数量变化的操作时，另一个事务亲啊后查询相同数据时不符合预期</li>
</ul>
</li>
</ul>
<p><strong>PR 级别解决幻读问题：</strong></p>
<p>MySQL 5.1 以上默认使用 innodb，事务隔离级别为可重复读（REPEATABLE READ），但是由于 MVCC（Multi-Version Concurrency Control，多版本并发控制方案），这里的可重复读也可以解决幻读的问题；MVCC 核心为 UNDO_LOG 版本链和 ReadView 快照读（见下文的补充）</p>
<ul>
<li>
<p>UNDO_LOG 版本链使用链表的形式维护数据的历史版本，用于回滚，MySQL 在确保版本链数据不在被引用后才将其删除</p>
</li>
<li>
<p>ReadView 快照读是 SQL 执行时 MVCC 提取数据的依据；</p>
</li>
<li>
<p>【快照读】就是最普通的 Select 查询的 SQL 语句：【当前读】指代写操作对应的 SQL 语句，这时会加上写锁；只有【快照读】才会使用 MVCC，【当前读】会使用行锁与间隙锁</p>
</li>
<li>
<p>当使用 MVCC 时会访问 UNDO_LOG，根据 ReadView 中的数据与访问规则查找 UNDO_LOG 中的数据</p>
</li>
<li>
<p>但是其实 PR 级别下使用 MVCC 不能完全保证消除幻读</p>
<ul>
<li>当连续产生多次快照时，ReadView 会产生复用，没有幻读的问题</li>
<li>当两次快照之间存在【当前读】，ReadView 会重新生成，此时可能产生幻读</li>
</ul>
</li>
</ul>
<h1> 补充</h1>
<p>**MVCC：**就是为了尽可能不加锁实现 <strong>读-写分离</strong>，读指快照读（非当前读，当前读要悲观加锁），当然这样读到的数据可能不是最新的，并且不能解决更新丢失问题<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup><a class="footnote-anchor" id="footnote-ref1">（第一类更新丢失和第二类更新丢失）</a></p><a class="footnote-anchor" id="footnote-ref1">
<ul>
<li><strong>MVCC + 悲观锁</strong> MVCC解决读写冲突，悲观锁解决写写冲突</li>
<li><strong>MVCC + 乐观锁</strong> MVCC解决读写冲突，乐观锁解决写写冲突</li>
</ul>
<p><strong>UNDO_LOG 版本链的节点的数据结构包含四个字段：</strong></p>
<ul>
<li>id：标识</li>
<li>字段名：当前数据对应的字段名</li>
<li>trx_id：对应 ReadView 中的 trx_id</li>
<li>db_roll_ptr： next 指针</li>
</ul>
<p><strong>ReadView 的数据结构包含四个字段：</strong></p>
<ul>
<li>
<p>m_ids：当前活跃的事务编号集合，即还没有被提交的事务</p>
</li>
<li>
<p>min_trx_id：最小活跃事务编号</p>
</li>
<li>
<p>max_trx_id：预分配事务编号，当前最大事务编号 + 1</p>
</li>
<li>
<p>creator_trx_id： ReadView 创建者的事务编号</p>
</li>
</ul>
<p><strong>UNDO_LOG 版本链的访问规则：</strong></p>
<ul>
<li>当前事务 trx_id 等于 creator_trx_id 时，说明这个数据是自己修改的，可以访问</li>
<li>当 trx_id 小于 min_trx_id 时，说明数据已经提交，可以访问</li>
<li>当 trx_id 大于 max_trx_id时，说明该事务是 ReadView 生成之后才开启的，不允许访问</li>
<li>当 min_trx_id &lt;=  trx_id &lt;= max_trx_id 时，与 m_ids 中的事务比对，当 trx_id 不在m_ids 中时说明 trx_id 对应的已经提交，可以访问</li>
</ul>
<br>
<br>
<br>
<hr class="footnotes-sep">
</a><section class="footnotes"><a class="footnote-anchor" id="footnote-ref1">
</a><ol class="footnotes-list"><a class="footnote-anchor" id="footnote-ref1">
</a><li id="footnote1" class="footnote-item"><a class="footnote-anchor" id="footnote-ref1"></a><p><a class="footnote-anchor" id="footnote-ref1"></a><a href="https://blog.csdn.net/paopaopotter/article/details/79259686" target="_blank" rel="noopener noreferrer">第一、二类更新丢失相关文章</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="数据库"/>
    <category term="小知识点"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-08-07T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Coding 常用链接</title>
    <id>https://gzwrrr.github.io/article/other/A-%E5%AF%BC%E8%88%AA%E9%93%BE%E6%8E%A5/Coding%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5.html</id>
    <link href="https://gzwrrr.github.io/article/other/A-%E5%AF%BC%E8%88%AA%E9%93%BE%E6%8E%A5/Coding%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Coding 常用链接</h1>

<h1> 学习路线</h1>
<ul>
<li><a href="https://pdai.tech/" target="_blank" rel="noopener noreferrer">全栈学习路线参考-1</a></li>
</ul>
<br>
<hr>
<br>  
<h1> 论坛/资源</h1>
<ul>
<li><a href="https://wx.zsxq.com/dweb2/index/group/51122858222824" target="_blank" rel="noopener noreferrer">知识星球</a></li>
<li><a href="https://yupi.icu/" target="_blank" rel="noopener noreferrer">编程导航知识星球</a></li>
<li><a href="https://www.mianshiya.com/" target="_blank" rel="noopener noreferrer">面试鸭</a></li>
<li><a href="https://www.code-nav.cn/" target="_blank" rel="noopener noreferrer">编程导航</a></li>
<li><a href="https://bcdh.yuque.com/books/share/2dd2567c-a826-4d9d-9303-bd288269e874/tflvr3" target="_blank" rel="noopener noreferrer">学习指南</a></li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h1> Coding 常用链接</h1>

<h1> 学习路线</h1>
<ul>
<li><a href="https://pdai.tech/" target="_blank" rel="noopener noreferrer">全栈学习路线参考-1</a></li>
</ul>
<br>
<hr>
<br>  
<h1> 论坛/资源</h1>
<ul>
<li><a href="https://wx.zsxq.com/dweb2/index/group/51122858222824" target="_blank" rel="noopener noreferrer">知识星球</a></li>
<li><a href="https://yupi.icu/" target="_blank" rel="noopener noreferrer">编程导航知识星球</a></li>
<li><a href="https://www.mianshiya.com/" target="_blank" rel="noopener noreferrer">面试鸭</a></li>
<li><a href="https://www.code-nav.cn/" target="_blank" rel="noopener noreferrer">编程导航</a></li>
<li><a href="https://bcdh.yuque.com/books/share/2dd2567c-a826-4d9d-9303-bd288269e874/tflvr3" target="_blank" rel="noopener noreferrer">学习指南</a></li>
</ul>
<br>
<hr>
<br>  
<h1> Java知识点整理</h1>
<ul>
<li><a href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noopener noreferrer">cs-notes</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/157728866" target="_blank" rel="noopener noreferrer">知识点整理-1</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%9F%BA%E7%A1%80.md" target="_blank" rel="noopener noreferrer">Java 基础 - cs-notes</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%AE%B9%E5%99%A8.md" target="_blank" rel="noopener noreferrer">Java 容器 - cs-notes</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md" target="_blank" rel="noopener noreferrer">Java 并发 - cs-notes</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md" target="_blank" rel="noopener noreferrer">Java 虚拟机 - cs-notes</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20IO.md" target="_blank" rel="noopener noreferrer">Java IO - cs-notes</a></li>
</ul>
<br>
<hr>
<br>  
<h1> 视频教程</h1>
<ul>
<li><a href="https://www.bilibili.com/video/BV1QF411Y7GY/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">八股文 -- 马士兵</a></li>
<li><a href="https://www.bilibili.com/video/BV16J411h7Rd?p=247&amp;spm_id_from=pageDriver&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Java 并发编程</a></li>
<li><a href="https://www.bilibili.com/video/BV1PJ411n7xZ?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Java 虚拟机</a></li>
<li><a href="https://www.bilibili.com/video/BV1E4411H73v?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Java 数据结构与算法</a></li>
<li><a href="https://www.bilibili.com/video/BV1G4411c7N4?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Java 23 种设计模式</a></li>
<li><a href="https://www.bilibili.com/video/BV1iq4y1u7vj?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">MySQL</a></li>
<li><a href="https://www.bilibili.com/video/BV1N741177F5?p=2&amp;spm_id_from=pageDriver&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">操作系统</a></li>
<li><a href="https://www.bilibili.com/video/BV1zW411t7YE?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">编译原理</a></li>
<li><a href="https://www.bilibili.com/video/BV1dp4y1Q7Hf?spm_id_from=333.999.0.0&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Maven</a></li>
<li><a href="https://www.bilibili.com/video/BV1Rv41177Af?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Redis</a></li>
<li><a href="https://www.bilibili.com/video/BV1cb4y1o7zz?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">RabbitMQ</a></li>
<li><a href="https://www.bilibili.com/video/BV19t41127de?p=2&amp;spm_id_from=pageDriver&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Quartz</a></li>
<li><a href="https://www.bilibili.com/video/BV18E411x7eT?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Spring Cloud Alibaba</a></li>
<li><a href="https://www.bilibili.com/video/BV1KW411u7vy?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">尚硅谷 MySQL 优化</a></li>
<li><a href="https://www.bilibili.com/video/BV18s411E78K?p=3&amp;spm_id_from=pageDriver&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">尚硅谷 Mongodb</a></li>
<li><a href="https://www.bilibili.com/video/BV1DJ411m7NR/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">尚硅谷 Netty</a></li>
<li><a href="https://www.bilibili.com/video/BV1gz4y1C7RK/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">黑马 IO</a></li>
<li><a href="https://www.bilibili.com/video/BV1ZJ411s7Mn/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">黑马 SkyWalking</a></li>
<li><a href="https://www.bilibili.com/video/BV1DJ411m7NR/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">尚硅谷 Netty</a></li>
<li><a href="https://www.bilibili.com/video/BV13Q4y1C7hS?p=31&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">K8S</a></li>
</ul>
<br>
<hr>
<br>  
<h1> 通用知识</h1>
<ul>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20-%20%E7%9B%AE%E5%BD%95.md" target="_blank" rel="noopener noreferrer">操作系统概述 - cs-notes</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20-%20%E7%9B%AE%E5%BD%95.md" target="_blank" rel="noopener noreferrer">计算机网络概述 - cs-notes</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.md" target="_blank" rel="noopener noreferrer">数据库系统原理概述 - cs-notes</a></li>
</ul>
<br>
<hr>
<br>  
<h1> 在线文档</h1>
<ul>
<li><a href="https://blog.algomooc.com/" target="_blank" rel="noopener noreferrer">剑指 offer 动画讲解</a></li>
</ul>
<br>
<hr>
<br>  
<h1> 算题网站</h1>
<ul>
<li><a href="https://www.nowcoder.com/exam/oj/ta?page=1&amp;tpId=13&amp;type=13" target="_blank" rel="noopener noreferrer">牛客-剑指 offer</a></li>
<li><a href="https://leetcode-cn.com/problem-list/xb9nqhhg/" target="_blank" rel="noopener noreferrer">Leetcode-剑指 offer</a></li>
</ul>
<br>
<hr>
<br>  
<h1> 算法题解</h1>
<ul>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.md" target="_blank" rel="noopener noreferrer">Leetcode-题解 - cs-notes</a></li>
<li><a href="https://space.bilibili.com/479038960/article" target="_blank" rel="noopener noreferrer">B 站专栏</a></li>
</ul>
<br>
<hr>
<br>  
<h1> 前端</h1>
<ul>
<li><a href="https://www.bilibili.com/video/BV1934y1a7MN/?spm_id_from=pageDriver&amp;vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">Vue 数据双向绑定实现</a></li>
</ul>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="链接"/>
    <category term="导航"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">八股汇总</title>
    <id>https://gzwrrr.github.io/article/other/A-%E5%AF%BC%E8%88%AA%E9%93%BE%E6%8E%A5/%E5%85%AB%E8%82%A1%E6%B1%87%E6%80%BB.html</id>
    <link href="https://gzwrrr.github.io/article/other/A-%E5%AF%BC%E8%88%AA%E9%93%BE%E6%8E%A5/%E5%85%AB%E8%82%A1%E6%B1%87%E6%80%BB.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 八股汇总</h1>
<h2> 站外资源</h2>
<h3> Java</h3>
<ol>
<li><a href="https://javaguide.cn/interview-preparation/teach-you-how-to-prepare-for-the-interview-hand-in-hand.html" target="_blank" rel="noopener noreferrer">JavaGuide</a></li>
<li><a href="https://www.pdai.tech/md/outline/x-outline.html" target="_blank" rel="noopener noreferrer">Java全栈知识体系</a></li>
<li><a href="https://r2coding.com/#/README?id=%e9%9d%a2%e8%af%95%e9%a2%98%e9%9b%86%e5%90%88" target="_blank" rel="noopener noreferrer">CodeSheep</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noopener noreferrer">CSNotes</a></li>
<li><a href="https://github.com/doocs/advanced-java" target="_blank" rel="noopener noreferrer">底层实现（进阶1）</a>、<a href="https://github.com/doocs/source-code-hunter" target="_blank" rel="noopener noreferrer">底层实现（进阶2）</a></li>
<li><a href="https://www.iocoder.cn/Spring-Boot/quick-start/?github" target="_blank" rel="noopener noreferrer">芋道源码</a></li>
<li><a href="https://github.com/iluwatar/java-design-patterns" target="_blank" rel="noopener noreferrer">设计模式</a></li>
<li><a href="https://github.com/0voice/interview_internal_reference" target="_blank" rel="noopener noreferrer">大厂面试</a></li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> 八股汇总</h1>
<h2> 站外资源</h2>
<h3> Java</h3>
<ol>
<li><a href="https://javaguide.cn/interview-preparation/teach-you-how-to-prepare-for-the-interview-hand-in-hand.html" target="_blank" rel="noopener noreferrer">JavaGuide</a></li>
<li><a href="https://www.pdai.tech/md/outline/x-outline.html" target="_blank" rel="noopener noreferrer">Java全栈知识体系</a></li>
<li><a href="https://r2coding.com/#/README?id=%e9%9d%a2%e8%af%95%e9%a2%98%e9%9b%86%e5%90%88" target="_blank" rel="noopener noreferrer">CodeSheep</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noopener noreferrer">CSNotes</a></li>
<li><a href="https://github.com/doocs/advanced-java" target="_blank" rel="noopener noreferrer">底层实现（进阶1）</a>、<a href="https://github.com/doocs/source-code-hunter" target="_blank" rel="noopener noreferrer">底层实现（进阶2）</a></li>
<li><a href="https://www.iocoder.cn/Spring-Boot/quick-start/?github" target="_blank" rel="noopener noreferrer">芋道源码</a></li>
<li><a href="https://github.com/iluwatar/java-design-patterns" target="_blank" rel="noopener noreferrer">设计模式</a></li>
<li><a href="https://github.com/0voice/interview_internal_reference" target="_blank" rel="noopener noreferrer">大厂面试</a></li>
</ol>
<h2> 站内资源</h2>
<ol>
<li><a href="/article/java/A-Java%E5%9F%BA%E7%A1%80/Z-Java%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html" target="blank">Java 基础常见问题</a></li>
<li><a href="/article/java/C-Java%E5%B9%B6%E5%8F%91/Z-Java%E5%B9%B6%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html" target="blank">Java 并发常见问题</a></li>
<li><a href="/article/java/D-Jvm/Z-JVM%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html" target="blank">JVM 常见问题</a></li>
<li><a href="/article/mybatis/Mybaits%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html" target="blank">Mybatis 常见问题</a></li>
<li><a href="/article/springs/A-Spring/Z-Spring%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html" target="blank">Spring 常见问题</a></li>
<li><a href="/article/springs/B-SrpingBoot/Z-SpringBoot%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html" target="blank">Spring Boot 常见问题</a></li>
<li><a href="/article/redis/Z-Redis%E5%85%B6%E4%BB%96.html" target="blank">Redis 常见问题</a></li>
<li><a href="/article/rabbitmq/Z-RabbitMQ%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html" target="blank">RabbitMQ 常见问题</a></li>
</ol>
<h2> 其他</h2>
<ol>
<li><a href="https://www.nowcoder.com/" target="_blank" rel="noopener noreferrer">牛客网</a></li>
<li><a href="https://www.jobui.com/" target="_blank" rel="noopener noreferrer">职友集</a></li>
<li><a href="https://www.zhipin.com/xiamen/" target="_blank" rel="noopener noreferrer">BOSS 直聘</a></li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="链接"/>
    <category term="导航"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">环境配置链接</title>
    <id>https://gzwrrr.github.io/article/other/A-%E5%AF%BC%E8%88%AA%E9%93%BE%E6%8E%A5/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E9%93%BE%E6%8E%A5.html</id>
    <link href="https://gzwrrr.github.io/article/other/A-%E5%AF%BC%E8%88%AA%E9%93%BE%E6%8E%A5/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E9%93%BE%E6%8E%A5.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 环境配置链接</h1>

<h2> Docker</h2>
<ul>
<li><a href="https://www.cnblogs.com/qingyunzong/p/9011006.html#:~:text=CentOS7%20%E5%AE%89%E8%A3%85Docker%201%20%E4%B8%80%E3%80%81%E6%A3%80%E6%9F%A5%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8%202%20%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85Docker%203%20%E4%B8%89%E3%80%81%E5%BB%BA%E7%AB%8Bdocker%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84,4%20%E5%9B%9B%E3%80%81%E5%AE%89%E8%A3%85centos%E9%95%9C%E5%83%8F....%205%20%E4%BA%94%E3%80%81%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8%206%20%E4%B8%83%E3%80%81%E4%B8%8A%E4%BC%A0%E8%BD%AF%E4%BB%B6%E5%88%B0%E5%AE%B9%E5%99%A8%E9%87%8C%E9%9D%A2%207%20%E5%85%AB%E3%80%81%E4%BF%9D%E5%AD%98%E9%95%9C%E5%83%8F" target="_blank" rel="noopener noreferrer">Centos7 安装 Docker -- 博客园用户： 扎心了，老铁 -- https://www.cnblogs.com/qingyunzong/</a></li>
<li><a href="https://www.cnblogs.com/hong01072/p/14078268.html#:~:text=%E5%9C%A8%E8%BF%90%E8%A1%8Cdocker%E5%AE%B9%E5%99%A8%E6%97%B6%E5%8F%AF%E4%BB%A5%E5%8A%A0%E5%A6%82%E4%B8%8B%E5%8F%82%E6%95%B0%E6%9D%A5%E4%BF%9D%E8%AF%81%E6%AF%8F%E6%AC%A1docker%E6%9C%8D%E5%8A%A1%E9%87%8D%E5%90%AF%E5%90%8E%E5%AE%B9%E5%99%A8%E4%B9%9F%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF%EF%BC%9A%20docker,run%20--restart%3Dalways%20%E5%A6%82%E6%9E%9C%E5%B7%B2%E7%BB%8F%E5%90%AF%E5%8A%A8%E4%BA%86%E5%88%99%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E5%A6%82%E4%B8%8B%E5%91%BD%E4%BB%A4%EF%BC%9A" target="_blank" rel="noopener noreferrer">Docker 容器自动重启 -- 博客园用户：QAQhong -- https://www.cnblogs.com/hong01072/</a></li>
<li><a href="https://blog.csdn.net/qq_27520051/article/details/91478732" target="_blank" rel="noopener noreferrer">Docker 网络故障修复 -- CSDN 用户：愤怒的小猿猿 -- https://blog.csdn.net/qq_27520051?type=blog</a></li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h1> 环境配置链接</h1>

<h2> Docker</h2>
<ul>
<li><a href="https://www.cnblogs.com/qingyunzong/p/9011006.html#:~:text=CentOS7%20%E5%AE%89%E8%A3%85Docker%201%20%E4%B8%80%E3%80%81%E6%A3%80%E6%9F%A5%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8%202%20%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85Docker%203%20%E4%B8%89%E3%80%81%E5%BB%BA%E7%AB%8Bdocker%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84,4%20%E5%9B%9B%E3%80%81%E5%AE%89%E8%A3%85centos%E9%95%9C%E5%83%8F....%205%20%E4%BA%94%E3%80%81%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8%206%20%E4%B8%83%E3%80%81%E4%B8%8A%E4%BC%A0%E8%BD%AF%E4%BB%B6%E5%88%B0%E5%AE%B9%E5%99%A8%E9%87%8C%E9%9D%A2%207%20%E5%85%AB%E3%80%81%E4%BF%9D%E5%AD%98%E9%95%9C%E5%83%8F" target="_blank" rel="noopener noreferrer">Centos7 安装 Docker -- 博客园用户： 扎心了，老铁 -- https://www.cnblogs.com/qingyunzong/</a></li>
<li><a href="https://www.cnblogs.com/hong01072/p/14078268.html#:~:text=%E5%9C%A8%E8%BF%90%E8%A1%8Cdocker%E5%AE%B9%E5%99%A8%E6%97%B6%E5%8F%AF%E4%BB%A5%E5%8A%A0%E5%A6%82%E4%B8%8B%E5%8F%82%E6%95%B0%E6%9D%A5%E4%BF%9D%E8%AF%81%E6%AF%8F%E6%AC%A1docker%E6%9C%8D%E5%8A%A1%E9%87%8D%E5%90%AF%E5%90%8E%E5%AE%B9%E5%99%A8%E4%B9%9F%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF%EF%BC%9A%20docker,run%20--restart%3Dalways%20%E5%A6%82%E6%9E%9C%E5%B7%B2%E7%BB%8F%E5%90%AF%E5%8A%A8%E4%BA%86%E5%88%99%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E5%A6%82%E4%B8%8B%E5%91%BD%E4%BB%A4%EF%BC%9A" target="_blank" rel="noopener noreferrer">Docker 容器自动重启 -- 博客园用户：QAQhong -- https://www.cnblogs.com/hong01072/</a></li>
<li><a href="https://blog.csdn.net/qq_27520051/article/details/91478732" target="_blank" rel="noopener noreferrer">Docker 网络故障修复 -- CSDN 用户：愤怒的小猿猿 -- https://blog.csdn.net/qq_27520051?type=blog</a></li>
</ul>
<br>
<h2> Nginx</h2>
<ul>
<li><a href="https://blog.csdn.net/lvxinchun/article/details/107589759" target="_blank" rel="noopener noreferrer">Centos7 安装 Nginx -- CSDN 用户：泗水长流 -- https://blog.csdn.net/lvxinchun</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/453181968#:~:text=%E5%AE%89%E8%A3%85Nginx%20%E4%B8%8B%E8%BD%BDNginx%E9%95%9C%E5%83%8F%20docker%20pull%20nginx%3Alatest%20%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84nginx%E7%9A%84%E9%95%9C%E5%83%8F%20%E8%BF%90%E8%A1%8Cnginx%E9%95%9C%E5%83%8F%20docker,-p%2080%3A80%20-d%20nginx%20%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3%20--name%20nginx%20%E6%8C%87%E5%AE%9A%E5%AE%B9%E5%99%A8%E7%9A%84%E5%90%8D%E7%A7%B0" target="_blank" rel="noopener noreferrer">Docker 安装 Nginx -- 知乎用户：xiaoyu -- https://www.zhihu.com/people/xiaoyu-19-4</a></li>
<li><a href="https://blog.csdn.net/weixin_44868863/article/details/91409710" target="_blank" rel="noopener noreferrer">Docker 安装 Nginx 报错解决 -- CSDN 用户：我还可以加班 -- https://blog.csdn.net/weixin_44868863?type=blog</a></li>
</ul>
<br>
<h2> 数据库</h2>
<ul>
<li><a href="https://blog.csdn.net/qq_36582604/article/details/80526287" target="_blank" rel="noopener noreferrer">Mysql57 -- CSND 用户：24只羊羊羊 -- https://blog.csdn.net/qq_36582604</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1657388" target="_blank" rel="noopener noreferrer">Docker 安装 Mysql -- 腾讯云开发者社区用户：飞翔的竹蜻蜓 -- https://cloud.tencent.com/developer/user/4510875</a></li>
</ul>
<br>
<h2> RabbitMQ</h2>
<ul>
<li><a href="https://www.jianshu.com/p/5d1f7652107b" target="_blank" rel="noopener noreferrer">Docker 安装 RabbitMQ -- 简书用户：zbsong  -- https://www.jianshu.com/u/b61284f47c2c</a></li>
<li><a href="https://blog.csdn.net/weixin_44200487/article/details/106189281#:~:text=1%E3%80%81%E5%85%88%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%9A%84rabbitmq%202%E3%80%81%E4%B8%8B%E8%BD%BD%E5%AE%8C%E4%BB%A5%E5%90%8E%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8%203%E3%80%81%20docker%20ps,%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E6%98%AF%E5%90%A6%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F%204%E3%80%81%E6%B3%A8%E6%84%8F15672%E5%92%8C5672%E7%AB%AF%E5%8F%A3%E8%A6%81%E5%BC%80%E6%94%BE%205%E3%80%81%E8%BE%93%E5%85%A5http%3A%2F%2Fip%E5%9C%B0%E5%9D%80%EF%BC%9A%E7%AB%AF%E5%8F%A3%E5%8F%B7%20%E5%A6%82%EF%BC%9A%20http%3A%2F%2F192.168.06.22%3A15672%2F%206%E3%80%81%E8%AE%BF%E9%97%AErabbitmq%E4%B8%BB%E9%A1%B5%E6%97%B6%E4%BC%9A%E5%87%BA%E7%8E%B0%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%EF%BC%8C%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%E6%B2%A1%E6%9C%89%E5%BC%80%E5%90%AF%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener noreferrer">Docker 安装 RabbitMQ 后无法访问解决 -- CSDN 用户：光头才能变强 -- https://blog.csdn.net/weixin_44200487?type=blog</a></li>
</ul>
<br>
<h2> RocketMQ</h2>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1621263#:~:text=Docker%E6%90%AD%E5%BB%BARocketMQ%EF%BC%8C%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BF%AB%E6%95%99%E7%A8%8B%EF%BC%81%201%20%E4%BB%8Egithub%E4%B8%8A%E9%9D%A2%E6%8B%89%E5%8F%96%E9%A1%B9%E7%9B%AE%EF%BC%88https%3A%2F%2Fgithub.com%2Fmodouxiansheng%2Fabout-docker%EF%BC%89%202%20%E4%BF%AE%E6%94%B9%20broker.conf%20%E4%B8%AD%E7%9A%84%20brokerIP1,%E5%8F%82%E6%95%B0%EF%BC%8C%E4%BF%AE%E6%94%B9%E4%B8%BA%E6%9C%AC%E6%9C%BAIP%203%20%E8%BF%9B%E5%85%A5%20docker-compose.yml%20%E6%96%87%E4%BB%B6%E6%89%80%E5%9C%A8%E8%B7%AF%E5%BE%84%EF%BC%8C%E6%89%A7%E8%A1%8C%20docker-compose%20up%20%E5%91%BD%E4%BB%A4%E5%8D%B3%E5%8F%AF" target="_blank" rel="noopener noreferrer">5分钟不到！Docker搭建RocketMQ，史上最快教程！- 腾讯云用户：java进阶架构师 -- https://cloud.tencent.com/developer/user/2899014</a></li>
</ul>
 <br>
<h2> Redis</h2>
<ul>
<li><a href="https://blog.csdn.net/qq_40313468/article/details/109249331" target="_blank" rel="noopener noreferrer">Docker 安装 Redis -- CSDN 用户：知 行 合 一 -- https://blog.csdn.net/qq_40313468</a></li>
<li><a href="https://blog.csdn.net/qq_39715000/article/details/120696149" target="_blank" rel="noopener noreferrer">CentOS安装Redis及redis启动与关闭、配置（详细）– CSDN 用户：乞力马扎罗の黎明 – https://blog.csdn.net/qq_39715000</a></li>
</ul>
<br>
<h2> Zookeeper</h2>
<ul>
<li><a href="https://blog.csdn.net/zhang_m_h/article/details/123682877?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166460638616800182779227%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166460638616800182779227&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123682877-null-null.142%5Ev51%5Econtrol,201%5Ev3%5Eadd_ask&amp;utm_term=linux%E5%AE%89%E8%A3%85zookeeper&amp;spm=1018.2226.3001.4187" target="_blank" rel="noopener noreferrer">Centos7 安装 Zookeeper -- CSDN 用户：大梦_几千秋 -- https://blog.csdn.net/zhang_m_h?type=blog</a></li>
</ul>
<br>
<h2> Java</h2>
<ul>
<li><a href="https://blog.csdn.net/gexiaoyizhimei/article/details/95374890" target="_blank" rel="noopener noreferrer">Centos7安装配置java环境 - CSDN 用户：freesOcean – https://blog.csdn.net/gexiaoyizhimei?type=blog</a></li>
<li><a href="https://www.cnblogs.com/huaisn/articles/14499330.html" target="_blank" rel="noopener noreferrer">JAVA_HOME 配置 -- 博客园用户：Huaisn --https://www.cnblogs.com/huaisn/</a></li>
</ul>
<br>
<h2> PostgreSQL</h2>
<ul>
<li><a href="https://blog.csdn.net/yetyrain/article/details/105642488" target="_blank" rel="noopener noreferrer">Docker 安装 PostgreSQL - CSDN 用户：raining…… -- https://blog.csdn.net/yetyrain</a></li>
</ul>
<br>
<h2> Nacos</h2>
<ul>
<li><a href="https://juejin.cn/post/7175387128648433719" target="_blank" rel="noopener noreferrer">docker部署nacos2.x（单机+集群）- 掘金用户：杨了个洋 -- https://juejin.cn/user/2766788481004110</a></li>
</ul>
<br>
<h2> Maven</h2>
<ul>
<li><a href="https://blog.csdn.net/qq_38738510/article/details/105567513" target="_blank" rel="noopener noreferrer">centos7下安装Maven - CSDN 用户：simon-_- – https://blog.csdn.net/qq_38738510?type=blog</a></li>
</ul>
<br>
<h2> Jenkins</h2>
<ul>
<li><a href="https://blog.csdn.net/BThinker/article/details/124178670" target="_blank" rel="noopener noreferrer">Docker 搭建 Jenkins 容器 (完整详细版) - CSDN 用户：Touch&amp; – https://blog.csdn.net/BThinker?type=blog</a></li>
<li><a href="https://blog.csdn.net/dontYouWorry/article/details/129007966" target="_blank" rel="noopener noreferrer">Linux（Centos7）安装 jenkins (jdk1.8+jenkins2.346)，并配置jdk,maven,git,gitee - CSDN 用户：一只大萌新！ – https://blog.csdn.net/dontYouWorry?type=blog</a></li>
<li><a href="https://blog.csdn.net/zyx0302/article/details/106056871" target="_blank" rel="noopener noreferrer">centos安装jenkins，jenkins在linux下默认安装目录 - CSDN 用户：zyx0302 – https://blog.csdn.net/zyx0302?type=blog</a></li>
</ul>
<br>
<br>
<h2> Git</h2>
<ul>
<li><a href="https://blog.csdn.net/xwj1992930/article/details/96428998" target="_blank" rel="noopener noreferrer">CentOS7安装Git以及操作 - CSDN 用户：xwj1992930 – https://blog.csdn.net/xwj1992930?type=blog</a></li>
</ul>
<h2> Skywalking</h2>
<ul>
<li><a href="https://blog.csdn.net/youlinhuanyan/article/details/120922729" target="_blank" rel="noopener noreferrer">docker-compose搭建Skywalking - CSDN 用户：丰色木夕 – https://blog.csdn.net/youlinhuanyan</a></li>
<li><a href="https://blog.csdn.net/Ltp_Ltp/article/details/122173914" target="_blank" rel="noopener noreferrer">docker-compose 部署Skywalking 与 简单使用 - CSDN 用户：Ltp_Ltp – https://blog.csdn.net/Ltp_Ltp?type=blog</a></li>
</ul>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="链接"/>
    <category term="导航"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-02-01T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">协议汇总</title>
    <id>https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E5%8D%8F%E8%AE%AE%E6%B1%87%E6%80%BB.html</id>
    <link href="https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E5%8D%8F%E8%AE%AE%E6%B1%87%E6%80%BB.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 协议汇总</h1>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://zhuanlan.zhihu.com/p/133375078" target="_blank" rel="noopener noreferrer">一篇文章让你彻底弄懂SSL/TLS协议</a></p>
</div>
<h2> 安全通信</h2>
<ol>
<li>IP简单密钥管理(SKIP) Simple Key Management forInternet Protocol</li>
<li>软件IP加密(swIPe) Software IP Encryption</li>
<li>安全远程过程调用(S-RPC) Secure Remote Procedure Call</li>
<li>安全套接层(SSL) Secure Sockets Layer</li>
<li>传输层安全(TLS) Transport Layer Security</li>
<li>安全电子交易(SET) Secure Electronic Transaction​</li>
<li>安全外壳SSH (Secure Shell)</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> 协议汇总</h1>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://zhuanlan.zhihu.com/p/133375078" target="_blank" rel="noopener noreferrer">一篇文章让你彻底弄懂SSL/TLS协议</a></p>
</div>
<h2> 安全通信</h2>
<ol>
<li>IP简单密钥管理(SKIP) Simple Key Management forInternet Protocol</li>
<li>软件IP加密(swIPe) Software IP Encryption</li>
<li>安全远程过程调用(S-RPC) Secure Remote Procedure Call</li>
<li>安全套接层(SSL) Secure Sockets Layer</li>
<li>传输层安全(TLS) Transport Layer Security</li>
<li>安全电子交易(SET) Secure Electronic Transaction​</li>
<li>安全外壳SSH (Secure Shell)</li>
</ol>
<h2> 身份验证</h2>
<ol>
<li>密码身份验证协议(PAP) Password Authentication Protocol</li>
<li>挑战握手身份验证协议(CHAP) Challenge Handshake Authentication Protocol</li>
<li>可扩展身份验证协议(EAP) Extensible Authentication Protocol</li>
</ol>
<h2> 邮件协议</h2>
<ol>
<li>SMTP：Simple Mail Transfer Protocol，基于 TCP 协议</li>
<li>POP3/IMAP：文件接收协议</li>
</ol>
<h2> 其他</h2>
<ol>
<li>FTP：文件传输协议，基于 TCP 协议</li>
<li>Telnet：远程登陆协议，基于 TCP 协议，明文传输，被 SSH 协议取代</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="通用"/>
    <category term="安全"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-07-17T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">图片相关知识点</title>
    <id>https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E5%9B%BE%E7%89%87%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9.html</id>
    <link href="https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E5%9B%BE%E7%89%87%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 图片相关知识点</h1>
<p>在 Web 开发中，我们通常会涉及到图片的处理和传输，以下是关于 buffer、blob、file、base64 的简单说明：</p>
<ol>
<li>
<p>Buffer：是 Node.js 中处理二进制数据的对象，是一个 Uint8Array 类型的数组。可以通过将一个字符串转为 Buffer，也可以通过在 Node.js 中读取文件来得到一个 Buffer。</p>
</li>
<li>
<p>Blob：是一个二进制大对象，通常用于表示文件或图像等二进制数据。可以使用 Blob() 构造函数创建一个 Blob 对象，然后将其传递给其他 API，比如 FileReader.readAsArrayBuffer() 方法来读取文件内容。</p>
</li>
<li>
<p>File：是一个特殊的 Blob，表示用户选择上传的文件，包含了文件名、大小等信息。通常在表单中通过 input[type=file] 来获取用户选择的文件。</p>
</li>
<li>
<p>Base64：是一种用于传输二进制数据的编码方式，将二进制数据转换为 ASCII 字符串。在前端开发中，可以使用 window.btoa() 方法将一个字符串转为 Base64 编码，使用 window.atob() 方法将 Base64 编码还原为原始字符串。也可以将一个 Blob 或 File 对象转为 Base64 编码，然后将其传输给后端，后端再解码还原为二进制数据。</p>
</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> 图片相关知识点</h1>
<p>在 Web 开发中，我们通常会涉及到图片的处理和传输，以下是关于 buffer、blob、file、base64 的简单说明：</p>
<ol>
<li>
<p>Buffer：是 Node.js 中处理二进制数据的对象，是一个 Uint8Array 类型的数组。可以通过将一个字符串转为 Buffer，也可以通过在 Node.js 中读取文件来得到一个 Buffer。</p>
</li>
<li>
<p>Blob：是一个二进制大对象，通常用于表示文件或图像等二进制数据。可以使用 Blob() 构造函数创建一个 Blob 对象，然后将其传递给其他 API，比如 FileReader.readAsArrayBuffer() 方法来读取文件内容。</p>
</li>
<li>
<p>File：是一个特殊的 Blob，表示用户选择上传的文件，包含了文件名、大小等信息。通常在表单中通过 input[type=file] 来获取用户选择的文件。</p>
</li>
<li>
<p>Base64：是一种用于传输二进制数据的编码方式，将二进制数据转换为 ASCII 字符串。在前端开发中，可以使用 window.btoa() 方法将一个字符串转为 Base64 编码，使用 window.atob() 方法将 Base64 编码还原为原始字符串。也可以将一个 Blob 或 File 对象转为 Base64 编码，然后将其传输给后端，后端再解码还原为二进制数据。</p>
</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="图片"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-02-23T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">如何记录日志</title>
    <id>https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E5%A6%82%E4%BD%95%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97-%E5%B7%B2%E5%8F%91%E5%B8%83.html</id>
    <link href="https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E5%A6%82%E4%BD%95%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97-%E5%B7%B2%E5%8F%91%E5%B8%83.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 如何记录日志</h1>

<h1> 日志格式化</h1>
<h2> 基本内容</h2>
<ul>
<li>时间</li>
<li>日志级别</li>
<li>日志信息</li>
</ul>
<br>
<h2> 进阶</h2>
<ul>
<li>线程名：可以通过线程名区分业务流程</li>
<li>主机名：分布式场景下，可以通过主机名区分实例的级别</li>
<li>方法名：方便区分相同日志的出处</li>
<li>类名：方便快速定位业务流程</li>
<li>行数：方便快速定位具体位置</li>
</ul>
<br>
<h2> 修饰</h2>
<ul>
<li>中括号 [] ：修饰日志级别、线程名、主机名</li>
<li>小括号 () ：修饰方法名、类名、行数（冒号隔开类名和行号）</li>
<li>横线 -- ：分割行号和日志信息</li>
<li>日志信息自定，关键在于记录入参与可能出现的错误</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h1> 如何记录日志</h1>

<h1> 日志格式化</h1>
<h2> 基本内容</h2>
<ul>
<li>时间</li>
<li>日志级别</li>
<li>日志信息</li>
</ul>
<br>
<h2> 进阶</h2>
<ul>
<li>线程名：可以通过线程名区分业务流程</li>
<li>主机名：分布式场景下，可以通过主机名区分实例的级别</li>
<li>方法名：方便区分相同日志的出处</li>
<li>类名：方便快速定位业务流程</li>
<li>行数：方便快速定位具体位置</li>
</ul>
<br>
<h2> 修饰</h2>
<ul>
<li>中括号 [] ：修饰日志级别、线程名、主机名</li>
<li>小括号 () ：修饰方法名、类名、行数（冒号隔开类名和行号）</li>
<li>横线 -- ：分割行号和日志信息</li>
<li>日志信息自定，关键在于记录入参与可能出现的错误</li>
</ul>
<br>
<h1> 链式追踪</h1>
<ul>
<li>在每条日志中加入业务系统中的一个或者多个唯一的 ID 标识</li>
<li>在定位业务问题是可以通过这些唯一 ID 快速过滤出相关的日志</li>
</ul>
<br>
<h1> 日志级别</h1>
<p>以下只是重要的日志级别</p>
<ul>
<li>Debug：记录技术细节和帮助理解系统运行的日志</li>
<li>Info：记录业务信息的日志</li>
<li>Warn：非紧急的可接受的错误信息</li>
<li>Error：非期望的错误或系统表现，通常由系统 bug 或环境问题导致</li>
</ul>
<p>注：日志级别从低到高：All、Trace、Debug、Info、Warn、Error、Fatal、Off</p>
<p><strong>不同环境下建议的日志级别：</strong></p>
<ul>
<li>Dev：Debug</li>
<li>Test：Debug</li>
<li>UAT：Info</li>
<li>Prod：Info</li>
</ul>
<br>
<h1> 日志位置</h1>
<ul>
<li>其他系统调用自有系统时：在受到请求和完成请求时各打印一次日志</li>
<li>自用系统调用第三方系统的接口时：在发送请求前和收到返回信息后各打印一次日志</li>
<li>任何可能出现异常的地方都需要打上日志</li>
</ul>
<p>注：还有一种特殊情况是，像消息传递之类的系统，为了节省日志存储和减少查看干扰，大多时候我们不需要在收到消息后直接打印该消息，一般建议在收到消息后，如果系统处理有异常，在异常中将原始消息打印。</p>
<br>
<h1> 注意点</h1>
<ul>
<li>避免打印或记录任何敏感信息</li>
<li>...</li>
</ul>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="通用"/>
    <category term="编程"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-06-06T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">开发环境分类</title>
    <id>https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%88%86%E7%B1%BB-%E5%B7%B2%E5%8F%91%E5%B8%83.html</id>
    <link href="https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%88%86%E7%B1%BB-%E5%B7%B2%E5%8F%91%E5%B8%83.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 开发环境分类</h1>

<h1> 概述</h1>
<p><strong>开发环境一般分为以下四种：</strong></p>
<ul>
<li>开发环境（dev）</li>
<li>测试环境（test）</li>
<li>预发布环境（pre）</li>
<li>生产环境（prod）</li>
</ul>
<p>此外，还可能有灰度发布，指的是从预发布环境到生产环境之间的一个过程，目的是防止加入新功能后因某些错误导致产品不可用</p>
<br>
<h1> 开发环境</h1>
<blockquote>
<p>专门用于开发和调试的环境，与真实环境隔离开，有着独立的客户机服务器以及配置等</p>
</blockquote>]]></summary>
    <content type="html"><![CDATA[<h1> 开发环境分类</h1>

<h1> 概述</h1>
<p><strong>开发环境一般分为以下四种：</strong></p>
<ul>
<li>开发环境（dev）</li>
<li>测试环境（test）</li>
<li>预发布环境（pre）</li>
<li>生产环境（prod）</li>
</ul>
<p>此外，还可能有灰度发布，指的是从预发布环境到生产环境之间的一个过程，目的是防止加入新功能后因某些错误导致产品不可用</p>
<br>
<h1> 开发环境</h1>
<blockquote>
<p>专门用于开发和调试的环境，与真实环境隔离开，有着独立的客户机服务器以及配置等</p>
</blockquote>
<ul>
<li>日志等级一般为 debug</li>
<li>确认代码在开发环境没有问题之后，交由测试环境进行测试</li>
</ul>
<br>
<h1> 测试环境</h1>
<blockquote>
<p>测试人员利用一些工具与数据模拟出来的，接近真实用户使用的环境</p>
</blockquote>
<ul>
<li>与开发环境隔离开，配置与生产环境类似</li>
<li>测试人员需要在该环境下进行功能模块测试、集成测试、系统测试等</li>
<li>测试环境中功能型 bug 暴露较多</li>
<li>当生产环境和开发环境版本不一致，且生产环境又发现了 bug，测试环境就可以充当中间测试的一层，即：使得开发环境不用回滚</li>
</ul>
<br>
<h1> 预发布环境</h1>
<blockquote>
<p>非必要的环境，如果是通过打包的形式发布的，那么可以不用预发布环境；如果是直接发布仓库代码，那么就应当加入预发布环境</p>
</blockquote>
<p><strong>仓库代码分支的作用：</strong></p>
<ul>
<li>dev：开发分支，对应开发环境</li>
<li>test：测试分支，对应测试分支</li>
<li>release：预发布分支，该分支是测试分支通过后开发人员将代码合并的分支，合并后测试通过就发布到线上环境</li>
<li>master：允许发布到线上部分的代码会合并到此分支，如果需要添加新功能，需要先拉取此分支后再创建新的分支进行开发</li>
</ul>
<p><strong>预发布的作用：</strong></p>
<ul>
<li>正式发布前的最后测试，环境与生产环境高度相似或相同，可以进一步发现在测试环境没发现的问题</li>
<li>预发布环境的数据量和测试环境可能不一样，预发布环境的数据量一般较大，发现错误的几率也较大，可以降低草草上线的维护成本</li>
<li>当测试环境和生产环境版本不一致，且生产环境又发现了 bug，预发布环境就可以充当中间测试的一层，即：使得测试环境不用回滚</li>
</ul>
<br>
<h1> 生产环境</h1>
<blockquote>
<p>线上环境，由运维人员维护，该环境正式提供对外服务，即真实用户的使用环境</p>
</blockquote>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="通用"/>
    <category term="编程"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-08-27T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">接口调用出错的应对策略</title>
    <id>https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E5%87%BA%E9%94%99%E7%9A%84%E5%BA%94%E5%AF%B9%E7%AD%96%E7%95%A5-%E5%B7%B2%E5%8F%91%E5%B8%83.html</id>
    <link href="https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E5%87%BA%E9%94%99%E7%9A%84%E5%BA%94%E5%AF%B9%E7%AD%96%E7%95%A5-%E5%B7%B2%E5%8F%91%E5%B8%83.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 接口调用出错的应对策略</h1>

<h1> 写在前面</h1>
<ul>
<li>对于接口调用失败的情况，如果没有相应的容错应对策略很可能导致服务不可用</li>
<li>常见的容错策略有：
<ul>
<li>故障转移</li>
<li>快速失败</li>
<li>安全失败</li>
<li>沉默失败</li>
</ul>
</li>
</ul>
<br>
<h1> 故障转移</h1>
<ul>
<li>高可用的服务集群中（尤其是被依赖的关键服务）均会部署多个副本</li>
<li>这些节点可以部署在不同的节点、网络交换区、可用区（分别应对节点宕机、网络分区、不可抗力导致的故障）</li>
<li>故障转移是指如果调用的服务器出现故障，系统不会立即向调用者返回失败结果，而是自动切换到其他的节点尝试返回成功调用的结果</li>
<li>这样可以保证整体的高可用性</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h1> 接口调用出错的应对策略</h1>

<h1> 写在前面</h1>
<ul>
<li>对于接口调用失败的情况，如果没有相应的容错应对策略很可能导致服务不可用</li>
<li>常见的容错策略有：
<ul>
<li>故障转移</li>
<li>快速失败</li>
<li>安全失败</li>
<li>沉默失败</li>
</ul>
</li>
</ul>
<br>
<h1> 故障转移</h1>
<ul>
<li>高可用的服务集群中（尤其是被依赖的关键服务）均会部署多个副本</li>
<li>这些节点可以部署在不同的节点、网络交换区、可用区（分别应对节点宕机、网络分区、不可抗力导致的故障）</li>
<li>故障转移是指如果调用的服务器出现故障，系统不会立即向调用者返回失败结果，而是自动切换到其他的节点尝试返回成功调用的结果</li>
<li>这样可以保证整体的高可用性</li>
</ul>
<br>
<h1> 快速失败</h1>
<ul>
<li>有一些业务场景是不允许做故障转移的，因为故障转移策略的前提是服务具备幂等性</li>
<li>对于非幂等性的服务，重复调用就可能产生脏数据，这样带来的麻烦远远大于某次服务调用失败的，此时应该选择快速失败作为容错策略</li>
<li>当非幂等性服务调用失败后，往往是不清楚哪一步出现异常的，此时为了避免重复操作，最恰当的做法就是尽快让服务报错，尽快抛出异常让调用者处理</li>
</ul>
<br>
<h1> 安全失败</h1>
<ul>
<li>在一个调用链路中的服务通常分为主路和旁路，即不是每个服务都是不可或缺的，有些服务失败了也不影响核心业务的正确性</li>
<li>使用 Spring 开发时，通过扩展点、事件或者 AOP 注入的逻辑通常都属于旁路逻辑，如：审计、日志、调式信息等</li>
<li>属于旁路逻辑的另一个显著特征是后续处理不会依赖其返回值，或者该返回值不会影响后续的处理结果</li>
<li>对于这类旁路逻辑，一种理想的容错策略是：即使旁路逻辑失败了也当作正确的返回；如果需要返回值的话，系统就自动返回一个符合返回类型的值</li>
<li>失败后系统会自动记录一条服务调用出错的日志备查，这样的策略就被称为安全失败</li>
</ul>
<br>
<h1> 沉默失败</h1>
<ul>
<li>如果大量请求需要等到才是或者长时间处理后才能宣告失败，那么很容易由于某个远程服务的请求堆积而消耗大量的线程、内存、网络等资源而影响系统稳定</li>
<li>对于这种情况，一种合理的策略是当请求在一段时间连续失败若干次后，默认服务提供方在以一定时间内无法再对外服务，此时进行熔断，不在向它分配请求流量，即将错误隔离开来，避免对其他部分产生影响，这样的策略就被称为沉默失败</li>
</ul>
<br>
<h1> 优缺点/应用场景</h1>
<div class="table-wrapper "><table>
<thead>
<tr>
<th style="text-align:center">容错策略</th>
<th style="text-align:center">优点</th>
<th style="text-align:center">缺点</th>
<th style="text-align:center">应用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">故障转移</td>
<td style="text-align:center">系统自动处理<br>调用者对失败的信息不可见</td>
<td style="text-align:center">增加了调用时间<br>消耗了额外的资源</td>
<td style="text-align:center">调用的是幂等性服务<br>对调用时间不敏感</td>
</tr>
<tr>
<td style="text-align:center">快速失败</td>
<td style="text-align:center">调用者对失败的处理有控制权<br>不依赖服务的幂等性</td>
<td style="text-align:center">调用则必须正确处理失败<br>如果只是抛异常可能引起雪崩</td>
<td style="text-align:center">调用的是非幂等性服务<br>超时阈值较低</td>
</tr>
<tr>
<td style="text-align:center">安全失败</td>
<td style="text-align:center">不影响主路逻辑</td>
<td style="text-align:center">只适用于旁路调用</td>
<td style="text-align:center">调用链中的旁路服务</td>
</tr>
<tr>
<td style="text-align:center">沉默失败</td>
<td style="text-align:center">能够控制错误，避免影响整体</td>
<td style="text-align:center">出错的服务将在一段时间内不可用</td>
<td style="text-align:center">频繁超时的服务</td>
</tr>
</tbody>
</table>
</div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="通用"/>
    <category term="编程"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-06-21T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">正则表达式速查</title>
    <id>https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%80%9F%E6%9F%A5.html</id>
    <link href="https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%80%9F%E6%9F%A5.html"/>
    <updated>2023-05-09T07:03:49.000Z</updated>
    <summary type="html"><![CDATA[<h1> 正则表达式速查</h1>
<div class="hint-container info">
<p class="hint-container-title">Info</p>
<p>本文档出自 Codesheep 羊哥，这里只是为了方便就直接把 PDF 放上来了<br>
<a href="https://space.bilibili.com/384068749?spm_id_from=333.337.0.0" target="_blank" rel="noopener noreferrer">羊哥 B 站主页戳这里</a>，另外，极力推荐羊哥的网站：<a href="https://r2coding.com/" target="_blank" rel="noopener noreferrer">r2coding 编程自学之路</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 正则表达式速查</h1>
<div class="hint-container info">
<p class="hint-container-title">Info</p>
<p>本文档出自 Codesheep 羊哥，这里只是为了方便就直接把 PDF 放上来了<br>
<a href="https://space.bilibili.com/384068749?spm_id_from=333.337.0.0" target="_blank" rel="noopener noreferrer">羊哥 B 站主页戳这里</a>，另外，极力推荐羊哥的网站：<a href="https://r2coding.com/" target="_blank" rel="noopener noreferrer">r2coding 编程自学之路</a></p>
</div>
<h2> 基本知识</h2>

]]></content>
    <published>2023-05-09T07:03:49.000Z</published>
  </entry>
  <entry>
    <title type="text">编码汇总</title>
    <id>https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E7%BC%96%E7%A0%81%E6%B1%87%E6%80%BB.html</id>
    <link href="https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E7%BC%96%E7%A0%81%E6%B1%87%E6%80%BB.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 编码汇总</h1>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://cloud.tencent.com/developer/article/1748394" target="_blank" rel="noopener noreferrer">30余种加密编码类型的密文特征分析（建议收藏）</a>
<a href="https://zhuanlan.zhihu.com/p/46216008" target="_blank" rel="noopener noreferrer">程序员必备：彻底弄懂常见的7种中文字符编码</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 编码汇总</h1>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://cloud.tencent.com/developer/article/1748394" target="_blank" rel="noopener noreferrer">30余种加密编码类型的密文特征分析（建议收藏）</a>
<a href="https://zhuanlan.zhihu.com/p/46216008" target="_blank" rel="noopener noreferrer">程序员必备：彻底弄懂常见的7种中文字符编码</a></p>
</div>
<p>加密编码：</p>
<ol>
<li>不可逆加密：哈希算法（MD5、sha1、HMAC、NTLM）</li>
<li>对称加密（单密钥加密）：Base64、Base58、Base32、Base16、Base85、Base100、AES、DES、RC4、Rabbit、Triple DES（3DES）</li>
<li>非对称加密（公开密钥加密）：RSA、ECC</li>
</ol>
<p>字符串编码：</p>
<ol>
<li>ASCII</li>
<li>GB2312、GBK、GB18030</li>
<li>UTF8</li>
<li>ANSI、Latin1（又名ISO-8859-1）</li>
</ol>
<p>数字签名：</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV18N411X7ty/?vd_source=e356fec025b50061af78324a814f8da0" target="_blank" rel="noopener noreferrer">数字签名 及 数字证书 原理</a></p>
</blockquote>
<ol>
<li>RSA：RSA 加密算法 + 哈希算法</li>
<li>DSA</li>
<li>ECDSA</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="通用"/>
    <category term="安全"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-07-17T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">编程模式</title>
    <id>https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F-%E5%B7%B2%E5%8F%91%E5%B8%83.html</id>
    <link href="https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F-%E5%B7%B2%E5%8F%91%E5%B8%83.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 编程模式</h1>

<h1> 写在前面</h1>
<ul>
<li>无论哪种编程模式，都有其使用的场景，不存在优劣之分，也没有哪一种是银弹</li>
<li>在不同场景下选用不同的模式可以为所编写的代码带来更好的可读性或降低出错的概率</li>
<li>编程模式大致分为四种：命令式、声明式、过程式、函数式</li>
</ul>
<br>
<h1> 命令式</h1>
<ul>
<li>关注/强调实现的细节，即关注 How 而不是 What</li>
<li>可以理解为面向过程编程</li>
</ul>
<br>
<h1> 声明式</h1>
<ul>
<li>关注/强调结果而不是细节，即关注 What 而不是 How</li>
<li>SQL 语句就是典型的声明式编程</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h1> 编程模式</h1>

<h1> 写在前面</h1>
<ul>
<li>无论哪种编程模式，都有其使用的场景，不存在优劣之分，也没有哪一种是银弹</li>
<li>在不同场景下选用不同的模式可以为所编写的代码带来更好的可读性或降低出错的概率</li>
<li>编程模式大致分为四种：命令式、声明式、过程式、函数式</li>
</ul>
<br>
<h1> 命令式</h1>
<ul>
<li>关注/强调实现的细节，即关注 How 而不是 What</li>
<li>可以理解为面向过程编程</li>
</ul>
<br>
<h1> 声明式</h1>
<ul>
<li>关注/强调结果而不是细节，即关注 What 而不是 How</li>
<li>SQL 语句就是典型的声明式编程</li>
</ul>
<br>
<h1> 过程式</h1>
<ul>
<li>用一系列的流程完成任务</li>
<li>无返回值，但是会产生副作用（副作用可以理解为：改变入参的内部状态）</li>
</ul>
<br>
<h1> 函数式</h1>
<ul>
<li>用一系列的函数完成任务</li>
<li>有返回值，但是没有副作用，即入参决定出参，无论调用多少次，只要入参相同，出参也一定相同</li>
<li>函数式编程中，函数还可以作为入参</li>
</ul>
<br>
<br>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="通用"/>
    <category term="编程"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-07-14T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">认证授权</title>
    <id>https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83.html</id>
    <link href="https://gzwrrr.github.io/article/other/A-%E9%80%9A%E7%94%A8/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 认证授权</h1>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://zhuanlan.zhihu.com/p/60522006" target="_blank" rel="noopener noreferrer">细说API – 认证、授权和凭证</a></p>
</div>
<p>还有一个重要的概念是访问控制策略（AC）。如果我们需要把资源的权限划分到一个很细的粒度，就不得不考虑用户以何种身份来访问受限的资源，选择基于访问控制列表（ACL）还是基于用户角色的访问控制（RBAC）或者其他访问控制策略。</p>]]></summary>
    <content type="html"><![CDATA[<h1> 认证授权</h1>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://zhuanlan.zhihu.com/p/60522006" target="_blank" rel="noopener noreferrer">细说API – 认证、授权和凭证</a></p>
</div>
<p>还有一个重要的概念是访问控制策略（AC）。如果我们需要把资源的权限划分到一个很细的粒度，就不得不考虑用户以何种身份来访问受限的资源，选择基于访问控制列表（ACL）还是基于用户角色的访问控制（RBAC）或者其他访问控制策略。</p>
<p>数字凭证还表现在方方面面，SSH 登录的密匙、JWT 令牌、一次性密码等。</p>
<p>HAMC、OAuth2，以及凭证技术JWT token。</p>
<p>OAuth、Open ID、OpenID Connect</p>
<p>Cookie 、Token in Cookie、Session Token 依然被使用</p>
<p>随着微服务的发展，API 的设计不仅仅是面向 WEB 或者 Mobile APP，还有BFF（Backend for Frontend）和 Domain API 的认证，以及第三方服务的集成。</p>
<p>客户端到服务器之间认证和服务器到服务器之间认证是不同的。</p>
<p>我们把终端用户（Human）参与的通信，叫做 Human-to-machine (H2M)，服务器与服务器之间的通信叫做 Machine-to-machine (M2M)。</p>
<p><strong>另外值得一提的是，H2M 这种通信方式下，客户端不受控制，由于无法自主分发密匙，认证通信的安全高度依赖 HTTPS。</strong></p>
<h2> 认证授权的方式</h2>
<blockquote>
<p>认证：authentication，标识身份，解决 <code>who are you</code> 的问题；授权：authorization，授予资源，解决 <code>what can you do</code> 的问题，往往需要配合认证来完成。</p>
<p>注意：不用太过于纠结一个规范是用于认证还是授权（比如 OAuth），因为在一个系统中认证和授权往往是无法被孤立实现的。</p>
</blockquote>
<p>大致分为以下几类（有些是有包含关系的，后续可能再做调整）：</p>
<ol>
<li>基本身份验证（HTTP Basic AUthentication）</li>
<li>公钥登录私钥认证</li>
<li>OAuth 开放授权标准</li>
<li>基于令牌的身份验证</li>
<li>HMAC（AK/SK）认证</li>
<li>双因素身份验证</li>
<li>OTP （One time password ）一次性密码</li>
</ol>
<h3> 基本身份验证（HTTP Basic AUthentication）</h3>
<p>基本身份验证（HTTP Basic AUthentication）：这是最简单的身份验证形式，需要用户提供用户名和密码才能访问网站。凭据通常以纯文本形式发送，这使得这种方法不太安全。然而，它对于不需要高安全级别的简单网站或内部应用程序很有用。</p>
<h3> 公钥登录私钥认证</h3>
<p>SSH (Secure Shell)默认使用公钥认证方式。在公钥认证中，用户生成一个公私密钥对，其中公钥与服务器共享，私钥安全保存在用户的设备上。当用户尝试与服务器进行身份验证时，服务器向用户发送一个挑战，然后用户用他们的私钥对挑战进行签名，并将签名后的挑战发送回服务器。如果服务器可以通过公钥验证签名，则认证通过。</p>
<p>与密码身份验证等其他身份验证方法相比，公钥身份验证提供了增强的安全性，因为它不要求用户与服务器共享密码。它还允许无需用户干预的自动身份验证。</p>
<p>除了公钥身份验证之外，SSH还支持其他身份验证方法，如密码身份验证和基于主机的身份验证。但推荐使用公钥认证，因为它具有更高的安全性和便捷性。</p>
<h3> OAuth 开放授权标准</h3>
<p>OAuth: OAuth是一种广泛使用的认证协议，它允许用户将自己在一个网站上的资源授权给另一个网站，而无需共享自己的证书。通常用于社交登录，可用于第三方网站的用户认证。</p>
<p>OAuth（开放授权）是一个开放标准，允许用户授权第三方网站访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方网站或分享他们数据的所有内容。</p>
<p>OAuth 是一个授权标准，而不是认证标准。提供资源的服务器不需要知道确切的用户身份（session），只需要验证授权服务器授予的权限（token）即可。</p>
<p>OAuth 的基本思路就是通过授权服务器获取 access token 和 refresh token（refresh token 用于重新刷新access token），然后通过 access token 从资源服务器获取数据 。在特定的场景下还有下面几种模式：</p>
<ol>
<li>授权码模式（authorization code）</li>
<li>简化模式（implicit）</li>
<li>密码模式（resource owner password credentials）</li>
<li>客户端模式（client credentials）</li>
</ol>
<p>如果需要获取用户的认证信息，OAuth 本身没有定义这部分内容，如果需要识别用户信息，则需要借助另外的认证层，例如 OpenID Connect。</p>
<h3> 基于令牌的身份验证</h3>
<p>基于令牌的身份验证:在这种方法中，用户提供令牌，如JWT (JSON Web令牌)，然后由服务器验证该令牌以验证用户。这种方法比基本身份验证更安全，因为令牌通常是加密的，必要时可以撤销。</p>
<p>在 OAuth 等分布式的认证、授权体系下，对凭证技术有了更多的要求，比如包含用户 ID、过期等信息，不需要再外部存储中关联。因此业界对 token 做了进一步优化，设计了一种自包含令牌，令牌签发后无需从服务器存储中检查是否合法，通过解析令牌就能获取令牌的过期、有效等信息，这就是JWT （JSON Web Token）。</p>
<p>JWT 是一种包含令牌（self-contained token），或者叫值令牌 （value token），我们以前使用关联到 session 上的 hash 值被叫做引用令牌（reference token）。</p>
<p>只需要签名的 secret key 就能校验 JWT 令牌，如果在消息体中加入用户 ID、过期信息就可以实现验证令牌是否有效、过期了，无需从数据库/缓存中读取信息。因为使用了加密算法，所以第一、二部分即使被修改（包括过期信息）也无法通过验证。JWT 优点是不仅可以作为 token 使用，同时也可以承载一些必要信息，省去多次查询。</p>
<ol>
<li>JWT token 的第一、二部分只是 base64 编码，肉眼不可读，不应当存放敏感信息</li>
<li>JWT token 的自包含特性，导致了无法被撤回</li>
<li>JWT 的签名算法可以自己拟定，为了便于调试，本地环境可以使用对称加密算法，生产环境建议使用非对称加密算法</li>
</ol>
<p>当然 OAuth 对 access token 等凭证所选用的技术并没有做出限制，OAuth 并不强制使用 JWT，在使用 JWT 自包含特性的优势时，必须考虑到 JWT 撤回困难的问题。在一些对撤回 token 要求很高的项目中不适合使用JWT，即使采用了一些方案实现（whitelist 和 blacklist）也违背了设计 JWT 的初衷。</p>
<h3> HMAC（AK/SK）认证</h3>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://zhuanlan.zhihu.com/p/136590049" target="_blank" rel="noopener noreferrer">HMAC 算法及其应用</a></p>
</div>
<p>HMAC（AK/SK）认证：在我们对接一些 PAAS 平台和支付平台时，会要求我们预先生成一个 access key（AK） 和 secure key（SK），然后通过签名的方式完成认证请求，这种方式可以避免传输 secure key，且大多数情况下签名只允许使用一次，避免了重放攻击。</p>
<p>这种基于 AK/SK 的认证方式主要是利用散列的消息认证码 (Hash-based Message Authentication Code) 来实现的，因此有很多地方叫 HMAC 认证，实际上不是非常准确。HMAC 只是利用带有 key 值的哈希算法生成消息摘要，在设计 API 时有具体不同的实现。</p>
<p>HMAC 在作为网络通信的认证设计中作为凭证生成算法使用，避免了口令等敏感信息在网络中传输。基本过程如下：</p>
<ol>
<li>客户端需要在认证服务器中预先设置 access key（AK 或叫 app ID） 和 secure key（SK）</li>
<li>在调用 API 时，客户端需要对参数和 access key 进行自然排序后并使用 secure key 进行签名生成一个额外的参数 digest</li>
<li>服务器根据预先设置的 secure key 进行同样的摘要计算，并要求结果完全一致</li>
<li><strong>注意 secure key 不能在网络中传输，以及在不受信任的位置存放（浏览器等）</strong></li>
</ol>
<p>为了让每一次请求的签名变得独一无二，从而实现重放攻击，我们需要在签名时放入一些干扰信息。</p>
<p>在业界标准中有两种典型的做法：</p>
<ol>
<li>质疑/应答算法（OCRA: OATH Challenge-Response Algorithm）</li>
<li>基于时间的一次性密码算法（TOTP: Time-based One-time Password Algorithm）</li>
</ol>
<h3> 双因素身份验证</h3>
<p>双因素身份验证:这种方法要求用户提供两种形式的身份验证，如密码和发送到他们手机的代码，以验证自己。这种方法比基本身份验证更安全，可以为处理敏感数据的网站增加额外的安全层。</p>
<p>双因子认证一般是用户名密码再加一种其他方式的认证，如：短信验证、微信或者QQ授权验证、USB令牌、OTP 令牌等等。例子：阿里云登录控制台需要使用密码 + 虚拟 MFA 进行登录。</p>
<h3> OTP 一次性密码</h3>
<p>OTP （One time password ）：一次性密码，例如注册邮件和短信中的认证码</p>
<h2> 权限控制模型</h2>
<p>大致可以分为：</p>
<ol>
<li>UGO（Linux 权限控制）：User、Group、Other 粗粒度控制</li>
<li>ACL：基于用户的访问控制</li>
<li>RBAC：基于角色的访问控制</li>
<li>ABAC：基于属性的访问控制</li>
<li>NGAC：比 ABAC 更细粒度</li>
</ol>
<h2> 其他</h2>
<p>对于云平台资源和服务的安全访问授权，除了访问密钥和安全密钥认证外，还有多种备选方案。其中一些替代方案包括:</p>
<p>OAuth: OAuth是一种开放的授权标准，允许用户授权第三方应用程序访问他们的资源，而无需共享他们的密码。它通常用于提供对基于云的服务的安全访问，如社交媒体平台和api。</p>
<p>OpenID Connect: OpenID Connect是建立在OAuth 2.0之上的身份验证协议，提供用户身份验证和授权。它允许用户使用单一身份提供者进行身份验证，然后可以使用该身份提供者访问多个服务。</p>
<p>JSON Web Tokens (JWT): JWT是一种紧凑的、url安全的方法，用于表示要在双方之间转移的声明。它通常用于RESTful web服务和单页应用程序中的身份验证和授权。</p>
<p>SAML(安全断言标记语言):SAML是一种基于xml的标准，用于在各方之间交换身份验证和授权数据，特别是在身份提供者和服务提供者之间。它通常用于基于web的单点登录(SSO)，并被基于云的服务广泛支持。</p>
<p>AWS IAM (Identity and Access Management): AWS IAM是一个web服务，可以让您安全地管理对AWS服务和资源的访问。它为AWS服务提供用户身份验证、访问控制和授权等功能。</p>
<p>这些只是用于授权对云平台资源和服务的安全访问的访问密钥和安全密钥认证的替代方案的几个例子。身份验证和授权方法的选择将取决于应用程序或服务的特定需求和用例。</p>
<p>公钥和私钥认证与使用访问密钥和安全密钥进行令牌访问认证没有直接关系。</p>
<p>公钥和私钥认证是一种单独的认证方法，它使用一对密钥(一个公钥和一个私钥)在双方之间建立信任。这种方法通常用于客户端和服务器之间的安全通信，其中与服务器共享公钥，而私钥安全地保存在客户端设备上。</p>
<p>另一方面，使用访问密钥和安全密钥的令牌访问身份验证是另一种身份验证方法，它使用使用加密密钥签名和加密的令牌在客户端和服务器之间建立信任。这种方法常用于云平台中授权资源和服务的安全访问。</p>
<p>虽然这两种方法都使用加密密钥，但它们有不同的目的和用例。公私钥认证用于客户端与服务器之间的安全通信，令牌接入认证用于接入密钥和安全密钥对云平台资源和服务的安全访问。</p>
<p>在Java生态系统中，有一些可用的工具和框架来解决网站身份验证的问题，例如:</p>
<p>Spring Security:它是一个广泛使用的基于java的应用程序安全框架，提供身份验证和授权服务。Spring Security支持各种身份验证方法，包括基本身份验证、基于令牌的身份验证和OAuth。</p>
<p>Apache Shiro:这是另一个为Java应用程序提供身份验证、授权和加密服务的安全框架。Apache Shiro支持各种身份验证方法，包括基本身份验证、基于令牌的身份验证和OAuth。</p>
<p>JAAS (Java身份验证和授权服务):它是一个为Java应用程序提供身份验证和授权服务的Java框架。JAAS支持各种身份验证方法，包括基本身份验证、基于令牌的身份验证和双因素身份验证。</p>
<p>根据特定的需求和用例，可以使用这些框架和工具在基于java的web应用程序中实现各种身份验证方法。</p>
<p>访问密钥和安全密钥并不是特定的身份验证方法，而是在基于令牌的身份验证系统(如Amazon Web Services (AWS)和其他云平台)中常用的访问凭证。</p>
<p>在基于令牌的身份验证中，用户提供令牌，如JSON Web令牌(JWT)，用于对用户进行身份验证。令牌通常包含用户的访问密钥和安全密钥，用于签名和验证令牌。访问密钥和安全密钥用于为令牌生成加密签名，然后由服务器验证该签名以验证用户身份。</p>
<p>因此，访问密钥和安全密钥不是独立的身份验证方法，而是基于令牌的身份验证方法的一部分。它们用于提供对AWS等云平台中资源和服务的安全访问。</p>
<p>使用访问密钥和安全密钥进行基于令牌的身份验证是一种常用的方法，因为它有以下几个优点。</p>
<p>增强安全性:使用访问密钥和安全密钥的基于令牌的身份验证提供了增强的安全性，因为令牌通常使用加密密钥进行加密和签名。这有助于防止资源和服务被未经授权的访问，降低中间人攻击、跨站脚本攻击等攻击的风险。</p>
<p>可扩展性:使用访问密钥和安全密钥的令牌身份验证具有高度可扩展性，因为它不需要服务器维护会话状态。这意味着服务器可以处理大量并发请求，而不会使系统过载。</p>
<p>简化开发:使用访问密钥和安全密钥的基于令牌的身份验证可以简化开发，因为它允许开发人员将身份验证逻辑与应用程序逻辑分离。这使得开发和维护复杂的应用程序更加容易。</p>
<p>关于访问密钥和安全密钥的使用，访问密钥通常用于标识请求访问资源或服务的用户或应用程序，而安全密钥用于签名令牌并提供身份验证。通过同时使用访问密钥和安全密钥，服务器可以验证请求是否来自有效的用户或应用程序，并且令牌没有被篡改。</p>
<p>使用访问密钥和安全密钥的基于令牌的身份验证的替代方案包括其他身份验证方法，如基本身份验证、OAuth和双因素身份验证。然而，这些方法都有各自的优缺点，认证方法的选择取决于应用程序的特定需求和用例。</p>
<p>对于云平台资源和服务的安全访问授权，除了访问密钥和安全密钥认证外，还有多种备选方案。其中一些替代方案包括:</p>
<p>OAuth: OAuth是一种开放的授权标准，允许用户授权第三方应用程序访问他们的资源，而无需共享他们的密码。它通常用于提供对基于云的服务的安全访问，如社交媒体平台和api。</p>
<p>OpenID Connect: OpenID Connect是建立在OAuth 2.0之上的身份验证协议，提供用户身份验证和授权。它允许用户使用单一身份提供者进行身份验证，然后可以使用该身份提供者访问多个服务。</p>
<p>JSON Web Tokens (JWT): JWT是一种紧凑的、url安全的方法，用于表示要在双方之间转移的声明。它通常用于RESTful web服务和单页应用程序中的身份验证和授权。</p>
<p>SAML(安全断言标记语言):SAML是一种基于xml的标准，用于在各方之间交换身份验证和授权数据，特别是在身份提供者和服务提供者之间。它通常用于基于web的单点登录(SSO)，并被基于云的服务广泛支持。</p>
<p>AWS IAM (Identity and Access Management): AWS IAM是一个web服务，可以让您安全地管理对AWS服务和资源的访问。它为AWS服务提供用户身份验证、访问控制和授权等功能。</p>
<p>这些只是用于授权对云平台资源和服务的安全访问的访问密钥和安全密钥认证的替代方案的几个例子。身份验证和授权方法的选择将取决于应用程序或服务的特定需求和用例。</p>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="通用"/>
    <category term="安全"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-06-15T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Linux 环境搭建</title>
    <id>https://gzwrrr.github.io/article/linux/Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</id>
    <link href="https://gzwrrr.github.io/article/linux/Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Linux 环境搭建</h1>
<h2> 搭建虚拟机</h2>
<p><a href="https://blog.csdn.net/hxinyu6666/article/details/127893227" target="_blank" rel="noopener noreferrer">VMware 打开运行一段时间后卡死，CPU占比增至100%</a></p>
<p><a href="https://blog.csdn.net/WeiHao0240/article/details/121076163#:~:text=Centos7%E4%BF%AE%E6%94%B9IP%E5%9C%B0%E5%9D%80%201%201.%20%E6%9F%A5%E7%9C%8B%E6%9C%AC%E5%9C%B0ip%20ifconfig%201%202%202.,%E9%87%8D%E5%90%AF%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E5%8D%B3%E5%8F%AF%20service%20network%20restart%201%20%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E9%87%8D%E5%90%AF%EF%BC%8C%E8%A6%81%E6%89%8B%E5%8A%A8%E9%87%8D%E5%90%AF%E4%B8%80%E4%B8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8D%B3%E5%8F%AF%E3%80%82%20%E6%B3%A8%E6%84%8F%EF%BC%9A%20%E5%A6%82%E6%9E%9C%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B2%A1%E6%9C%89%E6%98%BE%E7%A4%BA%E5%99%A8%EF%BC%8C%E9%82%A3%E5%B0%B1%E7%99%BB%E5%BD%95%E5%88%B0%E8%B7%AF%E7%94%B1%E5%99%A8%E9%87%8C%E9%9D%A2%E6%9F%A5%E7%9C%8B%E5%9C%A8%E7%BA%BF%E4%B8%BB%E6%9C%BA%E7%9A%84ip%E8%BF%9B%E8%A1%8C%E6%8E%A8%E6%B5%8B%E3%80%82" target="_blank" rel="noopener noreferrer">Centos7修改IP地址</a></p>]]></summary>
    <content type="html"><![CDATA[<h1> Linux 环境搭建</h1>
<h2> 搭建虚拟机</h2>
<p><a href="https://blog.csdn.net/hxinyu6666/article/details/127893227" target="_blank" rel="noopener noreferrer">VMware 打开运行一段时间后卡死，CPU占比增至100%</a></p>
<p><a href="https://blog.csdn.net/WeiHao0240/article/details/121076163#:~:text=Centos7%E4%BF%AE%E6%94%B9IP%E5%9C%B0%E5%9D%80%201%201.%20%E6%9F%A5%E7%9C%8B%E6%9C%AC%E5%9C%B0ip%20ifconfig%201%202%202.,%E9%87%8D%E5%90%AF%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E5%8D%B3%E5%8F%AF%20service%20network%20restart%201%20%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E9%87%8D%E5%90%AF%EF%BC%8C%E8%A6%81%E6%89%8B%E5%8A%A8%E9%87%8D%E5%90%AF%E4%B8%80%E4%B8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8D%B3%E5%8F%AF%E3%80%82%20%E6%B3%A8%E6%84%8F%EF%BC%9A%20%E5%A6%82%E6%9E%9C%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B2%A1%E6%9C%89%E6%98%BE%E7%A4%BA%E5%99%A8%EF%BC%8C%E9%82%A3%E5%B0%B1%E7%99%BB%E5%BD%95%E5%88%B0%E8%B7%AF%E7%94%B1%E5%99%A8%E9%87%8C%E9%9D%A2%E6%9F%A5%E7%9C%8B%E5%9C%A8%E7%BA%BF%E4%B8%BB%E6%9C%BA%E7%9A%84ip%E8%BF%9B%E8%A1%8C%E6%8E%A8%E6%B5%8B%E3%80%82" target="_blank" rel="noopener noreferrer">Centos7修改IP地址</a></p>
<p><a href="https://blog.csdn.net/qcsdn123/article/details/120087514" target="_blank" rel="noopener noreferrer">linux yum install **** 提示：Loaded plugins: fastestmirror</a>
<a href="https://blog.csdn.net/qq_25760623/article/details/88657491" target="_blank" rel="noopener noreferrer">centos安装docker显示 No package docker-ce available</a>
<a href="https://blog.csdn.net/Dan1374219106/article/details/112450922" target="_blank" rel="noopener noreferrer">【Bug解决】yum提示Another app is currently holding the yum lock； waiting for it to exit...</a></p>
<p><a href="https://www.cnblogs.com/HByang/p/9198712.html" target="_blank" rel="noopener noreferrer">Centos7下yum安装软件报错解决办法</a>
<a href="https://blog.csdn.net/qq_25760623/article/details/88657491" target="_blank" rel="noopener noreferrer">centos安装docker显示 No package docker-ce available</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 环境</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>/etc/profile</code> 文件中：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>xshell 上传下载文件：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sdkman jdk 管理工具</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 报错</h2>
<ol>
<li><a href="https://blog.csdn.net/NinjaKilling/article/details/125979091" target="_blank" rel="noopener noreferrer">Centos /lib64/libc.so.6: version `GLIBC_2.28‘ not found (required by</a></li>
</ol>
<h2> 容器</h2>
<h3> Docker-compose 安装</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 包管理器</h2>
<p>CentOS 安装 pip：</p>
<blockquote>
<p><a href="https://blog.csdn.net/linchare/article/details/105008530" target="_blank" rel="noopener noreferrer">Centos下安装pip命令</a></p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装 runlike，查看 docker 启动参数</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>apt-get</code> 是 Debian 和 Ubuntu 等基于 Debian 的 Linux 发行版中的包管理器，CentOS 则使用的是 <code>yum</code> 包管理器。</p>
<h2> MySQL 安装</h2>
<h3> 下载</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解压</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 创建存储文件</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 创建用户组</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 初始化 MySQL</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 添加服务到系统</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="linux"/>
    <category term="运维"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-04-27T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Lua 简单使用</title>
    <id>https://gzwrrr.github.io/article/lua/Lua.html</id>
    <link href="https://gzwrrr.github.io/article/lua/Lua.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Lua 简单使用</h1>

<h2> 概览</h2>
<p><strong>包含：</strong></p>
<ol>
<li>基础语法</li>
<li>流程控制</li>
<li>函数</li>
<li>table（包含很多函数）：pack、unpack、concat、insert、remove、sort，可以数组和 map 混合存储，且 map 的元素不占数组的索引
<ol>
<li>数组：可以有多维，数组下面从 1 开始，无需声明长度，可以随时添加元素，并且元素可以是任意类型，但是不能包含 nil</li>
<li>map</li>
</ol>
</li>
<li>迭代器：pairs（迭代数组元素）、ipairs（迭代所有元素）</li>
<li>模块：一般为一个 table</li>
<li>元表与元方法：每个普通的 table 都可以变为一个元表，可以改变普通 table 的方法或者说表现
<ol>
<li>setmetatable(table, metatable)：将 metatable 指定为普通表的元表</li>
<li>getmetatable()：获取元表</li>
</ol>
</li>
<li>对象：Lua 中没有类的概念，但是可以通过 table、function 和元表模拟类的功能和结构</li>
<li>协同线程：类型为 thread，也称为多线程，但是注意，任意时刻只会有一个协同线程执行，不会有多个，只不过可以暂停转到其他协同线程执行</li>
<li>协同函数：协同线程可以单独创建执行，也可以通过协同函数的调用启动执行，可以使用 coroutine.wrap() 获取到协同函数</li>
<li>文件 IO</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> Lua 简单使用</h1>

<h2> 概览</h2>
<p><strong>包含：</strong></p>
<ol>
<li>基础语法</li>
<li>流程控制</li>
<li>函数</li>
<li>table（包含很多函数）：pack、unpack、concat、insert、remove、sort，可以数组和 map 混合存储，且 map 的元素不占数组的索引
<ol>
<li>数组：可以有多维，数组下面从 1 开始，无需声明长度，可以随时添加元素，并且元素可以是任意类型，但是不能包含 nil</li>
<li>map</li>
</ol>
</li>
<li>迭代器：pairs（迭代数组元素）、ipairs（迭代所有元素）</li>
<li>模块：一般为一个 table</li>
<li>元表与元方法：每个普通的 table 都可以变为一个元表，可以改变普通 table 的方法或者说表现
<ol>
<li>setmetatable(table, metatable)：将 metatable 指定为普通表的元表</li>
<li>getmetatable()：获取元表</li>
</ol>
</li>
<li>对象：Lua 中没有类的概念，但是可以通过 table、function 和元表模拟类的功能和结构</li>
<li>协同线程：类型为 thread，也称为多线程，但是注意，任意时刻只会有一个协同线程执行，不会有多个，只不过可以暂停转到其他协同线程执行</li>
<li>协同函数：协同线程可以单独创建执行，也可以通过协同函数的调用启动执行，可以使用 coroutine.wrap() 获取到协同函数</li>
<li>文件 IO</li>
</ol>
<p><strong>其他：</strong></p>
<ol>
<li>
<p>空值：nil</p>
</li>
<li>
<p>函数可以当作参数传递</p>
</li>
</ol>
<h2> 流程控制</h2>
<div class="language-lua line-numbers-mode" data-ext="lua"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 模块</h2>
<div class="language-lua line-numbers-mode" data-ext="lua"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 元表</h2>
<blockquote>
<p>其他元方法看官网：<a href="https://www.lua.org/manual/5.4/" target="_blank" rel="noopener noreferrer">https://www.lua.org/manual/5.4/</a></p>
</blockquote>
<div class="language-lua line-numbers-mode" data-ext="lua"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 类</h2>
<div class="language-lua line-numbers-mode" data-ext="lua"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 协同线程</h2>
<div class="language-lua line-numbers-mode" data-ext="lua"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 协同函数</h2>
<div class="language-lua line-numbers-mode" data-ext="lua"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 文件 IO</h2>
<div class="language-lua line-numbers-mode" data-ext="lua"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="lua"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-11-10T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">Lua</title>
    <id>https://gzwrrr.github.io/article/lua/</id>
    <link href="https://gzwrrr.github.io/article/lua/"/>
    <updated>2023-05-09T06:22:40.000Z</updated>
    <summary type="html"><![CDATA[<h1> Lua</h1>

<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>Lua 官网：<a href="https://www.lua.org" target="_blank" rel="noopener noreferrer">https://www.lua.org</a></p>
</div>
<p>Lua  是一个小巧的脚本语言。是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个研究小组，由Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo所组成并于1993年开发。 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。Lua由标准C编写而成，几乎在所有操作系统和平台上都可以编译，运行。Lua并没有提供强大的库，这是由它的定位决定的。所以Lua不适合作为开发独立应用程序的语言。Lua 有一个同时进行的JIT项目，提供在特定平台上的即时编译功能。</p>]]></summary>
    <content type="html"><![CDATA[<h1> Lua</h1>

<div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>Lua 官网：<a href="https://www.lua.org" target="_blank" rel="noopener noreferrer">https://www.lua.org</a></p>
</div>
<p>Lua  是一个小巧的脚本语言。是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个研究小组，由Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo所组成并于1993年开发。 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。Lua由标准C编写而成，几乎在所有操作系统和平台上都可以编译，运行。Lua并没有提供强大的库，这是由它的定位决定的。所以Lua不适合作为开发独立应用程序的语言。Lua 有一个同时进行的JIT项目，提供在特定平台上的即时编译功能。</p>
<p>Lua脚本可以很容易的被C/C++ 代码调用，也可以反过来调用C/C++的函数，这使得Lua在应用程序中可以被广泛应用。不仅仅作为扩展脚本，也可以作为普通的配置文件，代替XML,ini等文件格式，并且更容易理解和维护. Lua由标准C编写而成，代码简洁优美，几乎在所有操作系统和平台上都可以编译，运行。一个完整的Lua解释器不过200k，在目前所有脚本引擎中，Lua的速度是最快的。这一切都决定了Lua是作为嵌入式脚本的最佳选择。</p>
<p>Lua的目标是成为一个很容易嵌入其它语言中使用的语言。大多数程序员也认为它的确做到了这一点。</p>
<h2> 安装</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <published>2023-05-09T06:22:40.000Z</published>
  </entry>
  <entry>
    <title type="text">Redis 客户端</title>
    <id>https://gzwrrr.github.io/article/redis/K-Redis%E5%AE%A2%E6%88%B7%E7%AB%AF.html</id>
    <link href="https://gzwrrr.github.io/article/redis/K-Redis%E5%AE%A2%E6%88%B7%E7%AB%AF.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Redis 客户端</h1>

<div class="hint-container info">
<p class="hint-container-title">Info</p>
<p>相关文档：</p>
<ol>
<li><a href="https://springdoc.cn/spring-data-redis/#redis" target="_blank" rel="noopener noreferrer">https://springdoc.cn/spring-data-redis/#redis</a></li>
</ol>
</div>
<h2> 概述</h2>
<p>Spring Boot 提供了多种方式来使用 Redis，以便在应用程序中进行缓存、存储和数据处理。以下是一些常见的 Spring Boot 使用 Redis 的方式：</p>]]></summary>
    <content type="html"><![CDATA[<h1> Redis 客户端</h1>

<div class="hint-container info">
<p class="hint-container-title">Info</p>
<p>相关文档：</p>
<ol>
<li><a href="https://springdoc.cn/spring-data-redis/#redis" target="_blank" rel="noopener noreferrer">https://springdoc.cn/spring-data-redis/#redis</a></li>
</ol>
</div>
<h2> 概述</h2>
<p>Spring Boot 提供了多种方式来使用 Redis，以便在应用程序中进行缓存、存储和数据处理。以下是一些常见的 Spring Boot 使用 Redis 的方式：</p>
<ol>
<li><strong>Spring Data Redis：</strong> Spring Boot 集成了 Spring Data Redis，它简化了与 Redis 数据库的交互。通过定义 Repositories，您可以使用类似于 JPA 的方式来访问和操作 Redis 数据。Spring Data Redis 支持多种数据结构，如字符串、哈希、列表、集合和有序集合。</li>
<li><strong>RedisTemplate：</strong> Spring Boot 通过 <code>RedisTemplate</code> 提供了一种编程式的方式来与 Redis 进行交互。它提供了一组方法来执行常见的 Redis 操作，如获取、设置、删除等。您可以通过 <code>RedisTemplate</code> 直接操作 Redis 数据结构。</li>
<li><strong>Spring Cache：</strong> Spring Boot 提供了缓存抽象，允许您通过在方法上添加注解来轻松地将方法调用的结果缓存到 Redis 中。您可以使用 <code>@Cacheable</code>、<code>@CachePut</code> 和 <code>@CacheEvict</code> 等注解来控制缓存的行为。</li>
<li><strong>Message Queue 和 Pub/Sub：</strong> Spring Boot 可以将 Redis 用作消息队列，实现异步消息传递。您可以使用 Spring 的 <code>RedisMessageListenerContainer</code> 来订阅和处理 Redis 发布/订阅消息。</li>
<li><strong>Spring Session：</strong> Spring Session 是一个用于管理用户会话的项目，它可以将会话数据存储在 Redis 中。这使得应用程序可以在多个实例之间共享会话数据，从而实现更好的可伸缩性。</li>
<li><strong>Spring Integration with Redis：</strong> Spring Boot 通过 Spring Integration 提供了集成 Redis 的能力，以实现企业集成模式。您可以使用 Spring Integration 来构建复杂的消息处理流程，将数据从一个系统传输到另一个系统。</li>
<li><strong>Spring Data Redis Reactive：</strong> 如果您的应用程序采用了响应式编程模型，Spring Boot 也提供了与 Redis 进行响应式交互的能力。您可以使用 Spring Data Redis 的响应式 API 来实现异步和非阻塞的操作。</li>
</ol>
<p>客户端包括：</p>
<ol>
<li><strong>Lettuce：</strong> Lettuce 是一个高性能、可扩展的 Redis 客户端库，支持异步和同步操作。它基于 Netty 构建，提供了可靠的连接池、集群支持以及响应式编程模型。在 Spring Boot 中，Lettuce 是默认的 Redis 客户端。</li>
<li><strong>Jedis：</strong> Jedis 是一个流行的 Redis 客户端库，它提供了简单的 API 用于与 Redis 进行交互。Jedis 在多个版本的 Spring Boot 中都得到了支持，但在较新的版本中，Lettuce 更为推荐，因为它更加现代化且性能更好。</li>
<li><strong>Redisson：</strong> Redisson 是一个基于 Redis 的分布式和高级 Java 数据结构库。它提供了许多高级特性，如分布式锁、分布式集合、分布式地图等。虽然 Redisson 可以用作 Redis 客户端，但它的重点更多地放在了分布式数据结构和功能之上。</li>
</ol>
<h2> Jedis</h2>
<p>最简单的引入</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info">
<p class="hint-container-title">说明</p>
<p>Jedis是Redis的Java客户端，在SpringBoot 1.x版本中也是默认的客户端。在SpringBoot 2.x版本中默认客户端是Lettuce。</p>
</div>
<p>注意：现在不建议使用 Jedis，Jedis 性能差并且不能与 Spring Boot 2.3 以上的版本进行很好的整合，直接使用 lettuce 即可，即直接引入 spring-boot-starter-data-redis。如果需要使用 Jedis 必须找到支持的版本</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整合 Jedis 与 Spring Boot 之后，可以配置 RedisTemplate 模板，同时需要注意：</p>
<ol>
<li>需要缓存到 Redis 中的实体类必须序列化</li>
<li>Spring Boot 启动类中要添加 @EnableCaching 注解</li>
<li>查询方法上要添加 @Cacheable 注解</li>
<li>对数据进行写操作的方法上需要添加 @CacheEvict 注解</li>
<li>对于需要手工操作 Redis 的方法，需要通过 RedisTemplate 来获取操作对象</li>
</ol>
<h2> Redission</h2>
<blockquote>
<p>中文文档：<a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95" target="_blank" rel="noopener noreferrer">https://github.com/redisson/redisson/wiki/目录</a></p>
</blockquote>
<div class="hint-container note">
<p class="hint-container-title">官方说明</p>
<p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务。其中包括(<code>BitSet</code>, <code>Set</code>, <code>Multimap</code>, <code>SortedSet</code>, <code>Map</code>, <code>List</code>, <code>Queue</code>, <code>BlockingQueue</code>, <code>Deque</code>, <code>BlockingDeque</code>, <code>Semaphore</code>, <code>Lock</code>, <code>AtomicLong</code>, <code>CountDownLatch</code>, <code>Publish / Subscribe</code>, <code>Bloom filter</code>, <code>Remote service</code>, <code>Spring cache</code>, <code>Executor service</code>, <code>Live Object service</code>, <code>Scheduler service</code>) Redisson提供了使用Redis的最简单和最便捷的方法。Redisson的宗旨是促进使用者对Redis的关注分离（Separation of Concern），从而让使用者能够将精力更集中地放在处理业务逻辑上。</p>
</div>
<p>依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例：</p>
<blockquote>
<p>Redisson框架提供的几乎所有对象都包含了<code>同步</code>和<code>异步</code>相互匹配的方法。这些对象都可以通过<code>RedissonClient</code>接口获取。同时还为大部分Redisson对象提供了满足<a href="http://reactive-streams.org/" target="_blank" rel="noopener noreferrer"><code>异步流处理标准</code></a>的程序接口<code>RedissonReactiveClient</code>。除此外还提供了<code>RxJava2</code>规范的<code>RedissonRxClient</code>程序接口。这些对象实例均是线程安全的</p>
</blockquote>
<ol>
<li>RedissonClient</li>
<li>RedissonReactiveClient</li>
<li>RedissonRxClient</li>
</ol>
<h3> 分布式锁</h3>
<ol>
<li><a href="https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#81-%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81reentrant-lock" target="_blank" rel="noopener noreferrer">可重入锁（Reentrant Lock）</a>：加锁对象可重入访问共享资源</li>
<li><a href="https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#82-%E5%85%AC%E5%B9%B3%E9%94%81fair-lock" target="_blank" rel="noopener noreferrer">公平锁（Fair Lock）</a>：默认是非公平锁，可以设置成公平锁，所有想要过的锁的线程进入队列</li>
<li><a href="https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#83-%E8%81%94%E9%94%81multilock" target="_blank" rel="noopener noreferrer">联锁（MultiLock）</a>：同时处理多个共享资源时可以使用联锁，即一次性申请多个锁（原子性操作），同时锁住多个共享资源，同时还能够预防死锁</li>
<li><a href="https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#84-%E7%BA%A2%E9%94%81redlock" target="_blank" rel="noopener noreferrer">红锁（RedLock）</a>：只有所有锁中的大部分申请成功才能加锁，一般用于解决 Redis 主从集群丢失锁的问题</li>
<li><a href="https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#85-%E8%AF%BB%E5%86%99%E9%94%81readwritelock" target="_blank" rel="noopener noreferrer">读写锁（ReadWriteLock）</a>：一个共享资源在没有写锁的情况下，可以添加多个读锁，一旦添加了写锁，就不能添加写锁或者读锁</li>
<li><a href="https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#86-%E4%BF%A1%E5%8F%B7%E9%87%8Fsemaphore" target="_blank" rel="noopener noreferrer">信号量（Semaphore）</a>：无论谁添加的锁，其他线程都可以解锁；当一个线程需要一次性申请多个资源时，也可以使用信号量机制</li>
<li><a href="https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#87-%E5%8F%AF%E8%BF%87%E6%9C%9F%E6%80%A7%E4%BF%A1%E5%8F%B7%E9%87%8Fpermitexpirablesemaphore" target="_blank" rel="noopener noreferrer">可过期性信号量（PermitExpirableSemaphore）</a>：一次只能申请一个，每个信号量都有过期时间，且每个信号量可以通过独立的 ID 来识别和释放</li>
<li><a href="https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#88-%E9%97%AD%E9%94%81countdownlatch" target="_blank" rel="noopener noreferrer">闭锁（CountDownLatch）</a>：一个线程或者多个线程，必须在其他某些任务执行完毕后执行，此时可以使用闭锁，比如说分布式计算，计算结果依赖于各个计算步骤的结果</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="redis"/>
    <category term="数据库"/>
    <category term="缓存"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-05-22T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">JVM 垃圾回收器</title>
    <id>https://gzwrrr.github.io/article/java/D-Jvm/G-JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8.html</id>
    <link href="https://gzwrrr.github.io/article/java/D-Jvm/G-JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> JVM 垃圾收集器</h1>
<blockquote>
<p>什么是垃圾：运行程序中没有任何「指针」指向的对象</p>
<p>为什么进行垃圾回收：不进行内存管理会造成内存泄露、内存溢出</p>
</blockquote>
<p>经典三问：</p>
<ol>
<li>那些内存需要回收？</li>
<li>什么时候回收？</li>
<li>如何回收？</li>
</ol>
<p>常见的两种标记算法：</p>
<ol>
<li>引用计数算法</li>
<li>可达性分析算法</li>
</ol>
<p>常见的三种回收算法：</p>
<ol>
<li>标记-清除算法</li>
<li>标记-压缩算法</li>
<li>复制算法</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> JVM 垃圾收集器</h1>
<blockquote>
<p>什么是垃圾：运行程序中没有任何「指针」指向的对象</p>
<p>为什么进行垃圾回收：不进行内存管理会造成内存泄露、内存溢出</p>
</blockquote>
<p>经典三问：</p>
<ol>
<li>那些内存需要回收？</li>
<li>什么时候回收？</li>
<li>如何回收？</li>
</ol>
<p>常见的两种标记算法：</p>
<ol>
<li>引用计数算法</li>
<li>可达性分析算法</li>
</ol>
<p>常见的三种回收算法：</p>
<ol>
<li>标记-清除算法</li>
<li>标记-压缩算法</li>
<li>复制算法</li>
</ol>
<p>垃圾回收步骤：</p>
<ol>
<li>确定内存中存活和死亡的对象</li>
<li>执行垃圾回收，释放占用的内存空间</li>
</ol>
<h2> 垃圾回收算法</h2>
<p>标记阶段：</p>
<ol>
<li>引用计数算法</li>
<li>可达性分析算法</li>
</ol>
<p>清除阶段：</p>
<ol>
<li>标记-清除算法</li>
<li>标记-压缩算法</li>
<li>复制算法</li>
</ol>
<h3> 引用计数</h3>
<p>判断对象存活：一般有引用计数和可达性分析算法。当一个对象没有被任何对象引用时就不是存活的</p>
<p>引用计数就是对每个对象保存一个整型的引用计数器属性，用于记录对象被引用的次数</p>
<p>当对象 A 的引用计数器的值为 0 时表示该对象不可能再被使用，可以进行垃圾回收</p>
<p>优点：</p>
<ol>
<li>实现简单</li>
<li>垃圾对象便于识别</li>
<li>判定效率高，回收没有延迟性</li>
</ol>
<p>缺点：</p>
<ol>
<li>需要单独的字段存储计数器，增加了存储空间的开销</li>
<li>每次赋值都需要更新计数器，伴随加减操作，增加了时间开销</li>
<li>无法处理「循环引用」的问题，这点非常严重，导致了 Java 的垃圾回收器中没有使用这类算法</li>
</ol>
<h3> 可达性分析算法</h3>
<blockquote>
<p>也称为：跟搜索算法、追踪性垃圾收集</p>
</blockquote>
<p>可以有效地解决引用计算算法中的循环引用问题，是较为常用的算法</p>
<p><strong>基本步骤：</strong></p>
<ol>
<li>以「根对象（GC Roots）」为起始点，按照从上到下的方式搜索被根对象集合连接的目标对象是否可达</li>
<li>内存中的「存活对象」都会被根对象集合直接或者间接连接着，搜索时走过的路径称为「引用链」</li>
<li>如果目标对象没有任何引用链相连就是不可达的，可以标记为垃圾对象</li>
</ol>
<p><strong>根对象包括（非堆区的对象：栈、方法区、虚拟机、锁住的对象）：</strong></p>
<ol>
<li>虚拟机栈中引用的对象：比如各个线程调用的方法中使用到的参数、局部变量等</li>
<li>本地方法栈内 JNI 引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象：比如字符串常量池中引用的对象</li>
<li>所有被同步锁 synchronizeed 持有的对象</li>
<li>虚拟机内部的应用：比如基本数据类型对应的 Class 对象，一些常驻的异常对象，系统类加载器</li>
<li>反应虚拟机内部情况的 JMXBean、JVMTI 中注册的回调、本地代码缓存等</li>
</ol>
<p><strong>判断根对象的小技巧：保存了堆内存中的对象，但是自身又不再堆内存里面，那么大概率是一个根对象</strong></p>
<p><strong>注意点：</strong></p>
<ol>
<li>如果需要使用可达性分析算法，那么分析工作必须在一个能够保障「一致性」的快照进行，如果不能满足这一点，那么分析结果的准确性就无法保证</li>
<li>这一点也导致了 GC 时必须「Stop The World」，即使是在号称（几乎）不会发生停顿的 CMS 收集器中，枚举根节点时也是必须要停顿的</li>
</ol>
<h3> Finalization 机制</h3>
<ol>
<li>Java 提供了对象终止机制来允许开发人员提供对象被销毁之前的「自定义销毁逻辑」</li>
<li>垃圾回收前，总会先调用这个对象的 <code>finalize()</code> 方法</li>
<li><code>finalize()</code> 方法允许被子类重写，用于在对象被回收时进行资源释放。通常用于关闭文件、套接字、数据库连接等</li>
</ol>
<p>注意点：不用调用某个对象的 <code>finalize()</code> 方法，应该交给垃圾回收机制调用，因为：</p>
<ol>
<li>在 <code>finalize()</code> 时可能导致对象复活</li>
<li><code>finalize()</code>  方法的执行时间没有保障，完全由 GC 线程决定，极端情况下，如果不发生 GC，则 <code>finalize()</code> 方法将没有执行机会</li>
<li>一个糟糕的 <code>finalize()</code> 重写会严重影响 GC 的性能</li>
</ol>
<p>由于 <code>finalize()</code> 方法的存在，虚拟机中的对象一般处于三种可能的状态：</p>
<ol>
<li>可触及的：从跟节点出发，可以到达这个对象</li>
<li>可复活的：对象的所有引用都被释放，但是对象有可能在 <code>finalize()</code> 方法中复活</li>
<li>不可触及的：对象的 <code>finalize()</code> 方法被调用，并且没有复活，那么就会进入不可触及状态，该状态下对象不可能被复活，因为 <code>finalize()</code> 方法只会被调用一次。只有在对象不可触及时才可以被回收</li>
</ol>
<p>判定一个对象是否可以回收，至少要经历两次标记：</p>
<ol>
<li>如果该对象没有引用链，进行第一次标记</li>
<li>进行筛选：判断此对象是否有必要执行 <code>finalize()</code> 方法：
<ol>
<li>如果该对象没有重写 <code>finalize()</code> 方法，或者 <code>finalize()</code> 已经被虚拟机调用过，那么就视为没有必要执行，被判定为不可触及的</li>
<li>如果对象重写了 <code>finalize()</code> ，并且还没有执行，那么该对象会被插入到 F-Queue 队列中，由一个虚拟机自动创建的、低优先级的 Finalizer 线程触发其 <code>finalize()</code> 方法</li>
<li><code>finalize()</code>  方法时对象复活的最后机会，稍后 GC 会对 F-Queue 队列中的对象进行「二次标记」。如果该对象在 <code>finalize()</code> 中与引用链上的任意对象连接，那么在第二次标记时该对象就会被移出即将回收的集合中。之后对象会再次出现没有引用存在的情况，这个情况下，<code>finalize()</code> 方法不会被再次执行，对象会直接变成不可触及状态，也就是说，一个对象的 <code>finalize()</code> 方法只会被调用一次</li>
</ol>
</li>
</ol>
<h3> 标记-清除算法</h3>
<p>执行过程：</p>
<ol>
<li>当堆中的有效内存被耗尽时，会停止整个程序（STW），然后进行标记和清除工作</li>
<li>标记就是收集器从引用根节点触发，标记所有被引用过的对象，一般是在对象的 Header 对象头中记录为可达对象</li>
<li>清除就是收集器对堆内存从头到尾进行线性的遍历，如果发现否个对象没有标记为可达对象，就将其进行回收</li>
</ol>
<p>缺点：</p>
<ol>
<li>效率不高</li>
<li>GC 时需要 STW</li>
<li>清理出来的空闲内存不是连续的，还需要维护一个空闲列表</li>
</ol>
<p>注意：这里的清除不是真的置空，而是把需要清除的对象地址保存在空闲地址列表里，新对象需要加载时就判断空间是否足够</p>
<h3> 复制算法</h3>
<p>为了解决标记-清除算法效率低的问题，出现了复制算法</p>
<p>复制算法的核心思想：</p>
<ol>
<li>内存空间分为两块，每次只是用其中的一块</li>
<li>在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象</li>
<li>交换两个内存块的角色，最后完成垃圾回收</li>
</ol>
<p>优点：</p>
<ol>
<li>没有标记和清除过程，实现简单，运行高效</li>
<li>复制后能够保证空间连续，不会出现碎片</li>
</ol>
<p>缺点：</p>
<ol>
<li>需要两倍的内存空间</li>
<li>对于 G1 这种芬超成为大量 region 的 GC，复制而不是移动也就意味着 GC 时需要为胡 region 之间对象的引用关系，内存占用和时间开销都不小</li>
</ol>
<p>注意：存活对象非常多时复制算法效率也比较低</p>
<h3> 标记-压缩算法</h3>
<p>老年代中的对象一般都是存活的，使用复制算法不理想，出现了标记-压缩算法</p>
<p>标记压缩算法执行过程：</p>
<ol>
<li>第一阶段和标记-清除算法一样，即标记所有被引用的对象</li>
<li>第二阶段将所有存活对象压缩到内存的一端，并按顺序排放</li>
<li>清理边界外的所有空间</li>
</ol>
<p>当需要给新对象分配内存时，JVM 只需要持有一个内存的起始地址即可，这样比维护一个空闲列表减小了许多开销（相比于标记-清除算法）</p>
<p>优点：</p>
<ol>
<li>消除了标记-清除算法内存区域分散的缺点</li>
<li>消除了复制算法内存减半的代价</li>
</ol>
<p>缺点：</p>
<ol>
<li>效率低于复制算法</li>
<li>移动对象时，如果对象被其他对象引用，还需要调整引用的地址（Java 中不是用句柄池，而是直接引用）</li>
<li>移动过程中，需要 STW</li>
</ol>
<h3> 分代收集算法</h3>
<blockquote>
<p>不同的对象的生命周期不一致，针对不同生命周期的对象可以采取不同的收集方式，提高回收效率</p>
</blockquote>
<p>目前几乎所有 GC 都是采用分代收集，一般分为年轻代和老年代：</p>
<ol>
<li>年轻代垃圾收集比较频繁，适合使用复制算法</li>
<li>老年代对象生命周期长，一般使用标记-清除和标记-整理的混合实现</li>
</ol>
<p>HotSpot 虚拟机中的 CMS 收集器是基于标记-清除算法实现的，对于对象的回收效率很高。对于碎片问题，CMS 采用基于 Mark-Compact 算法的 Serial Old 回收器作为补偿措施，即当内存回收不佳，将采用 Serial Old 执行 Full GC 对老年代内存进行整理</p>
<h3> 增量收集算法</h3>
<p>如果一次性将所有的垃圾进行处理，会造成长时间停顿，那么可以让垃圾收集线程和应用程序线程交替执行，每次垃圾收集线程只收集一片区域的内存空间</p>
<p>增量收集算法的基础仍是标记-清除算法和复制算法，增量收集算法通过对线程间冲突的妥善处理，允许垃圾收集线程以分阶段的方式完成标记、清理、复制的工作</p>
<p>缺点：线程上下文切换开销大，会使得垃圾回收的总体成本上升，造成系统吞吐量下降</p>
<h3> 分区算法</h3>
<blockquote>
<p>主要针对于 G1 垃圾收集器</p>
</blockquote>
<p>将一块大的内存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区域，减少一次 GC 产生的停顿。每一个小区间都独立使用，独立回收，好处是能够控制一次回收多少个小区间</p>
<h2> 垃圾收集相关知识</h2>
<h3> System.gc()</h3>
<p>通过 <code>System.gc()</code> 或者 <code>Runtime.getRuntime.gc()</code> 的调用，会显式触发 Full GC，同时对年轻代和老年代进行回收</p>
<p>但是注意，调用后无法保证对垃圾收集器的调用，换句话说，调用后只是希望 JVM 进行一次 Full GC</p>
<h3> 内存溢出与内存泄露</h3>
<p>内存溢出（OOM）式相对于内存泄露来说的，OOM 是因为没了有空闲空间，并且垃圾回收器也无法提供更多的内存，堆内存不足的原因主要有：</p>
<ol>
<li>虚拟机的堆内存设置不够</li>
<li>代码中创建了大量对象，并且长时间不能被垃圾收集器回收</li>
</ol>
<p>内存泄漏是指对象不会被程序用到，但是 GC 又不能将他们回收的情况。对象生命周期过长也会造成宽泛意义上的内存泄露，例如单例模式对象不会被回收</p>
<p>一些以提供了 <code>close()</code> 方法的资源未关闭也可能导致不能被回收导致内存泄露，比如数据库连接</p>
<h3> Stop The World</h3>
<p>程序 GC 时会产生停顿，因为回收算法的分析工作必须在一个必须能保证一致性的快照中进行，即不停顿就不能保证一致性</p>
<p>被 STW 中断的应用程序会在 GC 之后恢复</p>
<p>STW 与采用哪款 GC 无关，即 STW 是一定会发生的，但是不同的垃圾收集器 STW 时间会有差异</p>
<p>注意：开发中不要显式调用 <code>System.gc()</code>，因为会发生 STW</p>
<h3> 垃圾回收的并行与并发</h3>
<blockquote>
<p>此处的概念针对于垃圾回收线程</p>
</blockquote>
<p>并行：指多条垃圾回收线程并行工作，此时用户线程处于等待状态，此类垃圾回收器有：</p>
<ol>
<li>ParNew</li>
<li>Parallel</li>
<li>Scavenge</li>
<li>Parallel Old</li>
</ol>
<p>串行：垃圾回收器单线程执行</p>
<p>并发：指用户线程与垃圾收集线程同时执行，但是不是并行，而是交替执行，此时垃圾回收线程在执行时不会停顿用户程序的运行，此类垃圾回收器有：</p>
<ol>
<li>CMS</li>
<li>G1</li>
</ol>
<h3> 安全点与安全区域</h3>
<p>程序执行时并非所有地方都可以停止进行 GC，只有特定位置才能停顿，这些位置称为安全点（SafePoint）</p>
<p>安全点的选择很重要，太少会导致 GC 等待时间过长，太多可能导致运行时出现性能下降的问题</p>
<p>通常选择一些执行时间较长的执行作为安全点，比如方法调用、循环跳转、异常跳转等</p>
<p>在 GC 发生时有两种中断方式：</p>
<ol>
<li>抢占式中断（已经不使用）：中断所有线程，如果还有线程不在安全点，恢复线程运行，再到安全点停止</li>
<li>主动式中断：设置一个中断标志，各个线程运行到安全点时主动轮询这个标志，如果中断标志为真，则将自己中断挂起</li>
</ol>
<p>安全区域（SafeRegion）是指一段代码片段中，对象的引用关系不会发生改变，在这个区域中的任何位置开始 GC 都是安全的，例如线程处于 Sleep 状态或者 Blocked 状态</p>
<h3> 引用</h3>
<ol>
<li>强引用：强引用对象永远不会被回收</li>
<li>软引用：内存不足时进行回收</li>
<li>弱引用：软引用的对象只能存活到下一次垃圾回收之前</li>
<li>虚引用：是否有虚引用都不影响对象回收，虚引用的目的就是能在这个对象被垃圾回收器回收时收到一个系统通知</li>
</ol>
<h2> 垃圾收集器</h2>
<p>按垃圾回收的线程数，可以分为：</p>
<ol>
<li>串行垃圾收集器</li>
<li>并行垃圾收集器</li>
</ol>
<p>按工作模式，可以分为：</p>
<ol>
<li>并发式垃圾回收器：回收线程与用户线程交替执行</li>
<li>独占式垃圾回收器：回收时用户线程停止（STW）</li>
</ol>
<p>按碎片处理方式，可以分为：</p>
<ol>
<li>压缩式垃圾回收器：会清理碎片，之后分配对象采用指针碰撞</li>
<li>非压缩式垃圾回收器：不会清理碎片，之后分配对象采用空闲列表</li>
</ol>
<p>按工作内存区间，可以分为：</p>
<ol>
<li>年轻代垃圾回收器</li>
<li>老年代垃圾回收器</li>
</ol>
<h3> 评估GC 的性能指标</h3>
<ol>
<li>吞吐量：用户代码运行时间占总时间的比例</li>
<li>垃圾收集开销：垃圾收集运行时间占总时间的比例</li>
<li>暂停时间：执行垃圾收集时，程序的工作线程被暂停的时间</li>
<li>收集频率：相对于应用程序的执行，收集操作发生的频率</li>
<li>内存占用：Java 堆区所占的内存大小</li>
<li>快速：一个对象从诞生到被回收所经历的时间</li>
</ol>
<p>重点关注：吞吐量、暂停时间（最重要）</p>
<p>现在的标准一般是：在最大吞吐量优先的情况下，降低停顿时间</p>
<h3> 垃圾收集器发展史</h3>
<ol>
<li>1999：第一款串行式收集器 Serial GC；ParNew GC 是 Serial 的多线程版本</li>
<li>2002：Parallel GC（JDK 6 之后的默认收集器） 和 Concurrent Mark Sweep GC（CMS）发布</li>
<li>2012：G1 发布，2017 年 JDK 9 中 G1 代替 CMS 成为默认垃圾回收器，2018 年 G1 并行性改善</li>
<li>2018：JDK 11 引入 Epsilon GC，又称为「No-op」无操作回收器；同时引入 ZGC 可伸缩的低延迟垃圾回收器</li>
<li>2019：JDK 12 增强 G1，同时引入了 Shenandoah GC 低停顿时间 GC</li>
<li>2019：JDK 13 增强 ZGC</li>
<li>2020：JDK 14 删除 CMS 垃圾回收器，扩展 ZGC 在 macOS 和 Windows 上的而应用</li>
</ol>
<h3> 回收器分类</h3>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//jvm/20230513/垃圾收集器分类.png" alt="image-20230511163504305" tabindex="0" loading="lazy"><figcaption>image-20230511163504305</figcaption></figure>
<p><strong>经典回收器：</strong></p>
<p>串行回收器：</p>
<ol>
<li>Serial（年轻代）</li>
<li>Serial Old（又称为：MSC，老年代）</li>
</ol>
<p>并行回收器：</p>
<ol>
<li>ParNew（年轻代）</li>
<li>Parallel Scavenge（年轻代）</li>
<li>Parallel Old（老年代）</li>
</ol>
<p>并发回收器：</p>
<ol>
<li>CMS（老年代、低延时）</li>
<li>G1（年轻代和老年代）</li>
</ol>
<p><strong>一般组合如下：</strong></p>
<ol>
<li>Serial + Serial Old：一般用于客户端（单核 CPU）</li>
<li>ParNew + CMS：JDK 8 之前可以使用，JDK 9 之后不建议使用</li>
<li>Parallel Scavenge + Parallel Old： JDK 8 默认收集器，吞吐量优先，可以自适应调节，和上面两个组合相比底层实现不一致，主要用于交互少的后台运算，高吞吐量适用于服务端</li>
<li>G1：JDK 9 之后的默认垃圾收集器，官方称为全功能收集器，在停顿时间可控情况下，尽可能提高吞吐量</li>
</ol>
<p><strong>一般来说：</strong></p>
<ol>
<li>最小化使用内存和并行开销，用 Serial GC</li>
<li>最小化 GC 的中断时间，用 CMS GC</li>
<li>最大化应用程序的吞吐量，用 Parallel GC</li>
</ol>
<p><strong>新生代 GC：</strong></p>
<ol>
<li>Epsilon GC：无操作 GC</li>
<li>Shenandoah GC（RedHat）：低停顿 GC，但是吞吐量下降</li>
<li>ZGC：可伸缩 GC，性能很高，未来可能替代 G1</li>
</ol>
<p><strong>其他：</strong></p>
<ol>
<li>AliGC：性能比 G1 稍好一些</li>
<li>Zing：低延迟 GC</li>
</ol>
<h3> G1 垃圾回收器</h3>
<ol>
<li>G1 把堆内存分割成很多 Region，这些 Region 逻辑上连续，物理上不连续，以此避免在整个堆区进行垃圾收集</li>
<li>G1 会跟踪各个垃圾堆积的价值大小（回收获得的空间大小以及需要的时间），会在后台维护一个优先列表，每次根据允许的回收时间，优先回收最大价值的 Region</li>
<li>由于这种方式侧重于回收垃圾最大量的 Region，所以才称为 G1 垃圾有限（Garbage First）</li>
<li>G1 时面向服务端的垃圾收集器，主要针对配备多核 CPU 以及大容量内存的机器</li>
</ol>
<h4>G1 的特点</h4>
<ol>
<li>分代收集：逻辑上或分为多个 Region，物理上不要求连续</li>
<li>空间整合：内存回收以 Region 为单位，Region 之间时复制算法，但是整体上可以看作是标记-压缩算法，能够避免内存碎片，有利于程序长时间运行</li>
<li>可预测的停顿模型：能够指定垃圾收集不得超过多少毫秒</li>
<li>并行性：G1 在回收期间，可以有多个 GC 线程同时工作，有效利用多核计算能力</li>
<li>并发性：G1 拥有与程序交替执行的能力，一般不会在整个回收阶段发生完全阻塞应用程序的情况</li>
</ol>
<p>**注意：**G1 相较于 CMS 没有压倒性的优势，G1 在大内存应用上比较能够发挥优势，平衡点在 6 ~ 8 GB 左右，在小内存应用上 CMS 的表现大概率会好于 G1</p>
<br>
<p>一般使用 G1 时考虑到调优要进行三步：</p>
<ol>
<li>开启 G1 垃圾收集器（JDK 9 默认）</li>
<li>设置堆的最大内存</li>
<li>设置最大停顿时间</li>
</ol>
<br>
<p>G1 中提供了三种垃圾回收模式：</p>
<ol>
<li>Young GC</li>
<li>Mixed GC</li>
<li>Full GC</li>
</ol>
<h4>G1 的使用场景</h4>
<ol>
<li>面向服务端应用，针对具有大内存、多处理器的机器</li>
<li>最主要的应用是需要低 GC 延迟，并具有大堆的应用程序（比如堆大小为 6 GB 以上，可预测的停顿时间低于 500 ms）</li>
<li>可以用于替代 CMS 收集器，当发现堆中的活动数据超过了 50% 或者停顿时间过长（大于 500 ms）时效果较好</li>
</ol>
<h4>Region 分区</h4>
<p>注意：Region 的角色在回收之后可以变更</p>
<p>一个 Region 只可能属于下面四个角色之一：</p>
<ol>
<li>Eden</li>
<li>Survivor</li>
<li>Old / Tenured</li>
<li>Humongous：主要用于存放大对象（对象大小大于 1.5 个 Region）</li>
</ol>
<p>设置 Humongous 的原因：短期存在的大对象如果直接分配到老年代会对垃圾收集带来负面影响，此时划分一个 H 区有利于削弱影响。注意，如果一个 H 区装不下一个大对象，那么会寻找更大的连续的 H 区进行存储，实在找不到只能进行 Full GC。G1 大多数行为都把 H 区当作是老年代的一部分来看待</p>
<h4>G1 回收过程</h4>
<p>一般有以下三个步骤：</p>
<ol>
<li>Young GC：当 Eden 区空间耗尽时，会进行 Young GC，此时只会回收 Eden 和 Survivor 区，注意 Survivor 区满时不会触发 Young GC</li>
<li>Young GC + 老年代并发标记：默认内存使用 45% 时触发</li>
<li>Mixed GC</li>
</ol>
<p>如果需要也会进行 Full GC，这是针对 GC 评估失败提供的一种失败保护机制，即强力回收</p>
<br>
<p><strong>补充知识 —— 记忆集：</strong></p>
<ol>
<li>由于一个对象可以被多个不同区域引用，如果没有任何措施，则 GC 时需要遍历全部区域，这样会降低回收效率</li>
<li>无论是 G1 还是其他分代收集器， JVM 都是使用「记忆集」来避免对堆的遍历</li>
<li>每个 Region 都对应一个记忆集，每次引用类型写数据时都会产生「写屏障」中断操作，然后检查要写入的引用指向的对象是否和该引用对象在不同的 Region 区域，如果不同就会通过 CardTable 把相关引用信息记录到引用指向的对象的 Region 的记忆集中</li>
<li>在 GC 根结点的时加入记忆集就可以保证不进行全局扫描，同时也能做到不遗漏</li>
</ol>
<br>
<p><strong>G1 回收过程：</strong></p>
<ol>
<li>扫描 -&gt; 更新记忆集 -&gt; 处理记忆集 -&gt; 复制对象 -&gt; 处理（强软弱虚）引用</li>
<li>STW 初始标记可达对象 -&gt; 根区域扫描 -&gt; 并发标记 -&gt; SATB 算法再次标记 -&gt; 独占清理 -&gt; 并发清理</li>
<li>混合回收：随着老年代对象增多，为了避免堆内存耗尽，在处理回收年轻代还会回收一部分老年代，默认会分 8 次回收老年代</li>
<li>Full GC：当并发处理过程完成之前空间就耗尽了，或者没有足够的空间存放晋升对象时会触发 Full GC</li>
</ol>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="java"/>
    <category term="JVM"/>
    <category term="虚拟机"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-06-11T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">分库分表</title>
    <id>https://gzwrrr.github.io/article/mysql/%E4%BC%98%E5%8C%96/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.html</id>
    <link href="https://gzwrrr.github.io/article/mysql/%E4%BC%98%E5%8C%96/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 分库分表</h1>

<h2> 概述</h2>
<p>传统数据库难以支撑一些高并发的互联网场景，此时 SQL 优化指标不治本</p>
<p>数据体量大、产生速度快、访问态频繁</p>
<p>数据库集群化一般有两种方案：</p>
<ol>
<li>水平扩展，分库分表</li>
<li>NewSQL（ClickHouse、voltdb、tidb等）</li>
</ol>
<p>分库分表的作用：提升数据库性能</p>
<p>分表分为：</p>
<ol>
<li>水平切分：又称为 Sharding，它是将同一个表中的记录拆分到多个结构相同的表中。当一个表的数据不断增多时，Sharding 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓存单个数据库的压力</li>
<li>垂直切分：将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分，也可以利用垂直切分将经常被使用的列和不经常被使用的列切分到不同的表中。在数据库的层面使用垂直切分将按数据库中表的密集程度部署到不同的库中，例如将原来的电商数据库垂直切分成商品数据库、用户数据库等</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> 分库分表</h1>

<h2> 概述</h2>
<p>传统数据库难以支撑一些高并发的互联网场景，此时 SQL 优化指标不治本</p>
<p>数据体量大、产生速度快、访问态频繁</p>
<p>数据库集群化一般有两种方案：</p>
<ol>
<li>水平扩展，分库分表</li>
<li>NewSQL（ClickHouse、voltdb、tidb等）</li>
</ol>
<p>分库分表的作用：提升数据库性能</p>
<p>分表分为：</p>
<ol>
<li>水平切分：又称为 Sharding，它是将同一个表中的记录拆分到多个结构相同的表中。当一个表的数据不断增多时，Sharding 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓存单个数据库的压力</li>
<li>垂直切分：将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分，也可以利用垂直切分将经常被使用的列和不经常被使用的列切分到不同的表中。在数据库的层面使用垂直切分将按数据库中表的密集程度部署到不同的库中，例如将原来的电商数据库垂直切分成商品数据库、用户数据库等</li>
</ol>
<p>优劣：</p>
<ol>
<li>垂直分片：按照业务拆分，专用性提升，能够分担数据库压力，但是不能解决性能问题</li>
<li>水平分片：按照某种规则将单表数据分到多张表中，可以突破单机数据量的瓶颈</li>
</ol>
<p>选型：分库分表的产品很多，但是目前影响力最大的还是 ShardingSphere</p>
<p>问题：</p>
<ol>
<li>未来业务量是否能够预估？</li>
<li>分片的策略怎么选择</li>
<li>主键唯一性问题</li>
<li>分布式事务</li>
<li>SQL 路由</li>
<li>结果归并</li>
</ol>
<p>什么时候分库分表：</p>
<ol>
<li>预估数据量：三年内单表数据量大于 500 W 或者单表数据文件大于 2 G</li>
<li>预估数据趋势：订单类的数据会持续告诉增长，需要尽早考虑分库分表，并且要预留空间</li>
<li>预估应用场景：读多写少比较适合分库分表，对于分片键变化频繁且需要做迁移的的数据则不适合</li>
<li>预估业务复杂度：业务逻辑与分片逻辑是绑定的，会给 SQL 执行带来很多限制，如果数据查询逻辑变化非常大，那么就不适合分库分表</li>
</ol>
<p>分库分表与多数据源：</p>
<ol>
<li>分库分表需要管理多个数据源，但是重点一般放在 SQL 的优化、改写、归并等一系列解决方案</li>
<li>如果只是需要简单的切换多个数据源，对于 SQL 逻辑没有要求，此时就不需要分库分表，直接选择多数据源的切换方案</li>
</ol>
<br>
<p>知识点：</p>
<ol>
<li>数据库水平扩展原理和技术：包括分库分表、数据分片、数据拆分、数据复制等技术，可以通过横向扩展来增加数据库的处理能力和存储容量。</li>
<li>数据库读写分离原理和技术：将读和写请求分别发送到不同的节点上处理，提高数据库的并发能力和吞吐量。</li>
<li>分布式事务管理原理和技术：在分布式环境中管理事务的一致性和隔离性，避免因分库分表而导致的数据不一致问题。</li>
<li>数据库优化和调优：包括SQL语句优化、索引优化、表结构优化等技术，可以提高数据库的查询性能和响应速度。</li>
<li>数据库安全和备份恢复：包括数据库安全设置、备份和恢复策略、数据加密等技术，可以保障数据库的安全性和可靠性。</li>
</ol>
<br>
<p>工具：</p>
<ol>
<li>数据库中间件：如MyCat、ShardingSphere等，可以提供分库分表、读写分离、分布式事务等功能，简化应用程序对数据库的访问。</li>
<li>数据库管理工具：如Navicat、SQLyog等，可以管理和监控多个数据库节点，并进行SQL语句的执行和优化。</li>
<li>数据库备份和恢复工具：如mysqldump、xtrabackup等，可以进行数据库的备份和恢复。</li>
<li>性能测试和负载测试工具：如JMeter、LoadRunner等，可以对数据库进行性能和负载测试，评估数据库的性能和可靠性。</li>
<li>数据库监控和报警工具：如Zabbix、Nagios等，可以监控数据库的性能和运行状况，并进行报警和告警。</li>
</ol>
<h2> 水平切分</h2>
<h3> 切分策略</h3>
<p>美团的分库分表策略（哈希取模）：</p>
<blockquote>
<p>数据水平切分后我们希望是一劳永逸或者是易于水平扩展的，所以推荐采用mod 2^n这种一致性Hash。</p>
<p>以统一订单库为例，我们分库分表的方案是32*32的，即通过UserId后四位mod 32分到32个库中，同时再将UserId后四位Div 32 Mod 32将每个库分为32个表，共计分为1024张表。线上部署情况为8个集群(主从)，每个集群4个库。</p>
</blockquote>
<p>哈希取模: hash(key) % NUM_DB</p>
<ol>
<li>优点：数据存储比较均匀</li>
<li>缺点：扩容需要大量数据迁移</li>
</ol>
<p>范围: 可以是 ID 范围也可以是时间范围</p>
<ol>
<li>优点：扩容不需要迁移数据</li>
<li>缺点：数据存放不均匀，容易产生数据倾斜</li>
</ol>
<p>映射表（查询切分）: 使用单独的一个数据库来存储映射关系</p>
<h3> ID 生成策略</h3>
<p>在分库分表的场景下，常用的ID生成策略包括：</p>
<ol>
<li>自增ID：在单库场景下，可以使用自增ID来作为主键，但在分库分表场景下，多个库中自增ID会有重复，需要进行特殊处理。</li>
<li>UUID：UUID是一种通用唯一识别码，可以在不同机器上生成全局唯一的ID。在分库分表场景下，可以使用UUID作为主键，但是UUID本身较长，不利于索引。</li>
<li>基于时间戳的ID（例如 Snowflake<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup><a class="footnote-anchor" id="footnote-ref1">、Flickr<sup class="footnote-ref"></sup></a><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2">）：根据时间戳生成的ID，可以保证ID的有序性，但是在分布式场景下需要解决时间戳回拨的问题。</a></li><a class="footnote-anchor" id="footnote-ref2">
</a></ol><a class="footnote-anchor" id="footnote-ref2">
<p>美团的 ID 生成策略：</p>
<blockquote>
<p>为了减少运营成本并减少额外的风险我们排除了所有需要独立集群的方案，采用了带有业务属性的方案： &gt; 时间戳+用户标识码+随机数</p>
<p>有下面几个好处：</p>
<ul>
<li>方便、成本低。</li>
<li>基本无重复的可能。</li>
<li>自带分库规则，这里的用户标识码即为用户ID的后四位，在查询的场景下，只需要订单号就可以匹配到相应的库表而无需用户ID，只取四位是希望订单号尽可能的短一些，并且评估下来四位已经足够。</li>
<li>可排序，因为时间戳在最前面。</li>
</ul>
<p>当然也有一些缺点，比如长度稍长，性能要比int/bigint的稍差等。</p>
</blockquote>
</a><h3><a class="footnote-anchor" id="footnote-ref2"></a> Sharding 存在的问题</h3>
<ol>
<li>
<p>事务问题：使用分布式事务来解决，比如 XA 接口<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup></p><a class="footnote-anchor" id="footnote-ref3">
</a></li><a class="footnote-anchor" id="footnote-ref3">
<li>
<p>链接：需要将原本的 JOIN 分解成多个单表查询，然后在用户程序中进行连接</p>
</li>
<li>
<p>ID 唯一性：</p>
<ul>
<li>可以使用全局唯一 ID（GUID）</li>
<li>为每个分片指定一个 ID 范围</li>
<li>使用分布式 ID 生成器（例如 Snowflake 算法）</li>
</ul>
</li>
</a></ol><a class="footnote-anchor" id="footnote-ref3">
</a><h2><a class="footnote-anchor" id="footnote-ref3"></a> 数据迁移</h2>
<blockquote>
<p>一旦水平拆分，那么就不可避免地要进行数据清洗，并且查询条件也必须受到一定的限制</p>
<p>一旦垂直拆分，那么基本也和 join 说再见了</p>
</blockquote>
<ol>
<li>数据迁移未完成前都需要进行 <strong>数据库双写</strong></li>
<li>需要每日进行数据对账（例如通过 ETL<sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup><a class="footnote-anchor" id="footnote-ref4">、DW<sup class="footnote-ref"></sup></a><a href="#footnote5">[5]</a><a class="footnote-anchor" id="footnote-ref5"> 进行 job 数据对账），将差异补齐</a></li><a class="footnote-anchor" id="footnote-ref5">
</a></ol><a class="footnote-anchor" id="footnote-ref5">
<div class="hint-container note">
<p class="hint-container-title">说明</p>
<p>通过DW进行每日job数据对账的流程包括：导入数据、比较数据、更新数据和记录异常数据。这个过程需要定期执行，以确保数据的准确性和完整性</p>
</div>
<p><mark>补充：</mark></p>
<p>数据对账的一般步骤：</p>
<ol>
<li>将源数据和目标数据导入DW中，可以使用ETL工具来完成这个过程。</li>
<li>在DW中创建一个存储过程，用于比较源数据和目标数据之间的差异，并将差异数据记录到一个临时表中。</li>
<li>编写SQL语句，将临时表中的差异数据更新到目标数据中，以补平差异。在更新数据之前，应该先备份目标数据，以防止出现错误。</li>
<li>在存储过程中，对于无法补平的差异数据，可以记录到一个异常表中，以供进一步的分析和处理。</li>
<li>在每日job数据对账完成后，应该及时通知相关人员，以便他们进行确认和审核。</li>
</ol>
<p>总的来说，通过DW进行每日job数据对账的流程包括：导入数据、比较数据、更新数据和记录异常数据。这个过程需要定期执行，以确保数据的准确性和完整性</p>
<br>
</a><h2><a class="footnote-anchor" id="footnote-ref5"></a> ShardingSphere</h2>
<p>新版：</p>
<ol>
<li>可插拔</li>
<li>可扩展</li>
</ol>
<p>核心：</p>
<ol>
<li>虚拟表</li>
<li>分片键</li>
<li>分片算法</li>
</ol>
<h3> 分片策略</h3>
<ol>
<li>Inline 策略：配置文件中直接写入分片算法，较为简单，不支持范围查询等复杂操作</li>
<li>Standard 策略：根据单一分片键进行精确或者范围分片</li>
<li>Complex 策略：根据多个分片键进行精确或者范围分片</li>
<li>Hint 策略：使用与 SQL 无关的方式进行分片</li>
</ol>
<h3> 读写分离</h3>
<blockquote>
<p>TODO</p>
</blockquote>
<h2> 相关问题</h2>
<h3> 如何设计零迁移数据扩容分片方案？</h3>
<blockquote>
<p>问题核心：如何不迁移数据，实现集群动态扩缩容，同时还能够保证数据分布相对均匀？</p>
</blockquote>
<ol>
<li>可以按范围分片，然后绑定一些节点，负载均衡策略使用哈希取模的方式</li>
</ol>
<h3> 分片查询问题</h3>
<ol>
<li>基因法多分片查询</li>
</ol>
<br>
<br>
<br>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="footnote1" class="footnote-item"><p>Snowflake 是一种基于时间戳的ID生成算法，属于基于时间戳的ID生成策略。Snowflake算法生成64位的ID，其中第一位是符号位，后面41位是时间戳（精确到毫秒），接着10位是工作机器ID，最后12位是序列号。Snowflake算法的优点是生成的ID有序性较好，而且可以支持高并发场景。 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="footnote2" class="footnote-item"><p>Flickr方案是一种利用数据库集群生成分布式ID的解决方案，其主要思想是将ID的生成分散到不同的数据库节点上，避免单点瓶颈和单点故障，并通过设置步长来减少数据库的压力。 <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="footnote3" class="footnote-item"><p>XA 接口：分布式事务是指跨多个独立计算机或进程的事务，XA接口是一种支持分布式事务的编程接口。XA接口规范定义了在分布式事务环境中，事务管理器和资源管理器之间的通信接口。 <a href="#footnote-ref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="footnote4" class="footnote-item"><p>ETL（Extract, Transform, Load）：数据抽取、转换、加载，是一种将数据从不同的数据源中抽取出来，然后进行处理和转换，最后加载到目标系统中的过程，常用于数据仓库中 <a href="#footnote-ref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="footnote5" class="footnote-item"><p>DW（Data Warehouse）：数据仓库，是一种用于存储和分析企业数据的系统，通过把不同数据源的数据整合到一起，并进行清洗、加工、转换等处理，使得数据更易于理解和使用 <a href="#footnote-ref5" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="数据库"/>
    <category term="优化"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2022-06-14T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">服务网关-Kong</title>
    <id>https://gzwrrr.github.io/article/springs/C-SpringCloud/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BB%84%E4%BB%B6/D-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/C-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3-Kong.html</id>
    <link href="https://gzwrrr.github.io/article/springs/C-SpringCloud/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BB%84%E4%BB%B6/D-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/C-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3-Kong.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 服务网关-Kong</h1>
<blockquote>
<p><a href="https://mockbin.org/" target="_blank" rel="noopener noreferrer">Kong API 练习</a>（需要科学上网）</p>
<p><a href="https://docs.konghq.com/gateway/3.2.x/get-started/services-and-routes/" target="_blank" rel="noopener noreferrer">Kong 官方文档</a></p>
</blockquote>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://cloud.tencent.com/developer/article/1938873#:~:text=Kong%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84%201%20Kong%20%E4%BD%BF%E7%94%A8%20PostgreSQL%20%E6%88%96%20Cassandra,%E6%8F%90%E4%BE%9B%E4%BA%86%E6%8F%92%E4%BB%B6%E6%A8%A1%E5%9E%8B%EF%BC%8C%E4%BD%BF%E7%94%A8%20Lua%20%E8%84%9A%E6%9C%AC%E6%9D%A5%E5%AF%B9%20Nginx%20%E6%95%B4%E4%B8%AA%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%BF%9B%E8%A1%8C%E6%89%A9%E5%B1%95%E3%80%82%20%E5%AE%9E%E7%8E%B0%E4%BA%86%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%EF%BC%88%20%E9%99%90%E6%B5%81%E3%80%81%E7%86%94%E6%96%AD%E3%80%81%E9%AA%8C%E6%9D%83%E7%AD%89%20%EF%BC%89%E3%80%82" target="_blank" rel="noopener noreferrer">网关神器Kong（一）：介绍</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/421894560" target="_blank" rel="noopener noreferrer">网关服务Kong和konga介绍安装使用教程</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/109720608" target="_blank" rel="noopener noreferrer">KONG网关 — 介绍安装</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/268012199" target="_blank" rel="noopener noreferrer">使用Kong作为微服务网关</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 服务网关-Kong</h1>
<blockquote>
<p><a href="https://mockbin.org/" target="_blank" rel="noopener noreferrer">Kong API 练习</a>（需要科学上网）</p>
<p><a href="https://docs.konghq.com/gateway/3.2.x/get-started/services-and-routes/" target="_blank" rel="noopener noreferrer">Kong 官方文档</a></p>
</blockquote>
<div class="hint-container info">
<p class="hint-container-title">相关文章</p>
<p><a href="https://cloud.tencent.com/developer/article/1938873#:~:text=Kong%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84%201%20Kong%20%E4%BD%BF%E7%94%A8%20PostgreSQL%20%E6%88%96%20Cassandra,%E6%8F%90%E4%BE%9B%E4%BA%86%E6%8F%92%E4%BB%B6%E6%A8%A1%E5%9E%8B%EF%BC%8C%E4%BD%BF%E7%94%A8%20Lua%20%E8%84%9A%E6%9C%AC%E6%9D%A5%E5%AF%B9%20Nginx%20%E6%95%B4%E4%B8%AA%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%BF%9B%E8%A1%8C%E6%89%A9%E5%B1%95%E3%80%82%20%E5%AE%9E%E7%8E%B0%E4%BA%86%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%EF%BC%88%20%E9%99%90%E6%B5%81%E3%80%81%E7%86%94%E6%96%AD%E3%80%81%E9%AA%8C%E6%9D%83%E7%AD%89%20%EF%BC%89%E3%80%82" target="_blank" rel="noopener noreferrer">网关神器Kong（一）：介绍</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/421894560" target="_blank" rel="noopener noreferrer">网关服务Kong和konga介绍安装使用教程</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/109720608" target="_blank" rel="noopener noreferrer">KONG网关 — 介绍安装</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/268012199" target="_blank" rel="noopener noreferrer">使用Kong作为微服务网关</a></p>
</div>
<h2> 简介</h2>
<figure><img src="https://ask.qcloudimg.com/http-save/yehe-2680217/b7da51903ec5a93effa2acb11046e95f.png?imageView2/2/w/2560/h/7000" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<blockquote>
<p>Kong 是由 Mashape 开源的一款具有高性能、高可用特点的云原生架构下的分布式 API 网关。基于 Nginx 和 OpenResty 的 Kong 获得了非常高的性能。Lua 脚本的插件系统架构设计也使得其具有高扩展性的能力后并不会丢失性能。</p>
<p>Kong = Nginx + Lua + OpenResty</p>
<p>契约式编程，由于无法像正常开发团队一样拥有那么多的机会沟通与交流。所以核心服务就会对外定义一些规范与接口，用于提供扩展能里。而开发者只需要按照规范进行遵守即可。这样保证了插件开发流程的简洁与高效。</p>
</blockquote>
<p>优势：</p>
<ul>
<li>
<p>插件市场丰富，很多插件可以降低开发成本；</p>
</li>
<li>
<p>可扩展性，可以编写lua脚本来定制自己的参数验证权限验证等操作；</p>
</li>
<li>
<p>基于openResty，openResty基于Nginx保障了强劲的性能；</p>
</li>
<li>
<p>便捷性能扩容，只需要水平增加服务器资源性能就能提升；</p>
</li>
<li>
<p>负载均衡健康检查</p>
</li>
<li>
<p>Cloud-Native：与平台无关，Kong可以在任何平台上运行-从裸机到容器-并且可以在本机上的每个云上运行。</p>
</li>
<li>
<p>Kubernetes-Native：使用官方的Ingress Controller通过本地Kubernetes CRD声明性地配置Kong，以路由和连接所有L4 + L7通信。</p>
</li>
<li>
<p>动态负载平衡：跨多个上游服务对流量进行负载平衡。</p>
</li>
<li>
<p>基于哈希的负载平衡：具有一致的哈希/粘性会话的负载平衡。</p>
</li>
<li>
<p>熔断器：智能跟踪不健康的上游服务。</p>
</li>
<li>
<p>运行状况检查：主动和被动监视您的上游服务。</p>
</li>
<li>
<p>服务发现：在第三方DNS解析器（例如Consul）中解析SRV记录。</p>
</li>
<li>
<p>无服务器：直接从Kong调用和保护AWS Lambda或OpenWhisk功能。</p>
</li>
<li>
<p>WebSockets：通过WebSockets与您的上游服务进行通信。</p>
</li>
<li>
<p>gRPC：与gRPC服务进行通信，并通过日志记录和可观察性插件观察流量</p>
</li>
<li>
<p>OAuth2.0：轻松将OAuth2.0身份验证添加到您的API。</p>
</li>
<li>
<p>日志记录：通过HTTP，TCP，UDP或磁盘记录对系统的请求和响应。</p>
</li>
<li>
<p>安全性：ACL，僵尸程序检测，允许/拒绝IP等…</p>
</li>
<li>
<p>Syslog：登录到系统日志。</p>
</li>
<li>
<p>SSL：为基础服务或API设置特定的<a href="https://cloud.tencent.com/product/ssl?from=20065&amp;from_column=20065" target="_blank" rel="noopener noreferrer">SSL证书</a>。</p>
</li>
<li>
<p>监视：实时监视提供关键的负载和性能服务器指标。</p>
</li>
<li>
<p>转发代理：使Kong连接到中间透明HTTP代理。</p>
</li>
<li>
<p>认证：HMAC，JWT，基本等。</p>
</li>
<li>
<p>速率限制：基于许多变量来阻止和限制请求。</p>
</li>
<li>
<p>转换：添加，删除或处理HTTP请求和响应。</p>
</li>
<li>
<p>缓存：在代理层缓存并提供响应。</p>
</li>
<li>
<p>CLI：从命令行控制Kong群集。</p>
</li>
<li>
<p>REST API：Kong可以使用其<a href="https://cloud.tencent.com/product/slshttp?from=20065&amp;from_column=20065" target="_blank" rel="noopener noreferrer">RESTful API</a>进行操作，以实现最大的灵活性。</p>
</li>
<li>
<p>地理复制：跨不同区域的配置始终是最新的。</p>
</li>
<li>
<p>故障检测和恢复：如果您的Cassandra节点之一发生故障，则Kong不会受到影响。</p>
</li>
<li>
<p>集群：所有Kong节点自动加入集群，并在各个节点之间更新其配置。</p>
</li>
<li>
<p>可扩展性：Kon本质上是分布式的，只需添加节点即可水平扩展。</p>
</li>
<li>
<p>性能：Kong通过扩展和使用NGINX作为核心轻松处理负载。</p>
</li>
<li>
<p>插件：可扩展的体系结构，用于向Kong和API添加功能。</p>
</li>
</ul>
<figure><img src="https://ask.qcloudimg.com/http-save/yehe-2680217/96ab8b6804809563de779bc759f8f6c3.png?imageView2/2/w/2560/h/7000" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>
<p>Kong 提供了 Http/Rest 的接口来实现配置 ，使得其可以更简单的构建图形化界面进行动态配置。</p>
</li>
<li>
<p>OpenResty 是一个基于 Nginx 的库，它将 Nginx 进行封装，并提供了整个生命周期的 Hook（ 钩子 ），使得开发者可以通过 Lua 脚本对 Nginx 进行插件化管理。</p>
</li>
<li>
<p>Kong 使用PostgreSQL 或 Cassandra 来对其配置文件进行持久化存储，使得可以进行集群管理。</p>
</li>
<li>
<p>Kong 提供了插件模型，使用 Lua 脚本来对 Nginx 整个生命周期进行扩展。实现了一些常用插件（ 限流、熔断、验权等 ）。</p>
</li>
</ul>
<p>网关架构：</p>
<ol>
<li>RESTful API</li>
<li>插件层</li>
<li>集群、数据存储</li>
<li>OpenResty</li>
<li>Nginx</li>
</ol>
<h2> Docker 安装 Kong</h2>
<div class="hint-container info">
<p class="hint-container-title">参考文章</p>
<p><a href="https://blog.csdn.net/qq_16174727/article/details/122614066" target="_blank" rel="noopener noreferrer">kong/kongA docker部署+汉化</a></p>
</div>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 简单使用</h2>
<blockquote>
<p>服务管理和路由管理</p>
</blockquote>
<p>管理服务：</p>
<p>添加一个服务：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看服务的状态：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>更新服务的配置，比如将服务的请求重试次数从 5 改到 6：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看所有的服务：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>管理路由：</p>
<p>创建路由：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看服务的路由：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新路由信息：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看所有路由：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 限流插件</h2>
<p>限流，每分钟五次</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证五次过后就限制：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务水平的限流：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>路由水平的限流：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费者水平的限流：</p>
<blockquote>
<p>Consumers are created using the <a href="https://docs.konghq.com/gateway/latest/admin-api/#consumer-object" target="_blank" rel="noopener noreferrer">consumer object</a> in the Admin API.</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="分布式"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-01-20T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">K8S安装</title>
    <id>https://gzwrrr.github.io/article/k8s/A-K8S%E5%AE%89%E8%A3%85.html</id>
    <link href="https://gzwrrr.github.io/article/k8s/A-K8S%E5%AE%89%E8%A3%85.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> K8S 安装</h1>
<h2> 预处理</h2>
<blockquote>
<p>先修改，否则之后会报错</p>
</blockquote>
<p>需要降低 docker 的版本：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 加入工作节点时卡住报错，相关文章：https://blog.csdn.net/qq_42910468/article/details/126037954</span>
<span class="token punctuation">[</span>WARNING SystemVerification<span class="token punctuation">]</span>: this Docker version is not on the list of validated versions: <span class="token number">23.0</span>.3. Latest validated version: <span class="token number">19.03</span>

<span class="token comment"># 查看版本</span>
yum list docker-ce <span class="token parameter variable">--showduplicates</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-r</span>

<span class="token comment"># 降低版本</span>
yum downgrade <span class="token parameter variable">--setopt</span><span class="token operator">=</span>obsoletes<span class="token operator">=</span><span class="token number">0</span> <span class="token parameter variable">-y</span> docker-ce-18.09.9-3.el7 docker-ce-cli-18.09.9-3.el7 containerd.io

<span class="token comment"># 启动并查看版本</span>
systemctl start <span class="token function">docker</span>
<span class="token function">docker</span> version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> K8S 安装</h1>
<h2> 预处理</h2>
<blockquote>
<p>先修改，否则之后会报错</p>
</blockquote>
<p>需要降低 docker 的版本：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关闭防火墙：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 配置修改</h2>
<ol>
<li>改主机名</li>
<li>关闭安全组规则</li>
<li>关闭 swap 分区</li>
<li>配置统计</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 安装 kubelet、kubeadm、kubectl</h2>
<h3> 下载工具</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 引导集群</h3>
<p>使用 kubeadm 引导集群：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 初始化主节点</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 安装网络组件</h3>
<blockquote>
<p>安装网络组件后主节点才能准备好</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>成功搭建起集群：</p>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//k8s/20230426/K8S集群启动成功.png" alt="image-20230424225306121" tabindex="0" loading="lazy"><figcaption>image-20230424225306121</figcaption></figure>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//k8s/20230426/K8S集群Pods.png" alt="image-20230424225805586" tabindex="0" loading="lazy"><figcaption>image-20230424225805586</figcaption></figure>
<h3> 安装可视化面板</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建用户：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>成功登录：</p>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//k8s/20230426/K8S面板.png" alt="image-20230425003147047" tabindex="0" loading="lazy"><figcaption>image-20230425003147047</figcaption></figure>
<h2> 补充：官方安装</h2>
<blockquote>
<p>中文文档地址：<a href="https://kubernetes.io/zh-cn/docs/tasks/tools/install-kubectl-linux/" target="_blank" rel="noopener noreferrer">https://kubernetes.io/zh-cn/docs/tasks/tools/install-kubectl-linux/</a></p>
</blockquote>
<h3> 下载 kubelet</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 下载 minikube</h3>
<blockquote>
<p>模拟集群，会自动下载 kubeadmin、kubelet、kubectl</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写 deployment.yaml 文件，设置配置信息：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 卸载</h3>
<p>:::相关文章</p>
<p><a href="https://www.orchome.com/16614#:~:text=%E5%BD%BB%E5%BA%95%E6%B8%85%E7%90%86%E5%8D%B8%E8%BD%BD%20kubeadm%E3%80%81kubectl%E3%80%81kubeletDebian%20%2F%20Ubuntusudosudoapt-get%20remove%20%E4%BC%9A%E5%88%A0%E9%99%A4%E8%BD%AF%E4%BB%B6%E5%8C%85%E8%80%8C%E4%BF%9D%E7%95%99%E8%BD%AF%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6apt-get,purge%20%E4%BC%9A%E5%90%8C%E6%97%B6%E6%B8%85%E9%99%A4%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%92%8C%E8%BD%AF%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6CentOS%20%2F%20RHEL%20%2F%20Fedorasudosudoautoremove%EF%BC%9A%E5%BD%93%E4%BD%BF%E7%94%A8yum%20install%E5%91%BD%E4%BB%A4%E5%AE%89%E8%A3%85%E4%B8%80%E6%9E%9A%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%97%B6%EF%BC%8C" target="_blank" rel="noopener noreferrer">kubeadm、kubectl、kubelet彻底清理卸载</a></p>
<p><a href="https://www.jianshu.com/p/1a57035ed451" target="_blank" rel="noopener noreferrer">minikube 安装和删除</a></p>
<p>:::</p>
]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="运维"/>
    <category term="K8S"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-01-13T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
  <entry>
    <title type="text">K8S核心概念</title>
    <id>https://gzwrrr.github.io/article/k8s/B-K8S%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5.html</id>
    <link href="https://gzwrrr.github.io/article/k8s/B-K8S%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5.html"/>
    <updated>2023-10-05T12:34:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> K8S 核心概念</h1>
<h2> NameSpace</h2>
<blockquote>
<p>用来对集群资源进行隔离划分，默认只隔离资源，不隔离网络</p>
</blockquote>
<p>K8S 自带的命名空间：</p>
<ol>
<li>default</li>
<li>kube-node-lease</li>
<li>kube-public</li>
<li>kube-system</li>
<li>kubernates-dashboard</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 获取命名空间</span>
kubectl get namespace
<span class="token comment"># 或者</span>
kubectl get ns

<span class="token comment"># 注意下面只会获取 default 下的 pod</span>
kubectl get pods
<span class="token comment"># 加上 -A 会获取全部的 pod </span>
kubectl get pods <span class="token parameter variable">-A</span>

<span class="token comment"># 查看指定命名空间下的 pod</span>
kubectl get pod <span class="token parameter variable">-n</span> <span class="token operator">&lt;</span>namespace<span class="token operator">&gt;</span>

<span class="token comment"># 创建命名空间</span>
kubectl create ns <span class="token operator">&lt;</span>namespace<span class="token operator">&gt;</span>

<span class="token comment"># 删除命名空间，会把该命名空间中的所有资源一并删除</span>
kubectl delete ns <span class="token operator">&lt;</span>namespace<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> K8S 核心概念</h1>
<h2> NameSpace</h2>
<blockquote>
<p>用来对集群资源进行隔离划分，默认只隔离资源，不隔离网络</p>
</blockquote>
<p>K8S 自带的命名空间：</p>
<ol>
<li>default</li>
<li>kube-node-lease</li>
<li>kube-public</li>
<li>kube-system</li>
<li>kubernates-dashboard</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用配置文件创建命名空间：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意使用配置文件创建的资源一般也是用对应的配置文件删除的：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Pod</h2>
<blockquote>
<p>运行中的一组容器，Pod 是 K8S 中应用的最小单位</p>
</blockquote>
<ol>
<li>每一个 Pod 都有一个唯一 ID</li>
<li>Pod 内的所有容器共享网络空间以及存储资源</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用配置文件创建 pod：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Deployment</h2>
<blockquote>
<p>控制 Pod，使得 Pod 拥有多个副本，可以自愈、扩容等</p>
</blockquote>
<ol>
<li>使用 deployment 创建容器后，Pod 删除或者崩溃时 K8S 会自动再起 Pod</li>
<li>注意，故障转移需要设置一个比较合理的时间，太短会占用其他机器的资源，太长时间服务不可用也不行</li>
<li>更新应用时可以做到滚动更新，也可以进行版本回退</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用配置文件创建 deployment：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他工作负载：</p>
<ol>
<li>Deployment：无状态部署，比如微服务，提供多副本等功能</li>
<li>StatefulSet：有状态部署，比如 redis，提供稳定的存储以及网络等功能</li>
<li>DaemonSet：守护型部署，比如日志收集组件，可以在每个机器都运行一遍</li>
<li>Job/CronJob：定时任务部署，比如垃圾清理组件，可以在指定时间运行</li>
</ol>
<h2> Service</h2>
<blockquote>
<p>将一组 Pod 公开为网络服务的抽象方法，能进行服务发现与负载均衡</p>
</blockquote>
<p>服务类型：</p>
<ol>
<li>ClusterIP：集群内访问</li>
<li>NodePort：集群外也可访问，默认范围是：30000~32767</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用配置文件创建服务：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Ingress</h2>
<div class="hint-container info">
<p class="hint-container-title">参考文章</p>
<ol>
<li><a href="https://blog.csdn.net/heiwa110/article/details/127773889" target="_blank" rel="noopener noreferrer">Ingress安装部署</a> （主要参考文章）</li>
<li><a href="https://blog.csdn.net/qq_45433707/article/details/127153578" target="_blank" rel="noopener noreferrer">k8s学习--ingress-nginx所遇问题小记</a>（这个配置文件也可以）</li>
<li><a href="https://blog.csdn.net/weixin_38797137/article/details/124251698" target="_blank" rel="noopener noreferrer">记安装ingress-nginx遇到的一些坑</a></li>
<li><a href="https://bbs.huaweicloud.com/blogs/359655#:~:text=K8S%E9%9B%86%E7%BE%A4%E4%B8%ADPod%E8%B5%84%E6%BA%90%E5%A4%84%E4%BA%8EPending%E7%8A%B6%E6%80%81%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF%201%201.Pod%E8%B5%84%E6%BA%90%E5%A4%84%E4%BA%8EPending%E7%8A%B6%E6%80%81%E7%9A%84%E5%8E%9F%E5%9B%A0,2%202.Pod%E8%B5%84%E6%BA%90%E5%A4%84%E4%BA%8EPending%E7%8A%B6%E6%80%81%E7%9A%84%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF%203%203.%E7%94%B1%E4%BA%8E%E8%B5%84%E6%BA%90%E9%85%8D%E9%A2%9D%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98%E5%AF%BC%E8%87%B4Pod%E5%A4%84%E4%BA%8EPending%E7%8A%B6%E6%80%81%E7%9A%84%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B" target="_blank" rel="noopener noreferrer">K8S集群中Pod资源处于Pending状态排查思路</a></li>
<li><a href="https://blog.csdn.net/erhaiou2008/article/details/103907289" target="_blank" rel="noopener noreferrer">(k8s) 1 node(s) had taints that the pod didn't tolerate</a></li>
<li><a href="https://blog.csdn.net/weixin_41803458/article/details/113243115" target="_blank" rel="noopener noreferrer">k8s（kubernetes）拉取本地镜像部署节点</a></li>
<li><a href="https://blog.csdn.net/u010039418/article/details/86578420" target="_blank" rel="noopener noreferrer">k8s使用本地镜像</a></li>
</ol>
</div>
<blockquote>
<p>服务网关，统一入口</p>
</blockquote>
<p>运行逻辑：</p>
<ol>
<li>网络组织方式：使用 Deployment 部署一组 Pod 之后，在上层建立一个 Service 用于服务间或者说不同 Deployment 或 Pod 间的互相调用，这样就组成了一层 Service 网络</li>
<li>在服务网络上再加一层，统一处理外部请求，并转发到对应的服务上</li>
</ol>
<p>这里因为以下一些原因一直无法启动 ingress（调试了好久…）：</p>
<ol>
<li>服务器不可达（token 过期）</li>
<li>服务器资源不足（CPU、内存等不满足要求）</li>
<li>节点有污点，需要按具体情况配置</li>
<li>容器无法拉取，这里使用其他人 dockerHub 上的镜像，然后在 yaml 文件上配置启动不拉去镜像，即使用本地镜像，特别注意：本地镜像要每个节点上都有，否则还是会无法拉取</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>成功访问（<a href="http://192.168.30.211:32069/%EF%BC%89%EF%BC%9A" target="_blank" rel="noopener noreferrer">http://192.168.30.211:32069/）：</a></p>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//k8s/20230426/K8S网关ingress成功启动.png" alt="image-20230426174712399" tabindex="0" loading="lazy"><figcaption>image-20230426174712399</figcaption></figure>
<h3> 测试 Ingress</h3>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 域名访问规则</h3>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：由于不是真的域名，所以本地也要配置 host 域名转发</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问成功：</p>
<ol>
<li><a href="https://demo.gontoy.com:30934/" target="_blank" rel="noopener noreferrer">https://demo.gontoy.com:30934/</a></li>
<li><a href="https://hello.gontoy.com:30934/" target="_blank" rel="noopener noreferrer">https://hello.gontoy.com:30934/</a></li>
</ol>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//k8s/20230426/K8S网关ingress域名转发1.png" alt="image-20230426181153185" tabindex="0" loading="lazy"><figcaption>image-20230426181153185</figcaption></figure>
<figure><img src="https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//k8s/20230426/https://my-photos-1.oss-cn-hangzhou.aliyuncs.com/markdown//k8s/20230426/K8S网关ingress域名转发2.png" alt="image-20230426181250639" tabindex="0" loading="lazy"><figcaption>image-20230426181250639</figcaption></figure>
<h3> 路径重写</h3>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 流量限制</h3>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> NFS 存储抽象</h2>
<blockquote>
<p>直接使用挂在卷的方式会难以管理</p>
</blockquote>
<p>存储层可以使用：</p>
<ol>
<li>NFS</li>
<li>Glusterfs</li>
<li>CephFS</li>
</ol>
<p>主节点配置：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从节点配置：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 原生挂载 + NFS 同步</h3>
<blockquote>
<p>注意，使用这种方式，将 Pod 删除后同步的目录并不会一同删除，当系统大了之后会产生很多问题</p>
</blockquote>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> PV 与 PVC</h3>
<blockquote>
<p>多个服务器上的 PV 会组成 PV 池，当需要挂在卷时，通过 PVC 挂载到 PV 池中</p>
</blockquote>
<ol>
<li>PV：PersistentVolume 持久卷</li>
<li>PVC：PersistentVolumeClaim 持久卷声明</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 PV：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 PVC：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是注意，一般 pvc 不会单独创建，而是与 Pod 配置一并写入：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ConfigMap 配置文件挂载</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件形式：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 Pod 一起创建：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Secret 敏感信息</h2>
<blockquote>
<p>Secret 对象类型用来保存敏感信息，例如密码、OAuth 令牌和 SSH 密钥。 将这些信息放在 secret 中比放在 <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/" target="_blank" rel="noopener noreferrer">Pod</a> 的定义或者 <a href="https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-image" target="_blank" rel="noopener noreferrer">容器镜像</a> 中来说更加安全和灵活。</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </author>
    <category term="运维"/>
    <category term="K8S"/>
    <contributor>
      <name>gzw</name>
      <email>1627121193@qq.com</email>
    </contributor>
    <published>2023-01-13T00:00:00.000Z</published>
    <rights>Copyright by gzw</rights>
  </entry>
</feed>